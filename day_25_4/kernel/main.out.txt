
main.out.o:     file format elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
  280013:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280019:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  28001b:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  280021:	6a 00                	push   $0x0
  280023:	50                   	push   %eax
  280024:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28002a:	68 80 00 00 00       	push   $0x80
  28002f:	50                   	push   %eax
  280030:	e8 63 1d 00 00       	call   281d98 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280035:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  28003b:	6a 00                	push   $0x0
  28003d:	50                   	push   %eax
  28003e:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280044:	6a 20                	push   $0x20
  280046:	50                   	push   %eax
  280047:	e8 4c 1d 00 00       	call   281d98 <fifo32_init>

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
  280054:	68 ed 00 00 00       	push   $0xed
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);

	int key_leds = (binfo->leds>>4)&7;
  280059:	c0 f8 04             	sar    $0x4,%al
  28005c:	83 e0 07             	and    $0x7,%eax
  28005f:	89 85 c8 fb ff ff    	mov    %eax,-0x438(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280065:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  28006b:	50                   	push   %eax
  28006c:	e8 58 1d 00 00       	call   281dc9 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	58                   	pop    %eax
  280072:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280078:	5a                   	pop    %edx
  280079:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  28007f:	50                   	push   %eax
  280080:	e8 44 1d 00 00       	call   281dc9 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  280085:	e8 6b 16 00 00       	call   2816f5 <init_gdtidt>
	init_pic();
  28008a:	e8 2a 18 00 00       	call   2818b9 <init_pic>
	io_sti();
  28008f:	e8 40 0c 00 00       	call   280cd4 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  280094:	59                   	pop    %ecx
  280095:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28009b:	5b                   	pop    %ebx
  28009c:	68 00 01 00 00       	push   $0x100
  2800a1:	50                   	push   %eax
  2800a2:	e8 2b 1f 00 00       	call   281fd2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  2800a7:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800ad:	83 c4 0c             	add    $0xc,%esp
  2800b0:	50                   	push   %eax
  2800b1:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  2800b7:	68 00 02 00 00       	push   $0x200
  2800bc:	50                   	push   %eax
  2800bd:	e8 c2 1d 00 00       	call   281e84 <enable_mouse>

	//init timer
	init_pit();
  2800c2:	e8 e1 2a 00 00       	call   282ba8 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800c7:	5e                   	pop    %esi
  2800c8:	5f                   	pop    %edi
  2800c9:	68 f8 00 00 00       	push   $0xf8
  2800ce:	6a 21                	push   $0x21
  2800d0:	e8 31 0c 00 00       	call   280d06 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800d5:	58                   	pop    %eax
  2800d6:	5a                   	pop    %edx
  2800d7:	68 ef 00 00 00       	push   $0xef
  2800dc:	68 a1 00 00 00       	push   $0xa1
  2800e1:	e8 20 0c 00 00       	call   280d06 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800e6:	59                   	pop    %ecx
  2800e7:	5b                   	pop    %ebx
  2800e8:	68 ff ff ff bf       	push   $0xbfffffff
  2800ed:	68 00 00 40 00       	push   $0x400000
  2800f2:	e8 75 1f 00 00       	call   28206c <memtest>
	memman_init(memman);
  2800f7:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800fe:	89 c6                	mov    %eax,%esi
	memman_init(memman);
  280100:	e8 a6 20 00 00       	call   2821ab <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  280105:	83 c4 0c             	add    $0xc,%esp
  280108:	68 00 e0 09 00       	push   $0x9e000
  28010d:	68 00 10 00 00       	push   $0x1000
  280112:	68 00 00 3c 00       	push   $0x3c0000
  280117:	e8 de 21 00 00       	call   2822fa <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28011c:	8d 86 00 00 c0 ff    	lea    -0x400000(%esi),%eax
  280122:	83 c4 0c             	add    $0xc,%esp
  280125:	50                   	push   %eax
  280126:	68 00 00 40 00       	push   $0x400000
  28012b:	68 00 00 3c 00       	push   $0x3c0000
  280130:	e8 c5 21 00 00       	call   2822fa <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;

	init_palette();
  280135:	e8 01 0d 00 00       	call   280e3b <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  28013a:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280141:	50                   	push   %eax
  280142:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280149:	50                   	push   %eax
  28014a:	ff 35 f8 0f 00 00    	pushl  0xff8
  280150:	68 00 00 3c 00       	push   $0x3c0000
  280155:	e8 4e 24 00 00       	call   2825a8 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  28015a:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  28015d:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  280163:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  280168:	68 00 00 3c 00       	push   $0x3c0000
  28016d:	e8 78 2f 00 00       	call   2830ea <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280172:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a, *task_console;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280175:	89 85 9c fb ff ff    	mov    %eax,-0x464(%ebp)
	fifo.task = task_a;
  28017b:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280181:	6a 00                	push   $0x0
  280183:	6a 01                	push   $0x1
  280185:	50                   	push   %eax
  280186:	e8 cc 2e 00 00       	call   283057 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  28018b:	5f                   	pop    %edi
  28018c:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280192:	e8 a5 24 00 00       	call   28263c <sheet_alloc>
  280197:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  28019d:	58                   	pop    %eax
  28019e:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801a5:	5a                   	pop    %edx
  2801a6:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801ad:	0f af c2             	imul   %edx,%eax
  2801b0:	50                   	push   %eax
  2801b1:	68 00 00 3c 00       	push   $0x3c0000
  2801b6:	e8 92 23 00 00       	call   28254d <memman_alloc_4k>
  2801bb:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801bd:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801c4:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801cb:	50                   	push   %eax
  2801cc:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801d3:	50                   	push   %eax
  2801d4:	53                   	push   %ebx
  2801d5:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2801db:	e8 cf 24 00 00       	call   2826af <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801e0:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801e7:	83 c4 1c             	add    $0x1c,%esp
  2801ea:	50                   	push   %eax
  2801eb:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801f2:	50                   	push   %eax
  2801f3:	53                   	push   %ebx
  2801f4:	e8 38 0d 00 00       	call   280f31 <init_screen8>

	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  2801f9:	59                   	pop    %ecx
  2801fa:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280200:	e8 37 24 00 00       	call   28263c <sheet_alloc>
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  280205:	5b                   	pop    %ebx
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  280206:	89 c7                	mov    %eax,%edi
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  280208:	58                   	pop    %eax
  280209:	68 80 20 00 00       	push   $0x2080
  28020e:	68 00 00 3c 00       	push   $0x3c0000
  280213:	e8 35 23 00 00       	call   28254d <memman_alloc_4k>
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  280218:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  28021f:	6a 34                	push   $0x34
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  280221:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  280223:	68 90 00 00 00       	push   $0x90
  280228:	50                   	push   %eax
  280229:	57                   	push   %edi
  28022a:	e8 80 24 00 00       	call   2826af <sheet_setbuf>
	make_window8(buf_window,144,52,"task_a",1);
  28022f:	83 c4 14             	add    $0x14,%esp
  280232:	6a 01                	push   $0x1
  280234:	68 40 4a 28 00       	push   $0x284a40
  280239:	6a 34                	push   $0x34
  28023b:	68 90 00 00 00       	push   $0x90
  280240:	53                   	push   %ebx
	timer_init(timer,&fifo,1);
	timer_settime(timer,50);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280241:	8d 9d e8 fc ff ff    	lea    -0x318(%ebp),%ebx

	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
	sheet_setbuf(sht_window,buf_window,144,52,-1);
	make_window8(buf_window,144,52,"task_a",1);
  280247:	e8 76 0f 00 00       	call   2811c2 <make_window8>
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
  28024c:	83 c4 18             	add    $0x18,%esp
  28024f:	6a 07                	push   $0x7
  280251:	6a 10                	push   $0x10
  280253:	68 80 00 00 00       	push   $0x80
  280258:	6a 1c                	push   $0x1c
  28025a:	6a 08                	push   $0x8
  28025c:	57                   	push   %edi
  28025d:	e8 23 11 00 00       	call   281385 <make_textbox8>
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
	//timer for cursor.
	struct TIMER *timer;
	timer = timer_alloc();
  280262:	83 c4 20             	add    $0x20,%esp
  280265:	e8 e4 28 00 00       	call   282b4e <timer_alloc>
  28026a:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
	timer_init(timer,&fifo,1);
  280270:	50                   	push   %eax
  280271:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  280277:	6a 01                	push   $0x1
  280279:	50                   	push   %eax
  28027a:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280280:	e8 97 29 00 00       	call   282c1c <timer_init>
	timer_settime(timer,50);
  280285:	58                   	pop    %eax
  280286:	5a                   	pop    %edx
  280287:	6a 32                	push   $0x32
  280289:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  28028f:	e8 9c 29 00 00       	call   282c30 <timer_settime>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280294:	59                   	pop    %ecx
  280295:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28029b:	e8 9c 23 00 00       	call   28263c <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2802a0:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  2802a7:	6a 10                	push   $0x10
  2802a9:	6a 10                	push   $0x10
  2802ab:	53                   	push   %ebx
  2802ac:	50                   	push   %eax
	timer = timer_alloc();
	timer_init(timer,&fifo,1);
	timer_settime(timer,50);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2802ad:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2802b3:	e8 f7 23 00 00       	call   2826af <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  2802b8:	83 c4 18             	add    $0x18,%esp
  2802bb:	6a 63                	push   $0x63
  2802bd:	53                   	push   %ebx
  2802be:	e8 dd 0d 00 00       	call   2810a0 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  2802c3:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2802ca:	b9 02 00 00 00       	mov    $0x2,%ecx
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1;

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802cf:	5b                   	pop    %ebx
	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  2802d0:	83 e8 10             	sub    $0x10,%eax
  2802d3:	99                   	cltd   
  2802d4:	f7 f9                	idiv   %ecx
  2802d6:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int my = (binfo->scrny-28-16)/2;
  2802dc:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
	int x,y,mmx = -1,mmy = -1;

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802e3:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
  2802e9:	83 e8 2c             	sub    $0x2c,%eax
  2802ec:	99                   	cltd   
  2802ed:	f7 f9                	idiv   %ecx
  2802ef:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)
	int x,y,mmx = -1,mmy = -1;

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802f5:	e8 42 23 00 00       	call   28263c <sheet_alloc>
  2802fa:	89 c3                	mov    %eax,%ebx
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  2802fc:	58                   	pop    %eax
  2802fd:	5a                   	pop    %edx
  2802fe:	68 00 a5 00 00       	push   $0xa500
  280303:	68 00 00 3c 00       	push   $0x3c0000
  280308:	e8 40 22 00 00       	call   28254d <memman_alloc_4k>
	sheet_setbuf(sht_console,buf_console,256,165,-1);
  28030d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  280314:	68 a5 00 00 00       	push   $0xa5
  280319:	68 00 01 00 00       	push   $0x100
  28031e:	50                   	push   %eax
  28031f:	53                   	push   %ebx
  280320:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%ebp)
  280326:	e8 84 23 00 00       	call   2826af <sheet_setbuf>
	make_window8(buf_console,256,165,"console",0);
  28032b:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280331:	83 c4 14             	add    $0x14,%esp
  280334:	6a 00                	push   $0x0
  280336:	68 47 4a 28 00       	push   $0x284a47
  28033b:	68 a5 00 00 00       	push   $0xa5
  280340:	68 00 01 00 00       	push   $0x100
  280345:	50                   	push   %eax
  280346:	e8 77 0e 00 00       	call   2811c2 <make_window8>
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
  28034b:	83 c4 18             	add    $0x18,%esp
  28034e:	6a 00                	push   $0x0
  280350:	68 80 00 00 00       	push   $0x80
  280355:	68 f0 00 00 00       	push   $0xf0
  28035a:	6a 1c                	push   $0x1c
  28035c:	6a 08                	push   $0x8
  28035e:	53                   	push   %ebx
  28035f:	e8 21 10 00 00       	call   281385 <make_textbox8>
	task_console = task_alloc();
  280364:	83 c4 20             	add    $0x20,%esp
  280367:	e8 fc 2a 00 00       	call   282e68 <task_alloc>
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  28036c:	51                   	push   %ecx
  28036d:	51                   	push   %ecx
  28036e:	68 00 00 01 00       	push   $0x10000
  280373:	68 00 00 3c 00       	push   $0x3c0000
	sht_console = sheet_alloc(shtctl);
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
  280378:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  28037e:	e8 ca 21 00 00       	call   28254d <memman_alloc_4k>
  280383:	8b 8d e0 fb ff ff    	mov    -0x420(%ebp),%ecx
  280389:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
	task_console->tss.ds = 1*8;
	task_console->tss.fs = 1*8;
	task_console->tss.gs = 1*8;
	*((int *)(task_console->tss.esp + 4)) = sht_console;
	*((int *)(task_console->tss.esp + 8)) = memtotal;
	task_run(task_console,2,2);
  28038f:	83 c4 0c             	add    $0xc,%esp
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  280392:	89 51 64             	mov    %edx,0x64(%ecx)
	task_console->tss.eip = (int)&console_task - 0x280000;
  280395:	c7 41 4c 0b 33 00 00 	movl   $0x330b,0x4c(%ecx)
	task_console->tss.es = 1*8;
  28039c:	c7 41 74 08 00 00 00 	movl   $0x8,0x74(%ecx)
	task_console->tss.cs = 3*8;
  2803a3:	c7 41 78 18 00 00 00 	movl   $0x18,0x78(%ecx)
	task_console->tss.ss = 1*8;
  2803aa:	c7 41 7c 08 00 00 00 	movl   $0x8,0x7c(%ecx)
	task_console->tss.ds = 1*8;
  2803b1:	c7 81 80 00 00 00 08 	movl   $0x8,0x80(%ecx)
  2803b8:	00 00 00 
	task_console->tss.fs = 1*8;
  2803bb:	c7 81 84 00 00 00 08 	movl   $0x8,0x84(%ecx)
  2803c2:	00 00 00 
	task_console->tss.gs = 1*8;
  2803c5:	c7 81 88 00 00 00 08 	movl   $0x8,0x88(%ecx)
  2803cc:	00 00 00 
	*((int *)(task_console->tss.esp + 4)) = sht_console;
  2803cf:	89 98 f8 ff 00 00    	mov    %ebx,0xfff8(%eax)
	*((int *)(task_console->tss.esp + 8)) = memtotal;
  2803d5:	8b 41 64             	mov    0x64(%ecx),%eax
  2803d8:	89 70 08             	mov    %esi,0x8(%eax)
	task_run(task_console,2,2);
  2803db:	6a 02                	push   $0x2
  2803dd:	6a 02                	push   $0x2
  2803df:	51                   	push   %ecx
  2803e0:	e8 72 2c 00 00       	call   283057 <task_run>


	sheet_slide(sht_bg,0,0);
  2803e5:	83 c4 0c             	add    $0xc,%esp
  2803e8:	6a 00                	push   $0x0
  2803ea:	6a 00                	push   $0x0
  2803ec:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2803f2:	e8 d4 26 00 00       	call   282acb <sheet_slide>
	sheet_slide(sht_console,32,4);
  2803f7:	83 c4 0c             	add    $0xc,%esp
  2803fa:	6a 04                	push   $0x4
  2803fc:	6a 20                	push   $0x20
  2803fe:	53                   	push   %ebx
  2803ff:	e8 c7 26 00 00       	call   282acb <sheet_slide>
	sheet_slide(sht_window,	64, 56);
  280404:	83 c4 0c             	add    $0xc,%esp
  280407:	6a 38                	push   $0x38
  280409:	6a 40                	push   $0x40
  28040b:	57                   	push   %edi
  28040c:	e8 ba 26 00 00       	call   282acb <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  280411:	83 c4 0c             	add    $0xc,%esp
  280414:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  28041a:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280420:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280426:	e8 a0 26 00 00       	call   282acb <sheet_slide>
	sheet_updown(sht_bg,0);
  28042b:	5e                   	pop    %esi
  28042c:	58                   	pop    %eax
  28042d:	6a 00                	push   $0x0
  28042f:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  280435:	e8 a8 25 00 00       	call   2829e2 <sheet_updown>
	sheet_updown(sht_console,1);
  28043a:	58                   	pop    %eax
  28043b:	5a                   	pop    %edx
  28043c:	6a 01                	push   $0x1
  28043e:	53                   	push   %ebx
  28043f:	e8 9e 25 00 00       	call   2829e2 <sheet_updown>
	sheet_updown(sht_window,2);
  280444:	59                   	pop    %ecx
  280445:	5e                   	pop    %esi
  280446:	6a 02                	push   $0x2
  280448:	57                   	push   %edi
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  280449:	89 fe                	mov    %edi,%esi
	sheet_slide(sht_console,32,4);
	sheet_slide(sht_window,	64, 56);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,0);
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
  28044b:	e8 92 25 00 00       	call   2829e2 <sheet_updown>
	sheet_updown(sht_mouse,3);
  280450:	58                   	pop    %eax
  280451:	5a                   	pop    %edx
  280452:	6a 03                	push   $0x3
  280454:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  28045a:	e8 83 25 00 00       	call   2829e2 <sheet_updown>
	extern struct TIMERCTL timerctl;
	struct SHEET *key_win,*sht = 0;

	//init window focus
	key_win = sht_window;
	sht_console->task = task_console;
  28045f:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
	sht_console->flags |= 0x20;
  280465:	83 4b 1c 20          	orl    $0x20,0x1c(%ebx)
  280469:	83 c4 10             	add    $0x10,%esp

	int key_shift = 0,keycmd_wait = -1;
  28046c:	c7 85 b4 fb ff ff ff 	movl   $0xffffffff,-0x44c(%ebp)
  280473:	ff ff ff 
  280476:	c7 85 c4 fb ff ff 00 	movl   $0x0,-0x43c(%ebp)
  28047d:	00 00 00 
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
	sheet_updown(sht_mouse,3);

	extern struct TIMERCTL timerctl;
	struct SHEET *key_win,*sht = 0;
  280480:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  280487:	00 00 00 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1;
  28048a:	c7 85 a8 fb ff ff ff 	movl   $0xffffffff,-0x458(%ebp)
  280491:	ff ff ff 
	extern struct TIMERCTL timerctl;
	struct SHEET *key_win,*sht = 0;

	//init window focus
	key_win = sht_window;
	sht_console->task = task_console;
  280494:	89 43 24             	mov    %eax,0x24(%ebx)

	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280497:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1;
  28049d:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  2804a4:	ff ff ff 

	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  2804a7:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804ad:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
  2804b3:	c7 85 d8 fb ff ff 07 	movl   $0x7,-0x428(%ebp)
  2804ba:	00 00 00 
	sheet_setbuf(sht_window,buf_window,144,52,-1);
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
  2804bd:	c7 85 dc fb ff ff 08 	movl   $0x8,-0x424(%ebp)
  2804c4:	00 00 00 
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804c7:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%ebp)

	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  2804cd:	83 ec 0c             	sub    $0xc,%esp
  2804d0:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2804d6:	e8 9b 19 00 00       	call   281e76 <fifo32_status>
  2804db:	8b 95 b4 fb ff ff    	mov    -0x44c(%ebp),%edx
  2804e1:	83 c4 10             	add    $0x10,%esp
  2804e4:	c1 ea 1f             	shr    $0x1f,%edx
  2804e7:	74 2f                	je     280518 <bootmain+0x518>
  2804e9:	85 c0                	test   %eax,%eax
  2804eb:	7e 2b                	jle    280518 <bootmain+0x518>
		{
			keycmd_wait = fifo32_get(&keycmd);
  2804ed:	83 ec 0c             	sub    $0xc,%esp
  2804f0:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2804f6:	e8 40 19 00 00       	call   281e3b <fifo32_get>
  2804fb:	89 85 b4 fb ff ff    	mov    %eax,-0x44c(%ebp)
			wait_KBC_sendready();
  280501:	e8 b3 1a 00 00       	call   281fb9 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  280506:	5b                   	pop    %ebx
  280507:	58                   	pop    %eax
  280508:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  28050e:	6a 60                	push   $0x60
  280510:	e8 f1 07 00 00       	call   280d06 <io_out8>
  280515:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  280518:	e8 b5 07 00 00       	call   280cd2 <io_cli>
		if(fifo32_status(&fifo) == 0)
  28051d:	83 ec 0c             	sub    $0xc,%esp
  280520:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280526:	e8 4b 19 00 00       	call   281e76 <fifo32_status>
  28052b:	83 c4 10             	add    $0x10,%esp
  28052e:	85 c0                	test   %eax,%eax
  280530:	75 18                	jne    28054a <bootmain+0x54a>
		{	
			task_sleep(task_a);
  280532:	83 ec 0c             	sub    $0xc,%esp
  280535:	ff b5 9c fb ff ff    	pushl  -0x464(%ebp)
  28053b:	e8 89 2d 00 00       	call   2832c9 <task_sleep>
			io_sti();
  280540:	e8 8f 07 00 00       	call   280cd4 <io_sti>
  280545:	e9 16 07 00 00       	jmp    280c60 <bootmain+0xc60>
		}
		else
		{
			int i = fifo32_get(&fifo);
  28054a:	83 ec 0c             	sub    $0xc,%esp
  28054d:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280553:	e8 e3 18 00 00       	call   281e3b <fifo32_get>
  280558:	89 c3                	mov    %eax,%ebx
			io_sti();
  28055a:	e8 75 07 00 00       	call   280cd4 <io_sti>
			if(key_win->flags == 0) //key_win already closed
  28055f:	83 c4 10             	add    $0x10,%esp
  280562:	83 7e 1c 00          	cmpl   $0x0,0x1c(%esi)
  280566:	75 2a                	jne    280592 <bootmain+0x592>
			{
				key_win = shtctl->sheets[shtctl->top - 1];
  280568:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  28056e:	8b b5 d4 fb ff ff    	mov    -0x42c(%ebp),%esi
  280574:	8b 40 10             	mov    0x10(%eax),%eax
  280577:	8b 74 86 10          	mov    0x10(%esi,%eax,4),%esi
				cursor_c = keywin_on(key_win,sht_window,cursor_c);
  28057b:	51                   	push   %ecx
  28057c:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280582:	57                   	push   %edi
  280583:	56                   	push   %esi
  280584:	e8 50 44 00 00       	call   2849d9 <keywin_on>
  280589:	83 c4 10             	add    $0x10,%esp
  28058c:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
			}
			if(256<=i && i<=511)
  280592:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  280598:	3d ff 00 00 00       	cmp    $0xff,%eax
  28059d:	0f 87 93 03 00 00    	ja     280936 <bootmain+0x936>
			{
				xtoa(i-256,s);
  2805a3:	52                   	push   %edx
  2805a4:	52                   	push   %edx
  2805a5:	8d 95 36 fc ff ff    	lea    -0x3ca(%ebp),%edx
  2805ab:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
  2805b1:	52                   	push   %edx
  2805b2:	50                   	push   %eax
  2805b3:	89 95 98 fb ff ff    	mov    %edx,-0x468(%ebp)
  2805b9:	e8 88 15 00 00       	call   281b46 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  2805be:	8b 95 98 fb ff ff    	mov    -0x468(%ebp),%edx
  2805c4:	83 c4 0c             	add    $0xc,%esp
  2805c7:	6a 04                	push   $0x4
  2805c9:	52                   	push   %edx
  2805ca:	6a 00                	push   $0x0
  2805cc:	6a 07                	push   $0x7
  2805ce:	6a 10                	push   $0x10
  2805d0:	6a 00                	push   $0x0
  2805d2:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2805d8:	e8 43 0d 00 00       	call   281320 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2805dd:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
  2805e3:	83 c4 18             	add    $0x18,%esp
  2805e6:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2805ec:	50                   	push   %eax
  2805ed:	e8 52 1a 00 00       	call   282044 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2805f2:	8d 50 bf             	lea    -0x41(%eax),%edx
  2805f5:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2805f8:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2805fe:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  280605:	80 fa 19             	cmp    $0x19,%dl
  280608:	77 26                	ja     280630 <bootmain+0x630>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  28060a:	f6 85 c8 fb ff ff 04 	testb  $0x4,-0x438(%ebp)
  280611:	75 0b                	jne    28061e <bootmain+0x61e>
  280613:	83 bd c4 fb ff ff 00 	cmpl   $0x0,-0x43c(%ebp)
  28061a:	75 0b                	jne    280627 <bootmain+0x627>
  28061c:	eb 12                	jmp    280630 <bootmain+0x630>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  28061e:	83 bd c4 fb ff ff 00 	cmpl   $0x0,-0x43c(%ebp)
  280625:	75 09                	jne    280630 <bootmain+0x630>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280627:	83 c0 20             	add    $0x20,%eax
  28062a:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0)//visible char
  280630:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280637:	84 c0                	test   %al,%al
  280639:	74 4c                	je     280687 <bootmain+0x687>
				{
					if(key_win == sht_window && cursor_x <128)
  28063b:	39 fe                	cmp    %edi,%esi
  28063d:	75 31                	jne    280670 <bootmain+0x670>
  28063f:	83 bd dc fb ff ff 7f 	cmpl   $0x7f,-0x424(%ebp)
  280646:	7f 28                	jg     280670 <bootmain+0x670>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF,s,1);
  280648:	50                   	push   %eax
  280649:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  28064f:	6a 01                	push   $0x1
  280651:	50                   	push   %eax
  280652:	6a 07                	push   $0x7
  280654:	6a 00                	push   $0x0
  280656:	6a 1c                	push   $0x1c
  280658:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  28065e:	57                   	push   %edi
  28065f:	e8 bc 0c 00 00       	call   281320 <putfonts8_asc_sht>
						cursor_x += 8;
  280664:	83 85 dc fb ff ff 08 	addl   $0x8,-0x424(%ebp)
  28066b:	83 c4 20             	add    $0x20,%esp
  28066e:	eb 17                	jmp    280687 <bootmain+0x687>
					}
					else
					{
						fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  280670:	05 00 01 00 00       	add    $0x100,%eax
  280675:	51                   	push   %ecx
  280676:	51                   	push   %ecx
  280677:	50                   	push   %eax
  280678:	8b 46 24             	mov    0x24(%esi),%eax
  28067b:	83 c0 10             	add    $0x10,%eax
  28067e:	50                   	push   %eax
  28067f:	e8 45 17 00 00       	call   281dc9 <fifo32_put>
  280684:	83 c4 10             	add    $0x10,%esp
					}

				}
				if(i == 256 + 0x0f) //tab key
  280687:	81 fb 0f 01 00 00    	cmp    $0x10f,%ebx
  28068d:	75 4c                	jne    2806db <bootmain+0x6db>
				{
					cursor_c = keywin_off(key_win,sht_window,cursor_c,cursor_x);
  28068f:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280695:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28069b:	57                   	push   %edi
  28069c:	56                   	push   %esi
  28069d:	e8 d2 42 00 00       	call   284974 <keywin_off>
					int j=key_win->height - 1;
  2806a2:	8b 56 18             	mov    0x18(%esi),%edx
					if(j==0)
  2806a5:	83 c4 10             	add    $0x10,%esp
  2806a8:	4a                   	dec    %edx
  2806a9:	75 12                	jne    2806bd <bootmain+0x6bd>
					{
						j = shtctl->top-1;
  2806ab:	8b b5 d4 fb ff ff    	mov    -0x42c(%ebp),%esi
  2806b1:	8b 76 10             	mov    0x10(%esi),%esi
  2806b4:	8d 56 ff             	lea    -0x1(%esi),%edx
  2806b7:	89 b5 d8 fb ff ff    	mov    %esi,-0x428(%ebp)
					}
					key_win = shtctl->sheets[j];
  2806bd:	8b b5 d4 fb ff ff    	mov    -0x42c(%ebp),%esi
  2806c3:	8b 74 96 14          	mov    0x14(%esi,%edx,4),%esi
					cursor_c = keywin_on(key_win,sht_window,cursor_c);
  2806c7:	52                   	push   %edx
  2806c8:	50                   	push   %eax
  2806c9:	57                   	push   %edi
  2806ca:	56                   	push   %esi
  2806cb:	e8 09 43 00 00       	call   2849d9 <keywin_on>
  2806d0:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
  2806d6:	e9 bb 01 00 00       	jmp    280896 <bootmain+0x896>
				}
				else if(i == 256 + 0x0e) //back key
  2806db:	81 fb 0e 01 00 00    	cmp    $0x10e,%ebx
  2806e1:	75 3f                	jne    280722 <bootmain+0x722>
				{
					if(key_win == sht_window && cursor_x >8)
  2806e3:	39 fe                	cmp    %edi,%esi
  2806e5:	75 32                	jne    280719 <bootmain+0x719>
  2806e7:	83 bd dc fb ff ff 08 	cmpl   $0x8,-0x424(%ebp)
  2806ee:	7e 29                	jle    280719 <bootmain+0x719>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
  2806f0:	50                   	push   %eax
  2806f1:	6a 01                	push   $0x1
  2806f3:	68 23 4e 28 00       	push   $0x284e23
  2806f8:	6a 07                	push   $0x7
  2806fa:	6a 00                	push   $0x0
  2806fc:	6a 1c                	push   $0x1c
  2806fe:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280704:	57                   	push   %edi
  280705:	e8 16 0c 00 00       	call   281320 <putfonts8_asc_sht>
						cursor_x -= 8;
  28070a:	83 ad dc fb ff ff 08 	subl   $0x8,-0x424(%ebp)
  280711:	83 c4 20             	add    $0x20,%esp
  280714:	e9 8c 01 00 00       	jmp    2808a5 <bootmain+0x8a5>
					}
					else
					{
						fifo32_put(&key_win->task->fifo,8+256);
  280719:	53                   	push   %ebx
  28071a:	53                   	push   %ebx
  28071b:	68 08 01 00 00       	push   $0x108
  280720:	eb 17                	jmp    280739 <bootmain+0x739>
					}
				}
				else if(i == 256 + 0x1c)  //return key
  280722:	81 fb 1c 01 00 00    	cmp    $0x11c,%ebx
  280728:	75 20                	jne    28074a <bootmain+0x74a>
				{
					if(key_win != sht_window) //forcus on task_console window
  28072a:	39 fe                	cmp    %edi,%esi
  28072c:	0f 84 73 01 00 00    	je     2808a5 <bootmain+0x8a5>
					{
						fifo32_put(&key_win->task->fifo,10+256);
  280732:	51                   	push   %ecx
  280733:	51                   	push   %ecx
  280734:	68 0a 01 00 00       	push   $0x10a
  280739:	8b 46 24             	mov    0x24(%esi),%eax
  28073c:	83 c0 10             	add    $0x10,%eax
  28073f:	50                   	push   %eax
  280740:	e8 84 16 00 00       	call   281dc9 <fifo32_put>
  280745:	e9 4c 01 00 00       	jmp    280896 <bootmain+0x896>
					}
				}
				else if(i == 256 + 0x2a)  //left shift on
  28074a:	81 fb 2a 01 00 00    	cmp    $0x12a,%ebx
  280750:	75 0c                	jne    28075e <bootmain+0x75e>
				{
					key_shift |= 1;
  280752:	83 8d c4 fb ff ff 01 	orl    $0x1,-0x43c(%ebp)
  280759:	e9 47 01 00 00       	jmp    2808a5 <bootmain+0x8a5>
				} 
				else if(i == 256 + 0x36) //right shift on
  28075e:	81 fb 36 01 00 00    	cmp    $0x136,%ebx
  280764:	75 0c                	jne    280772 <bootmain+0x772>
				{
					key_shift |= 2;
  280766:	83 8d c4 fb ff ff 02 	orl    $0x2,-0x43c(%ebp)
  28076d:	e9 33 01 00 00       	jmp    2808a5 <bootmain+0x8a5>
				}
				else if(i == 256 + 0xaa)  //left shift off
  280772:	81 fb aa 01 00 00    	cmp    $0x1aa,%ebx
  280778:	75 0c                	jne    280786 <bootmain+0x786>
				{
					key_shift &= ~1;
  28077a:	83 a5 c4 fb ff ff fe 	andl   $0xfffffffe,-0x43c(%ebp)
  280781:	e9 1f 01 00 00       	jmp    2808a5 <bootmain+0x8a5>
				} 
				else if(i == 256 + 0xb6) //right shift off
  280786:	81 fb b6 01 00 00    	cmp    $0x1b6,%ebx
  28078c:	75 0c                	jne    28079a <bootmain+0x79a>
				{
					key_shift &= ~2;
  28078e:	83 a5 c4 fb ff ff fd 	andl   $0xfffffffd,-0x43c(%ebp)
  280795:	e9 0b 01 00 00       	jmp    2808a5 <bootmain+0x8a5>
				}
				else if(i == 256 + 0x3a) //CapsLock
  28079a:	81 fb 3a 01 00 00    	cmp    $0x13a,%ebx
  2807a0:	75 09                	jne    2807ab <bootmain+0x7ab>
				{
					key_leds ^= 4;
  2807a2:	83 b5 c8 fb ff ff 04 	xorl   $0x4,-0x438(%ebp)
  2807a9:	eb 20                	jmp    2807cb <bootmain+0x7cb>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2807ab:	81 fb 45 01 00 00    	cmp    $0x145,%ebx
  2807b1:	75 09                	jne    2807bc <bootmain+0x7bc>
				{
					key_leds ^= 2;
  2807b3:	83 b5 c8 fb ff ff 02 	xorl   $0x2,-0x438(%ebp)
  2807ba:	eb 0f                	jmp    2807cb <bootmain+0x7cb>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2807bc:	81 fb 46 01 00 00    	cmp    $0x146,%ebx
  2807c2:	75 2c                	jne    2807f0 <bootmain+0x7f0>
				{
					key_leds ^= 1;
  2807c4:	83 b5 c8 fb ff ff 01 	xorl   $0x1,-0x438(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2807cb:	50                   	push   %eax
  2807cc:	50                   	push   %eax
  2807cd:	68 ed 00 00 00       	push   $0xed
  2807d2:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2807d8:	e8 ec 15 00 00       	call   281dc9 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  2807dd:	58                   	pop    %eax
  2807de:	5a                   	pop    %edx
  2807df:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2807e5:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2807eb:	e9 50 ff ff ff       	jmp    280740 <bootmain+0x740>
				}
				else if(i == 256 + 0xfa)
  2807f0:	81 fb fa 01 00 00    	cmp    $0x1fa,%ebx
  2807f6:	0f 84 9f 00 00 00    	je     28089b <bootmain+0x89b>
				{
					keycmd_wait = -1;
				}
				else if(i == 256 + 0xfe)
  2807fc:	81 fb fe 01 00 00    	cmp    $0x1fe,%ebx
  280802:	75 16                	jne    28081a <bootmain+0x81a>
				{
					wait_KBC_sendready();
  280804:	e8 b0 17 00 00       	call   281fb9 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  280809:	53                   	push   %ebx
  28080a:	53                   	push   %ebx
  28080b:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280811:	6a 60                	push   $0x60
  280813:	e8 ee 04 00 00       	call   280d06 <io_out8>
  280818:	eb 7c                	jmp    280896 <bootmain+0x896>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && task_console->tss.esp0 != 0)	//shift + F1
  28081a:	81 fb 3b 01 00 00    	cmp    $0x13b,%ebx
  280820:	75 4c                	jne    28086e <bootmain+0x86e>
  280822:	83 bd c4 fb ff ff 00 	cmpl   $0x0,-0x43c(%ebp)
  280829:	74 43                	je     28086e <bootmain+0x86e>
  28082b:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280831:	83 78 30 00          	cmpl   $0x0,0x30(%eax)
  280835:	74 6e                	je     2808a5 <bootmain+0x8a5>
				{
					struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
					extern void asm_end_app();
					cons_putstr0(cons,"\nBreak(key):\n");
  280837:	51                   	push   %ecx
  280838:	51                   	push   %ecx
  280839:	68 4f 4a 28 00       	push   $0x284a4f
  28083e:	ff 35 ec 0f 00 00    	pushl  0xfec
  280844:	e8 41 34 00 00       	call   283c8a <cons_putstr0>
					io_cli();
  280849:	e8 84 04 00 00       	call   280cd2 <io_cli>
					task_console->tss.eax = (int)&(task_console->tss.esp0);
  28084e:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280854:	8b 8d e0 fb ff ff    	mov    -0x420(%ebp),%ecx
  28085a:	83 c0 30             	add    $0x30,%eax
					task_console->tss.eip = (int)asm_end_app - 0x280000;
  28085d:	c7 41 4c 50 2e 00 00 	movl   $0x2e50,0x4c(%ecx)
				{
					struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
					extern void asm_end_app();
					cons_putstr0(cons,"\nBreak(key):\n");
					io_cli();
					task_console->tss.eax = (int)&(task_console->tss.esp0);
  280864:	89 41 54             	mov    %eax,0x54(%ecx)
					task_console->tss.eip = (int)asm_end_app - 0x280000;
					io_sti();
  280867:	e8 68 04 00 00       	call   280cd4 <io_sti>
  28086c:	eb 28                	jmp    280896 <bootmain+0x896>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  28086e:	81 fb 57 01 00 00    	cmp    $0x157,%ebx
  280874:	75 2f                	jne    2808a5 <bootmain+0x8a5>
  280876:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  28087c:	8b 40 10             	mov    0x10(%eax),%eax
  28087f:	83 f8 02             	cmp    $0x2,%eax
  280882:	7e 21                	jle    2808a5 <bootmain+0x8a5>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280884:	48                   	dec    %eax
  280885:	52                   	push   %edx
  280886:	52                   	push   %edx
  280887:	50                   	push   %eax
  280888:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  28088e:	ff 70 18             	pushl  0x18(%eax)
  280891:	e8 4c 21 00 00       	call   2829e2 <sheet_updown>
  280896:	83 c4 10             	add    $0x10,%esp
  280899:	eb 0a                	jmp    2808a5 <bootmain+0x8a5>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0xfa)
				{
					keycmd_wait = -1;
  28089b:	c7 85 b4 fb ff ff ff 	movl   $0xffffffff,-0x44c(%ebp)
  2808a2:	ff ff ff 
				else if(i == 256 + 0x57 && shtctl->top > 2)
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
				}
				if(cursor_c >= 0)
  2808a5:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  2808ac:	78 2a                	js     2808d8 <bootmain+0x8d8>
				{
					//show cursor after show character
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  2808ae:	50                   	push   %eax
  2808af:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2808b5:	6a 2b                	push   $0x2b
  2808b7:	83 c0 07             	add    $0x7,%eax
  2808ba:	50                   	push   %eax
  2808bb:	0f b6 85 d8 fb ff ff 	movzbl -0x428(%ebp),%eax
  2808c2:	6a 1c                	push   $0x1c
  2808c4:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2808ca:	50                   	push   %eax
  2808cb:	ff 77 04             	pushl  0x4(%edi)
  2808ce:	ff 37                	pushl  (%edi)
  2808d0:	e8 ec 05 00 00       	call   280ec1 <boxfill8>
  2808d5:	83 c4 20             	add    $0x20,%esp
				}
				sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  2808d8:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2808de:	83 ec 0c             	sub    $0xc,%esp
				sprintf(s,"%d,%d",key_leds,key_shift);
  2808e1:	8d 9d 36 fc ff ff    	lea    -0x3ca(%ebp),%ebx
				if(cursor_c >= 0)
				{
					//show cursor after show character
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
				}
				sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  2808e7:	6a 2c                	push   $0x2c
  2808e9:	83 c0 08             	add    $0x8,%eax
  2808ec:	50                   	push   %eax
  2808ed:	6a 1c                	push   $0x1c
  2808ef:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2808f5:	57                   	push   %edi
  2808f6:	e8 b3 20 00 00       	call   2829ae <sheet_refresh>
				sprintf(s,"%d,%d",key_leds,key_shift);
  2808fb:	83 c4 20             	add    $0x20,%esp
  2808fe:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280904:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  28090a:	68 5d 4a 28 00       	push   $0x284a5d
  28090f:	53                   	push   %ebx
  280910:	e8 c8 12 00 00       	call   281bdd <sprintf>
				putfonts8_asc_sht(sht_bg,0,32,COL8_FFFFFF,COL8_000000,s,4);
  280915:	83 c4 0c             	add    $0xc,%esp
  280918:	6a 04                	push   $0x4
  28091a:	53                   	push   %ebx
  28091b:	6a 00                	push   $0x0
  28091d:	6a 07                	push   $0x7
  28091f:	6a 20                	push   $0x20
  280921:	6a 00                	push   $0x0
  280923:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  280929:	e8 f2 09 00 00       	call   281320 <putfonts8_asc_sht>
  28092e:	83 c4 20             	add    $0x20,%esp
  280931:	e9 97 fb ff ff       	jmp    2804cd <bootmain+0x4cd>

			}
			else if(512<=i && i<=767)
  280936:	8d 83 00 fe ff ff    	lea    -0x200(%ebx),%eax
  28093c:	3d ff 00 00 00       	cmp    $0xff,%eax
  280941:	0f 87 bb 02 00 00    	ja     280c02 <bootmain+0xc02>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  280947:	50                   	push   %eax
  280948:	50                   	push   %eax
  280949:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  28094f:	0f b6 db             	movzbl %bl,%ebx
  280952:	53                   	push   %ebx
  280953:	50                   	push   %eax
  280954:	e8 75 15 00 00       	call   281ece <mouse_decode>
  280959:	83 c4 10             	add    $0x10,%esp
  28095c:	85 c0                	test   %eax,%eax
  28095e:	0f 84 69 fb ff ff    	je     2804cd <bootmain+0x4cd>
  280964:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  28096a:	31 c9                	xor    %ecx,%ecx
  28096c:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  280972:	0f 48 c1             	cmovs  %ecx,%eax
  280975:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  28097b:	8b 85 cc fb ff ff    	mov    -0x434(%ebp),%eax
  280981:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  280987:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  28098a:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280991:	3b 85 d0 fb ff ff    	cmp    -0x430(%ebp),%eax
  280997:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  28099a:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2809a1:	0f 4f 95 d0 fb ff ff 	cmovg  -0x430(%ebp),%edx
  2809a8:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2809ae:	8d 50 ff             	lea    -0x1(%eax),%edx
  2809b1:	39 c1                	cmp    %eax,%ecx
					sheet_slide(sht_mouse,mx,my);
  2809b3:	50                   	push   %eax
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2809b4:	0f 4c d1             	cmovl  %ecx,%edx
					sheet_slide(sht_mouse,mx,my);
  2809b7:	52                   	push   %edx
  2809b8:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  2809be:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2809c4:	89 95 cc fb ff ff    	mov    %edx,-0x434(%ebp)
					sheet_slide(sht_mouse,mx,my);
  2809ca:	e8 fc 20 00 00       	call   282acb <sheet_slide>
					if(mdec.btn & 0x01)
  2809cf:	83 c4 10             	add    $0x10,%esp
  2809d2:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
  2809d9:	75 0f                	jne    2809ea <bootmain+0x9ea>
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  2809db:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  2809e2:	ff ff ff 
  2809e5:	e9 e3 fa ff ff       	jmp    2804cd <bootmain+0x4cd>
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
					sheet_slide(sht_mouse,mx,my);
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
  2809ea:	83 bd bc fb ff ff 00 	cmpl   $0x0,-0x444(%ebp)
  2809f1:	0f 89 be 01 00 00    	jns    280bb5 <bootmain+0xbb5>
						{
							for(int j=shtctl->top-1;j>0;j--)
  2809f7:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  2809fd:	8b 40 10             	mov    0x10(%eax),%eax
  280a00:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
  280a06:	48                   	dec    %eax
  280a07:	89 85 98 fb ff ff    	mov    %eax,-0x468(%ebp)
  280a0d:	85 c0                	test   %eax,%eax
  280a0f:	0f 8e b8 fa ff ff    	jle    2804cd <bootmain+0x4cd>
							{
								sht = shtctl->sheets[j];
  280a15:	8b 95 d4 fb ff ff    	mov    -0x42c(%ebp),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280a1b:	8b 8d d0 fb ff ff    	mov    -0x430(%ebp),%ecx
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280a21:	8b 54 82 14          	mov    0x14(%edx,%eax,4),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280a25:	2b 4a 0c             	sub    0xc(%edx),%ecx
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280a28:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280a2e:	89 8d b8 fb ff ff    	mov    %ecx,-0x448(%ebp)
  280a34:	0f 88 75 01 00 00    	js     280baf <bootmain+0xbaf>
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
								x = mx - sht->vx0;
								y = my - sht->vy0;
  280a3a:	8b 9d cc fb ff ff    	mov    -0x434(%ebp),%ebx
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280a40:	8b 4a 04             	mov    0x4(%edx),%ecx
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
								x = mx - sht->vx0;
								y = my - sht->vy0;
  280a43:	2b 5a 10             	sub    0x10(%edx),%ebx
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280a46:	39 8d b8 fb ff ff    	cmp    %ecx,-0x448(%ebp)
  280a4c:	0f 8d 5d 01 00 00    	jge    280baf <bootmain+0xbaf>
  280a52:	89 da                	mov    %ebx,%edx
  280a54:	83 ea 00             	sub    $0x0,%edx
  280a57:	0f 88 52 01 00 00    	js     280baf <bootmain+0xbaf>
  280a5d:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280a63:	3b 5a 08             	cmp    0x8(%edx),%ebx
  280a66:	0f 8d 43 01 00 00    	jge    280baf <bootmain+0xbaf>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280a6c:	0f af cb             	imul   %ebx,%ecx
  280a6f:	89 8d 94 fb ff ff    	mov    %ecx,-0x46c(%ebp)
  280a75:	89 d1                	mov    %edx,%ecx
  280a77:	8b 95 b8 fb ff ff    	mov    -0x448(%ebp),%edx
  280a7d:	03 11                	add    (%ecx),%edx
  280a7f:	89 d1                	mov    %edx,%ecx
  280a81:	8b 95 94 fb ff ff    	mov    -0x46c(%ebp),%edx
  280a87:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  280a8b:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280a91:	3b 4a 14             	cmp    0x14(%edx),%ecx
  280a94:	0f 84 15 01 00 00    	je     280baf <bootmain+0xbaf>
									{
										sheet_updown(sht,shtctl->top-1);
  280a9a:	50                   	push   %eax
  280a9b:	50                   	push   %eax
  280a9c:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  280aa2:	52                   	push   %edx
  280aa3:	e8 3a 1f 00 00       	call   2829e2 <sheet_updown>
										if(sht!=key_win)
  280aa8:	83 c4 10             	add    $0x10,%esp
  280aab:	3b b5 e4 fb ff ff    	cmp    -0x41c(%ebp),%esi
  280ab1:	74 2c                	je     280adf <bootmain+0xadf>
										{
											cursor_c = keywin_off(key_win,sht_window,cursor_c,cursor_x);
  280ab3:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280ab9:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280abf:	57                   	push   %edi
  280ac0:	56                   	push   %esi
  280ac1:	e8 ae 3e 00 00       	call   284974 <keywin_off>
											key_win = sht;
											cursor_c = keywin_on(key_win,sht_window,cursor_c);
  280ac6:	83 c4 0c             	add    $0xc,%esp
  280ac9:	50                   	push   %eax
  280aca:	57                   	push   %edi
  280acb:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280ad1:	e8 03 3f 00 00       	call   2849d9 <keywin_on>
  280ad6:	83 c4 10             	add    $0x10,%esp
  280ad9:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  280adf:	83 bd b8 fb ff ff 02 	cmpl   $0x2,-0x448(%ebp)
  280ae6:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280aec:	8b 40 04             	mov    0x4(%eax),%eax
  280aef:	7e 37                	jle    280b28 <bootmain+0xb28>
  280af1:	8d 50 fd             	lea    -0x3(%eax),%edx
  280af4:	39 95 b8 fb ff ff    	cmp    %edx,-0x448(%ebp)
  280afa:	7d 2c                	jge    280b28 <bootmain+0xb28>
  280afc:	8d 53 fd             	lea    -0x3(%ebx),%edx
										{
											mmx = mx;
											mmy = my;
  280aff:	8b 8d a8 fb ff ff    	mov    -0x458(%ebp),%ecx
  280b05:	83 fa 11             	cmp    $0x11,%edx
  280b08:	0f 46 8d cc fb ff ff 	cmovbe -0x434(%ebp),%ecx
  280b0f:	89 8d a8 fb ff ff    	mov    %ecx,-0x458(%ebp)
  280b15:	8b 8d bc fb ff ff    	mov    -0x444(%ebp),%ecx
  280b1b:	0f 46 8d d0 fb ff ff 	cmovbe -0x430(%ebp),%ecx
  280b22:	89 8d bc fb ff ff    	mov    %ecx,-0x444(%ebp)
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19)
  280b28:	8d 50 eb             	lea    -0x15(%eax),%edx
  280b2b:	39 95 b8 fb ff ff    	cmp    %edx,-0x448(%ebp)
  280b31:	8b b5 e4 fb ff ff    	mov    -0x41c(%ebp),%esi
  280b37:	0f 8c 90 f9 ff ff    	jl     2804cd <bootmain+0x4cd>
  280b3d:	83 e8 05             	sub    $0x5,%eax
  280b40:	39 85 b8 fb ff ff    	cmp    %eax,-0x448(%ebp)
  280b46:	0f 8d 81 f9 ff ff    	jge    2804cd <bootmain+0x4cd>
  280b4c:	83 eb 05             	sub    $0x5,%ebx
  280b4f:	83 fb 0d             	cmp    $0xd,%ebx
  280b52:	0f 87 75 f9 ff ff    	ja     2804cd <bootmain+0x4cd>
										{
											if(sht->flags & 0x10)
  280b58:	f6 46 1c 10          	testb  $0x10,0x1c(%esi)
  280b5c:	0f 84 6b f9 ff ff    	je     2804cd <bootmain+0x4cd>
											{
												if(sht->task != 0)
  280b62:	83 7e 24 00          	cmpl   $0x0,0x24(%esi)
  280b66:	0f 84 61 f9 ff ff    	je     2804cd <bootmain+0x4cd>
												{
													struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  280b6c:	50                   	push   %eax
  280b6d:	50                   	push   %eax
  280b6e:	68 63 4a 28 00       	push   $0x284a63
  280b73:	ff 35 ec 0f 00 00    	pushl  0xfec
  280b79:	e8 0c 31 00 00       	call   283c8a <cons_putstr0>
													io_cli();
  280b7e:	e8 4f 01 00 00       	call   280cd2 <io_cli>
													task_console->tss.eax = (int)&(task_console->tss.esp0);
  280b83:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280b89:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
  280b8f:	83 c0 30             	add    $0x30,%eax
													extern void asm_end_app();
													task_console->tss.eip = (int)&asm_end_app - 0x280000;
  280b92:	c7 46 4c 50 2e 00 00 	movl   $0x2e50,0x4c(%esi)
												if(sht->task != 0)
												{
													struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task_console->tss.eax = (int)&(task_console->tss.esp0);
  280b99:	89 46 54             	mov    %eax,0x54(%esi)
													extern void asm_end_app();
													task_console->tss.eip = (int)&asm_end_app - 0x280000;
													io_sti();
  280b9c:	e8 33 01 00 00       	call   280cd4 <io_sti>
  280ba1:	83 c4 10             	add    $0x10,%esp
  280ba4:	8b b5 e4 fb ff ff    	mov    -0x41c(%ebp),%esi
  280baa:	e9 1e f9 ff ff       	jmp    2804cd <bootmain+0x4cd>
					sheet_slide(sht_mouse,mx,my);
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  280baf:	48                   	dec    %eax
  280bb0:	e9 58 fe ff ff       	jmp    280a0d <bootmain+0xa0d>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							sheet_slide(sht,sht->vx0+x,sht->vy0+y);
  280bb5:	8b 9d e4 fb ff ff    	mov    -0x41c(%ebp),%ebx
  280bbb:	50                   	push   %eax
  280bbc:	8b 85 cc fb ff ff    	mov    -0x434(%ebp),%eax
  280bc2:	2b 85 a8 fb ff ff    	sub    -0x458(%ebp),%eax
  280bc8:	03 43 10             	add    0x10(%ebx),%eax
  280bcb:	50                   	push   %eax
  280bcc:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280bd2:	2b 85 bc fb ff ff    	sub    -0x444(%ebp),%eax
  280bd8:	03 43 0c             	add    0xc(%ebx),%eax
  280bdb:	50                   	push   %eax
  280bdc:	53                   	push   %ebx
  280bdd:	e8 e9 1e 00 00       	call   282acb <sheet_slide>
							mmx = mx;
							mmy = my;
  280be2:	8b 85 cc fb ff ff    	mov    -0x434(%ebp),%eax
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							sheet_slide(sht,sht->vx0+x,sht->vy0+y);
  280be8:	83 c4 10             	add    $0x10,%esp
							mmx = mx;
							mmy = my;
  280beb:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							sheet_slide(sht,sht->vx0+x,sht->vy0+y);
							mmx = mx;
  280bf1:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280bf7:	89 85 bc fb ff ff    	mov    %eax,-0x444(%ebp)
  280bfd:	e9 cb f8 ff ff       	jmp    2804cd <bootmain+0x4cd>
					{
						mmx = -1;
					}
				}
			}
			else if(i<=1)
  280c02:	83 fb 01             	cmp    $0x1,%ebx
  280c05:	0f 8f c2 f8 ff ff    	jg     2804cd <bootmain+0x4cd>
			{
				if(i != 0)
  280c0b:	85 db                	test   %ebx,%ebx
  280c0d:	74 22                	je     280c31 <bootmain+0xc31>
				{
					timer_init(timer,&fifo,0);
  280c0f:	53                   	push   %ebx
  280c10:	6a 00                	push   $0x0
  280c12:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280c18:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280c1e:	e8 f9 1f 00 00       	call   282c1c <timer_init>
					if(cursor_c>=0) cursor_c = COL8_000000;
  280c23:	83 c4 10             	add    $0x10,%esp
  280c26:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  280c2d:	79 39                	jns    280c68 <bootmain+0xc68>
  280c2f:	eb 20                	jmp    280c51 <bootmain+0xc51>
				}
				else
				{
					timer_init(timer,&fifo,1);
  280c31:	51                   	push   %ecx
  280c32:	6a 01                	push   $0x1
  280c34:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280c3a:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280c40:	e8 d7 1f 00 00       	call   282c1c <timer_init>
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280c45:	83 c4 10             	add    $0x10,%esp
  280c48:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  280c4f:	79 23                	jns    280c74 <bootmain+0xc74>
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
				}
				timer_settime(timer,50);
  280c51:	52                   	push   %edx
  280c52:	52                   	push   %edx
  280c53:	6a 32                	push   $0x32
  280c55:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280c5b:	e8 d0 1f 00 00       	call   282c30 <timer_settime>
  280c60:	83 c4 10             	add    $0x10,%esp
  280c63:	e9 65 f8 ff ff       	jmp    2804cd <bootmain+0x4cd>
			else if(i<=1)
			{
				if(i != 0)
				{
					timer_init(timer,&fifo,0);
					if(cursor_c>=0) cursor_c = COL8_000000;
  280c68:	c7 85 d8 fb ff ff 00 	movl   $0x0,-0x428(%ebp)
  280c6f:	00 00 00 
  280c72:	eb 0a                	jmp    280c7e <bootmain+0xc7e>
				}
				else
				{
					timer_init(timer,&fifo,1);
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280c74:	c7 85 d8 fb ff ff 07 	movl   $0x7,-0x428(%ebp)
  280c7b:	00 00 00 
				}
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  280c7e:	50                   	push   %eax
  280c7f:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280c85:	6a 2b                	push   $0x2b
  280c87:	83 c0 07             	add    $0x7,%eax
  280c8a:	50                   	push   %eax
  280c8b:	6a 1c                	push   $0x1c
  280c8d:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280c93:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280c99:	ff 77 04             	pushl  0x4(%edi)
  280c9c:	ff 37                	pushl  (%edi)
  280c9e:	e8 1e 02 00 00       	call   280ec1 <boxfill8>
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  280ca3:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280ca9:	83 c4 14             	add    $0x14,%esp
  280cac:	6a 2c                	push   $0x2c
  280cae:	83 c0 08             	add    $0x8,%eax
  280cb1:	50                   	push   %eax
  280cb2:	6a 1c                	push   $0x1c
  280cb4:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280cba:	57                   	push   %edi
  280cbb:	e8 ee 1c 00 00       	call   2829ae <sheet_refresh>
  280cc0:	83 c4 20             	add    $0x20,%esp
  280cc3:	eb 8c                	jmp    280c51 <bootmain+0xc51>
  280cc5:	66 90                	xchg   %ax,%ax
  280cc7:	66 90                	xchg   %ax,%ax
  280cc9:	66 90                	xchg   %ax,%ax
  280ccb:	66 90                	xchg   %ax,%ax
  280ccd:	66 90                	xchg   %ax,%ax
  280ccf:	90                   	nop

00280cd0 <io_hlt>:
  280cd0:	f4                   	hlt    
  280cd1:	c3                   	ret    

00280cd2 <io_cli>:
  280cd2:	fa                   	cli    
  280cd3:	c3                   	ret    

00280cd4 <io_sti>:
  280cd4:	fb                   	sti    
  280cd5:	c3                   	ret    

00280cd6 <io_stihlt>:
  280cd6:	fb                   	sti    
  280cd7:	f4                   	hlt    
  280cd8:	c3                   	ret    

00280cd9 <write_mem8>:
  280cd9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280cdd:	8a 44 24 08          	mov    0x8(%esp),%al
  280ce1:	88 01                	mov    %al,(%ecx)
  280ce3:	c3                   	ret    

00280ce4 <io_in8>:
  280ce4:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ce8:	b8 00 00 00 00       	mov    $0x0,%eax
  280ced:	ec                   	in     (%dx),%al
  280cee:	c3                   	ret    

00280cef <io_in16>:
  280cef:	8b 54 24 04          	mov    0x4(%esp),%edx
  280cf3:	b8 00 00 00 00       	mov    $0x0,%eax
  280cf8:	66 ed                	in     (%dx),%ax
  280cfa:	c3                   	ret    

00280cfb <io_in32>:
  280cfb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280cff:	b8 00 00 00 00       	mov    $0x0,%eax
  280d04:	ed                   	in     (%dx),%eax
  280d05:	c3                   	ret    

00280d06 <io_out8>:
  280d06:	8b 54 24 04          	mov    0x4(%esp),%edx
  280d0a:	8b 44 24 08          	mov    0x8(%esp),%eax
  280d0e:	ee                   	out    %al,(%dx)
  280d0f:	c3                   	ret    

00280d10 <io_out16>:
  280d10:	8b 54 24 04          	mov    0x4(%esp),%edx
  280d14:	8b 44 24 08          	mov    0x8(%esp),%eax
  280d18:	66 ef                	out    %ax,(%dx)
  280d1a:	c3                   	ret    

00280d1b <io_out32>:
  280d1b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280d1f:	8b 44 24 08          	mov    0x8(%esp),%eax
  280d23:	ef                   	out    %eax,(%dx)
  280d24:	c3                   	ret    

00280d25 <io_load_eflags>:
  280d25:	9c                   	pushf  
  280d26:	58                   	pop    %eax
  280d27:	c3                   	ret    

00280d28 <io_store_eflags>:
  280d28:	8b 44 24 04          	mov    0x4(%esp),%eax
  280d2c:	50                   	push   %eax
  280d2d:	9d                   	popf   
  280d2e:	c3                   	ret    

00280d2f <load_gdtr>:
  280d2f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280d34:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280d39:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280d3e:	c3                   	ret    

00280d3f <load_idtr>:
  280d3f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280d44:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280d49:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280d4e:	c3                   	ret    

00280d4f <load_cr0>:
  280d4f:	0f 20 c0             	mov    %cr0,%eax
  280d52:	c3                   	ret    

00280d53 <store_cr0>:
  280d53:	8b 44 24 04          	mov    0x4(%esp),%eax
  280d57:	0f 22 c0             	mov    %eax,%cr0
  280d5a:	c3                   	ret    

00280d5b <_memtest_sub>:
  280d5b:	57                   	push   %edi
  280d5c:	56                   	push   %esi
  280d5d:	53                   	push   %ebx
  280d5e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280d63:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280d68:	8b 44 24 10          	mov    0x10(%esp),%eax

00280d6c <mts_loop>:
  280d6c:	89 c3                	mov    %eax,%ebx
  280d6e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280d74:	8b 13                	mov    (%ebx),%edx
  280d76:	89 33                	mov    %esi,(%ebx)
  280d78:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280d7b:	3b 3b                	cmp    (%ebx),%edi
  280d7d:	75 18                	jne    280d97 <mts_qit>
  280d7f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280d82:	3b 33                	cmp    (%ebx),%esi
  280d84:	75 11                	jne    280d97 <mts_qit>
  280d86:	89 13                	mov    %edx,(%ebx)
  280d88:	05 00 10 00 00       	add    $0x1000,%eax
  280d8d:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280d91:	76 d9                	jbe    280d6c <mts_loop>

00280d93 <mts_ret>:
  280d93:	5b                   	pop    %ebx
  280d94:	5e                   	pop    %esi
  280d95:	5f                   	pop    %edi
  280d96:	c3                   	ret    

00280d97 <mts_qit>:
  280d97:	89 13                	mov    %edx,(%ebx)
  280d99:	5b                   	pop    %ebx
  280d9a:	5e                   	pop    %esi
  280d9b:	5f                   	pop    %edi
  280d9c:	c3                   	ret    

00280d9d <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280d9d:	55                   	push   %ebp
  280d9e:	89 e5                	mov    %esp,%ebp
  280da0:	57                   	push   %edi
  280da1:	56                   	push   %esi
  280da2:	53                   	push   %ebx
  280da3:	83 ec 1c             	sub    $0x1c,%esp
  280da6:	8b 75 08             	mov    0x8(%ebp),%esi
  280da9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280dac:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280daf:	e8 71 ff ff ff       	call   280d25 <io_load_eflags>
  280db4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280db7:	e8 16 ff ff ff       	call   280cd2 <io_cli>
	io_out8(0x03c8,start);
  280dbc:	83 ec 08             	sub    $0x8,%esp
  280dbf:	56                   	push   %esi
  280dc0:	68 c8 03 00 00       	push   $0x3c8
  280dc5:	e8 3c ff ff ff       	call   280d06 <io_out8>
	for(i=start;i<=end;i++)
  280dca:	83 c4 10             	add    $0x10,%esp
  280dcd:	39 fe                	cmp    %edi,%esi
  280dcf:	7f 54                	jg     280e25 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280dd1:	83 ec 08             	sub    $0x8,%esp
  280dd4:	0f b6 03             	movzbl (%ebx),%eax
  280dd7:	c0 e8 02             	shr    $0x2,%al
  280dda:	0f b6 c0             	movzbl %al,%eax
  280ddd:	50                   	push   %eax
  280dde:	68 c9 03 00 00       	push   $0x3c9
  280de3:	e8 1e ff ff ff       	call   280d06 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280de8:	83 c4 08             	add    $0x8,%esp
  280deb:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280def:	c0 e8 02             	shr    $0x2,%al
  280df2:	0f b6 c0             	movzbl %al,%eax
  280df5:	50                   	push   %eax
  280df6:	68 c9 03 00 00       	push   $0x3c9
  280dfb:	e8 06 ff ff ff       	call   280d06 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280e00:	83 c4 08             	add    $0x8,%esp
  280e03:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280e07:	c0 e8 02             	shr    $0x2,%al
  280e0a:	0f b6 c0             	movzbl %al,%eax
  280e0d:	50                   	push   %eax
  280e0e:	68 c9 03 00 00       	push   $0x3c9
  280e13:	e8 ee fe ff ff       	call   280d06 <io_out8>
		rgb+=3;
  280e18:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280e1b:	83 c6 01             	add    $0x1,%esi
  280e1e:	83 c4 10             	add    $0x10,%esp
  280e21:	39 f7                	cmp    %esi,%edi
  280e23:	7d ac                	jge    280dd1 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280e25:	83 ec 0c             	sub    $0xc,%esp
  280e28:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e2b:	e8 f8 fe ff ff       	call   280d28 <io_store_eflags>
	return;
  280e30:	83 c4 10             	add    $0x10,%esp
}
  280e33:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e36:	5b                   	pop    %ebx
  280e37:	5e                   	pop    %esi
  280e38:	5f                   	pop    %edi
  280e39:	5d                   	pop    %ebp
  280e3a:	c3                   	ret    

00280e3b <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280e3b:	55                   	push   %ebp
  280e3c:	89 e5                	mov    %esp,%ebp
  280e3e:	57                   	push   %edi
  280e3f:	56                   	push   %esi
  280e40:	53                   	push   %ebx
  280e41:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280e47:	68 60 5c 28 00       	push   $0x285c60
  280e4c:	6a 0f                	push   $0xf
  280e4e:	6a 00                	push   $0x0
  280e50:	e8 48 ff ff ff       	call   280d9d <set_palette>
  280e55:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280e5b:	83 c4 10             	add    $0x10,%esp
  280e5e:	bb 00 00 00 00       	mov    $0x0,%ebx
  280e63:	eb 32                	jmp    280e97 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280e65:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280e67:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280e6a:	88 58 02             	mov    %bl,0x2(%eax)
  280e6d:	83 c2 33             	add    $0x33,%edx
  280e70:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280e73:	80 fa 32             	cmp    $0x32,%dl
  280e76:	75 ed                	jne    280e65 <init_palette+0x2a>
  280e78:	83 c6 12             	add    $0x12,%esi
  280e7b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280e7e:	80 f9 32             	cmp    $0x32,%cl
  280e81:	74 09                	je     280e8c <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280e83:	89 f0                	mov    %esi,%eax
  280e85:	ba 00 00 00 00       	mov    $0x0,%edx
  280e8a:	eb d9                	jmp    280e65 <init_palette+0x2a>
  280e8c:	83 c3 33             	add    $0x33,%ebx
  280e8f:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280e92:	80 fb 32             	cmp    $0x32,%bl
  280e95:	74 09                	je     280ea0 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280e97:	89 fe                	mov    %edi,%esi
  280e99:	b9 00 00 00 00       	mov    $0x0,%ecx
  280e9e:	eb e3                	jmp    280e83 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280ea0:	83 ec 04             	sub    $0x4,%esp
  280ea3:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280ea9:	50                   	push   %eax
  280eaa:	68 e7 00 00 00       	push   $0xe7
  280eaf:	6a 10                	push   $0x10
  280eb1:	e8 e7 fe ff ff       	call   280d9d <set_palette>
	return;	
  280eb6:	83 c4 10             	add    $0x10,%esp
}
  280eb9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280ebc:	5b                   	pop    %ebx
  280ebd:	5e                   	pop    %esi
  280ebe:	5f                   	pop    %edi
  280ebf:	5d                   	pop    %ebp
  280ec0:	c3                   	ret    

00280ec1 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280ec1:	55                   	push   %ebp
  280ec2:	89 e5                	mov    %esp,%ebp
  280ec4:	57                   	push   %edi
  280ec5:	56                   	push   %esi
  280ec6:	53                   	push   %ebx
  280ec7:	83 ec 04             	sub    $0x4,%esp
  280eca:	8b 55 0c             	mov    0xc(%ebp),%edx
  280ecd:	8b 7d 14             	mov    0x14(%ebp),%edi
  280ed0:	8b 75 18             	mov    0x18(%ebp),%esi
  280ed3:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280ed6:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280eda:	3b 75 20             	cmp    0x20(%ebp),%esi
  280edd:	7f 28                	jg     280f07 <boxfill8+0x46>
  280edf:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280ee2:	0f af d6             	imul   %esi,%edx
  280ee5:	03 55 08             	add    0x8(%ebp),%edx
  280ee8:	eb 15                	jmp    280eff <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280eea:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280eed:	83 c0 01             	add    $0x1,%eax
  280ef0:	39 c1                	cmp    %eax,%ecx
  280ef2:	7d f6                	jge    280eea <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280ef4:	83 c6 01             	add    $0x1,%esi
  280ef7:	03 55 f0             	add    -0x10(%ebp),%edx
  280efa:	39 75 20             	cmp    %esi,0x20(%ebp)
  280efd:	7c 08                	jl     280f07 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280eff:	89 f8                	mov    %edi,%eax
  280f01:	39 cf                	cmp    %ecx,%edi
  280f03:	7e e5                	jle    280eea <boxfill8+0x29>
  280f05:	eb ed                	jmp    280ef4 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280f07:	83 c4 04             	add    $0x4,%esp
  280f0a:	5b                   	pop    %ebx
  280f0b:	5e                   	pop    %esi
  280f0c:	5f                   	pop    %edi
  280f0d:	5d                   	pop    %ebp
  280f0e:	c3                   	ret    

00280f0f <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280f0f:	55                   	push   %ebp
  280f10:	89 e5                	mov    %esp,%ebp
  280f12:	53                   	push   %ebx
  280f13:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280f16:	8b 55 10             	mov    0x10(%ebp),%edx
  280f19:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280f1d:	85 d2                	test   %edx,%edx
  280f1f:	7e 0d                	jle    280f2e <boxfill8_test+0x1f>
  280f21:	89 d8                	mov    %ebx,%eax
  280f23:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280f25:	88 08                	mov    %cl,(%eax)
  280f27:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280f2a:	39 d0                	cmp    %edx,%eax
  280f2c:	75 f7                	jne    280f25 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280f2e:	5b                   	pop    %ebx
  280f2f:	5d                   	pop    %ebp
  280f30:	c3                   	ret    

00280f31 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280f31:	55                   	push   %ebp
  280f32:	89 e5                	mov    %esp,%ebp
  280f34:	57                   	push   %edi
  280f35:	56                   	push   %esi
  280f36:	53                   	push   %ebx
  280f37:	83 ec 14             	sub    $0x14,%esp
  280f3a:	8b 7d 08             	mov    0x8(%ebp),%edi
  280f3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f40:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280f43:	68 be 00 00 00       	push   $0xbe
  280f48:	68 36 01 00 00       	push   $0x136
  280f4d:	6a 00                	push   $0x0
  280f4f:	6a 00                	push   $0x0
  280f51:	6a 0e                	push   $0xe
  280f53:	68 36 01 00 00       	push   $0x136
  280f58:	57                   	push   %edi
  280f59:	e8 63 ff ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280f5e:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280f61:	89 c2                	mov    %eax,%edx
  280f63:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280f66:	50                   	push   %eax
  280f67:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280f6a:	52                   	push   %edx
  280f6b:	6a 00                	push   $0x0
  280f6d:	6a 00                	push   $0x0
  280f6f:	6a 0e                	push   $0xe
  280f71:	53                   	push   %ebx
  280f72:	57                   	push   %edi
  280f73:	e8 49 ff ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280f78:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280f7b:	83 c4 38             	add    $0x38,%esp
  280f7e:	50                   	push   %eax
  280f7f:	ff 75 f0             	pushl  -0x10(%ebp)
  280f82:	50                   	push   %eax
  280f83:	6a 00                	push   $0x0
  280f85:	6a 08                	push   $0x8
  280f87:	53                   	push   %ebx
  280f88:	57                   	push   %edi
  280f89:	e8 33 ff ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280f8e:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280f91:	50                   	push   %eax
  280f92:	ff 75 f0             	pushl  -0x10(%ebp)
  280f95:	50                   	push   %eax
  280f96:	6a 00                	push   $0x0
  280f98:	6a 07                	push   $0x7
  280f9a:	53                   	push   %ebx
  280f9b:	57                   	push   %edi
  280f9c:	e8 20 ff ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280fa1:	83 c4 38             	add    $0x38,%esp
  280fa4:	8d 46 ff             	lea    -0x1(%esi),%eax
  280fa7:	50                   	push   %eax
  280fa8:	ff 75 f0             	pushl  -0x10(%ebp)
  280fab:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280fae:	50                   	push   %eax
  280faf:	6a 00                	push   $0x0
  280fb1:	6a 08                	push   $0x8
  280fb3:	53                   	push   %ebx
  280fb4:	57                   	push   %edi
  280fb5:	e8 07 ff ff ff       	call   280ec1 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280fba:	8d 46 e8             	lea    -0x18(%esi),%eax
  280fbd:	50                   	push   %eax
  280fbe:	6a 3b                	push   $0x3b
  280fc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280fc3:	50                   	push   %eax
  280fc4:	6a 03                	push   $0x3
  280fc6:	6a 07                	push   $0x7
  280fc8:	53                   	push   %ebx
  280fc9:	57                   	push   %edi
  280fca:	e8 f2 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280fcf:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280fd2:	83 c4 38             	add    $0x38,%esp
  280fd5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280fd8:	51                   	push   %ecx
  280fd9:	6a 02                	push   $0x2
  280fdb:	ff 75 f0             	pushl  -0x10(%ebp)
  280fde:	6a 02                	push   $0x2
  280fe0:	6a 07                	push   $0x7
  280fe2:	53                   	push   %ebx
  280fe3:	57                   	push   %edi
  280fe4:	e8 d8 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280fe9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280fec:	51                   	push   %ecx
  280fed:	6a 3b                	push   $0x3b
  280fef:	51                   	push   %ecx
  280ff0:	6a 03                	push   $0x3
  280ff2:	6a 0f                	push   $0xf
  280ff4:	53                   	push   %ebx
  280ff5:	57                   	push   %edi
  280ff6:	e8 c6 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280ffb:	8d 56 e9             	lea    -0x17(%esi),%edx
  280ffe:	83 c4 38             	add    $0x38,%esp
  281001:	8d 46 fb             	lea    -0x5(%esi),%eax
  281004:	50                   	push   %eax
  281005:	6a 3b                	push   $0x3b
  281007:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  28100a:	52                   	push   %edx
  28100b:	6a 3b                	push   $0x3b
  28100d:	6a 0f                	push   $0xf
  28100f:	53                   	push   %ebx
  281010:	57                   	push   %edi
  281011:	e8 ab fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  281016:	83 ee 03             	sub    $0x3,%esi
  281019:	56                   	push   %esi
  28101a:	6a 3b                	push   $0x3b
  28101c:	56                   	push   %esi
  28101d:	6a 02                	push   $0x2
  28101f:	6a 00                	push   $0x0
  281021:	53                   	push   %ebx
  281022:	57                   	push   %edi
  281023:	e8 99 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  281028:	83 c4 38             	add    $0x38,%esp
  28102b:	56                   	push   %esi
  28102c:	6a 3c                	push   $0x3c
  28102e:	ff 75 f0             	pushl  -0x10(%ebp)
  281031:	6a 3c                	push   $0x3c
  281033:	6a 00                	push   $0x0
  281035:	53                   	push   %ebx
  281036:	57                   	push   %edi
  281037:	e8 85 fe ff ff       	call   280ec1 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  28103c:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  28103f:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  281042:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281045:	50                   	push   %eax
  281046:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  281049:	51                   	push   %ecx
  28104a:	50                   	push   %eax
  28104b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  28104e:	52                   	push   %edx
  28104f:	6a 0f                	push   $0xf
  281051:	53                   	push   %ebx
  281052:	57                   	push   %edi
  281053:	e8 69 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  281058:	83 c4 38             	add    $0x38,%esp
  28105b:	ff 75 ec             	pushl  -0x14(%ebp)
  28105e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  281061:	52                   	push   %edx
  281062:	ff 75 e4             	pushl  -0x1c(%ebp)
  281065:	52                   	push   %edx
  281066:	6a 0f                	push   $0xf
  281068:	53                   	push   %ebx
  281069:	57                   	push   %edi
  28106a:	e8 52 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  28106f:	56                   	push   %esi
  281070:	ff 75 e0             	pushl  -0x20(%ebp)
  281073:	56                   	push   %esi
  281074:	ff 75 e8             	pushl  -0x18(%ebp)
  281077:	6a 07                	push   $0x7
  281079:	53                   	push   %ebx
  28107a:	57                   	push   %edi
  28107b:	e8 41 fe ff ff       	call   280ec1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  281080:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281083:	83 c4 38             	add    $0x38,%esp
  281086:	56                   	push   %esi
  281087:	50                   	push   %eax
  281088:	ff 75 f0             	pushl  -0x10(%ebp)
  28108b:	50                   	push   %eax
  28108c:	6a 07                	push   $0x7
  28108e:	53                   	push   %ebx
  28108f:	57                   	push   %edi
  281090:	e8 2c fe ff ff       	call   280ec1 <boxfill8>
}
  281095:	83 c4 1c             	add    $0x1c,%esp
  281098:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28109b:	5b                   	pop    %ebx
  28109c:	5e                   	pop    %esi
  28109d:	5f                   	pop    %edi
  28109e:	5d                   	pop    %ebp
  28109f:	c3                   	ret    

002810a0 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  2810a0:	55                   	push   %ebp
  2810a1:	89 e5                	mov    %esp,%ebp
  2810a3:	57                   	push   %edi
  2810a4:	56                   	push   %esi
  2810a5:	53                   	push   %ebx
  2810a6:	83 ec 08             	sub    $0x8,%esp
  2810a9:	8b 75 08             	mov    0x8(%ebp),%esi
  2810ac:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  2810b0:	89 75 f0             	mov    %esi,-0x10(%ebp)
  2810b3:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  2810b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2810bc:	eb 38                	jmp    2810f6 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  2810be:	0f b6 94 03 60 4b 28 	movzbl 0x284b60(%ebx,%eax,1),%edx
  2810c5:	00 
  2810c6:	80 fa 2a             	cmp    $0x2a,%dl
  2810c9:	75 06                	jne    2810d1 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  2810cb:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  2810cf:	eb 15                	jmp    2810e6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  2810d1:	80 fa 4f             	cmp    $0x4f,%dl
  2810d4:	75 06                	jne    2810dc <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  2810d6:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  2810da:	eb 0a                	jmp    2810e6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  2810dc:	80 fa 2e             	cmp    $0x2e,%dl
  2810df:	75 05                	jne    2810e6 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  2810e1:	89 fa                	mov    %edi,%edx
  2810e3:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  2810e6:	83 c0 01             	add    $0x1,%eax
  2810e9:	83 f8 10             	cmp    $0x10,%eax
  2810ec:	75 d0                	jne    2810be <init_mouse_cursor8+0x1e>
  2810ee:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  2810f1:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  2810f4:	74 0c                	je     281102 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  2810f6:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  2810fb:	89 f3                	mov    %esi,%ebx
  2810fd:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  281100:	eb bc                	jmp    2810be <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  281102:	83 c4 08             	add    $0x8,%esp
  281105:	5b                   	pop    %ebx
  281106:	5e                   	pop    %esi
  281107:	5f                   	pop    %edi
  281108:	5d                   	pop    %ebp
  281109:	c3                   	ret    

0028110a <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  28110a:	55                   	push   %ebp
  28110b:	89 e5                	mov    %esp,%ebp
  28110d:	57                   	push   %edi
  28110e:	56                   	push   %esi
  28110f:	53                   	push   %ebx
  281110:	83 ec 1c             	sub    $0x1c,%esp
  281113:	8b 75 08             	mov    0x8(%ebp),%esi
  281116:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281119:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  28111c:	80 fa 01             	cmp    $0x1,%dl
  28111f:	19 c0                	sbb    %eax,%eax
  281121:	83 e0 03             	and    $0x3,%eax
  281124:	83 c0 0c             	add    $0xc,%eax
  281127:	80 fa 01             	cmp    $0x1,%dl
  28112a:	19 ff                	sbb    %edi,%edi
  28112c:	f7 d7                	not    %edi
  28112e:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  281131:	6a 14                	push   $0x14
  281133:	8d 53 fc             	lea    -0x4(%ebx),%edx
  281136:	52                   	push   %edx
  281137:	6a 03                	push   $0x3
  281139:	6a 03                	push   $0x3
  28113b:	0f b6 c0             	movzbl %al,%eax
  28113e:	50                   	push   %eax
  28113f:	53                   	push   %ebx
  281140:	56                   	push   %esi
  281141:	e8 7b fd ff ff       	call   280ec1 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  281146:	83 c4 04             	add    $0x4,%esp
  281149:	ff 75 10             	pushl  0x10(%ebp)
  28114c:	89 f8                	mov    %edi,%eax
  28114e:	0f be f8             	movsbl %al,%edi
  281151:	57                   	push   %edi
  281152:	6a 04                	push   $0x4
  281154:	6a 18                	push   $0x18
  281156:	53                   	push   %ebx
  281157:	56                   	push   %esi
  281158:	e8 c7 04 00 00       	call   281624 <putfonts8_asc>
  28115d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  281160:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  281163:	01 fb                	add    %edi,%ebx
  281165:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  281168:	83 c4 30             	add    $0x30,%esp
  28116b:	be 00 00 00 00       	mov    $0x0,%esi
  281170:	eb 41                	jmp    2811b3 <make_wtitle8+0xa9>
  281172:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  281174:	0f b6 9c 06 80 4a 28 	movzbl 0x284a80(%esi,%eax,1),%ebx
  28117b:	00 
			if(c == '@') c=COL8_000000;
  28117c:	ba 00 00 00 00       	mov    $0x0,%edx
  281181:	80 fb 40             	cmp    $0x40,%bl
  281184:	74 13                	je     281199 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  281186:	ba 0f 00 00 00       	mov    $0xf,%edx
  28118b:	80 fb 24             	cmp    $0x24,%bl
  28118e:	74 09                	je     281199 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  281190:	80 fb 51             	cmp    $0x51,%bl
  281193:	0f 94 c2             	sete   %dl
  281196:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  281199:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  28119d:	83 c0 01             	add    $0x1,%eax
  2811a0:	83 f8 10             	cmp    $0x10,%eax
  2811a3:	75 cd                	jne    281172 <make_wtitle8+0x68>
  2811a5:	03 7d e4             	add    -0x1c(%ebp),%edi
  2811a8:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  2811ab:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  2811b1:	74 07                	je     2811ba <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  2811b3:	b8 00 00 00 00       	mov    $0x0,%eax
  2811b8:	eb b8                	jmp    281172 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  2811ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2811bd:	5b                   	pop    %ebx
  2811be:	5e                   	pop    %esi
  2811bf:	5f                   	pop    %edi
  2811c0:	5d                   	pop    %ebp
  2811c1:	c3                   	ret    

002811c2 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  2811c2:	55                   	push   %ebp
  2811c3:	89 e5                	mov    %esp,%ebp
  2811c5:	57                   	push   %edi
  2811c6:	56                   	push   %esi
  2811c7:	53                   	push   %ebx
  2811c8:	83 ec 1c             	sub    $0x1c,%esp
  2811cb:	8b 75 08             	mov    0x8(%ebp),%esi
  2811ce:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  2811d1:	8b 45 18             	mov    0x18(%ebp),%eax
  2811d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  2811d7:	8d 43 ff             	lea    -0x1(%ebx),%eax
  2811da:	6a 00                	push   $0x0
  2811dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  2811df:	50                   	push   %eax
  2811e0:	6a 00                	push   $0x0
  2811e2:	6a 00                	push   $0x0
  2811e4:	6a 08                	push   $0x8
  2811e6:	53                   	push   %ebx
  2811e7:	56                   	push   %esi
  2811e8:	e8 d4 fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  2811ed:	8d 53 fe             	lea    -0x2(%ebx),%edx
  2811f0:	6a 01                	push   $0x1
  2811f2:	89 55 e0             	mov    %edx,-0x20(%ebp)
  2811f5:	52                   	push   %edx
  2811f6:	6a 01                	push   $0x1
  2811f8:	6a 01                	push   $0x1
  2811fa:	6a 07                	push   $0x7
  2811fc:	53                   	push   %ebx
  2811fd:	56                   	push   %esi
  2811fe:	e8 be fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  281203:	8b 7d 10             	mov    0x10(%ebp),%edi
  281206:	8d 4f ff             	lea    -0x1(%edi),%ecx
  281209:	83 c4 38             	add    $0x38,%esp
  28120c:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  28120f:	51                   	push   %ecx
  281210:	6a 00                	push   $0x0
  281212:	6a 00                	push   $0x0
  281214:	6a 00                	push   $0x0
  281216:	6a 08                	push   $0x8
  281218:	53                   	push   %ebx
  281219:	56                   	push   %esi
  28121a:	e8 a2 fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  28121f:	8b 7d 10             	mov    0x10(%ebp),%edi
  281222:	83 ef 02             	sub    $0x2,%edi
  281225:	57                   	push   %edi
  281226:	6a 01                	push   $0x1
  281228:	6a 01                	push   $0x1
  28122a:	6a 01                	push   $0x1
  28122c:	6a 07                	push   $0x7
  28122e:	53                   	push   %ebx
  28122f:	56                   	push   %esi
  281230:	e8 8c fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  281235:	83 c4 38             	add    $0x38,%esp
  281238:	57                   	push   %edi
  281239:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28123c:	52                   	push   %edx
  28123d:	6a 01                	push   $0x1
  28123f:	52                   	push   %edx
  281240:	6a 0f                	push   $0xf
  281242:	53                   	push   %ebx
  281243:	56                   	push   %esi
  281244:	e8 78 fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  281249:	ff 75 dc             	pushl  -0x24(%ebp)
  28124c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28124f:	50                   	push   %eax
  281250:	6a 00                	push   $0x0
  281252:	50                   	push   %eax
  281253:	6a 00                	push   $0x0
  281255:	53                   	push   %ebx
  281256:	56                   	push   %esi
  281257:	e8 65 fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28125c:	83 c4 38             	add    $0x38,%esp
  28125f:	8b 55 10             	mov    0x10(%ebp),%edx
  281262:	8d 42 fd             	lea    -0x3(%edx),%eax
  281265:	50                   	push   %eax
  281266:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281269:	50                   	push   %eax
  28126a:	6a 02                	push   $0x2
  28126c:	6a 02                	push   $0x2
  28126e:	6a 08                	push   $0x8
  281270:	53                   	push   %ebx
  281271:	56                   	push   %esi
  281272:	e8 4a fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  281277:	57                   	push   %edi
  281278:	ff 75 e0             	pushl  -0x20(%ebp)
  28127b:	57                   	push   %edi
  28127c:	6a 01                	push   $0x1
  28127e:	6a 0f                	push   $0xf
  281280:	53                   	push   %ebx
  281281:	56                   	push   %esi
  281282:	e8 3a fc ff ff       	call   280ec1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  281287:	83 c4 38             	add    $0x38,%esp
  28128a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  28128d:	51                   	push   %ecx
  28128e:	ff 75 e4             	pushl  -0x1c(%ebp)
  281291:	51                   	push   %ecx
  281292:	6a 00                	push   $0x0
  281294:	6a 00                	push   $0x0
  281296:	53                   	push   %ebx
  281297:	56                   	push   %esi
  281298:	e8 24 fc ff ff       	call   280ec1 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  28129d:	83 c4 1c             	add    $0x1c,%esp
  2812a0:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  2812a4:	50                   	push   %eax
  2812a5:	ff 75 14             	pushl  0x14(%ebp)
  2812a8:	53                   	push   %ebx
  2812a9:	56                   	push   %esi
  2812aa:	e8 5b fe ff ff       	call   28110a <make_wtitle8>
	return;
  2812af:	83 c4 10             	add    $0x10,%esp
}
  2812b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2812b5:	5b                   	pop    %ebx
  2812b6:	5e                   	pop    %esi
  2812b7:	5f                   	pop    %edi
  2812b8:	5d                   	pop    %ebp
  2812b9:	c3                   	ret    

002812ba <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  2812ba:	55                   	push   %ebp
  2812bb:	89 e5                	mov    %esp,%ebp
  2812bd:	57                   	push   %edi
  2812be:	56                   	push   %esi
  2812bf:	53                   	push   %ebx
  2812c0:	83 ec 04             	sub    $0x4,%esp
  2812c3:	8b 45 0c             	mov    0xc(%ebp),%eax
  2812c6:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  2812c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  2812cd:	7e 49                	jle    281318 <putblock8_8+0x5e>
  2812cf:	8b 7d 24             	mov    0x24(%ebp),%edi
  2812d2:	8b 4d 20             	mov    0x20(%ebp),%ecx
  2812d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  2812d8:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  2812dc:	03 45 18             	add    0x18(%ebp),%eax
  2812df:	89 c2                	mov    %eax,%edx
  2812e1:	03 55 08             	add    0x8(%ebp),%edx
  2812e4:	be 00 00 00 00       	mov    $0x0,%esi
  2812e9:	eb 22                	jmp    28130d <putblock8_8+0x53>
  2812eb:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2812ee:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2812f2:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2812f5:	83 c0 01             	add    $0x1,%eax
  2812f8:	39 45 10             	cmp    %eax,0x10(%ebp)
  2812fb:	75 f1                	jne    2812ee <putblock8_8+0x34>
  2812fd:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  281300:	83 c6 01             	add    $0x1,%esi
  281303:	01 f9                	add    %edi,%ecx
  281305:	03 55 f0             	add    -0x10(%ebp),%edx
  281308:	39 75 14             	cmp    %esi,0x14(%ebp)
  28130b:	74 0b                	je     281318 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  28130d:	b8 00 00 00 00       	mov    $0x0,%eax
  281312:	85 db                	test   %ebx,%ebx
  281314:	7f d5                	jg     2812eb <putblock8_8+0x31>
  281316:	eb e8                	jmp    281300 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  281318:	83 c4 04             	add    $0x4,%esp
  28131b:	5b                   	pop    %ebx
  28131c:	5e                   	pop    %esi
  28131d:	5f                   	pop    %edi
  28131e:	5d                   	pop    %ebp
  28131f:	c3                   	ret    

00281320 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  281320:	55                   	push   %ebp
  281321:	89 e5                	mov    %esp,%ebp
  281323:	57                   	push   %edi
  281324:	56                   	push   %esi
  281325:	53                   	push   %ebx
  281326:	83 ec 0c             	sub    $0xc,%esp
  281329:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28132c:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  28132f:	8b 45 20             	mov    0x20(%ebp),%eax
  281332:	8b 55 0c             	mov    0xc(%ebp),%edx
  281335:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  281338:	8d 46 0f             	lea    0xf(%esi),%eax
  28133b:	50                   	push   %eax
  28133c:	8d 47 ff             	lea    -0x1(%edi),%eax
  28133f:	50                   	push   %eax
  281340:	56                   	push   %esi
  281341:	52                   	push   %edx
  281342:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281346:	50                   	push   %eax
  281347:	ff 73 04             	pushl  0x4(%ebx)
  28134a:	ff 33                	pushl  (%ebx)
  28134c:	e8 70 fb ff ff       	call   280ec1 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281351:	83 c4 04             	add    $0x4,%esp
  281354:	ff 75 1c             	pushl  0x1c(%ebp)
  281357:	ff 75 14             	pushl  0x14(%ebp)
  28135a:	56                   	push   %esi
  28135b:	ff 75 0c             	pushl  0xc(%ebp)
  28135e:	ff 73 04             	pushl  0x4(%ebx)
  281361:	ff 33                	pushl  (%ebx)
  281363:	e8 bc 02 00 00       	call   281624 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281368:	83 c4 24             	add    $0x24,%esp
  28136b:	8d 46 10             	lea    0x10(%esi),%eax
  28136e:	50                   	push   %eax
  28136f:	57                   	push   %edi
  281370:	56                   	push   %esi
  281371:	ff 75 0c             	pushl  0xc(%ebp)
  281374:	53                   	push   %ebx
  281375:	e8 34 16 00 00       	call   2829ae <sheet_refresh>
}
  28137a:	83 c4 20             	add    $0x20,%esp
  28137d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281380:	5b                   	pop    %ebx
  281381:	5e                   	pop    %esi
  281382:	5f                   	pop    %edi
  281383:	5d                   	pop    %ebp
  281384:	c3                   	ret    

00281385 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281385:	55                   	push   %ebp
  281386:	89 e5                	mov    %esp,%ebp
  281388:	57                   	push   %edi
  281389:	56                   	push   %esi
  28138a:	53                   	push   %ebx
  28138b:	83 ec 18             	sub    $0x18,%esp
  28138e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281391:	8b 45 0c             	mov    0xc(%ebp),%eax
  281394:	03 45 14             	add    0x14(%ebp),%eax
  281397:	8b 55 10             	mov    0x10(%ebp),%edx
  28139a:	03 55 18             	add    0x18(%ebp),%edx
  28139d:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  28139f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  2813a2:	8d 48 01             	lea    0x1(%eax),%ecx
  2813a5:	8b 75 10             	mov    0x10(%ebp),%esi
  2813a8:	83 ee 03             	sub    $0x3,%esi
  2813ab:	8b 55 0c             	mov    0xc(%ebp),%edx
  2813ae:	83 ea 02             	sub    $0x2,%edx
  2813b1:	56                   	push   %esi
  2813b2:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  2813b5:	51                   	push   %ecx
  2813b6:	56                   	push   %esi
  2813b7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  2813ba:	52                   	push   %edx
  2813bb:	6a 0f                	push   $0xf
  2813bd:	ff 73 04             	pushl  0x4(%ebx)
  2813c0:	ff 33                	pushl  (%ebx)
  2813c2:	e8 fa fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  2813c7:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  2813ca:	8d 7f 01             	lea    0x1(%edi),%edi
  2813cd:	89 f9                	mov    %edi,%ecx
  2813cf:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2813d2:	83 ef 03             	sub    $0x3,%edi
  2813d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  2813d8:	51                   	push   %ecx
  2813d9:	57                   	push   %edi
  2813da:	56                   	push   %esi
  2813db:	57                   	push   %edi
  2813dc:	6a 0f                	push   $0xf
  2813de:	ff 73 04             	pushl  0x4(%ebx)
  2813e1:	ff 33                	pushl  (%ebx)
  2813e3:	e8 d9 fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2813e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2813eb:	8d 4a 02             	lea    0x2(%edx),%ecx
  2813ee:	83 c4 38             	add    $0x38,%esp
  2813f1:	51                   	push   %ecx
  2813f2:	ff 75 e0             	pushl  -0x20(%ebp)
  2813f5:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2813f8:	51                   	push   %ecx
  2813f9:	57                   	push   %edi
  2813fa:	6a 07                	push   $0x7
  2813fc:	ff 73 04             	pushl  0x4(%ebx)
  2813ff:	ff 33                	pushl  (%ebx)
  281401:	e8 bb fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  281406:	8b 45 e8             	mov    -0x18(%ebp),%eax
  281409:	83 c0 02             	add    $0x2,%eax
  28140c:	ff 75 dc             	pushl  -0x24(%ebp)
  28140f:	50                   	push   %eax
  281410:	56                   	push   %esi
  281411:	50                   	push   %eax
  281412:	6a 07                	push   $0x7
  281414:	ff 73 04             	pushl  0x4(%ebx)
  281417:	ff 33                	pushl  (%ebx)
  281419:	e8 a3 fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  28141e:	8b 75 10             	mov    0x10(%ebp),%esi
  281421:	8d 7e fe             	lea    -0x2(%esi),%edi
  281424:	8b 75 0c             	mov    0xc(%ebp),%esi
  281427:	83 ee 01             	sub    $0x1,%esi
  28142a:	83 c4 38             	add    $0x38,%esp
  28142d:	57                   	push   %edi
  28142e:	ff 75 e8             	pushl  -0x18(%ebp)
  281431:	57                   	push   %edi
  281432:	56                   	push   %esi
  281433:	6a 00                	push   $0x0
  281435:	ff 73 04             	pushl  0x4(%ebx)
  281438:	ff 33                	pushl  (%ebx)
  28143a:	e8 82 fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  28143f:	ff 75 e4             	pushl  -0x1c(%ebp)
  281442:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281445:	52                   	push   %edx
  281446:	57                   	push   %edi
  281447:	52                   	push   %edx
  281448:	6a 00                	push   $0x0
  28144a:	ff 73 04             	pushl  0x4(%ebx)
  28144d:	ff 33                	pushl  (%ebx)
  28144f:	e8 6d fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281454:	83 c4 38             	add    $0x38,%esp
  281457:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28145a:	50                   	push   %eax
  28145b:	ff 75 e8             	pushl  -0x18(%ebp)
  28145e:	50                   	push   %eax
  28145f:	ff 75 f0             	pushl  -0x10(%ebp)
  281462:	6a 08                	push   $0x8
  281464:	ff 73 04             	pushl  0x4(%ebx)
  281467:	ff 33                	pushl  (%ebx)
  281469:	e8 53 fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28146e:	ff 75 ec             	pushl  -0x14(%ebp)
  281471:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281474:	51                   	push   %ecx
  281475:	57                   	push   %edi
  281476:	51                   	push   %ecx
  281477:	6a 08                	push   $0x8
  281479:	ff 73 04             	pushl  0x4(%ebx)
  28147c:	ff 33                	pushl  (%ebx)
  28147e:	e8 3e fa ff ff       	call   280ec1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281483:	83 c4 38             	add    $0x38,%esp
  281486:	ff 75 e4             	pushl  -0x1c(%ebp)
  281489:	ff 75 e8             	pushl  -0x18(%ebp)
  28148c:	8b 45 10             	mov    0x10(%ebp),%eax
  28148f:	83 e8 01             	sub    $0x1,%eax
  281492:	50                   	push   %eax
  281493:	56                   	push   %esi
  281494:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  281498:	50                   	push   %eax
  281499:	ff 73 04             	pushl  0x4(%ebx)
  28149c:	ff 33                	pushl  (%ebx)
  28149e:	e8 1e fa ff ff       	call   280ec1 <boxfill8>
    return;
  2814a3:	83 c4 1c             	add    $0x1c,%esp
}
  2814a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2814a9:	5b                   	pop    %ebx
  2814aa:	5e                   	pop    %esi
  2814ab:	5f                   	pop    %edi
  2814ac:	5d                   	pop    %ebp
  2814ad:	c3                   	ret    

002814ae <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  2814ae:	55                   	push   %ebp
  2814af:	89 e5                	mov    %esp,%ebp
  2814b1:	57                   	push   %edi
  2814b2:	56                   	push   %esi
  2814b3:	53                   	push   %ebx
  2814b4:	83 ec 10             	sub    $0x10,%esp
  2814b7:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  2814ba:	8b 7d 14             	mov    0x14(%ebp),%edi
  2814bd:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  2814c0:	8b 45 18             	mov    0x18(%ebp),%eax
  2814c3:	2b 45 10             	sub    0x10(%ebp),%eax
  2814c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  2814c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2814cc:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  2814cf:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2814d2:	c1 e3 0a             	shl    $0xa,%ebx
  2814d5:	89 fa                	mov    %edi,%edx
  2814d7:	c1 fa 1f             	sar    $0x1f,%edx
  2814da:	89 d0                	mov    %edx,%eax
  2814dc:	31 fa                	xor    %edi,%edx
  2814de:	29 c2                	sub    %eax,%edx
  2814e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2814e3:	c1 f8 1f             	sar    $0x1f,%eax
  2814e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2814e9:	33 45 f0             	xor    -0x10(%ebp),%eax
  2814ec:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  2814ef:	39 c2                	cmp    %eax,%edx
  2814f1:	7c 4a                	jl     28153d <drawline8_sht+0x8f>
	{
		len=dx+1;
  2814f3:	83 c2 01             	add    $0x1,%edx
  2814f6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  2814f9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2814fc:	39 7d 14             	cmp    %edi,0x14(%ebp)
  2814ff:	b8 00 04 00 00       	mov    $0x400,%eax
  281504:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281509:	89 c7                	mov    %eax,%edi
  28150b:	0f 4c fa             	cmovl  %edx,%edi
  28150e:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  281511:	8b 7d 10             	mov    0x10(%ebp),%edi
  281514:	39 7d 18             	cmp    %edi,0x18(%ebp)
  281517:	7c 12                	jl     28152b <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  281519:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28151c:	83 c0 01             	add    $0x1,%eax
  28151f:	c1 e0 0a             	shl    $0xa,%eax
  281522:	99                   	cltd   
  281523:	f7 7d ec             	idivl  -0x14(%ebp)
  281526:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  281529:	eb 52                	jmp    28157d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  28152b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28152e:	83 e8 01             	sub    $0x1,%eax
  281531:	c1 e0 0a             	shl    $0xa,%eax
  281534:	99                   	cltd   
  281535:	f7 7d ec             	idivl  -0x14(%ebp)
  281538:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28153b:	eb 40                	jmp    28157d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  28153d:	83 c0 01             	add    $0x1,%eax
  281540:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  281543:	8b 55 10             	mov    0x10(%ebp),%edx
  281546:	39 55 18             	cmp    %edx,0x18(%ebp)
  281549:	b8 00 04 00 00       	mov    $0x400,%eax
  28154e:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281553:	0f 4c c2             	cmovl  %edx,%eax
  281556:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  281559:	8b 55 0c             	mov    0xc(%ebp),%edx
  28155c:	39 55 14             	cmp    %edx,0x14(%ebp)
  28155f:	7c 0f                	jl     281570 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281561:	8d 47 01             	lea    0x1(%edi),%eax
  281564:	c1 e0 0a             	shl    $0xa,%eax
  281567:	99                   	cltd   
  281568:	f7 7d ec             	idivl  -0x14(%ebp)
  28156b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28156e:	eb 0d                	jmp    28157d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281570:	8d 47 ff             	lea    -0x1(%edi),%eax
  281573:	c1 e0 0a             	shl    $0xa,%eax
  281576:	99                   	cltd   
  281577:	f7 7d ec             	idivl  -0x14(%ebp)
  28157a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28157d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  281581:	7e 31                	jle    2815b4 <drawline8_sht+0x106>
  281583:	ba 00 00 00 00       	mov    $0x0,%edx
  281588:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  28158b:	89 d8                	mov    %ebx,%eax
  28158d:	c1 f8 0a             	sar    $0xa,%eax
  281590:	0f af 46 04          	imul   0x4(%esi),%eax
  281594:	89 cf                	mov    %ecx,%edi
  281596:	c1 ff 0a             	sar    $0xa,%edi
  281599:	03 06                	add    (%esi),%eax
  28159b:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  28159f:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  2815a2:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  2815a5:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  2815a8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  2815ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2815af:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  2815b2:	75 d7                	jne    28158b <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  2815b4:	83 c4 10             	add    $0x10,%esp
  2815b7:	5b                   	pop    %ebx
  2815b8:	5e                   	pop    %esi
  2815b9:	5f                   	pop    %edi
  2815ba:	5d                   	pop    %ebp
  2815bb:	c3                   	ret    

002815bc <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  2815bc:	55                   	push   %ebp
  2815bd:	89 e5                	mov    %esp,%ebp
  2815bf:	57                   	push   %edi
  2815c0:	56                   	push   %esi
  2815c1:	53                   	push   %ebx
  2815c2:	83 ec 08             	sub    $0x8,%esp
  2815c5:	8b 45 0c             	mov    0xc(%ebp),%eax
  2815c8:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  2815cb:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  2815cf:	89 fb                	mov    %edi,%ebx
  2815d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2815d4:	0f af 45 14          	imul   0x14(%ebp),%eax
  2815d8:	03 45 10             	add    0x10(%ebp),%eax
  2815db:	89 c1                	mov    %eax,%ecx
  2815dd:	03 4d 08             	add    0x8(%ebp),%ecx
  2815e0:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  2815e3:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  2815e6:	b8 07 00 00 00       	mov    $0x7,%eax
  2815eb:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2815ee:	89 f1                	mov    %esi,%ecx
  2815f0:	89 de                	mov    %ebx,%esi
  2815f2:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2815f4:	f6 c2 01             	test   $0x1,%dl
  2815f7:	74 06                	je     2815ff <putfont8+0x43>
  2815f9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2815fc:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2815ff:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  281601:	83 e8 01             	sub    $0x1,%eax
  281604:	83 f8 ff             	cmp    $0xffffffff,%eax
  281607:	75 eb                	jne    2815f4 <putfont8+0x38>
  281609:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  28160c:	89 d8                	mov    %ebx,%eax
  28160e:	89 f3                	mov    %esi,%ebx
  281610:	89 c6                	mov    %eax,%esi
  281612:	83 c3 01             	add    $0x1,%ebx
  281615:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  281618:	39 fb                	cmp    %edi,%ebx
  28161a:	75 c7                	jne    2815e3 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  28161c:	83 c4 08             	add    $0x8,%esp
  28161f:	5b                   	pop    %ebx
  281620:	5e                   	pop    %esi
  281621:	5f                   	pop    %edi
  281622:	5d                   	pop    %ebp
  281623:	c3                   	ret    

00281624 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  281624:	55                   	push   %ebp
  281625:	89 e5                	mov    %esp,%ebp
  281627:	57                   	push   %edi
  281628:	56                   	push   %esi
  281629:	53                   	push   %ebx
  28162a:	8b 75 10             	mov    0x10(%ebp),%esi
  28162d:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  281630:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281634:	0f b6 03             	movzbl (%ebx),%eax
  281637:	84 c0                	test   %al,%al
  281639:	74 2f                	je     28166a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  28163b:	0f be fa             	movsbl %dl,%edi
  28163e:	0f b6 c0             	movzbl %al,%eax
  281641:	c1 e0 04             	shl    $0x4,%eax
  281644:	05 a0 5c 28 00       	add    $0x285ca0,%eax
  281649:	50                   	push   %eax
  28164a:	57                   	push   %edi
  28164b:	ff 75 14             	pushl  0x14(%ebp)
  28164e:	56                   	push   %esi
  28164f:	ff 75 0c             	pushl  0xc(%ebp)
  281652:	ff 75 08             	pushl  0x8(%ebp)
  281655:	e8 62 ff ff ff       	call   2815bc <putfont8>
		x+=HKK_TABLE_COL;
  28165a:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  28165d:	83 c3 01             	add    $0x1,%ebx
  281660:	0f b6 03             	movzbl (%ebx),%eax
  281663:	83 c4 18             	add    $0x18,%esp
  281666:	84 c0                	test   %al,%al
  281668:	75 d4                	jne    28163e <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28166a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28166d:	5b                   	pop    %ebx
  28166e:	5e                   	pop    %esi
  28166f:	5f                   	pop    %edi
  281670:	5d                   	pop    %ebp
  281671:	c3                   	ret    

00281672 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281672:	55                   	push   %ebp
  281673:	89 e5                	mov    %esp,%ebp
  281675:	57                   	push   %edi
  281676:	56                   	push   %esi
  281677:	53                   	push   %ebx
  281678:	8b 55 08             	mov    0x8(%ebp),%edx
  28167b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28167e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281681:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281684:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28168a:	76 09                	jbe    281695 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  28168c:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281692:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  281695:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  281698:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  28169c:	89 ce                	mov    %ecx,%esi
  28169e:	c1 fe 10             	sar    $0x10,%esi
  2816a1:	89 f0                	mov    %esi,%eax
  2816a3:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  2816a6:	89 f8                	mov    %edi,%eax
  2816a8:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  2816ab:	c1 eb 10             	shr    $0x10,%ebx
  2816ae:	83 e3 0f             	and    $0xf,%ebx
  2816b1:	89 f8                	mov    %edi,%eax
  2816b3:	c1 f8 08             	sar    $0x8,%eax
  2816b6:	83 e0 f0             	and    $0xfffffff0,%eax
  2816b9:	09 d8                	or     %ebx,%eax
  2816bb:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  2816be:	c1 e9 18             	shr    $0x18,%ecx
  2816c1:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  2816c4:	5b                   	pop    %ebx
  2816c5:	5e                   	pop    %esi
  2816c6:	5f                   	pop    %edi
  2816c7:	5d                   	pop    %ebp
  2816c8:	c3                   	ret    

002816c9 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  2816c9:	55                   	push   %ebp
  2816ca:	89 e5                	mov    %esp,%ebp
  2816cc:	53                   	push   %ebx
  2816cd:	8b 45 08             	mov    0x8(%ebp),%eax
  2816d0:	8b 55 0c             	mov    0xc(%ebp),%edx
  2816d3:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  2816d6:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  2816d9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2816dc:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2816e0:	89 cb                	mov    %ecx,%ebx
  2816e2:	c1 fb 08             	sar    $0x8,%ebx
  2816e5:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  2816e8:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2816eb:	c1 ea 10             	shr    $0x10,%edx
  2816ee:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2816f2:	5b                   	pop    %ebx
  2816f3:	5d                   	pop    %ebp
  2816f4:	c3                   	ret    

002816f5 <init_gdtidt>:

void init_gdtidt(void)
{
  2816f5:	55                   	push   %ebp
  2816f6:	89 e5                	mov    %esp,%ebp
  2816f8:	53                   	push   %ebx
  2816f9:	83 ec 04             	sub    $0x4,%esp
  2816fc:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  281701:	6a 00                	push   $0x0
  281703:	6a 00                	push   $0x0
  281705:	6a 00                	push   $0x0
  281707:	53                   	push   %ebx
  281708:	e8 65 ff ff ff       	call   281672 <set_segmdesc>
  28170d:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  281710:	83 c4 10             	add    $0x10,%esp
  281713:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  281719:	75 e6                	jne    281701 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  28171b:	68 92 40 00 00       	push   $0x4092
  281720:	6a 00                	push   $0x0
  281722:	6a ff                	push   $0xffffffff
  281724:	68 08 00 27 00       	push   $0x270008
  281729:	e8 44 ff ff ff       	call   281672 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  28172e:	68 9a 40 00 00       	push   $0x409a
  281733:	6a 00                	push   $0x0
  281735:	68 ff ff 0f 00       	push   $0xfffff
  28173a:	68 10 00 27 00       	push   $0x270010
  28173f:	e8 2e ff ff ff       	call   281672 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281744:	83 c4 20             	add    $0x20,%esp
  281747:	68 9a 40 00 00       	push   $0x409a
  28174c:	68 00 00 28 00       	push   $0x280000
  281751:	68 ff ff 07 00       	push   $0x7ffff
  281756:	68 18 00 27 00       	push   $0x270018
  28175b:	e8 12 ff ff ff       	call   281672 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281760:	83 c4 08             	add    $0x8,%esp
  281763:	68 00 00 27 00       	push   $0x270000
  281768:	68 ff ff 00 00       	push   $0xffff
  28176d:	e8 bd f5 ff ff       	call   280d2f <load_gdtr>
  281772:	83 c4 10             	add    $0x10,%esp
  281775:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28177a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28177f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281785:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  281789:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28178d:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281793:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  281796:	3d 00 00 27 00       	cmp    $0x270000,%eax
  28179b:	75 dd                	jne    28177a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  28179d:	b8 3e 1a 00 00       	mov    $0x1a3e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2817a2:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  2817a8:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  2817af:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2817b1:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  2817b8:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  2817bf:	c1 e8 10             	shr    $0x10,%eax
  2817c2:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  2817c8:	b8 10 1a 00 00       	mov    $0x1a10,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2817cd:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  2817d3:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  2817da:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2817dc:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  2817e3:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  2817ea:	c1 e8 10             	shr    $0x10,%eax
  2817ed:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2817f3:	b8 27 1a 00 00       	mov    $0x1a27,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2817f8:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2817fe:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  281805:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281807:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  28180e:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  281815:	c1 e8 10             	shr    $0x10,%eax
  281818:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  28181e:	b8 55 1a 00 00       	mov    $0x1a55,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281823:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  281829:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  281830:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281832:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  281839:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281840:	c1 e8 10             	shr    $0x10,%eax
  281843:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  281849:	b8 76 1a 00 00       	mov    $0x1a76,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28184e:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281854:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  28185b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28185d:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281864:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28186b:	c1 e8 10             	shr    $0x10,%eax
  28186e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281874:	b8 96 1a 00 00       	mov    $0x1a96,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281879:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28187f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  281886:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281888:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  28188f:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  281896:	c1 e8 10             	shr    $0x10,%eax
  281899:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  28189f:	83 ec 08             	sub    $0x8,%esp
  2818a2:	68 00 f8 26 00       	push   $0x26f800
  2818a7:	68 ff 07 00 00       	push   $0x7ff
  2818ac:	e8 8e f4 ff ff       	call   280d3f <load_idtr>

	return;
  2818b1:	83 c4 10             	add    $0x10,%esp
}
  2818b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2818b7:	c9                   	leave  
  2818b8:	c3                   	ret    

002818b9 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  2818b9:	55                   	push   %ebp
  2818ba:	89 e5                	mov    %esp,%ebp
  2818bc:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  2818bf:	68 ff 00 00 00       	push   $0xff
  2818c4:	6a 21                	push   $0x21
  2818c6:	e8 3b f4 ff ff       	call   280d06 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  2818cb:	83 c4 08             	add    $0x8,%esp
  2818ce:	68 ff 00 00 00       	push   $0xff
  2818d3:	68 a1 00 00 00       	push   $0xa1
  2818d8:	e8 29 f4 ff ff       	call   280d06 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  2818dd:	83 c4 08             	add    $0x8,%esp
  2818e0:	6a 11                	push   $0x11
  2818e2:	6a 20                	push   $0x20
  2818e4:	e8 1d f4 ff ff       	call   280d06 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  2818e9:	83 c4 08             	add    $0x8,%esp
  2818ec:	6a 20                	push   $0x20
  2818ee:	6a 21                	push   $0x21
  2818f0:	e8 11 f4 ff ff       	call   280d06 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  2818f5:	83 c4 08             	add    $0x8,%esp
  2818f8:	6a 04                	push   $0x4
  2818fa:	6a 21                	push   $0x21
  2818fc:	e8 05 f4 ff ff       	call   280d06 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  281901:	83 c4 08             	add    $0x8,%esp
  281904:	6a 01                	push   $0x1
  281906:	6a 21                	push   $0x21
  281908:	e8 f9 f3 ff ff       	call   280d06 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  28190d:	83 c4 08             	add    $0x8,%esp
  281910:	6a 11                	push   $0x11
  281912:	68 a0 00 00 00       	push   $0xa0
  281917:	e8 ea f3 ff ff       	call   280d06 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  28191c:	83 c4 08             	add    $0x8,%esp
  28191f:	6a 28                	push   $0x28
  281921:	68 a1 00 00 00       	push   $0xa1
  281926:	e8 db f3 ff ff       	call   280d06 <io_out8>
	io_out8(PIC1_ICW3, 2);
  28192b:	83 c4 08             	add    $0x8,%esp
  28192e:	6a 02                	push   $0x2
  281930:	68 a1 00 00 00       	push   $0xa1
  281935:	e8 cc f3 ff ff       	call   280d06 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  28193a:	83 c4 08             	add    $0x8,%esp
  28193d:	6a 01                	push   $0x1
  28193f:	68 a1 00 00 00       	push   $0xa1
  281944:	e8 bd f3 ff ff       	call   280d06 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  281949:	83 c4 08             	add    $0x8,%esp
  28194c:	68 fb 00 00 00       	push   $0xfb
  281951:	6a 21                	push   $0x21
  281953:	e8 ae f3 ff ff       	call   280d06 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  281958:	83 c4 08             	add    $0x8,%esp
  28195b:	68 ff 00 00 00       	push   $0xff
  281960:	68 a1 00 00 00       	push   $0xa1
  281965:	e8 9c f3 ff ff       	call   280d06 <io_out8>
}
  28196a:	83 c4 10             	add    $0x10,%esp
  28196d:	c9                   	leave  
  28196e:	c3                   	ret    

0028196f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28196f:	55                   	push   %ebp
  281970:	89 e5                	mov    %esp,%ebp
  281972:	57                   	push   %edi
  281973:	56                   	push   %esi
  281974:	53                   	push   %ebx
  281975:	83 ec 2c             	sub    $0x2c,%esp
	struct CONSOLE *cons = (struct CONSOLE *)*((int *)0x0fec);
  281978:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	struct TASK *task = task_now();
  28197e:	e8 df 15 00 00       	call   282f62 <task_now>
  281983:	89 c3                	mov    %eax,%ebx
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  281985:	83 ec 08             	sub    $0x8,%esp
  281988:	68 60 4c 28 00       	push   $0x284c60
  28198d:	56                   	push   %esi
  28198e:	e8 f7 22 00 00       	call   283c8a <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281993:	83 c4 0c             	add    $0xc,%esp
  281996:	8b 45 08             	mov    0x8(%ebp),%eax
  281999:	ff 70 2c             	pushl  0x2c(%eax)
  28199c:	68 88 4c 28 00       	push   $0x284c88
  2819a1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2819a4:	57                   	push   %edi
  2819a5:	e8 33 02 00 00       	call   281bdd <sprintf>
	cons_putstr0(cons,s);
  2819aa:	83 c4 08             	add    $0x8,%esp
  2819ad:	57                   	push   %edi
  2819ae:	56                   	push   %esi
  2819af:	e8 d6 22 00 00       	call   283c8a <cons_putstr0>
	return &(task->tss.esp0);
  2819b4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2819b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2819ba:	5b                   	pop    %ebx
  2819bb:	5e                   	pop    %esi
  2819bc:	5f                   	pop    %edi
  2819bd:	5d                   	pop    %ebp
  2819be:	c3                   	ret    

002819bf <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  2819bf:	55                   	push   %ebp
  2819c0:	89 e5                	mov    %esp,%ebp
  2819c2:	57                   	push   %edi
  2819c3:	56                   	push   %esi
  2819c4:	53                   	push   %ebx
  2819c5:	83 ec 2c             	sub    $0x2c,%esp
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
  2819c8:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	struct TASK *task = task_now();
  2819ce:	e8 8f 15 00 00       	call   282f62 <task_now>
  2819d3:	89 c3                	mov    %eax,%ebx
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  2819d5:	83 ec 08             	sub    $0x8,%esp
  2819d8:	68 90 4c 28 00       	push   $0x284c90
  2819dd:	56                   	push   %esi
  2819de:	e8 a7 22 00 00       	call   283c8a <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2819e3:	83 c4 0c             	add    $0xc,%esp
  2819e6:	8b 45 08             	mov    0x8(%ebp),%eax
  2819e9:	ff 70 2c             	pushl  0x2c(%eax)
  2819ec:	68 88 4c 28 00       	push   $0x284c88
  2819f1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2819f4:	57                   	push   %edi
  2819f5:	e8 e3 01 00 00       	call   281bdd <sprintf>
	cons_putstr0(cons,s);
  2819fa:	83 c4 08             	add    $0x8,%esp
  2819fd:	57                   	push   %edi
  2819fe:	56                   	push   %esi
  2819ff:	e8 86 22 00 00       	call   283c8a <cons_putstr0>
	return &(task->tss.esp0);
  281a04:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281a07:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281a0a:	5b                   	pop    %ebx
  281a0b:	5e                   	pop    %esi
  281a0c:	5f                   	pop    %edi
  281a0d:	5d                   	pop    %ebp
  281a0e:	c3                   	ret    
  281a0f:	90                   	nop

00281a10 <asm_inthandler21>:
  281a10:	06                   	push   %es
  281a11:	1e                   	push   %ds
  281a12:	60                   	pusha  
  281a13:	89 e0                	mov    %esp,%eax
  281a15:	50                   	push   %eax
  281a16:	66 8c d0             	mov    %ss,%ax
  281a19:	8e d8                	mov    %eax,%ds
  281a1b:	8e c0                	mov    %eax,%es
  281a1d:	e8 ed 05 00 00       	call   28200f <inthandler21>
  281a22:	58                   	pop    %eax
  281a23:	61                   	popa   
  281a24:	1f                   	pop    %ds
  281a25:	07                   	pop    %es
  281a26:	cf                   	iret   

00281a27 <asm_inthandler2c>:
  281a27:	06                   	push   %es
  281a28:	1e                   	push   %ds
  281a29:	60                   	pusha  
  281a2a:	89 e0                	mov    %esp,%eax
  281a2c:	50                   	push   %eax
  281a2d:	66 8c d0             	mov    %ss,%ax
  281a30:	8e d8                	mov    %eax,%ds
  281a32:	8e c0                	mov    %eax,%es
  281a34:	e8 3c 05 00 00       	call   281f75 <inthandler2c>
  281a39:	58                   	pop    %eax
  281a3a:	61                   	popa   
  281a3b:	1f                   	pop    %ds
  281a3c:	07                   	pop    %es
  281a3d:	cf                   	iret   

00281a3e <asm_inthandler20>:
  281a3e:	06                   	push   %es
  281a3f:	1e                   	push   %ds
  281a40:	60                   	pusha  
  281a41:	89 e0                	mov    %esp,%eax
  281a43:	50                   	push   %eax
  281a44:	66 8c d0             	mov    %ss,%ax
  281a47:	8e d8                	mov    %eax,%ds
  281a49:	8e c0                	mov    %eax,%es
  281a4b:	e8 79 12 00 00       	call   282cc9 <inthandler20>
  281a50:	58                   	pop    %eax
  281a51:	61                   	popa   
  281a52:	1f                   	pop    %ds
  281a53:	07                   	pop    %es
  281a54:	cf                   	iret   

00281a55 <asm_sys_api>:
  281a55:	fb                   	sti    
  281a56:	1e                   	push   %ds
  281a57:	06                   	push   %es
  281a58:	60                   	pusha  
  281a59:	60                   	pusha  
  281a5a:	66 8c d0             	mov    %ss,%ax
  281a5d:	8e d8                	mov    %eax,%ds
  281a5f:	8e c0                	mov    %eax,%es
  281a61:	e8 38 26 00 00       	call   28409e <sys_api>
  281a66:	83 f8 00             	cmp    $0x0,%eax
  281a69:	75 07                	jne    281a72 <end_app>
  281a6b:	83 c4 20             	add    $0x20,%esp
  281a6e:	61                   	popa   
  281a6f:	07                   	pop    %es
  281a70:	1f                   	pop    %ds
  281a71:	cf                   	iret   

00281a72 <end_app>:
  281a72:	8b 20                	mov    (%eax),%esp
  281a74:	61                   	popa   
  281a75:	c3                   	ret    

00281a76 <asm_inthandler0d>:
  281a76:	fb                   	sti    
  281a77:	06                   	push   %es
  281a78:	1e                   	push   %ds
  281a79:	60                   	pusha  
  281a7a:	89 e0                	mov    %esp,%eax
  281a7c:	50                   	push   %eax
  281a7d:	66 8c d0             	mov    %ss,%ax
  281a80:	8e d8                	mov    %eax,%ds
  281a82:	8e c0                	mov    %eax,%es
  281a84:	e8 e6 fe ff ff       	call   28196f <inthandler0d>
  281a89:	83 f8 00             	cmp    $0x0,%eax
  281a8c:	75 e4                	jne    281a72 <end_app>
  281a8e:	58                   	pop    %eax
  281a8f:	61                   	popa   
  281a90:	1f                   	pop    %ds
  281a91:	07                   	pop    %es
  281a92:	83 c4 04             	add    $0x4,%esp
  281a95:	cf                   	iret   

00281a96 <asm_inthandler0c>:
  281a96:	fb                   	sti    
  281a97:	06                   	push   %es
  281a98:	1e                   	push   %ds
  281a99:	60                   	pusha  
  281a9a:	89 e0                	mov    %esp,%eax
  281a9c:	50                   	push   %eax
  281a9d:	66 8c d0             	mov    %ss,%ax
  281aa0:	8e d8                	mov    %eax,%ds
  281aa2:	8e c0                	mov    %eax,%es
  281aa4:	e8 16 ff ff ff       	call   2819bf <inthandler0c>
  281aa9:	83 f8 00             	cmp    $0x0,%eax
  281aac:	75 c4                	jne    281a72 <end_app>
  281aae:	58                   	pop    %eax
  281aaf:	61                   	popa   
  281ab0:	1f                   	pop    %ds
  281ab1:	07                   	pop    %es
  281ab2:	83 c4 04             	add    $0x4,%esp
  281ab5:	cf                   	iret   

00281ab6 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  281ab6:	55                   	push   %ebp
  281ab7:	89 e5                	mov    %esp,%ebp
  281ab9:	57                   	push   %edi
  281aba:	56                   	push   %esi
  281abb:	53                   	push   %ebx
  281abc:	83 ec 10             	sub    $0x10,%esp
  281abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281ac2:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  281ac5:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  281acc:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  281ad3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  281ad9:	85 c9                	test   %ecx,%ecx
  281adb:	79 08                	jns    281ae5 <itoa+0x2f>
		*buf++ = '-';
  281add:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  281ae0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  281ae2:	8d 7f 01             	lea    0x1(%edi),%edi
  281ae5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  281ae8:	be 67 66 66 66       	mov    $0x66666667,%esi
  281aed:	83 c3 01             	add    $0x1,%ebx
  281af0:	89 c8                	mov    %ecx,%eax
  281af2:	f7 ee                	imul   %esi
  281af4:	c1 fa 02             	sar    $0x2,%edx
  281af7:	89 c8                	mov    %ecx,%eax
  281af9:	c1 f8 1f             	sar    $0x1f,%eax
  281afc:	29 c2                	sub    %eax,%edx
  281afe:	8d 04 92             	lea    (%edx,%edx,4),%eax
  281b01:	01 c0                	add    %eax,%eax
  281b03:	29 c1                	sub    %eax,%ecx
  281b05:	83 c1 30             	add    $0x30,%ecx
  281b08:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  281b0b:	89 d1                	mov    %edx,%ecx
	}while(value);
  281b0d:	85 d2                	test   %edx,%edx
  281b0f:	75 dc                	jne    281aed <itoa+0x37>
	while(tmp_buf != tbp--)
  281b11:	8d 73 ff             	lea    -0x1(%ebx),%esi
  281b14:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281b17:	39 c3                	cmp    %eax,%ebx
  281b19:	74 20                	je     281b3b <itoa+0x85>
  281b1b:	89 f0                	mov    %esi,%eax
  281b1d:	89 fa                	mov    %edi,%edx
  281b1f:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  281b22:	83 c2 01             	add    $0x1,%edx
  281b25:	0f b6 08             	movzbl (%eax),%ecx
  281b28:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  281b2b:	83 e8 01             	sub    $0x1,%eax
  281b2e:	39 d8                	cmp    %ebx,%eax
  281b30:	75 f0                	jne    281b22 <itoa+0x6c>
  281b32:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281b35:	29 c6                	sub    %eax,%esi
  281b37:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  281b3b:	c6 07 00             	movb   $0x0,(%edi)
}
  281b3e:	83 c4 10             	add    $0x10,%esp
  281b41:	5b                   	pop    %ebx
  281b42:	5e                   	pop    %esi
  281b43:	5f                   	pop    %edi
  281b44:	5d                   	pop    %ebp
  281b45:	c3                   	ret    

00281b46 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281b46:	55                   	push   %ebp
  281b47:	89 e5                	mov    %esp,%ebp
  281b49:	57                   	push   %edi
  281b4a:	56                   	push   %esi
  281b4b:	53                   	push   %ebx
  281b4c:	83 ec 20             	sub    $0x20,%esp
  281b4f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281b52:	bb 00 00 00 00       	mov    $0x0,%ebx
  281b57:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  281b5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281b65:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  281b6a:	ba 00 00 00 00       	mov    $0x0,%edx
  281b6f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281b73:	83 c2 04             	add    $0x4,%edx
  281b76:	39 ca                	cmp    %ecx,%edx
  281b78:	72 f5                	jb     281b6f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  281b7a:	8b 75 0c             	mov    0xc(%ebp),%esi
  281b7d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281b80:	83 c6 02             	add    $0x2,%esi
  281b83:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281b86:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  281b8a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281b8d:	83 c3 01             	add    $0x1,%ebx
  281b90:	89 c1                	mov    %eax,%ecx
  281b92:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281b95:	8d 79 37             	lea    0x37(%ecx),%edi
  281b98:	8d 51 30             	lea    0x30(%ecx),%edx
  281b9b:	83 f9 0a             	cmp    $0xa,%ecx
  281b9e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281ba1:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  281ba4:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  281ba7:	85 c0                	test   %eax,%eax
  281ba9:	75 e2                	jne    281b8d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  281bab:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  281bae:	39 c3                	cmp    %eax,%ebx
  281bb0:	74 20                	je     281bd2 <xtoa+0x8c>
  281bb2:	89 d8                	mov    %ebx,%eax
  281bb4:	89 f1                	mov    %esi,%ecx
  281bb6:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  281bb9:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  281bbc:	83 c1 01             	add    $0x1,%ecx
  281bbf:	0f b6 10             	movzbl (%eax),%edx
  281bc2:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  281bc5:	39 f8                	cmp    %edi,%eax
  281bc7:	75 f0                	jne    281bb9 <xtoa+0x73>
  281bc9:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281bcc:	29 c3                	sub    %eax,%ebx
  281bce:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  281bd2:	c6 06 00             	movb   $0x0,(%esi)
}
  281bd5:	83 c4 20             	add    $0x20,%esp
  281bd8:	5b                   	pop    %ebx
  281bd9:	5e                   	pop    %esi
  281bda:	5f                   	pop    %edi
  281bdb:	5d                   	pop    %ebp
  281bdc:	c3                   	ret    

00281bdd <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  281bdd:	55                   	push   %ebp
  281bde:	89 e5                	mov    %esp,%ebp
  281be0:	57                   	push   %edi
  281be1:	56                   	push   %esi
  281be2:	53                   	push   %ebx
  281be3:	83 ec 10             	sub    $0x10,%esp
  281be6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  281be9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281bec:	e9 a8 00 00 00       	jmp    281c99 <sprintf+0xbc>
		if(*format!='%'){
  281bf1:	3c 25                	cmp    $0x25,%al
  281bf3:	74 10                	je     281c05 <sprintf+0x28>
			*str++=*format++;
  281bf5:	83 c6 01             	add    $0x1,%esi
  281bf8:	89 75 0c             	mov    %esi,0xc(%ebp)
  281bfb:	88 03                	mov    %al,(%ebx)
  281bfd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  281c00:	e9 94 00 00 00       	jmp    281c99 <sprintf+0xbc>
		}
		else{
			format++;
  281c05:	8d 46 01             	lea    0x1(%esi),%eax
  281c08:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  281c0b:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  281c0f:	3c 73                	cmp    $0x73,%al
  281c11:	74 5e                	je     281c71 <sprintf+0x94>
  281c13:	3c 78                	cmp    $0x78,%al
  281c15:	74 2f                	je     281c46 <sprintf+0x69>
  281c17:	3c 64                	cmp    $0x64,%al
  281c19:	75 75                	jne    281c90 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281c1b:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281c1e:	50                   	push   %eax
  281c1f:	ff 37                	pushl  (%edi)
  281c21:	e8 90 fe ff ff       	call   281ab6 <itoa>
  281c26:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281c2a:	83 c4 08             	add    $0x8,%esp
  281c2d:	84 c0                	test   %al,%al
  281c2f:	74 5f                	je     281c90 <sprintf+0xb3>
  281c31:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281c34:	83 c3 01             	add    $0x1,%ebx
  281c37:	83 c2 01             	add    $0x1,%edx
  281c3a:	88 43 ff             	mov    %al,-0x1(%ebx)
  281c3d:	0f b6 02             	movzbl (%edx),%eax
  281c40:	84 c0                	test   %al,%al
  281c42:	75 f0                	jne    281c34 <sprintf+0x57>
  281c44:	eb 4a                	jmp    281c90 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281c46:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281c49:	50                   	push   %eax
  281c4a:	ff 37                	pushl  (%edi)
  281c4c:	e8 f5 fe ff ff       	call   281b46 <xtoa>
  281c51:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281c55:	83 c4 08             	add    $0x8,%esp
  281c58:	84 c0                	test   %al,%al
  281c5a:	74 34                	je     281c90 <sprintf+0xb3>
  281c5c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281c5f:	83 c3 01             	add    $0x1,%ebx
  281c62:	83 c2 01             	add    $0x1,%edx
  281c65:	88 43 ff             	mov    %al,-0x1(%ebx)
  281c68:	0f b6 02             	movzbl (%edx),%eax
  281c6b:	84 c0                	test   %al,%al
  281c6d:	75 f0                	jne    281c5f <sprintf+0x82>
  281c6f:	eb 1f                	jmp    281c90 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281c71:	8b 0f                	mov    (%edi),%ecx
  281c73:	0f b6 11             	movzbl (%ecx),%edx
  281c76:	84 d2                	test   %dl,%dl
  281c78:	74 16                	je     281c90 <sprintf+0xb3>
  281c7a:	89 d8                	mov    %ebx,%eax
  281c7c:	83 c0 01             	add    $0x1,%eax
  281c7f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281c82:	89 c2                	mov    %eax,%edx
  281c84:	29 da                	sub    %ebx,%edx
  281c86:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  281c8a:	84 d2                	test   %dl,%dl
  281c8c:	75 ee                	jne    281c7c <sprintf+0x9f>
  281c8e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281c90:	83 c7 04             	add    $0x4,%edi
			format++;
  281c93:	83 c6 02             	add    $0x2,%esi
  281c96:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281c99:	8b 75 0c             	mov    0xc(%ebp),%esi
  281c9c:	0f b6 06             	movzbl (%esi),%eax
  281c9f:	84 c0                	test   %al,%al
  281ca1:	0f 85 4a ff ff ff    	jne    281bf1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281ca7:	c6 03 00             	movb   $0x0,(%ebx)
}
  281caa:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281cad:	5b                   	pop    %ebx
  281cae:	5e                   	pop    %esi
  281caf:	5f                   	pop    %edi
  281cb0:	5d                   	pop    %ebp
  281cb1:	c3                   	ret    

00281cb2 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281cb2:	55                   	push   %ebp
  281cb3:	89 e5                	mov    %esp,%ebp
  281cb5:	57                   	push   %edi
  281cb6:	56                   	push   %esi
  281cb7:	53                   	push   %ebx
  281cb8:	8b 7d 08             	mov    0x8(%ebp),%edi
  281cbb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281cbe:	0f b6 17             	movzbl (%edi),%edx
  281cc1:	be 00 00 00 00       	mov    $0x0,%esi
  281cc6:	84 d2                	test   %dl,%dl
  281cc8:	74 40                	je     281d0a <strcmp+0x58>
  281cca:	eb 1d                	jmp    281ce9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  281ccc:	38 ca                	cmp    %cl,%dl
  281cce:	75 0f                	jne    281cdf <strcmp+0x2d>
  281cd0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281cd3:	89 c6                	mov    %eax,%esi
  281cd5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  281cd9:	84 d2                	test   %dl,%dl
  281cdb:	75 1e                	jne    281cfb <strcmp+0x49>
  281cdd:	eb 2b                	jmp    281d0a <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  281cdf:	0f be c2             	movsbl %dl,%eax
  281ce2:	0f be c9             	movsbl %cl,%ecx
  281ce5:	29 c8                	sub    %ecx,%eax
  281ce7:	eb 2a                	jmp    281d13 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281ce9:	0f b6 0b             	movzbl (%ebx),%ecx
  281cec:	84 c9                	test   %cl,%cl
  281cee:	74 15                	je     281d05 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281cf0:	b8 00 00 00 00       	mov    $0x0,%eax
  281cf5:	38 ca                	cmp    %cl,%dl
  281cf7:	74 d7                	je     281cd0 <strcmp+0x1e>
  281cf9:	eb e4                	jmp    281cdf <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281cfb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281cff:	84 c9                	test   %cl,%cl
  281d01:	75 c9                	jne    281ccc <strcmp+0x1a>
  281d03:	eb 05                	jmp    281d0a <strcmp+0x58>
  281d05:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281d0a:	0f be c2             	movsbl %dl,%eax
  281d0d:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281d11:	29 d0                	sub    %edx,%eax
}
  281d13:	5b                   	pop    %ebx
  281d14:	5e                   	pop    %esi
  281d15:	5f                   	pop    %edi
  281d16:	5d                   	pop    %ebp
  281d17:	c3                   	ret    

00281d18 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281d18:	55                   	push   %ebp
  281d19:	89 e5                	mov    %esp,%ebp
  281d1b:	57                   	push   %edi
  281d1c:	56                   	push   %esi
  281d1d:	53                   	push   %ebx
  281d1e:	8b 75 08             	mov    0x8(%ebp),%esi
  281d21:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281d24:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281d27:	b8 00 00 00 00       	mov    $0x0,%eax
  281d2c:	85 ff                	test   %edi,%edi
  281d2e:	74 63                	je     281d93 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281d30:	83 ef 01             	sub    $0x1,%edi
  281d33:	89 fa                	mov    %edi,%edx
  281d35:	74 52                	je     281d89 <strncmp+0x71>
  281d37:	eb 19                	jmp    281d52 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281d39:	38 c8                	cmp    %cl,%al
  281d3b:	75 0b                	jne    281d48 <strncmp+0x30>
  281d3d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281d40:	39 fa                	cmp    %edi,%edx
  281d42:	75 27                	jne    281d6b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281d44:	89 fa                	mov    %edi,%edx
  281d46:	eb 41                	jmp    281d89 <strncmp+0x71>
		else return c1-c2;
  281d48:	0f be c0             	movsbl %al,%eax
  281d4b:	0f be c9             	movsbl %cl,%ecx
  281d4e:	29 c8                	sub    %ecx,%eax
  281d50:	eb 41                	jmp    281d93 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281d52:	0f b6 06             	movzbl (%esi),%eax
  281d55:	84 c0                	test   %al,%al
  281d57:	74 24                	je     281d7d <strncmp+0x65>
  281d59:	0f b6 0b             	movzbl (%ebx),%ecx
  281d5c:	84 c9                	test   %cl,%cl
  281d5e:	74 24                	je     281d84 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281d60:	ba 00 00 00 00       	mov    $0x0,%edx
  281d65:	38 c8                	cmp    %cl,%al
  281d67:	74 d4                	je     281d3d <strncmp+0x25>
  281d69:	eb dd                	jmp    281d48 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281d6b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281d6f:	84 c0                	test   %al,%al
  281d71:	74 16                	je     281d89 <strncmp+0x71>
  281d73:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281d77:	84 c9                	test   %cl,%cl
  281d79:	75 be                	jne    281d39 <strncmp+0x21>
  281d7b:	eb 0c                	jmp    281d89 <strncmp+0x71>
  281d7d:	ba 00 00 00 00       	mov    $0x0,%edx
  281d82:	eb 05                	jmp    281d89 <strncmp+0x71>
  281d84:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281d89:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281d8d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281d91:	29 d0                	sub    %edx,%eax
}
  281d93:	5b                   	pop    %ebx
  281d94:	5e                   	pop    %esi
  281d95:	5f                   	pop    %edi
  281d96:	5d                   	pop    %ebp
  281d97:	c3                   	ret    

00281d98 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281d98:	55                   	push   %ebp
  281d99:	89 e5                	mov    %esp,%ebp
  281d9b:	8b 45 08             	mov    0x8(%ebp),%eax
  281d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281da1:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281da4:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281da7:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281da9:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281dac:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281db3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281dba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281dc1:	8b 55 14             	mov    0x14(%ebp),%edx
  281dc4:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281dc7:	5d                   	pop    %ebp
  281dc8:	c3                   	ret    

00281dc9 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281dc9:	55                   	push   %ebp
  281dca:	89 e5                	mov    %esp,%ebp
  281dcc:	53                   	push   %ebx
  281dcd:	83 ec 04             	sub    $0x4,%esp
  281dd0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281dd3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281dd7:	75 0b                	jne    281de4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281dd9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281ddd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281de2:	eb 52                	jmp    281e36 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281de4:	8b 48 04             	mov    0x4(%eax),%ecx
  281de7:	8b 10                	mov    (%eax),%edx
  281de9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281dec:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281def:	8b 48 04             	mov    0x4(%eax),%ecx
  281df2:	8d 51 01             	lea    0x1(%ecx),%edx
  281df5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281df8:	3b 50 0c             	cmp    0xc(%eax),%edx
  281dfb:	75 07                	jne    281e04 <fifo32_put+0x3b>
		fifo->p = 0;
  281dfd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281e04:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281e08:	8b 50 18             	mov    0x18(%eax),%edx
  281e0b:	85 d2                	test   %edx,%edx
  281e0d:	74 22                	je     281e31 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281e0f:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281e14:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281e18:	74 1c                	je     281e36 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281e1a:	83 ec 04             	sub    $0x4,%esp
  281e1d:	6a 00                	push   $0x0
  281e1f:	6a ff                	push   $0xffffffff
  281e21:	52                   	push   %edx
  281e22:	e8 30 12 00 00       	call   283057 <task_run>
  281e27:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281e2a:	b8 00 00 00 00       	mov    $0x0,%eax
  281e2f:	eb 05                	jmp    281e36 <fifo32_put+0x6d>
  281e31:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281e36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281e39:	c9                   	leave  
  281e3a:	c3                   	ret    

00281e3b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281e3b:	55                   	push   %ebp
  281e3c:	89 e5                	mov    %esp,%ebp
  281e3e:	56                   	push   %esi
  281e3f:	53                   	push   %ebx
  281e40:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281e43:	8b 59 10             	mov    0x10(%ecx),%ebx
  281e46:	8b 71 0c             	mov    0xc(%ecx),%esi
  281e49:	39 f3                	cmp    %esi,%ebx
  281e4b:	74 20                	je     281e6d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281e4d:	8b 51 08             	mov    0x8(%ecx),%edx
  281e50:	8b 01                	mov    (%ecx),%eax
  281e52:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281e55:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281e58:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281e5a:	be 00 00 00 00       	mov    $0x0,%esi
  281e5f:	0f 44 d6             	cmove  %esi,%edx
  281e62:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281e65:	83 c3 01             	add    $0x1,%ebx
  281e68:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281e6b:	eb 05                	jmp    281e72 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281e6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281e72:	5b                   	pop    %ebx
  281e73:	5e                   	pop    %esi
  281e74:	5d                   	pop    %ebp
  281e75:	c3                   	ret    

00281e76 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281e76:	55                   	push   %ebp
  281e77:	89 e5                	mov    %esp,%ebp
  281e79:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281e7c:	8b 42 0c             	mov    0xc(%edx),%eax
  281e7f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281e82:	5d                   	pop    %ebp
  281e83:	c3                   	ret    

00281e84 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281e84:	55                   	push   %ebp
  281e85:	89 e5                	mov    %esp,%ebp
  281e87:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281e8a:	8b 45 08             	mov    0x8(%ebp),%eax
  281e8d:	a3 84 76 28 00       	mov    %eax,0x287684
	mousedata0 = data0;
  281e92:	8b 45 0c             	mov    0xc(%ebp),%eax
  281e95:	a3 80 76 28 00       	mov    %eax,0x287680

	wait_KBC_sendready();
  281e9a:	e8 1a 01 00 00       	call   281fb9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281e9f:	83 ec 08             	sub    $0x8,%esp
  281ea2:	68 d4 00 00 00       	push   $0xd4
  281ea7:	6a 64                	push   $0x64
  281ea9:	e8 58 ee ff ff       	call   280d06 <io_out8>
	wait_KBC_sendready();
  281eae:	e8 06 01 00 00       	call   281fb9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281eb3:	83 c4 08             	add    $0x8,%esp
  281eb6:	68 f4 00 00 00       	push   $0xf4
  281ebb:	6a 60                	push   $0x60
  281ebd:	e8 44 ee ff ff       	call   280d06 <io_out8>
	mdec->phase = 0;
  281ec2:	8b 45 10             	mov    0x10(%ebp),%eax
  281ec5:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281ec9:	83 c4 10             	add    $0x10,%esp
}
  281ecc:	c9                   	leave  
  281ecd:	c3                   	ret    

00281ece <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281ece:	55                   	push   %ebp
  281ecf:	89 e5                	mov    %esp,%ebp
  281ed1:	56                   	push   %esi
  281ed2:	53                   	push   %ebx
  281ed3:	8b 55 08             	mov    0x8(%ebp),%edx
  281ed6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281ed9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281edd:	84 c0                	test   %al,%al
  281edf:	75 14                	jne    281ef5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281ee1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281ee6:	80 f9 fa             	cmp    $0xfa,%cl
  281ee9:	0f 85 82 00 00 00    	jne    281f71 <mouse_decode+0xa3>
			mdec->phase = 1;
  281eef:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281ef3:	eb 7c                	jmp    281f71 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281ef5:	3c 01                	cmp    $0x1,%al
  281ef7:	75 17                	jne    281f10 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281ef9:	89 cb                	mov    %ecx,%ebx
  281efb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281efe:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281f03:	80 fb 08             	cmp    $0x8,%bl
  281f06:	75 69                	jne    281f71 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281f08:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281f0a:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281f0e:	eb 61                	jmp    281f71 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281f10:	3c 02                	cmp    $0x2,%al
  281f12:	75 0e                	jne    281f22 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281f14:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281f17:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281f1b:	b8 00 00 00 00       	mov    $0x0,%eax
  281f20:	eb 4f                	jmp    281f71 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281f22:	3c 03                	cmp    $0x3,%al
  281f24:	75 46                	jne    281f6c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281f26:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281f29:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281f2d:	0f b6 02             	movzbl (%edx),%eax
  281f30:	89 c3                	mov    %eax,%ebx
  281f32:	83 e3 07             	and    $0x7,%ebx
  281f35:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281f38:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281f3c:	0f b6 f3             	movzbl %bl,%esi
  281f3f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281f42:	0f b6 f1             	movzbl %cl,%esi
  281f45:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281f48:	a8 10                	test   $0x10,%al
  281f4a:	74 09                	je     281f55 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281f4c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281f52:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281f55:	a8 20                	test   $0x20,%al
  281f57:	74 09                	je     281f62 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281f59:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281f5f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281f62:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281f65:	b8 01 00 00 00       	mov    $0x1,%eax
  281f6a:	eb 05                	jmp    281f71 <mouse_decode+0xa3>
	}
	return -1;
  281f6c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281f71:	5b                   	pop    %ebx
  281f72:	5e                   	pop    %esi
  281f73:	5d                   	pop    %ebp
  281f74:	c3                   	ret    

00281f75 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281f75:	55                   	push   %ebp
  281f76:	89 e5                	mov    %esp,%ebp
  281f78:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281f7b:	6a 64                	push   $0x64
  281f7d:	68 a0 00 00 00       	push   $0xa0
  281f82:	e8 7f ed ff ff       	call   280d06 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281f87:	83 c4 08             	add    $0x8,%esp
  281f8a:	6a 62                	push   $0x62
  281f8c:	6a 20                	push   $0x20
  281f8e:	e8 73 ed ff ff       	call   280d06 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281f93:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281f9a:	e8 45 ed ff ff       	call   280ce4 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281f9f:	83 c4 08             	add    $0x8,%esp
  281fa2:	03 05 80 76 28 00    	add    0x287680,%eax
  281fa8:	50                   	push   %eax
  281fa9:	ff 35 84 76 28 00    	pushl  0x287684
  281faf:	e8 15 fe ff ff       	call   281dc9 <fifo32_put>
	return;
  281fb4:	83 c4 10             	add    $0x10,%esp
}
  281fb7:	c9                   	leave  
  281fb8:	c3                   	ret    

00281fb9 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281fb9:	55                   	push   %ebp
  281fba:	89 e5                	mov    %esp,%ebp
  281fbc:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281fbf:	83 ec 0c             	sub    $0xc,%esp
  281fc2:	6a 64                	push   $0x64
  281fc4:	e8 1b ed ff ff       	call   280ce4 <io_in8>
  281fc9:	83 c4 10             	add    $0x10,%esp
  281fcc:	a8 02                	test   $0x2,%al
  281fce:	75 ef                	jne    281fbf <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281fd0:	c9                   	leave  
  281fd1:	c3                   	ret    

00281fd2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281fd2:	55                   	push   %ebp
  281fd3:	89 e5                	mov    %esp,%ebp
  281fd5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281fd8:	8b 45 08             	mov    0x8(%ebp),%eax
  281fdb:	a3 88 76 28 00       	mov    %eax,0x287688
	keydata0 = data0;
  281fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281fe3:	a3 8c 76 28 00       	mov    %eax,0x28768c
	wait_KBC_sendready();
  281fe8:	e8 cc ff ff ff       	call   281fb9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281fed:	83 ec 08             	sub    $0x8,%esp
  281ff0:	6a 60                	push   $0x60
  281ff2:	6a 64                	push   $0x64
  281ff4:	e8 0d ed ff ff       	call   280d06 <io_out8>
	wait_KBC_sendready();
  281ff9:	e8 bb ff ff ff       	call   281fb9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281ffe:	83 c4 08             	add    $0x8,%esp
  282001:	6a 47                	push   $0x47
  282003:	6a 60                	push   $0x60
  282005:	e8 fc ec ff ff       	call   280d06 <io_out8>
	return;
  28200a:	83 c4 10             	add    $0x10,%esp
}
  28200d:	c9                   	leave  
  28200e:	c3                   	ret    

0028200f <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  28200f:	55                   	push   %ebp
  282010:	89 e5                	mov    %esp,%ebp
  282012:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  282015:	6a 61                	push   $0x61
  282017:	6a 20                	push   $0x20
  282019:	e8 e8 ec ff ff       	call   280d06 <io_out8>
	data = io_in8(PORT_KEYDAT);
  28201e:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  282025:	e8 ba ec ff ff       	call   280ce4 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  28202a:	83 c4 08             	add    $0x8,%esp
  28202d:	03 05 8c 76 28 00    	add    0x28768c,%eax
  282033:	50                   	push   %eax
  282034:	ff 35 88 76 28 00    	pushl  0x287688
  28203a:	e8 8a fd ff ff       	call   281dc9 <fifo32_put>
	return;
  28203f:	83 c4 10             	add    $0x10,%esp
}
  282042:	c9                   	leave  
  282043:	c3                   	ret    

00282044 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  282044:	55                   	push   %ebp
  282045:	89 e5                	mov    %esp,%ebp
  282047:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  28204a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  28204f:	83 fa 7f             	cmp    $0x7f,%edx
  282052:	77 16                	ja     28206a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  282054:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  282058:	75 09                	jne    282063 <key_char+0x1f>
  28205a:	0f b6 82 40 4d 28 00 	movzbl 0x284d40(%edx),%eax
  282061:	eb 07                	jmp    28206a <key_char+0x26>
		else return keytable1[key];
  282063:	0f b6 82 c0 4c 28 00 	movzbl 0x284cc0(%edx),%eax
	}
	else return 0;
}
  28206a:	5d                   	pop    %ebp
  28206b:	c3                   	ret    

0028206c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  28206c:	55                   	push   %ebp
  28206d:	89 e5                	mov    %esp,%ebp
  28206f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  282072:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  282076:	e8 aa ec ff ff       	call   280d25 <io_load_eflags>
  28207b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  28207e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282081:	83 ec 0c             	sub    $0xc,%esp
  282084:	50                   	push   %eax
  282085:	e8 9e ec ff ff       	call   280d28 <io_store_eflags>
  28208a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  28208d:	e8 93 ec ff ff       	call   280d25 <io_load_eflags>
  282092:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  282095:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282098:	25 00 00 04 00       	and    $0x40000,%eax
  28209d:	85 c0                	test   %eax,%eax
  28209f:	74 04                	je     2820a5 <memtest+0x39>
		flg486 = 1;
  2820a1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  2820a5:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  2820ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2820af:	83 ec 0c             	sub    $0xc,%esp
  2820b2:	50                   	push   %eax
  2820b3:	e8 70 ec ff ff       	call   280d28 <io_store_eflags>
  2820b8:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  2820bb:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  2820bf:	74 1d                	je     2820de <memtest+0x72>
	{
		cr0 = load_cr0;
  2820c1:	c7 45 ec 4f 0d 28 00 	movl   $0x280d4f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  2820c8:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  2820cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2820d2:	83 ec 0c             	sub    $0xc,%esp
  2820d5:	50                   	push   %eax
  2820d6:	e8 78 ec ff ff       	call   280d53 <store_cr0>
  2820db:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  2820de:	83 ec 08             	sub    $0x8,%esp
  2820e1:	ff 75 0c             	pushl  0xc(%ebp)
  2820e4:	ff 75 08             	pushl  0x8(%ebp)
  2820e7:	e8 6f ec ff ff       	call   280d5b <_memtest_sub>
  2820ec:	83 c4 10             	add    $0x10,%esp
  2820ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  2820f2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  2820f6:	74 1e                	je     282116 <memtest+0xaa>
	{
		cr0 = load_cr0();
  2820f8:	e8 52 ec ff ff       	call   280d4f <load_cr0>
  2820fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  282100:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  282107:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28210a:	83 ec 0c             	sub    $0xc,%esp
  28210d:	50                   	push   %eax
  28210e:	e8 40 ec ff ff       	call   280d53 <store_cr0>
  282113:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  282116:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  282119:	c9                   	leave  
  28211a:	c3                   	ret    

0028211b <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  28211b:	55                   	push   %ebp
  28211c:	89 e5                	mov    %esp,%ebp
  28211e:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  282121:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  282128:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  28212f:	8b 45 08             	mov    0x8(%ebp),%eax
  282132:	89 45 fc             	mov    %eax,-0x4(%ebp)
  282135:	eb 67                	jmp    28219e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  282137:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28213a:	05 fc 0f 00 00       	add    $0xffc,%eax
  28213f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  282142:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282145:	8b 00                	mov    (%eax),%eax
  282147:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  28214a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28214d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282150:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  282152:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282155:	8b 00                	mov    (%eax),%eax
  282157:	f7 d0                	not    %eax
  282159:	89 c2                	mov    %eax,%edx
  28215b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28215e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  282160:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282163:	8b 00                	mov    (%eax),%eax
  282165:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  282168:	74 0d                	je     282177 <memtest_sub+0x5c>
  28216a:	eb 01                	jmp    28216d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  28216c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  28216d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282170:	8b 55 ec             	mov    -0x14(%ebp),%edx
  282173:	89 10                	mov    %edx,(%eax)
			break;
  282175:	eb 2f                	jmp    2821a6 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  282177:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28217a:	8b 00                	mov    (%eax),%eax
  28217c:	f7 d0                	not    %eax
  28217e:	89 c2                	mov    %eax,%edx
  282180:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282183:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  282185:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282188:	8b 00                	mov    (%eax),%eax
  28218a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28218d:	75 dd                	jne    28216c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  28218f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282192:	8b 55 ec             	mov    -0x14(%ebp),%edx
  282195:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  282197:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  28219e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2821a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2821a4:	76 91                	jbe    282137 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  2821a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  2821a9:	c9                   	leave  
  2821aa:	c3                   	ret    

002821ab <memman_init>:

void memman_init(struct MEMMAN *man)
{
  2821ab:	55                   	push   %ebp
  2821ac:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  2821ae:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  2821b7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  2821c1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821c4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  2821cb:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  2821d5:	90                   	nop
}
  2821d6:	5d                   	pop    %ebp
  2821d7:	c3                   	ret    

002821d8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  2821d8:	55                   	push   %ebp
  2821d9:	89 e5                	mov    %esp,%ebp
  2821db:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  2821de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  2821e5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2821ec:	eb 14                	jmp    282202 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  2821ee:	8b 45 08             	mov    0x8(%ebp),%eax
  2821f1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2821f4:	83 c2 02             	add    $0x2,%edx
  2821f7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  2821fb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  2821fe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  282202:	8b 45 08             	mov    0x8(%ebp),%eax
  282205:	8b 00                	mov    (%eax),%eax
  282207:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  28220a:	77 e2                	ja     2821ee <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  28220c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  28220f:	c9                   	leave  
  282210:	c3                   	ret    

00282211 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  282211:	55                   	push   %ebp
  282212:	89 e5                	mov    %esp,%ebp
  282214:	53                   	push   %ebx
  282215:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  282218:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28221f:	e9 bd 00 00 00       	jmp    2822e1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  282224:	8b 45 08             	mov    0x8(%ebp),%eax
  282227:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28222a:	83 c2 02             	add    $0x2,%edx
  28222d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282231:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282234:	0f 82 a3 00 00 00    	jb     2822dd <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  28223a:	8b 45 08             	mov    0x8(%ebp),%eax
  28223d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282240:	83 c2 02             	add    $0x2,%edx
  282243:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282246:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  282249:	8b 45 08             	mov    0x8(%ebp),%eax
  28224c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28224f:	83 c2 02             	add    $0x2,%edx
  282252:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282255:	8b 45 0c             	mov    0xc(%ebp),%eax
  282258:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28225b:	8b 45 08             	mov    0x8(%ebp),%eax
  28225e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282261:	83 c2 02             	add    $0x2,%edx
  282264:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  282267:	8b 45 08             	mov    0x8(%ebp),%eax
  28226a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28226d:	83 c2 02             	add    $0x2,%edx
  282270:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282274:	2b 45 0c             	sub    0xc(%ebp),%eax
  282277:	89 c2                	mov    %eax,%edx
  282279:	8b 45 08             	mov    0x8(%ebp),%eax
  28227c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  28227f:	83 c1 02             	add    $0x2,%ecx
  282282:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  282286:	8b 45 08             	mov    0x8(%ebp),%eax
  282289:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28228c:	83 c2 02             	add    $0x2,%edx
  28228f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282293:	85 c0                	test   %eax,%eax
  282295:	75 41                	jne    2822d8 <memman_alloc+0xc7>
			{
				man->frees--;
  282297:	8b 45 08             	mov    0x8(%ebp),%eax
  28229a:	8b 00                	mov    (%eax),%eax
  28229c:	8d 50 ff             	lea    -0x1(%eax),%edx
  28229f:	8b 45 08             	mov    0x8(%ebp),%eax
  2822a2:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  2822a4:	eb 28                	jmp    2822ce <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  2822a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2822a9:	8d 50 01             	lea    0x1(%eax),%edx
  2822ac:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2822af:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2822b2:	8d 58 02             	lea    0x2(%eax),%ebx
  2822b5:	8b 45 08             	mov    0x8(%ebp),%eax
  2822b8:	83 c2 02             	add    $0x2,%edx
  2822bb:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2822be:	8b 02                	mov    (%edx),%eax
  2822c0:	8b 52 04             	mov    0x4(%edx),%edx
  2822c3:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2822c6:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  2822ca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2822ce:	8b 45 08             	mov    0x8(%ebp),%eax
  2822d1:	8b 00                	mov    (%eax),%eax
  2822d3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2822d6:	77 ce                	ja     2822a6 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  2822d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2822db:	eb 17                	jmp    2822f4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  2822dd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2822e1:	8b 45 08             	mov    0x8(%ebp),%eax
  2822e4:	8b 00                	mov    (%eax),%eax
  2822e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2822e9:	0f 87 35 ff ff ff    	ja     282224 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  2822ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2822f4:	83 c4 10             	add    $0x10,%esp
  2822f7:	5b                   	pop    %ebx
  2822f8:	5d                   	pop    %ebp
  2822f9:	c3                   	ret    

002822fa <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  2822fa:	55                   	push   %ebp
  2822fb:	89 e5                	mov    %esp,%ebp
  2822fd:	53                   	push   %ebx
  2822fe:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  282301:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  282308:	eb 15                	jmp    28231f <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  28230a:	8b 45 08             	mov    0x8(%ebp),%eax
  28230d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282310:	83 c2 02             	add    $0x2,%edx
  282313:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282316:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282319:	77 10                	ja     28232b <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  28231b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28231f:	8b 45 08             	mov    0x8(%ebp),%eax
  282322:	8b 00                	mov    (%eax),%eax
  282324:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282327:	7f e1                	jg     28230a <memman_free+0x10>
  282329:	eb 01                	jmp    28232c <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  28232b:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  28232c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  282330:	0f 8e f2 00 00 00    	jle    282428 <memman_free+0x12e>
  282336:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282339:	8d 50 ff             	lea    -0x1(%eax),%edx
  28233c:	8b 45 08             	mov    0x8(%ebp),%eax
  28233f:	83 c2 02             	add    $0x2,%edx
  282342:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282345:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282348:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28234b:	8b 45 08             	mov    0x8(%ebp),%eax
  28234e:	83 c1 02             	add    $0x2,%ecx
  282351:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282355:	01 d0                	add    %edx,%eax
  282357:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28235a:	0f 85 c8 00 00 00    	jne    282428 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282360:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282363:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282366:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282369:	8d 50 ff             	lea    -0x1(%eax),%edx
  28236c:	8b 45 08             	mov    0x8(%ebp),%eax
  28236f:	83 c2 02             	add    $0x2,%edx
  282372:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282376:	8b 45 10             	mov    0x10(%ebp),%eax
  282379:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28237c:	8b 45 08             	mov    0x8(%ebp),%eax
  28237f:	8d 53 02             	lea    0x2(%ebx),%edx
  282382:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282386:	8b 45 08             	mov    0x8(%ebp),%eax
  282389:	8b 00                	mov    (%eax),%eax
  28238b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28238e:	0f 8e 8a 00 00 00    	jle    28241e <memman_free+0x124>
  282394:	8b 55 0c             	mov    0xc(%ebp),%edx
  282397:	8b 45 10             	mov    0x10(%ebp),%eax
  28239a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28239d:	8b 45 08             	mov    0x8(%ebp),%eax
  2823a0:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2823a3:	83 c2 02             	add    $0x2,%edx
  2823a6:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2823a9:	39 c1                	cmp    %eax,%ecx
  2823ab:	75 71                	jne    28241e <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  2823ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2823b0:	8d 58 ff             	lea    -0x1(%eax),%ebx
  2823b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2823b6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2823b9:	8b 45 08             	mov    0x8(%ebp),%eax
  2823bc:	83 c2 02             	add    $0x2,%edx
  2823bf:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  2823c3:	8b 45 08             	mov    0x8(%ebp),%eax
  2823c6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  2823c9:	83 c1 02             	add    $0x2,%ecx
  2823cc:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2823d0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2823d3:	8b 45 08             	mov    0x8(%ebp),%eax
  2823d6:	8d 53 02             	lea    0x2(%ebx),%edx
  2823d9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  2823dd:	eb 28                	jmp    282407 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  2823df:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2823e2:	8d 50 01             	lea    0x1(%eax),%edx
  2823e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2823e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2823eb:	8d 58 02             	lea    0x2(%eax),%ebx
  2823ee:	8b 45 08             	mov    0x8(%ebp),%eax
  2823f1:	83 c2 02             	add    $0x2,%edx
  2823f4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2823f7:	8b 02                	mov    (%edx),%eax
  2823f9:	8b 52 04             	mov    0x4(%edx),%edx
  2823fc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2823ff:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  282403:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282407:	8b 45 08             	mov    0x8(%ebp),%eax
  28240a:	8b 00                	mov    (%eax),%eax
  28240c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28240f:	7f ce                	jg     2823df <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  282411:	8b 45 08             	mov    0x8(%ebp),%eax
  282414:	8b 00                	mov    (%eax),%eax
  282416:	8d 50 ff             	lea    -0x1(%eax),%edx
  282419:	8b 45 08             	mov    0x8(%ebp),%eax
  28241c:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  28241e:	b8 00 00 00 00       	mov    $0x0,%eax
  282423:	e9 1f 01 00 00       	jmp    282547 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  282428:	8b 45 08             	mov    0x8(%ebp),%eax
  28242b:	8b 00                	mov    (%eax),%eax
  28242d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282430:	7e 52                	jle    282484 <memman_free+0x18a>
  282432:	8b 55 0c             	mov    0xc(%ebp),%edx
  282435:	8b 45 10             	mov    0x10(%ebp),%eax
  282438:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28243b:	8b 45 08             	mov    0x8(%ebp),%eax
  28243e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282441:	83 c2 02             	add    $0x2,%edx
  282444:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282447:	39 c1                	cmp    %eax,%ecx
  282449:	75 39                	jne    282484 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28244b:	8b 45 08             	mov    0x8(%ebp),%eax
  28244e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282451:	8d 4a 02             	lea    0x2(%edx),%ecx
  282454:	8b 55 0c             	mov    0xc(%ebp),%edx
  282457:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28245a:	8b 45 08             	mov    0x8(%ebp),%eax
  28245d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282460:	83 c2 02             	add    $0x2,%edx
  282463:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282467:	8b 45 10             	mov    0x10(%ebp),%eax
  28246a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28246d:	8b 45 08             	mov    0x8(%ebp),%eax
  282470:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282473:	83 c2 02             	add    $0x2,%edx
  282476:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28247a:	b8 00 00 00 00       	mov    $0x0,%eax
  28247f:	e9 c3 00 00 00       	jmp    282547 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282484:	8b 45 08             	mov    0x8(%ebp),%eax
  282487:	8b 00                	mov    (%eax),%eax
  282489:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28248e:	0f 8f 8a 00 00 00    	jg     28251e <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282494:	8b 45 08             	mov    0x8(%ebp),%eax
  282497:	8b 00                	mov    (%eax),%eax
  282499:	83 e8 01             	sub    $0x1,%eax
  28249c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28249f:	eb 28                	jmp    2824c9 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  2824a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2824a4:	83 c0 01             	add    $0x1,%eax
  2824a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2824aa:	8d 58 02             	lea    0x2(%eax),%ebx
  2824ad:	8b 45 08             	mov    0x8(%ebp),%eax
  2824b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2824b3:	83 c2 02             	add    $0x2,%edx
  2824b6:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2824b9:	8b 02                	mov    (%edx),%eax
  2824bb:	8b 52 04             	mov    0x4(%edx),%edx
  2824be:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2824c1:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  2824c5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  2824c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2824cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2824cf:	7d d0                	jge    2824a1 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2824d1:	8b 45 08             	mov    0x8(%ebp),%eax
  2824d4:	8b 50 04             	mov    0x4(%eax),%edx
  2824d7:	8b 45 08             	mov    0x8(%ebp),%eax
  2824da:	8b 00                	mov    (%eax),%eax
  2824dc:	39 c2                	cmp    %eax,%edx
  2824de:	7d 0b                	jge    2824eb <memman_free+0x1f1>
  2824e0:	8b 45 08             	mov    0x8(%ebp),%eax
  2824e3:	8b 10                	mov    (%eax),%edx
  2824e5:	8b 45 08             	mov    0x8(%ebp),%eax
  2824e8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2824eb:	8b 45 08             	mov    0x8(%ebp),%eax
  2824ee:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2824f1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2824f4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2824f7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2824fa:	8b 45 08             	mov    0x8(%ebp),%eax
  2824fd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282500:	8d 4a 02             	lea    0x2(%edx),%ecx
  282503:	8b 55 10             	mov    0x10(%ebp),%edx
  282506:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  28250a:	8b 45 08             	mov    0x8(%ebp),%eax
  28250d:	8b 00                	mov    (%eax),%eax
  28250f:	8d 50 01             	lea    0x1(%eax),%edx
  282512:	8b 45 08             	mov    0x8(%ebp),%eax
  282515:	89 10                	mov    %edx,(%eax)
		return 0;
  282517:	b8 00 00 00 00       	mov    $0x0,%eax
  28251c:	eb 29                	jmp    282547 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  28251e:	8b 45 08             	mov    0x8(%ebp),%eax
  282521:	8b 40 0c             	mov    0xc(%eax),%eax
  282524:	8d 50 01             	lea    0x1(%eax),%edx
  282527:	8b 45 08             	mov    0x8(%ebp),%eax
  28252a:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  28252d:	8b 45 08             	mov    0x8(%ebp),%eax
  282530:	8b 40 08             	mov    0x8(%eax),%eax
  282533:	89 c2                	mov    %eax,%edx
  282535:	8b 45 10             	mov    0x10(%ebp),%eax
  282538:	01 d0                	add    %edx,%eax
  28253a:	89 c2                	mov    %eax,%edx
  28253c:	8b 45 08             	mov    0x8(%ebp),%eax
  28253f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282542:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282547:	83 c4 10             	add    $0x10,%esp
  28254a:	5b                   	pop    %ebx
  28254b:	5d                   	pop    %ebp
  28254c:	c3                   	ret    

0028254d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28254d:	55                   	push   %ebp
  28254e:	89 e5                	mov    %esp,%ebp
  282550:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282553:	8b 45 0c             	mov    0xc(%ebp),%eax
  282556:	05 ff 0f 00 00       	add    $0xfff,%eax
  28255b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282560:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282563:	ff 75 0c             	pushl  0xc(%ebp)
  282566:	ff 75 08             	pushl  0x8(%ebp)
  282569:	e8 a3 fc ff ff       	call   282211 <memman_alloc>
  28256e:	83 c4 08             	add    $0x8,%esp
  282571:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282574:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282577:	c9                   	leave  
  282578:	c3                   	ret    

00282579 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282579:	55                   	push   %ebp
  28257a:	89 e5                	mov    %esp,%ebp
  28257c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28257f:	8b 45 10             	mov    0x10(%ebp),%eax
  282582:	05 ff 0f 00 00       	add    $0xfff,%eax
  282587:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28258c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28258f:	ff 75 10             	pushl  0x10(%ebp)
  282592:	ff 75 0c             	pushl  0xc(%ebp)
  282595:	ff 75 08             	pushl  0x8(%ebp)
  282598:	e8 5d fd ff ff       	call   2822fa <memman_free>
  28259d:	83 c4 0c             	add    $0xc,%esp
  2825a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  2825a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  2825a6:	c9                   	leave  
  2825a7:	c3                   	ret    

002825a8 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  2825a8:	55                   	push   %ebp
  2825a9:	89 e5                	mov    %esp,%ebp
  2825ab:	57                   	push   %edi
  2825ac:	56                   	push   %esi
  2825ad:	53                   	push   %ebx
  2825ae:	83 ec 14             	sub    $0x14,%esp
  2825b1:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  2825b4:	68 14 2c 00 00       	push   $0x2c14
  2825b9:	57                   	push   %edi
  2825ba:	e8 8e ff ff ff       	call   28254d <memman_alloc_4k>
  2825bf:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  2825c1:	83 c4 10             	add    $0x10,%esp
  2825c4:	85 c0                	test   %eax,%eax
  2825c6:	74 6a                	je     282632 <shtctl_init+0x8a>
  2825c8:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  2825ca:	8b 45 0c             	mov    0xc(%ebp),%eax
  2825cd:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  2825cf:	83 ec 08             	sub    $0x8,%esp
  2825d2:	8b 45 10             	mov    0x10(%ebp),%eax
  2825d5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2825d9:	50                   	push   %eax
  2825da:	57                   	push   %edi
  2825db:	e8 6d ff ff ff       	call   28254d <memman_alloc_4k>
  2825e0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2825e3:	83 c4 10             	add    $0x10,%esp
  2825e6:	85 c0                	test   %eax,%eax
  2825e8:	75 19                	jne    282603 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2825ea:	83 ec 04             	sub    $0x4,%esp
  2825ed:	68 14 2c 00 00       	push   $0x2c14
  2825f2:	56                   	push   %esi
  2825f3:	57                   	push   %edi
  2825f4:	e8 80 ff ff ff       	call   282579 <memman_free_4k>
		ctl = 0;
		goto err;
  2825f9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2825fc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  282601:	eb 2f                	jmp    282632 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  282603:	8b 45 10             	mov    0x10(%ebp),%eax
  282606:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  282609:	8b 45 14             	mov    0x14(%ebp),%eax
  28260c:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  28260f:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  282616:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  28261c:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  282622:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  282628:	89 70 04             	mov    %esi,0x4(%eax)
  28262b:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  28262e:	39 d8                	cmp    %ebx,%eax
  282630:	75 f0                	jne    282622 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
	err:
		return ctl;
}
  282632:	89 f0                	mov    %esi,%eax
  282634:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282637:	5b                   	pop    %ebx
  282638:	5e                   	pop    %esi
  282639:	5f                   	pop    %edi
  28263a:	5d                   	pop    %ebp
  28263b:	c3                   	ret    

0028263c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28263c:	55                   	push   %ebp
  28263d:	89 e5                	mov    %esp,%ebp
  28263f:	56                   	push   %esi
  282640:	53                   	push   %ebx
  282641:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282644:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28264b:	74 12                	je     28265f <sheet_alloc+0x23>
  28264d:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282653:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282658:	83 3a 00             	cmpl   $0x0,(%edx)
  28265b:	75 3c                	jne    282699 <sheet_alloc+0x5d>
  28265d:	eb 05                	jmp    282664 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28265f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282664:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28266b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28266e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282671:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282678:	00 00 00 
			sht->height = -1;
  28267b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  282682:	ff ff ff 
			sht->task = 0;
  282685:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  28268c:	00 00 00 00 
			return sht;
  282690:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  282697:	eb 12                	jmp    2826ab <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282699:	83 c0 01             	add    $0x1,%eax
  28269c:	83 c2 28             	add    $0x28,%edx
  28269f:	3d 00 01 00 00       	cmp    $0x100,%eax
  2826a4:	75 b2                	jne    282658 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  2826a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2826ab:	5b                   	pop    %ebx
  2826ac:	5e                   	pop    %esi
  2826ad:	5d                   	pop    %ebp
  2826ae:	c3                   	ret    

002826af <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  2826af:	55                   	push   %ebp
  2826b0:	89 e5                	mov    %esp,%ebp
  2826b2:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  2826b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  2826b8:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  2826ba:	8b 55 10             	mov    0x10(%ebp),%edx
  2826bd:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  2826c0:	8b 55 14             	mov    0x14(%ebp),%edx
  2826c3:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  2826c6:	8b 55 18             	mov    0x18(%ebp),%edx
  2826c9:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  2826cc:	5d                   	pop    %ebp
  2826cd:	c3                   	ret    

002826ce <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  2826ce:	55                   	push   %ebp
  2826cf:	89 e5                	mov    %esp,%ebp
  2826d1:	57                   	push   %edi
  2826d2:	56                   	push   %esi
  2826d3:	53                   	push   %ebx
  2826d4:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  2826d7:	8b 45 08             	mov    0x8(%ebp),%eax
  2826da:	8b 00                	mov    (%eax),%eax
  2826dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2826df:	8b 45 08             	mov    0x8(%ebp),%eax
  2826e2:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2826e6:	0f 88 80 00 00 00    	js     28276c <sheet_refresh_ob+0x9e>
  2826ec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2826f3:	8b 45 08             	mov    0x8(%ebp),%eax
  2826f6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2826f9:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2826fd:	8b 02                	mov    (%edx),%eax
  2826ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  282702:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  282706:	7e 55                	jle    28275d <sheet_refresh_ob+0x8f>
  282708:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  28270d:	89 f8                	mov    %edi,%eax
  28270f:	03 42 10             	add    0x10(%edx),%eax
  282712:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  282715:	8b 4a 04             	mov    0x4(%edx),%ecx
  282718:	85 c9                	test   %ecx,%ecx
  28271a:	7e 39                	jle    282755 <sheet_refresh_ob+0x87>
  28271c:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  282721:	0f af cf             	imul   %edi,%ecx
  282724:	8b 75 f0             	mov    -0x10(%ebp),%esi
  282727:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28272a:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  28272e:	0f b6 cb             	movzbl %bl,%ecx
  282731:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282734:	74 15                	je     28274b <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  282736:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282739:	8b 75 ec             	mov    -0x14(%ebp),%esi
  28273c:	0f af 71 08          	imul   0x8(%ecx),%esi
  282740:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282743:	01 c1                	add    %eax,%ecx
  282745:	03 4a 0c             	add    0xc(%edx),%ecx
  282748:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28274b:	83 c0 01             	add    $0x1,%eax
  28274e:	8b 4a 04             	mov    0x4(%edx),%ecx
  282751:	39 c1                	cmp    %eax,%ecx
  282753:	7f cc                	jg     282721 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282755:	83 c7 01             	add    $0x1,%edi
  282758:	39 7a 08             	cmp    %edi,0x8(%edx)
  28275b:	7f b0                	jg     28270d <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28275d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282764:	8b 7d 08             	mov    0x8(%ebp),%edi
  282767:	39 47 10             	cmp    %eax,0x10(%edi)
  28276a:	7d 87                	jge    2826f3 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28276c:	83 c4 10             	add    $0x10,%esp
  28276f:	5b                   	pop    %ebx
  282770:	5e                   	pop    %esi
  282771:	5f                   	pop    %edi
  282772:	5d                   	pop    %ebp
  282773:	c3                   	ret    

00282774 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282774:	55                   	push   %ebp
  282775:	89 e5                	mov    %esp,%ebp
  282777:	57                   	push   %edi
  282778:	56                   	push   %esi
  282779:	53                   	push   %ebx
  28277a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28277d:	8b 45 08             	mov    0x8(%ebp),%eax
  282780:	8b 00                	mov    (%eax),%eax
  282782:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282785:	8b 45 08             	mov    0x8(%ebp),%eax
  282788:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  28278c:	0f 88 a7 00 00 00    	js     282839 <sheet_refreshsub1+0xc5>
  282792:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  282799:	8b 45 08             	mov    0x8(%ebp),%eax
  28279c:	8b 7d e0             	mov    -0x20(%ebp),%edi
  28279f:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  2827a3:	8b 01                	mov    (%ecx),%eax
  2827a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  2827a8:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  2827ac:	7e 78                	jle    282826 <sheet_refreshsub1+0xb2>
  2827ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  2827b5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  2827b8:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  2827bb:	8b 71 04             	mov    0x4(%ecx),%esi
  2827be:	85 f6                	test   %esi,%esi
  2827c0:	7e 58                	jle    28281a <sheet_refreshsub1+0xa6>
  2827c2:	b8 00 00 00 00       	mov    $0x0,%eax
  2827c7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  2827ca:	89 c2                	mov    %eax,%edx
  2827cc:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  2827cf:	3b 55 0c             	cmp    0xc(%ebp),%edx
  2827d2:	7c 3c                	jl     282810 <sheet_refreshsub1+0x9c>
  2827d4:	3b 55 14             	cmp    0x14(%ebp),%edx
  2827d7:	7d 37                	jge    282810 <sheet_refreshsub1+0x9c>
  2827d9:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2827dc:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2827df:	7c 2f                	jl     282810 <sheet_refreshsub1+0x9c>
  2827e1:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2827e4:	7d 2a                	jge    282810 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2827e6:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2827ea:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2827ed:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2827f0:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2827f4:	89 f3                	mov    %esi,%ebx
  2827f6:	0f b6 fb             	movzbl %bl,%edi
  2827f9:	3b 79 14             	cmp    0x14(%ecx),%edi
  2827fc:	74 12                	je     282810 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2827fe:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282801:	8b 7d f0             	mov    -0x10(%ebp),%edi
  282804:	0f af 7b 08          	imul   0x8(%ebx),%edi
  282808:	03 55 e4             	add    -0x1c(%ebp),%edx
  28280b:	89 f3                	mov    %esi,%ebx
  28280d:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  282810:	83 c0 01             	add    $0x1,%eax
  282813:	8b 71 04             	mov    0x4(%ecx),%esi
  282816:	39 c6                	cmp    %eax,%esi
  282818:	7f b0                	jg     2827ca <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  28281a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  28281e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  282821:	39 41 08             	cmp    %eax,0x8(%ecx)
  282824:	7f 8f                	jg     2827b5 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282826:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  28282a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  28282d:	8b 7d 08             	mov    0x8(%ebp),%edi
  282830:	39 47 10             	cmp    %eax,0x10(%edi)
  282833:	0f 8d 60 ff ff ff    	jge    282799 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  282839:	83 c4 14             	add    $0x14,%esp
  28283c:	5b                   	pop    %ebx
  28283d:	5e                   	pop    %esi
  28283e:	5f                   	pop    %edi
  28283f:	5d                   	pop    %ebp
  282840:	c3                   	ret    

00282841 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282841:	55                   	push   %ebp
  282842:	89 e5                	mov    %esp,%ebp
  282844:	57                   	push   %edi
  282845:	56                   	push   %esi
  282846:	53                   	push   %ebx
  282847:	83 ec 30             	sub    $0x30,%esp
  28284a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28284d:	8b 55 10             	mov    0x10(%ebp),%edx
  282850:	8b 75 14             	mov    0x14(%ebp),%esi
  282853:	8b 7d 18             	mov    0x18(%ebp),%edi
  282856:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  282859:	8b 45 08             	mov    0x8(%ebp),%eax
  28285c:	8b 00                	mov    (%eax),%eax
  28285e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  282861:	8b 45 08             	mov    0x8(%ebp),%eax
  282864:	8b 40 04             	mov    0x4(%eax),%eax
  282867:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28286a:	b8 00 00 00 00       	mov    $0x0,%eax
  28286f:	85 c9                	test   %ecx,%ecx
  282871:	0f 48 c8             	cmovs  %eax,%ecx
  282874:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  282877:	85 d2                	test   %edx,%edx
  282879:	0f 48 d0             	cmovs  %eax,%edx
  28287c:	89 55 d0             	mov    %edx,-0x30(%ebp)
	struct SHEET *sht;
	
	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28287f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282882:	8b 51 08             	mov    0x8(%ecx),%edx
  282885:	39 f2                	cmp    %esi,%edx
  282887:	0f 4e f2             	cmovle %edx,%esi
  28288a:	89 75 d4             	mov    %esi,-0x2c(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  28288d:	8b 51 0c             	mov    0xc(%ecx),%edx
  282890:	39 fa                	cmp    %edi,%edx
  282892:	0f 4e fa             	cmovle %edx,%edi
  282895:	89 7d cc             	mov    %edi,-0x34(%ebp)
  282898:	85 db                	test   %ebx,%ebx
  28289a:	0f 49 c3             	cmovns %ebx,%eax
  28289d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  2828a0:	39 41 10             	cmp    %eax,0x10(%ecx)
  2828a3:	0f 8c b3 00 00 00    	jl     28295c <sheet_refreshsub2+0x11b>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  2828a9:	8b 45 08             	mov    0x8(%ebp),%eax
  2828ac:	8b 7d d8             	mov    -0x28(%ebp),%edi
  2828af:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  2828b3:	8b 01                	mov    (%ecx),%eax
  2828b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  2828b8:	8b 41 0c             	mov    0xc(%ecx),%eax
		by0 = vy0 - sht->vy0;
  2828bb:	8b 71 10             	mov    0x10(%ecx),%esi
		bx1 = vx1 - sht->vx0;
  2828be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  2828c1:	29 c2                	sub    %eax,%edx
		by1 = vy1 - sht->vy0;
  2828c3:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  2828c6:	29 f3                	sub    %esi,%ebx
  2828c8:	8b 7d c8             	mov    -0x38(%ebp),%edi
  2828cb:	29 c7                	sub    %eax,%edi
  2828cd:	89 f8                	mov    %edi,%eax
  2828cf:	bf 00 00 00 00       	mov    $0x0,%edi
  2828d4:	0f 48 c7             	cmovs  %edi,%eax
  2828d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
  2828da:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2828dd:	29 f0                	sub    %esi,%eax
  2828df:	0f 49 f8             	cmovns %eax,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2828e2:	8b 41 04             	mov    0x4(%ecx),%eax
  2828e5:	39 c2                	cmp    %eax,%edx
  2828e7:	0f 4e c2             	cmovle %edx,%eax
  2828ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2828ed:	8b 41 08             	mov    0x8(%ecx),%eax
  2828f0:	39 c3                	cmp    %eax,%ebx
  2828f2:	0f 4e c3             	cmovle %ebx,%eax
  2828f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		for(by=by0;by<by1;by++)
  2828f8:	39 f8                	cmp    %edi,%eax
  2828fa:	7e 4d                	jle    282949 <sheet_refreshsub2+0x108>
		{
			vy = sht->vy0+by;
  2828fc:	89 f8                	mov    %edi,%eax
  2828fe:	03 41 10             	add    0x10(%ecx),%eax
  282901:	89 45 e8             	mov    %eax,-0x18(%ebp)
			for(bx=bx0;bx<bx1;bx++)
  282904:	8b 45 dc             	mov    -0x24(%ebp),%eax
  282907:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  28290a:	7e 35                	jle    282941 <sheet_refreshsub2+0x100>
			{
				vx = sht->vx0+bx;
				c  = buf[by*sht->bxsize+bx];
  28290c:	89 fa                	mov    %edi,%edx
  28290e:	0f af 51 04          	imul   0x4(%ecx),%edx
  282912:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282915:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  282918:	0f b6 1c 13          	movzbl (%ebx,%edx,1),%ebx
				if(c!=sht->col_inv)
  28291c:	0f b6 d3             	movzbl %bl,%edx
  28291f:	3b 51 14             	cmp    0x14(%ecx),%edx
  282922:	74 15                	je     282939 <sheet_refreshsub2+0xf8>
					map[vy*ctl->xsize+vx] = c;
  282924:	8b 55 08             	mov    0x8(%ebp),%edx
  282927:	8b 75 e8             	mov    -0x18(%ebp),%esi
  28292a:	0f af 72 08          	imul   0x8(%edx),%esi
  28292e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  282931:	01 c2                	add    %eax,%edx
  282933:	03 51 0c             	add    0xc(%ecx),%edx
  282936:	88 1c 32             	mov    %bl,(%edx,%esi,1)
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
		{
			vy = sht->vy0+by;
			for(bx=bx0;bx<bx1;bx++)
  282939:	83 c0 01             	add    $0x1,%eax
  28293c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  28293f:	75 cb                	jne    28290c <sheet_refreshsub2+0xcb>

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
  282941:	83 c7 01             	add    $0x1,%edi
  282944:	39 7d e0             	cmp    %edi,-0x20(%ebp)
  282947:	75 b3                	jne    2828fc <sheet_refreshsub2+0xbb>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282949:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
  28294d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282950:	8b 7d 08             	mov    0x8(%ebp),%edi
  282953:	39 47 10             	cmp    %eax,0x10(%edi)
  282956:	0f 8d 4d ff ff ff    	jge    2828a9 <sheet_refreshsub2+0x68>
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  28295c:	8b 7d d0             	mov    -0x30(%ebp),%edi
  28295f:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  282962:	7f 2a                	jg     28298e <sheet_refreshsub2+0x14d>
  282964:	eb 40                	jmp    2829a6 <sheet_refreshsub2+0x165>
  282966:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		for(vx=vx0;vx<vx1;vx++)
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  282969:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28296c:	0f af 47 08          	imul   0x8(%edi),%eax
  282970:	01 d0                	add    %edx,%eax
  282972:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  282976:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
		for(vx=vx0;vx<vx1;vx++)
  282979:	83 c2 01             	add    $0x1,%edx
  28297c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
  28297f:	75 e8                	jne    282969 <sheet_refreshsub2+0x128>
  282981:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  282984:	83 c1 01             	add    $0x1,%ecx
  282987:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28298a:	74 1a                	je     2829a6 <sheet_refreshsub2+0x165>
  28298c:	eb 0c                	jmp    28299a <sheet_refreshsub2+0x159>
  28298e:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  282991:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  282994:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  282997:	8b 7d 08             	mov    0x8(%ebp),%edi
		for(vx=vx0;vx<vx1;vx++)
  28299a:	8b 45 c8             	mov    -0x38(%ebp),%eax
  28299d:	89 c2                	mov    %eax,%edx
  28299f:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
  2829a2:	7f c2                	jg     282966 <sheet_refreshsub2+0x125>
  2829a4:	eb de                	jmp    282984 <sheet_refreshsub2+0x143>
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
}
  2829a6:	83 c4 30             	add    $0x30,%esp
  2829a9:	5b                   	pop    %ebx
  2829aa:	5e                   	pop    %esi
  2829ab:	5f                   	pop    %edi
  2829ac:	5d                   	pop    %ebp
  2829ad:	c3                   	ret    

002829ae <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  2829ae:	55                   	push   %ebp
  2829af:	89 e5                	mov    %esp,%ebp
  2829b1:	53                   	push   %ebx
  2829b2:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
		struct SHTCTL *ctl = sht->ctl;
		sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  2829b5:	8b 48 10             	mov    0x10(%eax),%ecx
  2829b8:	8b 50 0c             	mov    0xc(%eax),%edx
  2829bb:	ff 70 18             	pushl  0x18(%eax)
  2829be:	89 cb                	mov    %ecx,%ebx
  2829c0:	03 5d 18             	add    0x18(%ebp),%ebx
  2829c3:	53                   	push   %ebx
  2829c4:	89 d3                	mov    %edx,%ebx
  2829c6:	03 5d 14             	add    0x14(%ebp),%ebx
  2829c9:	53                   	push   %ebx
  2829ca:	03 4d 10             	add    0x10(%ebp),%ecx
  2829cd:	51                   	push   %ecx
  2829ce:	03 55 0c             	add    0xc(%ebp),%edx
  2829d1:	52                   	push   %edx
  2829d2:	ff 70 20             	pushl  0x20(%eax)
  2829d5:	e8 67 fe ff ff       	call   282841 <sheet_refreshsub2>
	//}
	return;
  2829da:	83 c4 18             	add    $0x18,%esp
}
  2829dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2829e0:	c9                   	leave  
  2829e1:	c3                   	ret    

002829e2 <sheet_updown>:
	return;
}

//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  2829e2:	55                   	push   %ebp
  2829e3:	89 e5                	mov    %esp,%ebp
  2829e5:	57                   	push   %edi
  2829e6:	56                   	push   %esi
  2829e7:	53                   	push   %ebx
  2829e8:	8b 75 08             	mov    0x8(%ebp),%esi
  2829eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  2829ee:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  2829f1:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  2829f4:	8b 79 10             	mov    0x10(%ecx),%edi
  2829f7:	8d 57 01             	lea    0x1(%edi),%edx
  2829fa:	39 da                	cmp    %ebx,%edx
  2829fc:	0f 4f d3             	cmovg  %ebx,%edx
  2829ff:	85 d2                	test   %edx,%edx
  282a01:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  282a06:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282a09:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282a0c:	39 d8                	cmp    %ebx,%eax
  282a0e:	7e 59                	jle    282a69 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282a10:	85 db                	test   %ebx,%ebx
  282a12:	79 09                	jns    282a1d <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  282a14:	8b 59 10             	mov    0x10(%ecx),%ebx
  282a17:	39 d8                	cmp    %ebx,%eax
  282a19:	7c 1c                	jl     282a37 <sheet_updown+0x55>
  282a1b:	eb 31                	jmp    282a4e <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282a1d:	8d 50 ff             	lea    -0x1(%eax),%edx
  282a20:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282a24:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282a28:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282a2b:	89 d0                	mov    %edx,%eax
  282a2d:	39 d3                	cmp    %edx,%ebx
  282a2f:	75 ec                	jne    282a1d <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282a31:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282a35:	eb 1d                	jmp    282a54 <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282a37:	8d 50 01             	lea    0x1(%eax),%edx
  282a3a:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282a3e:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282a42:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  282a45:	8b 59 10             	mov    0x10(%ecx),%ebx
  282a48:	89 d0                	mov    %edx,%eax
  282a4a:	39 d3                	cmp    %edx,%ebx
  282a4c:	7f e9                	jg     282a37 <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282a4e:	83 eb 01             	sub    $0x1,%ebx
  282a51:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  282a54:	ff 76 08             	pushl  0x8(%esi)
  282a57:	ff 76 04             	pushl  0x4(%esi)
  282a5a:	6a 00                	push   $0x0
  282a5c:	6a 00                	push   $0x0
  282a5e:	56                   	push   %esi
  282a5f:	e8 4a ff ff ff       	call   2829ae <sheet_refresh>
  282a64:	83 c4 14             	add    $0x14,%esp
  282a67:	eb 5a                	jmp    282ac3 <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282a69:	39 d8                	cmp    %ebx,%eax
  282a6b:	7d 56                	jge    282ac3 <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282a6d:	85 c0                	test   %eax,%eax
  282a6f:	78 1a                	js     282a8b <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282a71:	8d 50 01             	lea    0x1(%eax),%edx
  282a74:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282a78:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282a7c:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  282a7f:	89 d0                	mov    %edx,%eax
  282a81:	39 d3                	cmp    %edx,%ebx
  282a83:	75 ec                	jne    282a71 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  282a85:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282a89:	eb 25                	jmp    282ab0 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  282a8b:	8b 41 10             	mov    0x10(%ecx),%eax
  282a8e:	8d 50 01             	lea    0x1(%eax),%edx
  282a91:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  282a94:	39 d3                	cmp    %edx,%ebx
  282a96:	7d 14                	jge    282aac <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282a98:	8d 42 ff             	lea    -0x1(%edx),%eax
  282a9b:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  282a9f:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  282aa3:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  282aa6:	89 c2                	mov    %eax,%edx
  282aa8:	39 c3                	cmp    %eax,%ebx
  282aaa:	75 ec                	jne    282a98 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  282aac:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  282ab0:	ff 76 08             	pushl  0x8(%esi)
  282ab3:	ff 76 04             	pushl  0x4(%esi)
  282ab6:	6a 00                	push   $0x0
  282ab8:	6a 00                	push   $0x0
  282aba:	56                   	push   %esi
  282abb:	e8 ee fe ff ff       	call   2829ae <sheet_refresh>
  282ac0:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  282ac3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282ac6:	5b                   	pop    %ebx
  282ac7:	5e                   	pop    %esi
  282ac8:	5f                   	pop    %edi
  282ac9:	5d                   	pop    %ebp
  282aca:	c3                   	ret    

00282acb <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  282acb:	55                   	push   %ebp
  282acc:	89 e5                	mov    %esp,%ebp
  282ace:	57                   	push   %edi
  282acf:	56                   	push   %esi
  282ad0:	53                   	push   %ebx
  282ad1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282ad4:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  282ad7:	8b 43 0c             	mov    0xc(%ebx),%eax
  282ada:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  282add:	8b 7d 0c             	mov    0xc(%ebp),%edi
  282ae0:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  282ae3:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  282ae6:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282aea:	78 36                	js     282b22 <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  282aec:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  282aef:	6a 00                	push   $0x0
  282af1:	89 d1                	mov    %edx,%ecx
  282af3:	03 4b 08             	add    0x8(%ebx),%ecx
  282af6:	51                   	push   %ecx
  282af7:	89 c1                	mov    %eax,%ecx
  282af9:	03 4b 04             	add    0x4(%ebx),%ecx
  282afc:	51                   	push   %ecx
  282afd:	52                   	push   %edx
  282afe:	50                   	push   %eax
  282aff:	57                   	push   %edi
  282b00:	e8 3c fd ff ff       	call   282841 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  282b05:	ff 73 18             	pushl  0x18(%ebx)
  282b08:	89 f0                	mov    %esi,%eax
  282b0a:	03 43 08             	add    0x8(%ebx),%eax
  282b0d:	50                   	push   %eax
  282b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
  282b11:	03 43 04             	add    0x4(%ebx),%eax
  282b14:	50                   	push   %eax
  282b15:	56                   	push   %esi
  282b16:	ff 75 0c             	pushl  0xc(%ebp)
  282b19:	57                   	push   %edi
  282b1a:	e8 22 fd ff ff       	call   282841 <sheet_refreshsub2>
  282b1f:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  282b22:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282b25:	5b                   	pop    %ebx
  282b26:	5e                   	pop    %esi
  282b27:	5f                   	pop    %edi
  282b28:	5d                   	pop    %ebp
  282b29:	c3                   	ret    

00282b2a <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282b2a:	55                   	push   %ebp
  282b2b:	89 e5                	mov    %esp,%ebp
  282b2d:	53                   	push   %ebx
  282b2e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282b31:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282b35:	78 0b                	js     282b42 <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282b37:	6a ff                	push   $0xffffffff
  282b39:	53                   	push   %ebx
  282b3a:	e8 a3 fe ff ff       	call   2829e2 <sheet_updown>
  282b3f:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  282b42:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282b49:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282b4c:	c9                   	leave  
  282b4d:	c3                   	ret    

00282b4e <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282b4e:	55                   	push   %ebp
  282b4f:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  282b51:	80 3d b0 76 28 00 00 	cmpb   $0x0,0x2876b0
  282b58:	74 11                	je     282b6b <timer_alloc+0x1d>
  282b5a:	ba c4 76 28 00       	mov    $0x2876c4,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282b5f:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  282b64:	80 3a 00             	cmpb   $0x0,(%edx)
  282b67:	75 2b                	jne    282b94 <timer_alloc+0x46>
  282b69:	eb 05                	jmp    282b70 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282b6b:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282b70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282b77:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282b7a:	8d 0c 8d a0 76 28 00 	lea    0x2876a0(,%ecx,4),%ecx
  282b81:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  282b85:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  282b89:	01 d0                	add    %edx,%eax
  282b8b:	8d 04 85 a8 76 28 00 	lea    0x2876a8(,%eax,4),%eax
  282b92:	eb 12                	jmp    282ba6 <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282b94:	83 c0 01             	add    $0x1,%eax
  282b97:	83 c2 14             	add    $0x14,%edx
  282b9a:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282b9f:	75 c3                	jne    282b64 <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282ba1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282ba6:	5d                   	pop    %ebp
  282ba7:	c3                   	ret    

00282ba8 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282ba8:	55                   	push   %ebp
  282ba9:	89 e5                	mov    %esp,%ebp
  282bab:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282bae:	6a 34                	push   $0x34
  282bb0:	6a 43                	push   $0x43
  282bb2:	e8 4f e1 ff ff       	call   280d06 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282bb7:	83 c4 08             	add    $0x8,%esp
  282bba:	68 9c 00 00 00       	push   $0x9c
  282bbf:	6a 40                	push   $0x40
  282bc1:	e8 40 e1 ff ff       	call   280d06 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282bc6:	83 c4 08             	add    $0x8,%esp
  282bc9:	6a 2e                	push   $0x2e
  282bcb:	6a 40                	push   $0x40
  282bcd:	e8 34 e1 ff ff       	call   280d06 <io_out8>
  282bd2:	b8 b0 76 28 00       	mov    $0x2876b0,%eax
  282bd7:	ba c0 9d 28 00       	mov    $0x289dc0,%edx
  282bdc:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282bdf:	c6 00 00             	movb   $0x0,(%eax)
  282be2:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282be5:	39 d0                	cmp    %edx,%eax
  282be7:	75 f6                	jne    282bdf <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282be9:	e8 60 ff ff ff       	call   282b4e <timer_alloc>
	t->next = 0;
  282bee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282bf4:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282bfb:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282bff:	a3 b8 9d 28 00       	mov    %eax,0x289db8
	timerctl.next = 0xffffffff;
  282c04:	c7 05 a4 76 28 00 ff 	movl   $0xffffffff,0x2876a4
  282c0b:	ff ff ff 
	return;
}
  282c0e:	c9                   	leave  
  282c0f:	c3                   	ret    

00282c10 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282c10:	55                   	push   %ebp
  282c11:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282c13:	8b 45 08             	mov    0x8(%ebp),%eax
  282c16:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282c1a:	5d                   	pop    %ebp
  282c1b:	c3                   	ret    

00282c1c <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282c1c:	55                   	push   %ebp
  282c1d:	89 e5                	mov    %esp,%ebp
  282c1f:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282c22:	8b 55 0c             	mov    0xc(%ebp),%edx
  282c25:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282c28:	8b 55 10             	mov    0x10(%ebp),%edx
  282c2b:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282c2e:	5d                   	pop    %ebp
  282c2f:	c3                   	ret    

00282c30 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282c30:	55                   	push   %ebp
  282c31:	89 e5                	mov    %esp,%ebp
  282c33:	57                   	push   %edi
  282c34:	56                   	push   %esi
  282c35:	53                   	push   %ebx
  282c36:	83 ec 0c             	sub    $0xc,%esp
  282c39:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282c3c:	a1 a0 76 28 00       	mov    0x2876a0,%eax
  282c41:	03 45 0c             	add    0xc(%ebp),%eax
  282c44:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282c47:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282c4b:	e8 d5 e0 ff ff       	call   280d25 <io_load_eflags>
  282c50:	89 c6                	mov    %eax,%esi
	io_cli();
  282c52:	e8 7b e0 ff ff       	call   280cd2 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282c57:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282c5a:	8b 3d b8 9d 28 00    	mov    0x289db8,%edi
  282c60:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282c63:	77 1e                	ja     282c83 <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282c65:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282c67:	89 1d b8 9d 28 00    	mov    %ebx,0x289db8
		timerctl.next = timer->timeout;
  282c6d:	8b 43 04             	mov    0x4(%ebx),%eax
  282c70:	a3 a4 76 28 00       	mov    %eax,0x2876a4
		io_store_eflags(e);
  282c75:	83 ec 0c             	sub    $0xc,%esp
  282c78:	56                   	push   %esi
  282c79:	e8 aa e0 ff ff       	call   280d28 <io_store_eflags>
		return;
  282c7e:	83 c4 10             	add    $0x10,%esp
  282c81:	eb 3e                	jmp    282cc1 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282c83:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282c85:	85 d2                	test   %edx,%edx
  282c87:	74 2c                	je     282cb5 <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282c89:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282c8c:	77 21                	ja     282caf <timer_settime+0x7f>
  282c8e:	eb 07                	jmp    282c97 <timer_settime+0x67>
  282c90:	3b 48 04             	cmp    0x4(%eax),%ecx
  282c93:	77 18                	ja     282cad <timer_settime+0x7d>
  282c95:	eb 04                	jmp    282c9b <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282c97:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282c99:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282c9b:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282c9d:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282c9f:	83 ec 0c             	sub    $0xc,%esp
  282ca2:	56                   	push   %esi
  282ca3:	e8 80 e0 ff ff       	call   280d28 <io_store_eflags>
			return;
  282ca8:	83 c4 10             	add    $0x10,%esp
  282cab:	eb 14                	jmp    282cc1 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282cad:	89 c2                	mov    %eax,%edx
  282caf:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282cb1:	85 c0                	test   %eax,%eax
  282cb3:	75 db                	jne    282c90 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282cb5:	83 ec 0c             	sub    $0xc,%esp
  282cb8:	56                   	push   %esi
  282cb9:	e8 6a e0 ff ff       	call   280d28 <io_store_eflags>
	return;
  282cbe:	83 c4 10             	add    $0x10,%esp
}
  282cc1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282cc4:	5b                   	pop    %ebx
  282cc5:	5e                   	pop    %esi
  282cc6:	5f                   	pop    %edi
  282cc7:	5d                   	pop    %ebp
  282cc8:	c3                   	ret    

00282cc9 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282cc9:	55                   	push   %ebp
  282cca:	89 e5                	mov    %esp,%ebp
  282ccc:	56                   	push   %esi
  282ccd:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282cce:	83 ec 08             	sub    $0x8,%esp
  282cd1:	6a 60                	push   $0x60
  282cd3:	6a 20                	push   $0x20
  282cd5:	e8 2c e0 ff ff       	call   280d06 <io_out8>
	timerctl.count ++;
  282cda:	a1 a0 76 28 00       	mov    0x2876a0,%eax
  282cdf:	8d 50 01             	lea    0x1(%eax),%edx
  282ce2:	89 15 a0 76 28 00    	mov    %edx,0x2876a0
	
	if(timerctl.count >= timerctl.next)
  282ce8:	83 c4 10             	add    $0x10,%esp
  282ceb:	3b 15 a4 76 28 00    	cmp    0x2876a4,%edx
  282cf1:	72 69                	jb     282d5c <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282cf3:	8b 1d b8 9d 28 00    	mov    0x289db8,%ebx
		while(t)
  282cf9:	85 db                	test   %ebx,%ebx
  282cfb:	75 46                	jne    282d43 <inthandler20+0x7a>
  282cfd:	eb 5d                	jmp    282d5c <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282cff:	8b 43 04             	mov    0x4(%ebx),%eax
  282d02:	3b 05 a0 76 28 00    	cmp    0x2876a0,%eax
  282d08:	77 2c                	ja     282d36 <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282d0a:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282d0e:	39 1d c0 9d 28 00    	cmp    %ebx,0x289dc0
  282d14:	74 13                	je     282d29 <inthandler20+0x60>
  282d16:	83 ec 08             	sub    $0x8,%esp
  282d19:	ff 73 10             	pushl  0x10(%ebx)
  282d1c:	ff 73 0c             	pushl  0xc(%ebx)
  282d1f:	e8 a5 f0 ff ff       	call   281dc9 <fifo32_put>
  282d24:	83 c4 10             	add    $0x10,%esp
  282d27:	eb 05                	jmp    282d2e <inthandler20+0x65>
				else ts=1;
  282d29:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282d2e:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282d30:	85 db                	test   %ebx,%ebx
  282d32:	75 cb                	jne    282cff <inthandler20+0x36>
  282d34:	eb 1b                	jmp    282d51 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282d36:	a3 a4 76 28 00       	mov    %eax,0x2876a4
				timerctl.t0 = t;
  282d3b:	89 1d b8 9d 28 00    	mov    %ebx,0x289db8
				break;
  282d41:	eb 0e                	jmp    282d51 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282d43:	8b 43 04             	mov    0x4(%ebx),%eax
  282d46:	be 00 00 00 00       	mov    $0x0,%esi
  282d4b:	39 c2                	cmp    %eax,%edx
  282d4d:	73 bb                	jae    282d0a <inthandler20+0x41>
  282d4f:	eb e5                	jmp    282d36 <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282d51:	89 f0                	mov    %esi,%eax
  282d53:	84 c0                	test   %al,%al
  282d55:	74 05                	je     282d5c <inthandler20+0x93>
  282d57:	e8 df 04 00 00       	call   28323b <task_switch>
	return;
}
  282d5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282d5f:	5b                   	pop    %ebx
  282d60:	5e                   	pop    %esi
  282d61:	5d                   	pop    %ebp
  282d62:	c3                   	ret    

00282d63 <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282d63:	55                   	push   %ebp
  282d64:	89 e5                	mov    %esp,%ebp
  282d66:	56                   	push   %esi
  282d67:	53                   	push   %ebx
  282d68:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282d6b:	e8 b5 df ff ff       	call   280d25 <io_load_eflags>
  282d70:	89 c6                	mov    %eax,%esi
	io_cli();
  282d72:	e8 5b df ff ff       	call   280cd2 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282d77:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282d7b:	75 3e                	jne    282dbb <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282d7d:	8b 15 b8 9d 28 00    	mov    0x289db8,%edx
  282d83:	39 d3                	cmp    %edx,%ebx
  282d85:	75 13                	jne    282d9a <timer_cancel+0x37>
		{
			t = timer->next;
  282d87:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282d89:	a3 b8 9d 28 00       	mov    %eax,0x289db8
			timerctl.next = t->timeout;
  282d8e:	8b 40 04             	mov    0x4(%eax),%eax
  282d91:	a3 a4 76 28 00       	mov    %eax,0x2876a4
  282d96:	eb 0c                	jmp    282da4 <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282d98:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282d9a:	8b 02                	mov    (%edx),%eax
  282d9c:	39 c3                	cmp    %eax,%ebx
  282d9e:	75 f8                	jne    282d98 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282da0:	8b 03                	mov    (%ebx),%eax
  282da2:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282da4:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282da8:	83 ec 0c             	sub    $0xc,%esp
  282dab:	56                   	push   %esi
  282dac:	e8 77 df ff ff       	call   280d28 <io_store_eflags>
		return 1;
  282db1:	83 c4 10             	add    $0x10,%esp
  282db4:	b8 01 00 00 00       	mov    $0x1,%eax
  282db9:	eb 11                	jmp    282dcc <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282dbb:	83 ec 0c             	sub    $0xc,%esp
  282dbe:	56                   	push   %esi
  282dbf:	e8 64 df ff ff       	call   280d28 <io_store_eflags>
	return 0;
  282dc4:	83 c4 10             	add    $0x10,%esp
  282dc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282dcc:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282dcf:	5b                   	pop    %ebx
  282dd0:	5e                   	pop    %esi
  282dd1:	5d                   	pop    %ebp
  282dd2:	c3                   	ret    

00282dd3 <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282dd3:	55                   	push   %ebp
  282dd4:	89 e5                	mov    %esp,%ebp
  282dd6:	57                   	push   %edi
  282dd7:	56                   	push   %esi
  282dd8:	53                   	push   %ebx
  282dd9:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282ddc:	e8 44 df ff ff       	call   280d25 <io_load_eflags>
  282de1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282de4:	e8 e9 de ff ff       	call   280cd2 <io_cli>
  282de9:	bb a8 76 28 00       	mov    $0x2876a8,%ebx
  282dee:	bf b8 9d 28 00       	mov    $0x289db8,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282df3:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282df7:	74 1e                	je     282e17 <timer_cancelall+0x44>
  282df9:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282dfd:	74 18                	je     282e17 <timer_cancelall+0x44>
  282dff:	8b 45 08             	mov    0x8(%ebp),%eax
  282e02:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282e05:	75 10                	jne    282e17 <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282e07:	83 ec 0c             	sub    $0xc,%esp
  282e0a:	53                   	push   %ebx
  282e0b:	e8 53 ff ff ff       	call   282d63 <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282e10:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282e14:	83 c4 10             	add    $0x10,%esp
  282e17:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282e1a:	39 fb                	cmp    %edi,%ebx
  282e1c:	75 d5                	jne    282df3 <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282e1e:	83 ec 0c             	sub    $0xc,%esp
  282e21:	ff 75 e4             	pushl  -0x1c(%ebp)
  282e24:	e8 ff de ff ff       	call   280d28 <io_store_eflags>
	return;
  282e29:	83 c4 10             	add    $0x10,%esp
}
  282e2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282e2f:	5b                   	pop    %ebx
  282e30:	5e                   	pop    %esi
  282e31:	5f                   	pop    %edi
  282e32:	5d                   	pop    %ebp
  282e33:	c3                   	ret    
  282e34:	66 90                	xchg   %ax,%ax
  282e36:	66 90                	xchg   %ax,%ax
  282e38:	66 90                	xchg   %ax,%ax
  282e3a:	66 90                	xchg   %ax,%ax
  282e3c:	66 90                	xchg   %ax,%ax
  282e3e:	66 90                	xchg   %ax,%ax

00282e40 <load_tr>:
  282e40:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282e45:	c3                   	ret    

00282e46 <farjmp>:
  282e46:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282e4a:	c3                   	ret    

00282e4b <farcall>:
  282e4b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282e4f:	c3                   	ret    

00282e50 <asm_end_app>:
  282e50:	8b 20                	mov    (%eax),%esp
  282e52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282e59:	61                   	popa   
  282e5a:	c3                   	ret    

00282e5b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282e5b:	55                   	push   %ebp
  282e5c:	89 e5                	mov    %esp,%ebp
  282e5e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282e61:	e8 6a de ff ff       	call   280cd0 <io_hlt>
  282e66:	eb f9                	jmp    282e61 <task_idle+0x6>

00282e68 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282e68:	55                   	push   %ebp
  282e69:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282e6b:	8b 0d bc 9d 28 00    	mov    0x289dbc,%ecx
  282e71:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282e78:	74 16                	je     282e90 <task_alloc+0x28>
  282e7a:	8d 91 90 10 00 00    	lea    0x1090(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e80:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282e85:	83 3a 00             	cmpl   $0x0,(%edx)
  282e88:	0f 85 b9 00 00 00    	jne    282f47 <task_alloc+0xdf>
  282e8e:	eb 05                	jmp    282e95 <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e90:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282e95:	69 c0 94 00 00 00    	imul   $0x94,%eax,%eax
			task->flags = 1;
  282e9b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282e9e:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282ea5:	00 00 00 
			task->tss.eflags = 0x202;
  282ea8:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282eaf:	02 00 00 
			task->tss.eax = 0;
  282eb2:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282eb9:	00 00 00 
			task->tss.ecx = 0;
  282ebc:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282ec3:	00 00 00 
			task->tss.edx = 0;
  282ec6:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282ecd:	00 00 00 
			task->tss.ebx = 0;
  282ed0:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282ed7:	00 00 00 
			task->tss.ebp = 0;
  282eda:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282ee1:	00 00 00 
			task->tss.esi = 0;
  282ee4:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282eeb:	00 00 00 
			task->tss.edi = 0;
  282eee:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282ef5:	00 00 00 
			task->tss.es  = 0;
  282ef8:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282eff:	00 00 00 
			task->tss.ds  = 0;
  282f02:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282f09:	00 00 00 
			task->tss.fs  = 0;
  282f0c:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282f13:	00 00 00 
			task->tss.gs  = 0;
  282f16:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282f1d:	00 00 00 
			task->tss.ldtr= 0;
  282f20:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282f27:	00 00 00 
			task->tss.iomap = 0x40000000;
  282f2a:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282f31:	00 00 40 
			task->tss.ss0 = 0;
  282f34:	c7 82 2c 10 00 00 00 	movl   $0x0,0x102c(%edx)
  282f3b:	00 00 00 
			return task;
  282f3e:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282f45:	eb 19                	jmp    282f60 <task_alloc+0xf8>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282f47:	83 c0 01             	add    $0x1,%eax
  282f4a:	81 c2 94 00 00 00    	add    $0x94,%edx
  282f50:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282f55:	0f 85 2a ff ff ff    	jne    282e85 <task_alloc+0x1d>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282f5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282f60:	5d                   	pop    %ebp
  282f61:	c3                   	ret    

00282f62 <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282f62:	55                   	push   %ebp
  282f63:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282f65:	8b 15 bc 9d 28 00    	mov    0x289dbc,%edx
  282f6b:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282f6d:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282f73:	6b c0 66             	imul   $0x66,%eax,%eax
  282f76:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282f7a:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282f7e:	5d                   	pop    %ebp
  282f7f:	c3                   	ret    

00282f80 <task_add>:

void task_add(struct TASK *task)
{
  282f80:	55                   	push   %ebp
  282f81:	89 e5                	mov    %esp,%ebp
  282f83:	56                   	push   %esi
  282f84:	53                   	push   %ebx
  282f85:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282f88:	8b 35 bc 9d 28 00    	mov    0x289dbc,%esi
  282f8e:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282f91:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282f97:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282f99:	8b 50 08             	mov    0x8(%eax),%edx
  282f9c:	83 fa 64             	cmp    $0x64,%edx
  282f9f:	74 14                	je     282fb5 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282fa1:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282fa4:	01 ca                	add    %ecx,%edx
  282fa6:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282faa:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282fae:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282fb5:	5b                   	pop    %ebx
  282fb6:	5e                   	pop    %esi
  282fb7:	5d                   	pop    %ebp
  282fb8:	c3                   	ret    

00282fb9 <task_remove>:

void task_remove(struct TASK *task)
{
  282fb9:	55                   	push   %ebp
  282fba:	89 e5                	mov    %esp,%ebp
  282fbc:	57                   	push   %edi
  282fbd:	56                   	push   %esi
  282fbe:	53                   	push   %ebx
  282fbf:	83 ec 04             	sub    $0x4,%esp
  282fc2:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282fc5:	8b 3d bc 9d 28 00    	mov    0x289dbc,%edi
  282fcb:	8b 43 08             	mov    0x8(%ebx),%eax
  282fce:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282fd1:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282fd7:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282fd9:	8b 4a 08             	mov    0x8(%edx),%ecx
  282fdc:	85 c9                	test   %ecx,%ecx
  282fde:	7e 1d                	jle    282ffd <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282fe0:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282fe3:	74 1f                	je     283004 <task_remove+0x4b>
  282fe5:	b8 00 00 00 00       	mov    $0x0,%eax
  282fea:	eb 06                	jmp    282ff2 <task_remove+0x39>
  282fec:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282ff0:	74 17                	je     283009 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282ff2:	83 c0 01             	add    $0x1,%eax
  282ff5:	39 c8                	cmp    %ecx,%eax
  282ff7:	75 f3                	jne    282fec <task_remove+0x33>
  282ff9:	89 c8                	mov    %ecx,%eax
  282ffb:	eb 0c                	jmp    283009 <task_remove+0x50>
  282ffd:	b8 00 00 00 00       	mov    $0x0,%eax
  283002:	eb 05                	jmp    283009 <task_remove+0x50>
  283004:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  283009:	83 e9 01             	sub    $0x1,%ecx
  28300c:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  28300f:	8b 72 0c             	mov    0xc(%edx),%esi
  283012:	39 c6                	cmp    %eax,%esi
  283014:	7e 06                	jle    28301c <task_remove+0x63>
	{
		tl->now--;
  283016:	83 ee 01             	sub    $0x1,%esi
  283019:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  28301c:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  28301f:	7f 07                	jg     283028 <task_remove+0x6f>
	{
		tl->now = 0;
  283021:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  283028:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  28302f:	39 42 08             	cmp    %eax,0x8(%edx)
  283032:	7e 1b                	jle    28304f <task_remove+0x96>
  283034:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  283038:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  28303c:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  28303f:	83 c0 01             	add    $0x1,%eax
  283042:	8b 19                	mov    (%ecx),%ebx
  283044:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  283047:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  28304a:	39 42 08             	cmp    %eax,0x8(%edx)
  28304d:	7f f0                	jg     28303f <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  28304f:	83 c4 04             	add    $0x4,%esp
  283052:	5b                   	pop    %ebx
  283053:	5e                   	pop    %esi
  283054:	5f                   	pop    %edi
  283055:	5d                   	pop    %ebp
  283056:	c3                   	ret    

00283057 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  283057:	55                   	push   %ebp
  283058:	89 e5                	mov    %esp,%ebp
  28305a:	56                   	push   %esi
  28305b:	53                   	push   %ebx
  28305c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28305f:	8b 75 0c             	mov    0xc(%ebp),%esi
  283062:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  283065:	85 f6                	test   %esi,%esi
  283067:	79 03                	jns    28306c <task_run+0x15>
  283069:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  28306c:	85 c0                	test   %eax,%eax
  28306e:	7e 03                	jle    283073 <task_run+0x1c>
  283070:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  283073:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  283077:	75 14                	jne    28308d <task_run+0x36>
  283079:	3b 73 08             	cmp    0x8(%ebx),%esi
  28307c:	74 1b                	je     283099 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  28307e:	53                   	push   %ebx
  28307f:	e8 35 ff ff ff       	call   282fb9 <task_remove>
	}
	if(task->flags != 2)
  283084:	83 c4 04             	add    $0x4,%esp
  283087:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  28308b:	74 0c                	je     283099 <task_run+0x42>
	{
		task->level = level;
  28308d:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  283090:	53                   	push   %ebx
  283091:	e8 ea fe ff ff       	call   282f80 <task_add>
  283096:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  283099:	a1 bc 9d 28 00       	mov    0x289dbc,%eax
  28309e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  2830a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2830a5:	5b                   	pop    %ebx
  2830a6:	5e                   	pop    %esi
  2830a7:	5d                   	pop    %ebp
  2830a8:	c3                   	ret    

002830a9 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  2830a9:	55                   	push   %ebp
  2830aa:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  2830ac:	8b 0d bc 9d 28 00    	mov    0x289dbc,%ecx
  2830b2:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  2830b6:	7f 20                	jg     2830d8 <task_switchsub+0x2f>
  2830b8:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  2830be:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  2830c3:	83 3a 00             	cmpl   $0x0,(%edx)
  2830c6:	7f 15                	jg     2830dd <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  2830c8:	83 c0 01             	add    $0x1,%eax
  2830cb:	81 c2 98 01 00 00    	add    $0x198,%edx
  2830d1:	83 f8 0a             	cmp    $0xa,%eax
  2830d4:	75 ed                	jne    2830c3 <task_switchsub+0x1a>
  2830d6:	eb 05                	jmp    2830dd <task_switchsub+0x34>
  2830d8:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  2830dd:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  2830df:	a1 bc 9d 28 00       	mov    0x289dbc,%eax
  2830e4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  2830e8:	5d                   	pop    %ebp
  2830e9:	c3                   	ret    

002830ea <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  2830ea:	55                   	push   %ebp
  2830eb:	89 e5                	mov    %esp,%ebp
  2830ed:	57                   	push   %edi
  2830ee:	56                   	push   %esi
  2830ef:	53                   	push   %ebx
  2830f0:	83 ec 14             	sub    $0x14,%esp
  2830f3:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  2830f6:	68 18 52 02 00       	push   $0x25218
  2830fb:	57                   	push   %edi
  2830fc:	e8 4c f4 ff ff       	call   28254d <memman_alloc_4k>
  283101:	a3 bc 9d 28 00       	mov    %eax,0x289dbc
  283106:	83 c4 10             	add    $0x10,%esp
  283109:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  28310e:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  283113:	8b 15 bc 9d 28 00    	mov    0x289dbc,%edx
  283119:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
  28311f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  283122:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  283129:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  28312c:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  283132:	68 89 00 00 00       	push   $0x89
  283137:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  28313e:	50                   	push   %eax
  28313f:	6a 67                	push   $0x67
  283141:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  283147:	50                   	push   %eax
  283148:	e8 25 e5 ff ff       	call   281672 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  28314d:	83 c3 01             	add    $0x1,%ebx
  283150:	83 c6 08             	add    $0x8,%esi
  283153:	83 c4 10             	add    $0x10,%esp
  283156:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  28315c:	75 b5                	jne    283113 <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  28315e:	8b 15 bc 9d 28 00    	mov    0x289dbc,%edx
  283164:	8d 42 08             	lea    0x8(%edx),%eax
  283167:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  28316d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  283173:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  28317a:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  28317f:	39 d0                	cmp    %edx,%eax
  283181:	75 ea                	jne    28316d <task_init+0x83>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  283183:	e8 e0 fc ff ff       	call   282e68 <task_alloc>
  283188:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  28318a:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  283191:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  283198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  28319f:	83 ec 0c             	sub    $0xc,%esp
  2831a2:	50                   	push   %eax
  2831a3:	e8 d8 fd ff ff       	call   282f80 <task_add>
	
	task_switchsub();
  2831a8:	e8 fc fe ff ff       	call   2830a9 <task_switchsub>
	load_tr(task->sel);
  2831ad:	83 c4 04             	add    $0x4,%esp
  2831b0:	ff 36                	pushl  (%esi)
  2831b2:	e8 89 fc ff ff       	call   282e40 <load_tr>
	task_timer = timer_alloc();
  2831b7:	e8 92 f9 ff ff       	call   282b4e <timer_alloc>
  2831bc:	a3 c0 9d 28 00       	mov    %eax,0x289dc0
	timer_settime(task_timer,task->priority);
  2831c1:	83 c4 08             	add    $0x8,%esp
  2831c4:	ff 76 0c             	pushl  0xc(%esi)
  2831c7:	50                   	push   %eax
  2831c8:	e8 63 fa ff ff       	call   282c30 <timer_settime>

	struct TASK *idle = task_alloc();
  2831cd:	e8 96 fc ff ff       	call   282e68 <task_alloc>
  2831d2:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  2831d4:	83 c4 08             	add    $0x8,%esp
  2831d7:	68 00 00 01 00       	push   $0x10000
  2831dc:	57                   	push   %edi
  2831dd:	e8 2f f0 ff ff       	call   282211 <memman_alloc>
  2831e2:	05 00 00 01 00       	add    $0x10000,%eax
  2831e7:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  2831ea:	c7 43 4c 5b 2e 00 00 	movl   $0x2e5b,0x4c(%ebx)
	idle->tss.es = 1*8;
  2831f1:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  2831f8:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  2831ff:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  283206:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  28320d:	00 00 00 
	idle->tss.fs = 1*8;
  283210:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  283217:	00 00 00 
	idle->tss.gs = 1*8;
  28321a:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283221:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  283224:	83 c4 0c             	add    $0xc,%esp
  283227:	6a 01                	push   $0x1
  283229:	6a 09                	push   $0x9
  28322b:	53                   	push   %ebx
  28322c:	e8 26 fe ff ff       	call   283057 <task_run>
	return task;
}
  283231:	89 f0                	mov    %esi,%eax
  283233:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283236:	5b                   	pop    %ebx
  283237:	5e                   	pop    %esi
  283238:	5f                   	pop    %edi
  283239:	5d                   	pop    %ebp
  28323a:	c3                   	ret    

0028323b <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  28323b:	55                   	push   %ebp
  28323c:	89 e5                	mov    %esp,%ebp
  28323e:	56                   	push   %esi
  28323f:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  283240:	8b 0d bc 9d 28 00    	mov    0x289dbc,%ecx
  283246:	8b 31                	mov    (%ecx),%esi
  283248:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  28324e:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  283250:	8b 50 0c             	mov    0xc(%eax),%edx
  283253:	6b de 66             	imul   $0x66,%esi,%ebx
  283256:	01 d3                	add    %edx,%ebx
  283258:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  28325c:	83 c2 01             	add    $0x1,%edx
  28325f:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  283262:	3b 50 08             	cmp    0x8(%eax),%edx
  283265:	75 07                	jne    28326e <task_switch+0x33>
	{
		tl->now = 0;
  283267:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  28326e:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  283272:	75 0c                	jne    283280 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  283274:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  28327a:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  28327e:	eb 14                	jmp    283294 <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  283280:	e8 24 fe ff ff       	call   2830a9 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  283285:	a1 bc 9d 28 00       	mov    0x289dbc,%eax
  28328a:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  283290:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  283294:	8b 50 04             	mov    0x4(%eax),%edx
  283297:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  28329b:	83 ec 08             	sub    $0x8,%esp
  28329e:	ff 76 0c             	pushl  0xc(%esi)
  2832a1:	ff 35 c0 9d 28 00    	pushl  0x289dc0
  2832a7:	e8 84 f9 ff ff       	call   282c30 <timer_settime>
	if(new_task != now_task)
  2832ac:	83 c4 10             	add    $0x10,%esp
  2832af:	39 f3                	cmp    %esi,%ebx
  2832b1:	74 0f                	je     2832c2 <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  2832b3:	83 ec 08             	sub    $0x8,%esp
  2832b6:	ff 36                	pushl  (%esi)
  2832b8:	6a 00                	push   $0x0
  2832ba:	e8 87 fb ff ff       	call   282e46 <farjmp>
  2832bf:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  2832c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2832c5:	5b                   	pop    %ebx
  2832c6:	5e                   	pop    %esi
  2832c7:	5d                   	pop    %ebp
  2832c8:	c3                   	ret    

002832c9 <task_sleep>:

void task_sleep(struct TASK *task)
{
  2832c9:	55                   	push   %ebp
  2832ca:	89 e5                	mov    %esp,%ebp
  2832cc:	56                   	push   %esi
  2832cd:	53                   	push   %ebx
  2832ce:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  2832d1:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  2832d5:	75 2d                	jne    283304 <task_sleep+0x3b>
	{
		now_task = task_now();
  2832d7:	e8 86 fc ff ff       	call   282f62 <task_now>
  2832dc:	89 c6                	mov    %eax,%esi
		task_remove(task);
  2832de:	53                   	push   %ebx
  2832df:	e8 d5 fc ff ff       	call   282fb9 <task_remove>
		if(task == now_task)
  2832e4:	83 c4 04             	add    $0x4,%esp
  2832e7:	39 f3                	cmp    %esi,%ebx
  2832e9:	75 19                	jne    283304 <task_sleep+0x3b>
		{
			task_switchsub();
  2832eb:	e8 b9 fd ff ff       	call   2830a9 <task_switchsub>
			now_task = task_now();
  2832f0:	e8 6d fc ff ff       	call   282f62 <task_now>
			farjmp(0,now_task->sel);
  2832f5:	83 ec 08             	sub    $0x8,%esp
  2832f8:	ff 30                	pushl  (%eax)
  2832fa:	6a 00                	push   $0x0
  2832fc:	e8 45 fb ff ff       	call   282e46 <farjmp>
  283301:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283304:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283307:	5b                   	pop    %ebx
  283308:	5e                   	pop    %esi
  283309:	5d                   	pop    %ebp
  28330a:	c3                   	ret    

0028330b <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  28330b:	55                   	push   %ebp
  28330c:	89 e5                	mov    %esp,%ebp
  28330e:	57                   	push   %edi
  28330f:	56                   	push   %esi
  283310:	53                   	push   %ebx
  283311:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
  283317:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  28331a:	e8 43 fc ff ff       	call   282f62 <task_now>
  28331f:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  283325:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  283328:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  28332f:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  283336:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	*((int *)0x0fec) = (int)&cons; //for api
  28333d:	8d 5d b4             	lea    -0x4c(%ebp),%ebx
  283340:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int i,fifobuf[128];
	fifo32_init(&task->fifo,128,fifobuf,task);
  283346:	8d 70 10             	lea    0x10(%eax),%esi
  283349:	50                   	push   %eax
  28334a:	8d 85 b4 fd ff ff    	lea    -0x24c(%ebp),%eax
  283350:	50                   	push   %eax
  283351:	68 80 00 00 00       	push   $0x80
  283356:	56                   	push   %esi
  283357:	e8 3c ea ff ff       	call   281d98 <fifo32_init>
	cons.timer = timer_alloc();
  28335c:	e8 ed f7 ff ff       	call   282b4e <timer_alloc>
  283361:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  283364:	83 c4 0c             	add    $0xc,%esp
  283367:	6a 01                	push   $0x1
  283369:	56                   	push   %esi
  28336a:	50                   	push   %eax
  28336b:	e8 ac f8 ff ff       	call   282c1c <timer_init>
	timer_settime(cons.timer,50);
  283370:	83 c4 08             	add    $0x8,%esp
  283373:	6a 32                	push   $0x32
  283375:	ff 75 c4             	pushl  -0x3c(%ebp)
  283378:	e8 b3 f8 ff ff       	call   282c30 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  28337d:	83 c4 08             	add    $0x8,%esp
  283380:	68 00 2d 00 00       	push   $0x2d00
  283385:	68 00 00 3c 00       	push   $0x3c0000
  28338a:	e8 be f1 ff ff       	call   28254d <memman_alloc_4k>
  28338f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  283395:	83 c4 08             	add    $0x8,%esp
  283398:	68 00 02 10 00       	push   $0x100200
  28339d:	50                   	push   %eax
  28339e:	e8 0e 02 00 00       	call   2835b1 <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  2833a3:	83 c4 0c             	add    $0xc,%esp
  2833a6:	6a 01                	push   $0x1
  2833a8:	6a 3e                	push   $0x3e
  2833aa:	53                   	push   %ebx
  2833ab:	e8 9b 05 00 00       	call   28394b <cons_putchar>
  2833b0:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  2833b3:	e8 1a d9 ff ff       	call   280cd2 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  2833b8:	83 ec 0c             	sub    $0xc,%esp
  2833bb:	56                   	push   %esi
  2833bc:	e8 b5 ea ff ff       	call   281e76 <fifo32_status>
  2833c1:	83 c4 10             	add    $0x10,%esp
  2833c4:	85 c0                	test   %eax,%eax
  2833c6:	75 18                	jne    2833e0 <console_task+0xd5>
		{
			task_sleep(task);
  2833c8:	83 ec 0c             	sub    $0xc,%esp
  2833cb:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
  2833d1:	e8 f3 fe ff ff       	call   2832c9 <task_sleep>
			io_sti();
  2833d6:	e8 f9 d8 ff ff       	call   280cd4 <io_sti>
  2833db:	83 c4 10             	add    $0x10,%esp
  2833de:	eb d3                	jmp    2833b3 <console_task+0xa8>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  2833e0:	83 ec 0c             	sub    $0xc,%esp
  2833e3:	56                   	push   %esi
  2833e4:	e8 52 ea ff ff       	call   281e3b <fifo32_get>
  2833e9:	89 c3                	mov    %eax,%ebx
			io_sti();
  2833eb:	e8 e4 d8 ff ff       	call   280cd4 <io_sti>
			if(i<=1) //for cursor
  2833f0:	83 c4 10             	add    $0x10,%esp
  2833f3:	83 fb 01             	cmp    $0x1,%ebx
  2833f6:	7f 57                	jg     28344f <console_task+0x144>
			{
				if(i!=0)
  2833f8:	85 db                	test   %ebx,%ebx
  2833fa:	74 20                	je     28341c <console_task+0x111>
				{
					timer_init(cons.timer,&task->fifo,0);
  2833fc:	83 ec 04             	sub    $0x4,%esp
  2833ff:	6a 00                	push   $0x0
  283401:	56                   	push   %esi
  283402:	ff 75 c4             	pushl  -0x3c(%ebp)
  283405:	e8 12 f8 ff ff       	call   282c1c <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  28340a:	83 c4 10             	add    $0x10,%esp
  28340d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  283411:	78 27                	js     28343a <console_task+0x12f>
  283413:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  28341a:	eb 1e                	jmp    28343a <console_task+0x12f>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  28341c:	83 ec 04             	sub    $0x4,%esp
  28341f:	6a 01                	push   $0x1
  283421:	56                   	push   %esi
  283422:	ff 75 c4             	pushl  -0x3c(%ebp)
  283425:	e8 f2 f7 ff ff       	call   282c1c <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  28342a:	83 c4 10             	add    $0x10,%esp
  28342d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  283431:	78 07                	js     28343a <console_task+0x12f>
  283433:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  28343a:	83 ec 08             	sub    $0x8,%esp
  28343d:	6a 32                	push   $0x32
  28343f:	ff 75 c4             	pushl  -0x3c(%ebp)
  283442:	e8 e9 f7 ff ff       	call   282c30 <timer_settime>
  283447:	83 c4 10             	add    $0x10,%esp
  28344a:	e9 16 01 00 00       	jmp    283565 <console_task+0x25a>
							
			}
			else if(i == 2) //get show cursor msg
  28344f:	83 fb 02             	cmp    $0x2,%ebx
  283452:	75 11                	jne    283465 <console_task+0x15a>
			{
				cons.cur_c = COL8_FFFFFF;
  283454:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  28345b:	b8 07 00 00 00       	mov    $0x7,%eax
  283460:	e9 07 01 00 00       	jmp    28356c <console_task+0x261>
			}
			else if(i == 2) //get show cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide cursor msg
  283465:	83 fb 03             	cmp    $0x3,%ebx
  283468:	75 2a                	jne    283494 <console_task+0x189>
			{
				cons.cur_c = -1;
  28346a:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,28,cons.cur_x+7,43);
  283471:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283474:	83 ec 04             	sub    $0x4,%esp
  283477:	6a 2b                	push   $0x2b
  283479:	8d 50 07             	lea    0x7(%eax),%edx
  28347c:	52                   	push   %edx
  28347d:	6a 1c                	push   $0x1c
  28347f:	50                   	push   %eax
  283480:	6a 00                	push   $0x0
  283482:	ff 77 04             	pushl  0x4(%edi)
  283485:	ff 37                	pushl  (%edi)
  283487:	e8 35 da ff ff       	call   280ec1 <boxfill8>
  28348c:	83 c4 20             	add    $0x20,%esp
  28348f:	e9 d1 00 00 00       	jmp    283565 <console_task+0x25a>
			}
			else if(256<=i && i<=511)
  283494:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  28349a:	3d ff 00 00 00       	cmp    $0xff,%eax
  28349f:	0f 87 c0 00 00 00    	ja     283565 <console_task+0x25a>
			{
				if(i == 8+256) //back key
  2834a5:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  2834ab:	75 26                	jne    2834d3 <console_task+0x1c8>
				{
					if(cons.cur_x > 16)
  2834ad:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  2834b1:	0f 8e ae 00 00 00    	jle    283565 <console_task+0x25a>
					{
						cons_putchar(&cons,' ',0);
  2834b7:	83 ec 04             	sub    $0x4,%esp
  2834ba:	6a 00                	push   $0x0
  2834bc:	6a 20                	push   $0x20
  2834be:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834c1:	50                   	push   %eax
  2834c2:	e8 84 04 00 00       	call   28394b <cons_putchar>
						cons.cur_x -= 8;
  2834c7:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  2834cb:	83 c4 10             	add    $0x10,%esp
  2834ce:	e9 92 00 00 00       	jmp    283565 <console_task+0x25a>
					}
				}
				else if(i == 10+256) //return key
  2834d3:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  2834d9:	75 59                	jne    283534 <console_task+0x229>
				{
					cons_putchar(&cons,' ',0);
  2834db:	83 ec 04             	sub    $0x4,%esp
  2834de:	6a 00                	push   $0x0
  2834e0:	6a 20                	push   $0x20
  2834e2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834e5:	50                   	push   %eax
  2834e6:	e8 60 04 00 00       	call   28394b <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  2834eb:	8b 55 b8             	mov    -0x48(%ebp),%edx
  2834ee:	8d 42 07             	lea    0x7(%edx),%eax
  2834f1:	85 d2                	test   %edx,%edx
  2834f3:	0f 49 c2             	cmovns %edx,%eax
  2834f6:	c1 f8 03             	sar    $0x3,%eax
  2834f9:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  2834fe:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283501:	89 04 24             	mov    %eax,(%esp)
  283504:	e8 77 03 00 00       	call   283880 <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  283509:	ff 75 0c             	pushl  0xc(%ebp)
  28350c:	ff b5 a0 fd ff ff    	pushl  -0x260(%ebp)
  283512:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283515:	50                   	push   %eax
  283516:	8d 45 ca             	lea    -0x36(%ebp),%eax
  283519:	50                   	push   %eax
  28351a:	e8 14 0a 00 00       	call   283f33 <cons_runcmd>
					cons_putchar(&cons,'>',1);
  28351f:	83 c4 1c             	add    $0x1c,%esp
  283522:	6a 01                	push   $0x1
  283524:	6a 3e                	push   $0x3e
  283526:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283529:	50                   	push   %eax
  28352a:	e8 1c 04 00 00       	call   28394b <cons_putchar>
  28352f:	83 c4 10             	add    $0x10,%esp
  283532:	eb 31                	jmp    283565 <console_task+0x25a>
				}
				else
				{
					if(cons.cur_x<240)
  283534:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283537:	3d ef 00 00 00       	cmp    $0xef,%eax
  28353c:	7f 27                	jg     283565 <console_task+0x25a>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  28353e:	8d 50 07             	lea    0x7(%eax),%edx
  283541:	85 c0                	test   %eax,%eax
  283543:	0f 48 c2             	cmovs  %edx,%eax
  283546:	c1 f8 03             	sar    $0x3,%eax
  283549:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  28354d:	83 ec 04             	sub    $0x4,%esp
  283550:	6a 01                	push   $0x1
  283552:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  283558:	53                   	push   %ebx
  283559:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28355c:	50                   	push   %eax
  28355d:	e8 e9 03 00 00       	call   28394b <cons_putchar>
  283562:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283565:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283568:	85 c0                	test   %eax,%eax
  28356a:	78 24                	js     283590 <console_task+0x285>
  28356c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  28356f:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283572:	83 ec 04             	sub    $0x4,%esp
  283575:	8d 59 0f             	lea    0xf(%ecx),%ebx
  283578:	53                   	push   %ebx
  283579:	8d 5a 07             	lea    0x7(%edx),%ebx
  28357c:	53                   	push   %ebx
  28357d:	51                   	push   %ecx
  28357e:	52                   	push   %edx
  28357f:	0f b6 c0             	movzbl %al,%eax
  283582:	50                   	push   %eax
  283583:	ff 77 04             	pushl  0x4(%edi)
  283586:	ff 37                	pushl  (%edi)
  283588:	e8 34 d9 ff ff       	call   280ec1 <boxfill8>
  28358d:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  283590:	8b 55 bc             	mov    -0x44(%ebp),%edx
  283593:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283596:	83 ec 0c             	sub    $0xc,%esp
  283599:	8d 4a 10             	lea    0x10(%edx),%ecx
  28359c:	51                   	push   %ecx
  28359d:	8d 48 08             	lea    0x8(%eax),%ecx
  2835a0:	51                   	push   %ecx
  2835a1:	52                   	push   %edx
  2835a2:	50                   	push   %eax
  2835a3:	57                   	push   %edi
  2835a4:	e8 05 f4 ff ff       	call   2829ae <sheet_refresh>
  2835a9:	83 c4 20             	add    $0x20,%esp
  2835ac:	e9 02 fe ff ff       	jmp    2833b3 <console_task+0xa8>

002835b1 <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2835b1:	55                   	push   %ebp
  2835b2:	89 e5                	mov    %esp,%ebp
  2835b4:	53                   	push   %ebx
  2835b5:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2835b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2835bf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2835c6:	e9 87 00 00 00       	jmp    283652 <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  2835cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835d5:	8b 45 08             	mov    0x8(%ebp),%eax
  2835d8:	01 d0                	add    %edx,%eax
  2835da:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835dd:	8b 55 0c             	mov    0xc(%ebp),%edx
  2835e0:	01 ca                	add    %ecx,%edx
  2835e2:	0f b6 12             	movzbl (%edx),%edx
  2835e5:	0f b6 d2             	movzbl %dl,%edx
  2835e8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835eb:	8d 59 01             	lea    0x1(%ecx),%ebx
  2835ee:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2835f1:	01 d9                	add    %ebx,%ecx
  2835f3:	0f b6 09             	movzbl (%ecx),%ecx
  2835f6:	0f b6 c9             	movzbl %cl,%ecx
  2835f9:	c1 e1 08             	shl    $0x8,%ecx
  2835fc:	09 ca                	or     %ecx,%edx
  2835fe:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283604:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  283606:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283609:	83 c0 01             	add    $0x1,%eax
  28360c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283613:	8b 45 08             	mov    0x8(%ebp),%eax
  283616:	01 d0                	add    %edx,%eax
  283618:	8b 55 f4             	mov    -0xc(%ebp),%edx
  28361b:	8d 4a 01             	lea    0x1(%edx),%ecx
  28361e:	8b 55 0c             	mov    0xc(%ebp),%edx
  283621:	01 ca                	add    %ecx,%edx
  283623:	0f b6 12             	movzbl (%edx),%edx
  283626:	c0 ea 04             	shr    $0x4,%dl
  283629:	0f b6 d2             	movzbl %dl,%edx
  28362c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28362f:	8d 59 02             	lea    0x2(%ecx),%ebx
  283632:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283635:	01 d9                	add    %ebx,%ecx
  283637:	0f b6 09             	movzbl (%ecx),%ecx
  28363a:	0f b6 c9             	movzbl %cl,%ecx
  28363d:	c1 e1 04             	shl    $0x4,%ecx
  283640:	09 ca                	or     %ecx,%edx
  283642:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283648:	89 10                	mov    %edx,(%eax)
		j+=3;
  28364a:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  28364e:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  283652:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283659:	0f 8e 6c ff ff ff    	jle    2835cb <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  28365f:	90                   	nop
}
  283660:	83 c4 10             	add    $0x10,%esp
  283663:	5b                   	pop    %ebx
  283664:	5d                   	pop    %ebp
  283665:	c3                   	ret    

00283666 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  283666:	55                   	push   %ebp
  283667:	89 e5                	mov    %esp,%ebp
  283669:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  28366c:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  283673:	7f 38                	jg     2836ad <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  283675:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28367c:	eb 25                	jmp    2836a3 <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  28367e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283681:	8b 45 10             	mov    0x10(%ebp),%eax
  283684:	01 c2                	add    %eax,%edx
  283686:	8b 45 08             	mov    0x8(%ebp),%eax
  283689:	c1 e0 09             	shl    $0x9,%eax
  28368c:	89 c1                	mov    %eax,%ecx
  28368e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283691:	01 c8                	add    %ecx,%eax
  283693:	89 c1                	mov    %eax,%ecx
  283695:	8b 45 18             	mov    0x18(%ebp),%eax
  283698:	01 c8                	add    %ecx,%eax
  28369a:	0f b6 00             	movzbl (%eax),%eax
  28369d:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  28369f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2836a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2836a9:	7c d3                	jl     28367e <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  2836ab:	eb 5e                	jmp    28370b <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2836ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2836b4:	eb 25                	jmp    2836db <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2836b6:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2836b9:	8b 45 10             	mov    0x10(%ebp),%eax
  2836bc:	01 c2                	add    %eax,%edx
  2836be:	8b 45 08             	mov    0x8(%ebp),%eax
  2836c1:	c1 e0 09             	shl    $0x9,%eax
  2836c4:	89 c1                	mov    %eax,%ecx
  2836c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836c9:	01 c8                	add    %ecx,%eax
  2836cb:	89 c1                	mov    %eax,%ecx
  2836cd:	8b 45 18             	mov    0x18(%ebp),%eax
  2836d0:	01 c8                	add    %ecx,%eax
  2836d2:	0f b6 00             	movzbl (%eax),%eax
  2836d5:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  2836d7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2836db:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  2836e2:	7e d2                	jle    2836b6 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  2836e4:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  2836eb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  2836f2:	8b 45 08             	mov    0x8(%ebp),%eax
  2836f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2836fc:	8b 45 14             	mov    0x14(%ebp),%eax
  2836ff:	01 d0                	add    %edx,%eax
  283701:	8b 00                	mov    (%eax),%eax
  283703:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  283706:	e9 61 ff ff ff       	jmp    28366c <file_loadfile+0x6>
	return;
}
  28370b:	c9                   	leave  
  28370c:	c3                   	ret    

0028370d <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  28370d:	55                   	push   %ebp
  28370e:	89 e5                	mov    %esp,%ebp
  283710:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283713:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28371a:	eb 0f                	jmp    28372b <file_search+0x1e>
	{
		s[j] = ' ';
  28371c:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28371f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283722:	01 d0                	add    %edx,%eax
  283724:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283727:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28372b:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28372f:	7e eb                	jle    28371c <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  283731:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283738:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28373f:	e9 83 00 00 00       	jmp    2837c7 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283744:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283748:	7e 0a                	jle    283754 <file_search+0x47>
  28374a:	b8 00 00 00 00       	mov    $0x0,%eax
  28374f:	e9 2a 01 00 00       	jmp    28387e <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283754:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283757:	8b 45 08             	mov    0x8(%ebp),%eax
  28375a:	01 d0                	add    %edx,%eax
  28375c:	0f b6 00             	movzbl (%eax),%eax
  28375f:	3c 2e                	cmp    $0x2e,%al
  283761:	75 0f                	jne    283772 <file_search+0x65>
  283763:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  283767:	7f 09                	jg     283772 <file_search+0x65>
			j = 8;
  283769:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  283770:	eb 51                	jmp    2837c3 <file_search+0xb6>
		else
		{
			s[j] = name[i];
  283772:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283775:	8b 45 08             	mov    0x8(%ebp),%eax
  283778:	01 d0                	add    %edx,%eax
  28377a:	0f b6 00             	movzbl (%eax),%eax
  28377d:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283780:	8b 55 f8             	mov    -0x8(%ebp),%edx
  283783:	01 ca                	add    %ecx,%edx
  283785:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  283787:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28378a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28378d:	01 d0                	add    %edx,%eax
  28378f:	0f b6 00             	movzbl (%eax),%eax
  283792:	3c 60                	cmp    $0x60,%al
  283794:	7e 29                	jle    2837bf <file_search+0xb2>
  283796:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283799:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28379c:	01 d0                	add    %edx,%eax
  28379e:	0f b6 00             	movzbl (%eax),%eax
  2837a1:	3c 7a                	cmp    $0x7a,%al
  2837a3:	7f 1a                	jg     2837bf <file_search+0xb2>
				s[j] -= 0x20;
  2837a5:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2837a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2837ab:	01 d0                	add    %edx,%eax
  2837ad:	0f b6 00             	movzbl (%eax),%eax
  2837b0:	83 e8 20             	sub    $0x20,%eax
  2837b3:	89 c1                	mov    %eax,%ecx
  2837b5:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2837b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2837bb:	01 d0                	add    %edx,%eax
  2837bd:	88 08                	mov    %cl,(%eax)
			j++;
  2837bf:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  2837c3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2837c7:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2837ca:	8b 45 08             	mov    0x8(%ebp),%eax
  2837cd:	01 d0                	add    %edx,%eax
  2837cf:	0f b6 00             	movzbl (%eax),%eax
  2837d2:	84 c0                	test   %al,%al
  2837d4:	0f 85 6a ff ff ff    	jne    283744 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2837da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2837e1:	e9 84 00 00 00       	jmp    28386a <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  2837e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837e9:	c1 e0 06             	shl    $0x6,%eax
  2837ec:	89 c2                	mov    %eax,%edx
  2837ee:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837f1:	01 d0                	add    %edx,%eax
  2837f3:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  2837f7:	84 c0                	test   %al,%al
  2837f9:	74 7d                	je     283878 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  2837fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837fe:	c1 e0 06             	shl    $0x6,%eax
  283801:	89 c2                	mov    %eax,%edx
  283803:	8b 45 0c             	mov    0xc(%ebp),%eax
  283806:	01 d0                	add    %edx,%eax
  283808:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  28380c:	0f b6 c0             	movzbl %al,%eax
  28380f:	83 e0 18             	and    $0x18,%eax
  283812:	85 c0                	test   %eax,%eax
  283814:	75 50                	jne    283866 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  283816:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28381d:	eb 31                	jmp    283850 <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  28381f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283822:	c1 e0 06             	shl    $0x6,%eax
  283825:	89 c2                	mov    %eax,%edx
  283827:	8b 45 0c             	mov    0xc(%ebp),%eax
  28382a:	01 c2                	add    %eax,%edx
  28382c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28382f:	01 d0                	add    %edx,%eax
  283831:	83 c0 20             	add    $0x20,%eax
  283834:	0f b6 00             	movzbl (%eax),%eax
  283837:	0f b6 d0             	movzbl %al,%edx
  28383a:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28383d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283840:	01 c8                	add    %ecx,%eax
  283842:	0f b6 00             	movzbl (%eax),%eax
  283845:	0f be c0             	movsbl %al,%eax
  283848:	39 c2                	cmp    %eax,%edx
  28384a:	75 19                	jne    283865 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  28384c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283850:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283854:	7e c9                	jle    28381f <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283856:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283859:	c1 e0 06             	shl    $0x6,%eax
  28385c:	89 c2                	mov    %eax,%edx
  28385e:	8b 45 0c             	mov    0xc(%ebp),%eax
  283861:	01 d0                	add    %edx,%eax
  283863:	eb 19                	jmp    28387e <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  283865:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  283866:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  28386a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28386d:	3b 45 10             	cmp    0x10(%ebp),%eax
  283870:	0f 8c 70 ff ff ff    	jl     2837e6 <file_search+0xd9>
  283876:	eb 01                	jmp    283879 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  283878:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  283879:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28387e:	c9                   	leave  
  28387f:	c3                   	ret    

00283880 <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  283880:	55                   	push   %ebp
  283881:	89 e5                	mov    %esp,%ebp
  283883:	57                   	push   %edi
  283884:	56                   	push   %esi
  283885:	53                   	push   %ebx
  283886:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  283889:	8b 45 08             	mov    0x8(%ebp),%eax
  28388c:	8b 40 08             	mov    0x8(%eax),%eax
  28388f:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  283894:	7e 0c                	jle    2838a2 <cons_newline+0x22>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283896:	8b 45 08             	mov    0x8(%ebp),%eax
  283899:	8b 18                	mov    (%eax),%ebx
  28389b:	bf 1c 00 00 00       	mov    $0x1c,%edi
  2838a0:	eb 43                	jmp    2838e5 <cons_newline+0x65>
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
  2838a2:	83 c0 10             	add    $0x10,%eax
  2838a5:	8b 7d 08             	mov    0x8(%ebp),%edi
  2838a8:	89 47 08             	mov    %eax,0x8(%edi)
  2838ab:	e9 89 00 00 00       	jmp    283939 <cons_newline+0xb9>
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2838b0:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2838b3:	8b 43 04             	mov    0x4(%ebx),%eax
  2838b6:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2838b9:	0f af f0             	imul   %eax,%esi
  2838bc:	89 d1                	mov    %edx,%ecx
  2838be:	03 0b                	add    (%ebx),%ecx
  2838c0:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  2838c4:	0f af c7             	imul   %edi,%eax
  2838c7:	89 f3                	mov    %esi,%ebx
  2838c9:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  2838cc:	83 c2 01             	add    $0x1,%edx
  2838cf:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  2838d5:	75 d9                	jne    2838b0 <cons_newline+0x30>
  2838d7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
  2838da:	83 c7 01             	add    $0x1,%edi
  2838dd:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  2838e3:	74 33                	je     283918 <cons_newline+0x98>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2838e5:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2838ea:	8d 47 10             	lea    0x10(%edi),%eax
  2838ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
  2838f0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  2838f3:	eb bb                	jmp    2838b0 <cons_newline+0x30>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2838f5:	89 fa                	mov    %edi,%edx
  2838f7:	0f af 53 04          	imul   0x4(%ebx),%edx
  2838fb:	89 c1                	mov    %eax,%ecx
  2838fd:	03 0b                	add    (%ebx),%ecx
  2838ff:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  283903:	83 c0 01             	add    $0x1,%eax
  283906:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28390b:	75 e8                	jne    2838f5 <cons_newline+0x75>
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  28390d:	83 c7 01             	add    $0x1,%edi
  283910:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283916:	74 07                	je     28391f <cons_newline+0x9f>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283918:	b8 08 00 00 00       	mov    $0x8,%eax
  28391d:	eb d6                	jmp    2838f5 <cons_newline+0x75>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  28391f:	83 ec 0c             	sub    $0xc,%esp
  283922:	68 9c 00 00 00       	push   $0x9c
  283927:	68 f8 00 00 00       	push   $0xf8
  28392c:	6a 1c                	push   $0x1c
  28392e:	6a 08                	push   $0x8
  283930:	53                   	push   %ebx
  283931:	e8 78 f0 ff ff       	call   2829ae <sheet_refresh>
  283936:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  283939:	8b 45 08             	mov    0x8(%ebp),%eax
  28393c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283943:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283946:	5b                   	pop    %ebx
  283947:	5e                   	pop    %esi
  283948:	5f                   	pop    %edi
  283949:	5d                   	pop    %ebp
  28394a:	c3                   	ret    

0028394b <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28394b:	55                   	push   %ebp
  28394c:	89 e5                	mov    %esp,%ebp
  28394e:	56                   	push   %esi
  28394f:	53                   	push   %ebx
  283950:	83 ec 10             	sub    $0x10,%esp
  283953:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283956:	8b 45 0c             	mov    0xc(%ebp),%eax
  283959:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  28395c:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  28395f:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  283963:	3c 09                	cmp    $0x9,%al
  283965:	75 46                	jne    2839ad <cons_putchar+0x62>
	{
		//tab
		for(;;)
		{
			putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  283967:	83 ec 04             	sub    $0x4,%esp
  28396a:	6a 01                	push   $0x1
  28396c:	68 23 4e 28 00       	push   $0x284e23
  283971:	6a 00                	push   $0x0
  283973:	6a 07                	push   $0x7
  283975:	ff 73 08             	pushl  0x8(%ebx)
  283978:	ff 73 04             	pushl  0x4(%ebx)
  28397b:	ff 33                	pushl  (%ebx)
  28397d:	e8 9e d9 ff ff       	call   281320 <putfonts8_asc_sht>
			cons->cur_x += 8;
  283982:	8b 43 04             	mov    0x4(%ebx),%eax
  283985:	83 c0 08             	add    $0x8,%eax
  283988:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  28398b:	83 c4 20             	add    $0x20,%esp
  28398e:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283993:	75 0c                	jne    2839a1 <cons_putchar+0x56>
				cons_newline(cons);
  283995:	83 ec 0c             	sub    $0xc,%esp
  283998:	53                   	push   %ebx
  283999:	e8 e2 fe ff ff       	call   283880 <cons_newline>
  28399e:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  2839a1:	8b 43 04             	mov    0x4(%ebx),%eax
  2839a4:	83 e8 08             	sub    $0x8,%eax
  2839a7:	a8 1f                	test   $0x1f,%al
  2839a9:	75 bc                	jne    283967 <cons_putchar+0x1c>
  2839ab:	eb 55                	jmp    283a02 <cons_putchar+0xb7>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2839ad:	3c 0a                	cmp    $0xa,%al
  2839af:	75 0e                	jne    2839bf <cons_putchar+0x74>
		cons_newline(cons);
  2839b1:	83 ec 0c             	sub    $0xc,%esp
  2839b4:	53                   	push   %ebx
  2839b5:	e8 c6 fe ff ff       	call   283880 <cons_newline>
  2839ba:	83 c4 10             	add    $0x10,%esp
  2839bd:	eb 43                	jmp    283a02 <cons_putchar+0xb7>
	else if(s[0] == 0x0d) 
  2839bf:	3c 0d                	cmp    $0xd,%al
  2839c1:	74 3f                	je     283a02 <cons_putchar+0xb7>
		;//todo
	else
	{
		putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  2839c3:	83 ec 04             	sub    $0x4,%esp
  2839c6:	6a 01                	push   $0x1
  2839c8:	8d 45 f6             	lea    -0xa(%ebp),%eax
  2839cb:	50                   	push   %eax
  2839cc:	6a 00                	push   $0x0
  2839ce:	6a 07                	push   $0x7
  2839d0:	ff 73 08             	pushl  0x8(%ebx)
  2839d3:	ff 73 04             	pushl  0x4(%ebx)
  2839d6:	ff 33                	pushl  (%ebx)
  2839d8:	e8 43 d9 ff ff       	call   281320 <putfonts8_asc_sht>
		if(move != 0)
  2839dd:	83 c4 20             	add    $0x20,%esp
  2839e0:	89 f0                	mov    %esi,%eax
  2839e2:	84 c0                	test   %al,%al
  2839e4:	74 1c                	je     283a02 <cons_putchar+0xb7>
		{
			cons->cur_x += 8;
  2839e6:	8b 43 04             	mov    0x4(%ebx),%eax
  2839e9:	83 c0 08             	add    $0x8,%eax
  2839ec:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  2839ef:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2839f4:	75 0c                	jne    283a02 <cons_putchar+0xb7>
				cons_newline(cons);
  2839f6:	83 ec 0c             	sub    $0xc,%esp
  2839f9:	53                   	push   %ebx
  2839fa:	e8 81 fe ff ff       	call   283880 <cons_newline>
  2839ff:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283a02:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a05:	5b                   	pop    %ebx
  283a06:	5e                   	pop    %esi
  283a07:	5d                   	pop    %ebp
  283a08:	c3                   	ret    

00283a09 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283a09:	55                   	push   %ebp
  283a0a:	89 e5                	mov    %esp,%ebp
  283a0c:	56                   	push   %esi
  283a0d:	53                   	push   %ebx
  283a0e:	83 ec 24             	sub    $0x24,%esp
  283a11:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  283a14:	8b 45 0c             	mov    0xc(%ebp),%eax
  283a17:	c1 e8 14             	shr    $0x14,%eax
  283a1a:	50                   	push   %eax
  283a1b:	68 c0 4d 28 00       	push   $0x284dc0
  283a20:	8d 75 da             	lea    -0x26(%ebp),%esi
  283a23:	56                   	push   %esi
  283a24:	e8 b4 e1 ff ff       	call   281bdd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a29:	83 c4 0c             	add    $0xc,%esp
  283a2c:	6a 1e                	push   $0x1e
  283a2e:	56                   	push   %esi
  283a2f:	6a 00                	push   $0x0
  283a31:	6a 07                	push   $0x7
  283a33:	ff 73 08             	pushl  0x8(%ebx)
  283a36:	6a 08                	push   $0x8
  283a38:	ff 33                	pushl  (%ebx)
  283a3a:	e8 e1 d8 ff ff       	call   281320 <putfonts8_asc_sht>
	cons_newline(cons);
  283a3f:	83 c4 14             	add    $0x14,%esp
  283a42:	53                   	push   %ebx
  283a43:	e8 38 fe ff ff       	call   283880 <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283a48:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  283a4f:	e8 84 e7 ff ff       	call   2821d8 <memman_total>
  283a54:	83 c4 0c             	add    $0xc,%esp
  283a57:	c1 e8 0a             	shr    $0xa,%eax
  283a5a:	50                   	push   %eax
  283a5b:	68 cb 4d 28 00       	push   $0x284dcb
  283a60:	56                   	push   %esi
  283a61:	e8 77 e1 ff ff       	call   281bdd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a66:	83 c4 0c             	add    $0xc,%esp
  283a69:	6a 1e                	push   $0x1e
  283a6b:	56                   	push   %esi
  283a6c:	6a 00                	push   $0x0
  283a6e:	6a 07                	push   $0x7
  283a70:	ff 73 08             	pushl  0x8(%ebx)
  283a73:	6a 08                	push   $0x8
  283a75:	ff 33                	pushl  (%ebx)
  283a77:	e8 a4 d8 ff ff       	call   281320 <putfonts8_asc_sht>
	cons_newline(cons);
  283a7c:	83 c4 14             	add    $0x14,%esp
  283a7f:	53                   	push   %ebx
  283a80:	e8 fb fd ff ff       	call   283880 <cons_newline>
	cons_newline(cons);
  283a85:	89 1c 24             	mov    %ebx,(%esp)
  283a88:	e8 f3 fd ff ff       	call   283880 <cons_newline>
	return;
  283a8d:	83 c4 10             	add    $0x10,%esp
}
  283a90:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a93:	5b                   	pop    %ebx
  283a94:	5e                   	pop    %esi
  283a95:	5d                   	pop    %ebp
  283a96:	c3                   	ret    

00283a97 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  283a97:	55                   	push   %ebp
  283a98:	89 e5                	mov    %esp,%ebp
  283a9a:	57                   	push   %edi
  283a9b:	56                   	push   %esi
  283a9c:	53                   	push   %ebx
  283a9d:	83 ec 0c             	sub    $0xc,%esp
  283aa0:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  283aa3:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  283aa5:	be 1c 00 00 00       	mov    $0x1c,%esi
  283aaa:	eb 23                	jmp    283acf <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283aac:	89 f1                	mov    %esi,%ecx
  283aae:	0f af 4a 04          	imul   0x4(%edx),%ecx
  283ab2:	89 c3                	mov    %eax,%ebx
  283ab4:	03 1a                	add    (%edx),%ebx
  283ab6:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  283aba:	83 c0 01             	add    $0x1,%eax
  283abd:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283ac2:	75 e8                	jne    283aac <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283ac4:	83 c6 01             	add    $0x1,%esi
  283ac7:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  283acd:	74 07                	je     283ad6 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  283acf:	b8 08 00 00 00       	mov    $0x8,%eax
  283ad4:	eb d6                	jmp    283aac <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283ad6:	83 ec 0c             	sub    $0xc,%esp
  283ad9:	68 9c 00 00 00       	push   $0x9c
  283ade:	68 f8 00 00 00       	push   $0xf8
  283ae3:	6a 1c                	push   $0x1c
  283ae5:	6a 08                	push   $0x8
  283ae7:	52                   	push   %edx
  283ae8:	e8 c1 ee ff ff       	call   2829ae <sheet_refresh>
	cons->cur_y = 28;
  283aed:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283af4:	83 c4 20             	add    $0x20,%esp
}
  283af7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283afa:	5b                   	pop    %ebx
  283afb:	5e                   	pop    %esi
  283afc:	5f                   	pop    %edi
  283afd:	5d                   	pop    %ebp
  283afe:	c3                   	ret    

00283aff <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  283aff:	55                   	push   %ebp
  283b00:	89 e5                	mov    %esp,%ebp
  283b02:	57                   	push   %edi
  283b03:	56                   	push   %esi
  283b04:	53                   	push   %ebx
  283b05:	83 ec 2c             	sub    $0x2c,%esp
  283b08:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283b0b:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283b12:	84 c0                	test   %al,%al
  283b14:	0f 84 87 00 00 00    	je     283ba1 <cmd_dir+0xa2>
  283b1a:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283b1f:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283b22:	eb 0b                	jmp    283b2f <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283b24:	83 c3 40             	add    $0x40,%ebx
  283b27:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283b2b:	84 c0                	test   %al,%al
  283b2d:	74 72                	je     283ba1 <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283b2f:	3c e5                	cmp    $0xe5,%al
  283b31:	74 66                	je     283b99 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283b33:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283b37:	75 60                	jne    283b99 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283b39:	83 ec 04             	sub    $0x4,%esp
  283b3c:	ff 73 3c             	pushl  0x3c(%ebx)
  283b3f:	68 d5 4d 28 00       	push   $0x284dd5
  283b44:	56                   	push   %esi
  283b45:	e8 93 e0 ff ff       	call   281bdd <sprintf>
  283b4a:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283b4d:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283b52:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283b57:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283b5a:	83 c0 01             	add    $0x1,%eax
  283b5d:	83 f8 08             	cmp    $0x8,%eax
  283b60:	75 f0                	jne    283b52 <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  283b62:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283b66:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283b69:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283b6d:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  283b70:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  283b74:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283b77:	83 ec 04             	sub    $0x4,%esp
  283b7a:	6a 1e                	push   $0x1e
  283b7c:	56                   	push   %esi
  283b7d:	6a 00                	push   $0x0
  283b7f:	6a 07                	push   $0x7
  283b81:	ff 77 08             	pushl  0x8(%edi)
  283b84:	6a 08                	push   $0x8
  283b86:	ff 37                	pushl  (%edi)
  283b88:	e8 93 d7 ff ff       	call   281320 <putfonts8_asc_sht>
				cons_newline(cons);
  283b8d:	83 c4 14             	add    $0x14,%esp
  283b90:	57                   	push   %edi
  283b91:	e8 ea fc ff ff       	call   283880 <cons_newline>
  283b96:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283b99:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283b9f:	75 83                	jne    283b24 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  283ba1:	83 ec 0c             	sub    $0xc,%esp
  283ba4:	57                   	push   %edi
  283ba5:	e8 d6 fc ff ff       	call   283880 <cons_newline>
	return;
  283baa:	83 c4 10             	add    $0x10,%esp
}
  283bad:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283bb0:	5b                   	pop    %ebx
  283bb1:	5e                   	pop    %esi
  283bb2:	5f                   	pop    %edi
  283bb3:	5d                   	pop    %ebp
  283bb4:	c3                   	ret    

00283bb5 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283bb5:	55                   	push   %ebp
  283bb6:	89 e5                	mov    %esp,%ebp
  283bb8:	57                   	push   %edi
  283bb9:	56                   	push   %esi
  283bba:	53                   	push   %ebx
  283bbb:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  283bbe:	68 e0 00 00 00       	push   $0xe0
  283bc3:	68 00 26 10 00       	push   $0x102600
  283bc8:	8b 45 10             	mov    0x10(%ebp),%eax
  283bcb:	83 c0 05             	add    $0x5,%eax
  283bce:	50                   	push   %eax
  283bcf:	e8 39 fb ff ff       	call   28370d <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283bd4:	83 c4 10             	add    $0x10,%esp
  283bd7:	85 c0                	test   %eax,%eax
  283bd9:	74 6e                	je     283c49 <cmd_type+0x94>
  283bdb:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283bdd:	83 ec 08             	sub    $0x8,%esp
  283be0:	ff 70 3c             	pushl  0x3c(%eax)
  283be3:	68 00 00 3c 00       	push   $0x3c0000
  283be8:	e8 60 e9 ff ff       	call   28254d <memman_alloc_4k>
  283bed:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283bef:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283bf6:	ff 75 0c             	pushl  0xc(%ebp)
  283bf9:	50                   	push   %eax
  283bfa:	ff 76 3c             	pushl  0x3c(%esi)
  283bfd:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283c01:	50                   	push   %eax
  283c02:	e8 5f fa ff ff       	call   283666 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283c07:	8b 46 3c             	mov    0x3c(%esi),%eax
  283c0a:	83 c4 20             	add    $0x20,%esp
  283c0d:	85 c0                	test   %eax,%eax
  283c0f:	74 24                	je     283c35 <cmd_type+0x80>
  283c11:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283c16:	83 ec 04             	sub    $0x4,%esp
  283c19:	6a 01                	push   $0x1
  283c1b:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283c1f:	50                   	push   %eax
  283c20:	ff 75 08             	pushl  0x8(%ebp)
  283c23:	e8 23 fd ff ff       	call   28394b <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283c28:	83 c3 01             	add    $0x1,%ebx
  283c2b:	8b 46 3c             	mov    0x3c(%esi),%eax
  283c2e:	83 c4 10             	add    $0x10,%esp
  283c31:	39 d8                	cmp    %ebx,%eax
  283c33:	77 e1                	ja     283c16 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283c35:	83 ec 04             	sub    $0x4,%esp
  283c38:	50                   	push   %eax
  283c39:	57                   	push   %edi
  283c3a:	68 00 00 3c 00       	push   $0x3c0000
  283c3f:	e8 35 e9 ff ff       	call   282579 <memman_free_4k>
  283c44:	83 c4 10             	add    $0x10,%esp
  283c47:	eb 2b                	jmp    283c74 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283c49:	83 ec 04             	sub    $0x4,%esp
  283c4c:	6a 0f                	push   $0xf
  283c4e:	68 e5 4d 28 00       	push   $0x284de5
  283c53:	6a 00                	push   $0x0
  283c55:	6a 07                	push   $0x7
  283c57:	8b 45 08             	mov    0x8(%ebp),%eax
  283c5a:	ff 70 08             	pushl  0x8(%eax)
  283c5d:	6a 08                	push   $0x8
  283c5f:	ff 30                	pushl  (%eax)
  283c61:	e8 ba d6 ff ff       	call   281320 <putfonts8_asc_sht>
		cons_newline(cons);
  283c66:	83 c4 14             	add    $0x14,%esp
  283c69:	ff 75 08             	pushl  0x8(%ebp)
  283c6c:	e8 0f fc ff ff       	call   283880 <cons_newline>
  283c71:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283c74:	83 ec 0c             	sub    $0xc,%esp
  283c77:	ff 75 08             	pushl  0x8(%ebp)
  283c7a:	e8 01 fc ff ff       	call   283880 <cons_newline>
	return;
  283c7f:	83 c4 10             	add    $0x10,%esp
}
  283c82:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283c85:	5b                   	pop    %ebx
  283c86:	5e                   	pop    %esi
  283c87:	5f                   	pop    %edi
  283c88:	5d                   	pop    %ebp
  283c89:	c3                   	ret    

00283c8a <cons_putstr0>:
	return 0;
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283c8a:	55                   	push   %ebp
  283c8b:	89 e5                	mov    %esp,%ebp
  283c8d:	56                   	push   %esi
  283c8e:	53                   	push   %ebx
  283c8f:	8b 75 08             	mov    0x8(%ebp),%esi
  283c92:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283c95:	0f b6 03             	movzbl (%ebx),%eax
  283c98:	84 c0                	test   %al,%al
  283c9a:	74 1c                	je     283cb8 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283c9c:	83 ec 04             	sub    $0x4,%esp
  283c9f:	6a 01                	push   $0x1
  283ca1:	0f be c0             	movsbl %al,%eax
  283ca4:	50                   	push   %eax
  283ca5:	56                   	push   %esi
  283ca6:	e8 a0 fc ff ff       	call   28394b <cons_putchar>
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283cab:	83 c3 01             	add    $0x1,%ebx
  283cae:	0f b6 03             	movzbl (%ebx),%eax
  283cb1:	83 c4 10             	add    $0x10,%esp
  283cb4:	84 c0                	test   %al,%al
  283cb6:	75 e4                	jne    283c9c <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283cb8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283cbb:	5b                   	pop    %ebx
  283cbc:	5e                   	pop    %esi
  283cbd:	5d                   	pop    %ebp
  283cbe:	c3                   	ret    

00283cbf <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283cbf:	55                   	push   %ebp
  283cc0:	89 e5                	mov    %esp,%ebp
  283cc2:	57                   	push   %edi
  283cc3:	56                   	push   %esi
  283cc4:	53                   	push   %ebx
  283cc5:	83 ec 4c             	sub    $0x4c,%esp
  283cc8:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283ccb:	e8 92 f2 ff ff       	call   282f62 <task_now>
  283cd0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283cd3:	0f b6 06             	movzbl (%esi),%eax
  283cd6:	3c 20                	cmp    $0x20,%al
  283cd8:	0f 8f 40 02 00 00    	jg     283f1e <cmd_app+0x25f>
  283cde:	eb 16                	jmp    283cf6 <cmd_app+0x37>
  283ce0:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283ce4:	3c 20                	cmp    $0x20,%al
  283ce6:	7e 13                	jle    283cfb <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283ce8:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283cec:	83 c3 01             	add    $0x1,%ebx
  283cef:	83 fb 0d             	cmp    $0xd,%ebx
  283cf2:	75 ec                	jne    283ce0 <cmd_app+0x21>
  283cf4:	eb 05                	jmp    283cfb <cmd_app+0x3c>
  283cf6:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283cfb:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283d00:	83 ec 04             	sub    $0x4,%esp
  283d03:	68 e0 00 00 00       	push   $0xe0
  283d08:	68 00 26 10 00       	push   $0x102600
  283d0d:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283d10:	50                   	push   %eax
  283d11:	e8 f7 f9 ff ff       	call   28370d <file_search>
  283d16:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283d19:	83 c4 10             	add    $0x10,%esp
  283d1c:	85 c0                	test   %eax,%eax
  283d1e:	75 48                	jne    283d68 <cmd_app+0xa9>
  283d20:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283d25:	0f 84 00 02 00 00    	je     283f2b <cmd_app+0x26c>
	{
		name[i  ] = '.';
  283d2b:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283d30:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283d35:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283d3a:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283d3f:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283d44:	83 ec 04             	sub    $0x4,%esp
  283d47:	68 e0 00 00 00       	push   $0xe0
  283d4c:	68 00 26 10 00       	push   $0x102600
  283d51:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283d54:	50                   	push   %eax
  283d55:	e8 b3 f9 ff ff       	call   28370d <file_search>
  283d5a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283d5d:	83 c4 10             	add    $0x10,%esp
  283d60:	85 c0                	test   %eax,%eax
  283d62:	0f 84 af 01 00 00    	je     283f17 <cmd_app+0x258>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283d68:	83 ec 08             	sub    $0x8,%esp
  283d6b:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283d6e:	ff 77 3c             	pushl  0x3c(%edi)
  283d71:	68 00 00 3c 00       	push   $0x3c0000
  283d76:	e8 d2 e7 ff ff       	call   28254d <memman_alloc_4k>
  283d7b:	89 c6                	mov    %eax,%esi
  283d7d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283d80:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283d87:	ff 75 0c             	pushl  0xc(%ebp)
  283d8a:	50                   	push   %eax
  283d8b:	ff 77 3c             	pushl  0x3c(%edi)
  283d8e:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283d92:	50                   	push   %eax
  283d93:	e8 ce f8 ff ff       	call   283666 <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283d98:	83 c4 20             	add    $0x20,%esp
  283d9b:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283d9f:	0f 86 34 01 00 00    	jbe    283ed9 <cmd_app+0x21a>
  283da5:	83 ec 04             	sub    $0x4,%esp
  283da8:	6a 04                	push   $0x4
  283daa:	68 f5 4d 28 00       	push   $0x284df5
  283daf:	89 f0                	mov    %esi,%eax
  283db1:	83 c0 04             	add    $0x4,%eax
  283db4:	50                   	push   %eax
  283db5:	e8 5e df ff ff       	call   281d18 <strncmp>
  283dba:	83 c4 10             	add    $0x10,%esp
  283dbd:	85 c0                	test   %eax,%eax
  283dbf:	0f 85 14 01 00 00    	jne    283ed9 <cmd_app+0x21a>
  283dc5:	80 3e 00             	cmpb   $0x0,(%esi)
  283dc8:	0f 85 0b 01 00 00    	jne    283ed9 <cmd_app+0x21a>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283dce:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283dd1:	8b 10                	mov    (%eax),%edx
			int esp		=	*((int *)(p+0x000c));
  283dd3:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283dd6:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283dd9:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283ddc:	83 ec 08             	sub    $0x8,%esp
  283ddf:	89 55 b8             	mov    %edx,-0x48(%ebp)
  283de2:	52                   	push   %edx
  283de3:	68 00 00 3c 00       	push   $0x3c0000
  283de8:	e8 60 e7 ff ff       	call   28254d <memman_alloc_4k>
			*((int *)0xfe8) = (int) q;
  283ded:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  283df0:	a3 e8 0f 00 00       	mov    %eax,0xfe8
			set_segmdesc(gdt + 1003,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283df5:	68 fa 40 00 00       	push   $0x40fa
  283dfa:	ff 75 bc             	pushl  -0x44(%ebp)
  283dfd:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283e00:	8b 40 3c             	mov    0x3c(%eax),%eax
  283e03:	89 45 b0             	mov    %eax,-0x50(%ebp)
  283e06:	83 e8 01             	sub    $0x1,%eax
  283e09:	50                   	push   %eax
  283e0a:	68 58 1f 27 00       	push   $0x271f58
  283e0f:	e8 5e d8 ff ff       	call   281672 <set_segmdesc>
			set_segmdesc(gdt + 1004,segsiz - 1,(int)q,AR_DATA32_RW + 0x60);
  283e14:	83 c4 20             	add    $0x20,%esp
  283e17:	68 f2 40 00 00       	push   $0x40f2
  283e1c:	ff 75 b4             	pushl  -0x4c(%ebp)
  283e1f:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283e22:	8d 42 ff             	lea    -0x1(%edx),%eax
  283e25:	50                   	push   %eax
  283e26:	68 60 1f 27 00       	push   $0x271f60
  283e2b:	e8 42 d8 ff ff       	call   281672 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283e30:	83 c4 10             	add    $0x10,%esp
  283e33:	85 db                	test   %ebx,%ebx
  283e35:	7e 1c                	jle    283e53 <cmd_app+0x194>
  283e37:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283e3c:	03 7d bc             	add    -0x44(%ebp),%edi
  283e3f:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  283e42:	8d 14 31             	lea    (%ecx,%esi,1),%edx
  283e45:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283e49:	88 0c 02             	mov    %cl,(%edx,%eax,1)

			q = (char *)memman_alloc_4k(memman,segsiz);
			*((int *)0xfe8) = (int) q;
			set_segmdesc(gdt + 1003,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(gdt + 1004,segsiz - 1,(int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283e4c:	83 c0 01             	add    $0x1,%eax
  283e4f:	39 c3                	cmp    %eax,%ebx
  283e51:	75 f2                	jne    283e45 <cmd_app+0x186>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,1003*8,esp,1004*8,&(task->tss.esp0));
  283e53:	83 ec 0c             	sub    $0xc,%esp
  283e56:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283e59:	83 c0 30             	add    $0x30,%eax
  283e5c:	50                   	push   %eax
  283e5d:	68 60 1f 00 00       	push   $0x1f60
  283e62:	56                   	push   %esi
  283e63:	68 58 1f 00 00       	push   $0x1f58
  283e68:	6a 1b                	push   $0x1b
  283e6a:	e8 01 02 00 00       	call   284070 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283e6f:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283e75:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283e7b:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283e81:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283e87:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283e8a:	8b 03                	mov    (%ebx),%eax
  283e8c:	83 e0 11             	and    $0x11,%eax
  283e8f:	83 f8 11             	cmp    $0x11,%eax
  283e92:	75 14                	jne    283ea8 <cmd_app+0x1e9>
  283e94:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283e97:	3b 43 08             	cmp    0x8(%ebx),%eax
  283e9a:	75 0c                	jne    283ea8 <cmd_app+0x1e9>
					sheet_free(sht);
  283e9c:	83 ec 0c             	sub    $0xc,%esp
  283e9f:	56                   	push   %esi
  283ea0:	e8 85 ec ff ff       	call   282b2a <sheet_free>
  283ea5:	83 c4 10             	add    $0x10,%esp
  283ea8:	83 c3 28             	add    $0x28,%ebx
  283eab:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,1003*8,esp,1004*8,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283eae:	39 f7                	cmp    %esi,%edi
  283eb0:	75 d8                	jne    283e8a <cmd_app+0x1cb>
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			timer_cancelall(&task->fifo);
  283eb2:	83 ec 0c             	sub    $0xc,%esp
  283eb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283eb8:	83 c0 10             	add    $0x10,%eax
  283ebb:	50                   	push   %eax
  283ebc:	e8 12 ef ff ff       	call   282dd3 <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283ec1:	83 c4 0c             	add    $0xc,%esp
  283ec4:	ff 75 b8             	pushl  -0x48(%ebp)
  283ec7:	ff 75 b4             	pushl  -0x4c(%ebp)
  283eca:	68 00 00 3c 00       	push   $0x3c0000
  283ecf:	e8 a5 e6 ff ff       	call   282579 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283ed4:	83 c4 10             	add    $0x10,%esp
  283ed7:	eb 13                	jmp    283eec <cmd_app+0x22d>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283ed9:	83 ec 08             	sub    $0x8,%esp
  283edc:	68 fa 4d 28 00       	push   $0x284dfa
  283ee1:	ff 75 08             	pushl  0x8(%ebp)
  283ee4:	e8 a1 fd ff ff       	call   283c8a <cons_putstr0>
  283ee9:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283eec:	83 ec 04             	sub    $0x4,%esp
  283eef:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283ef2:	ff 70 3c             	pushl  0x3c(%eax)
  283ef5:	ff 75 bc             	pushl  -0x44(%ebp)
  283ef8:	68 00 00 3c 00       	push   $0x3c0000
  283efd:	e8 77 e6 ff ff       	call   282579 <memman_free_4k>
		cons_newline(cons);
  283f02:	83 c4 04             	add    $0x4,%esp
  283f05:	ff 75 08             	pushl  0x8(%ebp)
  283f08:	e8 73 f9 ff ff       	call   283880 <cons_newline>
		return 1;
  283f0d:	83 c4 10             	add    $0x10,%esp
  283f10:	b8 01 00 00 00       	mov    $0x1,%eax
  283f15:	eb 14                	jmp    283f2b <cmd_app+0x26c>
	}
	return 0;
  283f17:	b8 00 00 00 00       	mov    $0x0,%eax
  283f1c:	eb 0d                	jmp    283f2b <cmd_app+0x26c>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283f1e:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283f21:	bb 01 00 00 00       	mov    $0x1,%ebx
  283f26:	e9 b5 fd ff ff       	jmp    283ce0 <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283f2b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283f2e:	5b                   	pop    %ebx
  283f2f:	5e                   	pop    %esi
  283f30:	5f                   	pop    %edi
  283f31:	5d                   	pop    %ebp
  283f32:	c3                   	ret    

00283f33 <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  283f33:	55                   	push   %ebp
  283f34:	89 e5                	mov    %esp,%ebp
  283f36:	53                   	push   %ebx
  283f37:	83 ec 0c             	sub    $0xc,%esp
  283f3a:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  283f3d:	68 13 4e 28 00       	push   $0x284e13
  283f42:	53                   	push   %ebx
  283f43:	e8 6a dd ff ff       	call   281cb2 <strcmp>
  283f48:	83 c4 10             	add    $0x10,%esp
  283f4b:	85 c0                	test   %eax,%eax
  283f4d:	75 16                	jne    283f65 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  283f4f:	83 ec 08             	sub    $0x8,%esp
  283f52:	ff 75 14             	pushl  0x14(%ebp)
  283f55:	ff 75 0c             	pushl  0xc(%ebp)
  283f58:	e8 ac fa ff ff       	call   283a09 <cmd_mem>
  283f5d:	83 c4 10             	add    $0x10,%esp
  283f60:	e9 c9 00 00 00       	jmp    28402e <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"cls") == 0)
  283f65:	83 ec 08             	sub    $0x8,%esp
  283f68:	68 17 4e 28 00       	push   $0x284e17
  283f6d:	53                   	push   %ebx
  283f6e:	e8 3f dd ff ff       	call   281cb2 <strcmp>
  283f73:	83 c4 10             	add    $0x10,%esp
  283f76:	85 c0                	test   %eax,%eax
  283f78:	75 13                	jne    283f8d <cons_runcmd+0x5a>
		cmd_cls(cons);
  283f7a:	83 ec 0c             	sub    $0xc,%esp
  283f7d:	ff 75 0c             	pushl  0xc(%ebp)
  283f80:	e8 12 fb ff ff       	call   283a97 <cmd_cls>
  283f85:	83 c4 10             	add    $0x10,%esp
  283f88:	e9 a1 00 00 00       	jmp    28402e <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"dir") == 0)
  283f8d:	83 ec 08             	sub    $0x8,%esp
  283f90:	68 1b 4e 28 00       	push   $0x284e1b
  283f95:	53                   	push   %ebx
  283f96:	e8 17 dd ff ff       	call   281cb2 <strcmp>
  283f9b:	83 c4 10             	add    $0x10,%esp
  283f9e:	85 c0                	test   %eax,%eax
  283fa0:	75 10                	jne    283fb2 <cons_runcmd+0x7f>
		cmd_dir(cons);
  283fa2:	83 ec 0c             	sub    $0xc,%esp
  283fa5:	ff 75 0c             	pushl  0xc(%ebp)
  283fa8:	e8 52 fb ff ff       	call   283aff <cmd_dir>
  283fad:	83 c4 10             	add    $0x10,%esp
  283fb0:	eb 7c                	jmp    28402e <cons_runcmd+0xfb>
	else if(strncmp(cmdline,"type ",5) == 0)
  283fb2:	83 ec 04             	sub    $0x4,%esp
  283fb5:	6a 05                	push   $0x5
  283fb7:	68 1f 4e 28 00       	push   $0x284e1f
  283fbc:	53                   	push   %ebx
  283fbd:	e8 56 dd ff ff       	call   281d18 <strncmp>
  283fc2:	83 c4 10             	add    $0x10,%esp
  283fc5:	85 c0                	test   %eax,%eax
  283fc7:	75 14                	jne    283fdd <cons_runcmd+0xaa>
		cmd_type(cons,fat,cmdline);
  283fc9:	83 ec 04             	sub    $0x4,%esp
  283fcc:	53                   	push   %ebx
  283fcd:	ff 75 10             	pushl  0x10(%ebp)
  283fd0:	ff 75 0c             	pushl  0xc(%ebp)
  283fd3:	e8 dd fb ff ff       	call   283bb5 <cmd_type>
  283fd8:	83 c4 10             	add    $0x10,%esp
  283fdb:	eb 51                	jmp    28402e <cons_runcmd+0xfb>
	else if(cmdline[0] != 0)
  283fdd:	80 3b 00             	cmpb   $0x0,(%ebx)
  283fe0:	74 4c                	je     28402e <cons_runcmd+0xfb>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  283fe2:	83 ec 04             	sub    $0x4,%esp
  283fe5:	53                   	push   %ebx
  283fe6:	ff 75 10             	pushl  0x10(%ebp)
  283fe9:	ff 75 0c             	pushl  0xc(%ebp)
  283fec:	e8 ce fc ff ff       	call   283cbf <cmd_app>
  283ff1:	83 c4 10             	add    $0x10,%esp
  283ff4:	85 c0                	test   %eax,%eax
  283ff6:	75 36                	jne    28402e <cons_runcmd+0xfb>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  283ff8:	83 ec 04             	sub    $0x4,%esp
  283ffb:	6a 0c                	push   $0xc
  283ffd:	68 25 4e 28 00       	push   $0x284e25
  284002:	6a 00                	push   $0x0
  284004:	6a 07                	push   $0x7
  284006:	8b 45 0c             	mov    0xc(%ebp),%eax
  284009:	ff 70 08             	pushl  0x8(%eax)
  28400c:	6a 08                	push   $0x8
  28400e:	ff 30                	pushl  (%eax)
  284010:	e8 0b d3 ff ff       	call   281320 <putfonts8_asc_sht>
			cons_newline(cons);
  284015:	83 c4 14             	add    $0x14,%esp
  284018:	ff 75 0c             	pushl  0xc(%ebp)
  28401b:	e8 60 f8 ff ff       	call   283880 <cons_newline>
			cons_newline(cons);
  284020:	83 c4 04             	add    $0x4,%esp
  284023:	ff 75 0c             	pushl  0xc(%ebp)
  284026:	e8 55 f8 ff ff       	call   283880 <cons_newline>
  28402b:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  28402e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284031:	c9                   	leave  
  284032:	c3                   	ret    

00284033 <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  284033:	55                   	push   %ebp
  284034:	89 e5                	mov    %esp,%ebp
  284036:	57                   	push   %edi
  284037:	56                   	push   %esi
  284038:	53                   	push   %ebx
  284039:	83 ec 0c             	sub    $0xc,%esp
  28403c:	8b 7d 08             	mov    0x8(%ebp),%edi
  28403f:	8b 75 0c             	mov    0xc(%ebp),%esi
  284042:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  284045:	85 c0                	test   %eax,%eax
  284047:	7e 1d                	jle    284066 <cons_putstr1+0x33>
  284049:	89 f3                	mov    %esi,%ebx
  28404b:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  28404d:	83 ec 04             	sub    $0x4,%esp
  284050:	6a 01                	push   $0x1
  284052:	0f be 03             	movsbl (%ebx),%eax
  284055:	50                   	push   %eax
  284056:	57                   	push   %edi
  284057:	e8 ef f8 ff ff       	call   28394b <cons_putchar>
  28405c:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  28405f:	83 c4 10             	add    $0x10,%esp
  284062:	39 f3                	cmp    %esi,%ebx
  284064:	75 e7                	jne    28404d <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  284066:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284069:	5b                   	pop    %ebx
  28406a:	5e                   	pop    %esi
  28406b:	5f                   	pop    %edi
  28406c:	5d                   	pop    %ebp
  28406d:	c3                   	ret    
  28406e:	66 90                	xchg   %ax,%ax

00284070 <start_app>:
  284070:	60                   	pusha  
  284071:	8b 44 24 24          	mov    0x24(%esp),%eax
  284075:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  284079:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  28407d:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  284081:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  284085:	89 65 00             	mov    %esp,0x0(%ebp)
  284088:	8c 55 04             	mov    %ss,0x4(%ebp)
  28408b:	8e c3                	mov    %ebx,%es
  28408d:	8e db                	mov    %ebx,%ds
  28408f:	8e e3                	mov    %ebx,%fs
  284091:	8e eb                	mov    %ebx,%gs
  284093:	83 c9 03             	or     $0x3,%ecx
  284096:	83 cb 03             	or     $0x3,%ebx
  284099:	53                   	push   %ebx
  28409a:	52                   	push   %edx
  28409b:	51                   	push   %ecx
  28409c:	50                   	push   %eax
  28409d:	cb                   	lret   

0028409e <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  28409e:	55                   	push   %ebp
  28409f:	89 e5                	mov    %esp,%ebp
  2840a1:	53                   	push   %ebx
  2840a2:	83 ec 34             	sub    $0x34,%esp
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
  2840a5:	b8 ec 0f 00 00       	mov    $0xfec,%eax
  2840aa:	8b 00                	mov    (%eax),%eax
  2840ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int ds_base = *((int *)0xfe8);
  2840af:	b8 e8 0f 00 00       	mov    $0xfe8,%eax
  2840b4:	8b 00                	mov    (%eax),%eax
  2840b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct TASK *task = task_now();
  2840b9:	e8 a4 ee ff ff       	call   282f62 <task_now>
  2840be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  2840c1:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  2840c6:	8b 00                	mov    (%eax),%eax
  2840c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  2840cb:	8d 45 24             	lea    0x24(%ebp),%eax
  2840ce:	83 c0 04             	add    $0x4,%eax
  2840d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	   reg[0] = 1st_edi; reg[1] = 1st_esi ... reg[7] = 1st_eax
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	 */

	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  2840d4:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  2840d8:	75 1c                	jne    2840f6 <sys_api+0x58>
  2840da:	8b 45 24             	mov    0x24(%ebp),%eax
  2840dd:	0f b6 c0             	movzbl %al,%eax
  2840e0:	83 ec 04             	sub    $0x4,%esp
  2840e3:	6a 01                	push   $0x1
  2840e5:	50                   	push   %eax
  2840e6:	ff 75 f4             	pushl  -0xc(%ebp)
  2840e9:	e8 5d f8 ff ff       	call   28394b <cons_putchar>
  2840ee:	83 c4 10             	add    $0x10,%esp
  2840f1:	e9 f8 05 00 00       	jmp    2846ee <sys_api+0x650>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  2840f6:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  2840fa:	75 1c                	jne    284118 <sys_api+0x7a>
  2840fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
  2840ff:	8b 45 18             	mov    0x18(%ebp),%eax
  284102:	01 d0                	add    %edx,%eax
  284104:	83 ec 08             	sub    $0x8,%esp
  284107:	50                   	push   %eax
  284108:	ff 75 f4             	pushl  -0xc(%ebp)
  28410b:	e8 7a fb ff ff       	call   283c8a <cons_putstr0>
  284110:	83 c4 10             	add    $0x10,%esp
  284113:	e9 d6 05 00 00       	jmp    2846ee <sys_api+0x650>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  284118:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  28411c:	75 1f                	jne    28413d <sys_api+0x9f>
  28411e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  284121:	8b 45 18             	mov    0x18(%ebp),%eax
  284124:	01 d0                	add    %edx,%eax
  284126:	83 ec 04             	sub    $0x4,%esp
  284129:	ff 75 20             	pushl  0x20(%ebp)
  28412c:	50                   	push   %eax
  28412d:	ff 75 f4             	pushl  -0xc(%ebp)
  284130:	e8 fe fe ff ff       	call   284033 <cons_putstr1>
  284135:	83 c4 10             	add    $0x10,%esp
  284138:	e9 b1 05 00 00       	jmp    2846ee <sys_api+0x650>
	else if(edx == 4)
  28413d:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  284141:	75 0b                	jne    28414e <sys_api+0xb0>
	{
		//exit app
		return &(task->tss.esp0);
  284143:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284146:	83 c0 30             	add    $0x30,%eax
  284149:	e9 a5 05 00 00       	jmp    2846f3 <sys_api+0x655>
	}
	else if(edx == 5)
  28414e:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  284152:	0f 85 ce 00 00 00    	jne    284226 <sys_api+0x188>
	{
		sht = sheet_alloc(shtctl);
  284158:	83 ec 0c             	sub    $0xc,%esp
  28415b:	ff 75 e8             	pushl  -0x18(%ebp)
  28415e:	e8 d9 e4 ff ff       	call   28263c <sheet_alloc>
  284163:	83 c4 10             	add    $0x10,%esp
  284166:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->task = task;
  284169:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28416c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28416f:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  284172:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284175:	8b 40 1c             	mov    0x1c(%eax),%eax
  284178:	83 c8 11             	or     $0x11,%eax
  28417b:	89 c2                	mov    %eax,%edx
  28417d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284180:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  284183:	8b 45 24             	mov    0x24(%ebp),%eax
  284186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  284189:	8b 55 18             	mov    0x18(%ebp),%edx
  28418c:	01 ca                	add    %ecx,%edx
  28418e:	83 ec 0c             	sub    $0xc,%esp
  284191:	50                   	push   %eax
  284192:	ff 75 08             	pushl  0x8(%ebp)
  284195:	ff 75 0c             	pushl  0xc(%ebp)
  284198:	52                   	push   %edx
  284199:	ff 75 d4             	pushl  -0x2c(%ebp)
  28419c:	e8 0e e5 ff ff       	call   2826af <sheet_setbuf>
  2841a1:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  2841a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  2841a7:	8b 45 20             	mov    0x20(%ebp),%eax
  2841aa:	01 d0                	add    %edx,%eax
  2841ac:	89 c1                	mov    %eax,%ecx
  2841ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
  2841b1:	8b 45 18             	mov    0x18(%ebp),%eax
  2841b4:	01 d0                	add    %edx,%eax
  2841b6:	83 ec 0c             	sub    $0xc,%esp
  2841b9:	6a 00                	push   $0x0
  2841bb:	51                   	push   %ecx
  2841bc:	ff 75 08             	pushl  0x8(%ebp)
  2841bf:	ff 75 0c             	pushl  0xc(%ebp)
  2841c2:	50                   	push   %eax
  2841c3:	e8 fa cf ff ff       	call   2811c2 <make_window8>
  2841c8:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,(shtctl->xsize - esi)/2,(shtctl->ysize - edi)/2);
  2841cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2841ce:	8b 40 0c             	mov    0xc(%eax),%eax
  2841d1:	2b 45 08             	sub    0x8(%ebp),%eax
  2841d4:	89 c2                	mov    %eax,%edx
  2841d6:	c1 ea 1f             	shr    $0x1f,%edx
  2841d9:	01 d0                	add    %edx,%eax
  2841db:	d1 f8                	sar    %eax
  2841dd:	89 c1                	mov    %eax,%ecx
  2841df:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2841e2:	8b 40 08             	mov    0x8(%eax),%eax
  2841e5:	2b 45 0c             	sub    0xc(%ebp),%eax
  2841e8:	89 c2                	mov    %eax,%edx
  2841ea:	c1 ea 1f             	shr    $0x1f,%edx
  2841ed:	01 d0                	add    %edx,%eax
  2841ef:	d1 f8                	sar    %eax
  2841f1:	83 ec 04             	sub    $0x4,%esp
  2841f4:	51                   	push   %ecx
  2841f5:	50                   	push   %eax
  2841f6:	ff 75 d4             	pushl  -0x2c(%ebp)
  2841f9:	e8 cd e8 ff ff       	call   282acb <sheet_slide>
  2841fe:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  284201:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284204:	8b 40 10             	mov    0x10(%eax),%eax
  284207:	83 ec 08             	sub    $0x8,%esp
  28420a:	50                   	push   %eax
  28420b:	ff 75 d4             	pushl  -0x2c(%ebp)
  28420e:	e8 cf e7 ff ff       	call   2829e2 <sheet_updown>
  284213:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  284216:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284219:	8d 50 1c             	lea    0x1c(%eax),%edx
  28421c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28421f:	89 02                	mov    %eax,(%edx)
  284221:	e9 c8 04 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 6)
  284226:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  28422a:	75 74                	jne    2842a0 <sys_api+0x202>
	{
		sht = (struct SHEET *)ebx;
  28422c:	8b 45 18             	mov    0x18(%ebp),%eax
  28422f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  284232:	8b 55 f0             	mov    -0x10(%ebp),%edx
  284235:	8b 45 10             	mov    0x10(%ebp),%eax
  284238:	01 d0                	add    %edx,%eax
  28423a:	89 c3                	mov    %eax,%ebx
  28423c:	8b 45 24             	mov    0x24(%ebp),%eax
  28423f:	0f be c8             	movsbl %al,%ecx
  284242:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284245:	8b 50 04             	mov    0x4(%eax),%edx
  284248:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28424b:	8b 00                	mov    (%eax),%eax
  28424d:	83 ec 08             	sub    $0x8,%esp
  284250:	53                   	push   %ebx
  284251:	51                   	push   %ecx
  284252:	ff 75 08             	pushl  0x8(%ebp)
  284255:	ff 75 0c             	pushl  0xc(%ebp)
  284258:	52                   	push   %edx
  284259:	50                   	push   %eax
  28425a:	e8 c5 d3 ff ff       	call   281624 <putfonts8_asc>
  28425f:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284262:	8b 45 18             	mov    0x18(%ebp),%eax
  284265:	83 e0 01             	and    $0x1,%eax
  284268:	85 c0                	test   %eax,%eax
  28426a:	0f 85 7e 04 00 00    	jne    2846ee <sys_api+0x650>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  284270:	8b 45 08             	mov    0x8(%ebp),%eax
  284273:	8d 50 10             	lea    0x10(%eax),%edx
  284276:	8b 45 20             	mov    0x20(%ebp),%eax
  284279:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  284280:	8b 45 0c             	mov    0xc(%ebp),%eax
  284283:	01 c8                	add    %ecx,%eax
  284285:	83 ec 0c             	sub    $0xc,%esp
  284288:	52                   	push   %edx
  284289:	50                   	push   %eax
  28428a:	ff 75 08             	pushl  0x8(%ebp)
  28428d:	ff 75 0c             	pushl  0xc(%ebp)
  284290:	ff 75 d4             	pushl  -0x2c(%ebp)
  284293:	e8 16 e7 ff ff       	call   2829ae <sheet_refresh>
  284298:	83 c4 20             	add    $0x20,%esp
  28429b:	e9 4e 04 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 7)
  2842a0:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  2842a4:	75 68                	jne    28430e <sys_api+0x270>
	{
		sht = (struct SHEET *)ebx;
  2842a6:	8b 45 18             	mov    0x18(%ebp),%eax
  2842a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  2842ac:	8b 5d 24             	mov    0x24(%ebp),%ebx
  2842af:	8b 45 10             	mov    0x10(%ebp),%eax
  2842b2:	0f b6 c8             	movzbl %al,%ecx
  2842b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2842b8:	8b 50 04             	mov    0x4(%eax),%edx
  2842bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2842be:	8b 00                	mov    (%eax),%eax
  2842c0:	83 ec 04             	sub    $0x4,%esp
  2842c3:	ff 75 08             	pushl  0x8(%ebp)
  2842c6:	ff 75 0c             	pushl  0xc(%ebp)
  2842c9:	ff 75 20             	pushl  0x20(%ebp)
  2842cc:	53                   	push   %ebx
  2842cd:	51                   	push   %ecx
  2842ce:	52                   	push   %edx
  2842cf:	50                   	push   %eax
  2842d0:	e8 ec cb ff ff       	call   280ec1 <boxfill8>
  2842d5:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2842d8:	8b 45 18             	mov    0x18(%ebp),%eax
  2842db:	83 e0 01             	and    $0x1,%eax
  2842de:	85 c0                	test   %eax,%eax
  2842e0:	0f 85 08 04 00 00    	jne    2846ee <sys_api+0x650>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  2842e6:	8b 45 08             	mov    0x8(%ebp),%eax
  2842e9:	8d 48 01             	lea    0x1(%eax),%ecx
  2842ec:	8b 45 0c             	mov    0xc(%ebp),%eax
  2842ef:	8d 50 01             	lea    0x1(%eax),%edx
  2842f2:	8b 45 24             	mov    0x24(%ebp),%eax
  2842f5:	83 ec 0c             	sub    $0xc,%esp
  2842f8:	51                   	push   %ecx
  2842f9:	52                   	push   %edx
  2842fa:	ff 75 20             	pushl  0x20(%ebp)
  2842fd:	50                   	push   %eax
  2842fe:	ff 75 d4             	pushl  -0x2c(%ebp)
  284301:	e8 a8 e6 ff ff       	call   2829ae <sheet_refresh>
  284306:	83 c4 20             	add    $0x20,%esp
  284309:	e9 e0 03 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 8)
  28430e:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284312:	75 3b                	jne    28434f <sys_api+0x2b1>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  284314:	8b 55 18             	mov    0x18(%ebp),%edx
  284317:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28431a:	01 d0                	add    %edx,%eax
  28431c:	83 ec 0c             	sub    $0xc,%esp
  28431f:	50                   	push   %eax
  284320:	e8 86 de ff ff       	call   2821ab <memman_init>
  284325:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  284328:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  28432c:	8b 45 20             	mov    0x20(%ebp),%eax
  28432f:	8b 55 24             	mov    0x24(%ebp),%edx
  284332:	89 d3                	mov    %edx,%ebx
  284334:	8b 4d 18             	mov    0x18(%ebp),%ecx
  284337:	8b 55 f0             	mov    -0x10(%ebp),%edx
  28433a:	01 ca                	add    %ecx,%edx
  28433c:	83 ec 04             	sub    $0x4,%esp
  28433f:	50                   	push   %eax
  284340:	53                   	push   %ebx
  284341:	52                   	push   %edx
  284342:	e8 b3 df ff ff       	call   2822fa <memman_free>
  284347:	83 c4 10             	add    $0x10,%esp
  28434a:	e9 9f 03 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 9)
  28434f:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  284353:	75 31                	jne    284386 <sys_api+0x2e8>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  284355:	8b 45 20             	mov    0x20(%ebp),%eax
  284358:	83 c0 0f             	add    $0xf,%eax
  28435b:	83 e0 f0             	and    $0xfffffff0,%eax
  28435e:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  284361:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284364:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284367:	8b 45 20             	mov    0x20(%ebp),%eax
  28436a:	8b 4d 18             	mov    0x18(%ebp),%ecx
  28436d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  284370:	01 ca                	add    %ecx,%edx
  284372:	83 ec 08             	sub    $0x8,%esp
  284375:	50                   	push   %eax
  284376:	52                   	push   %edx
  284377:	e8 95 de ff ff       	call   282211 <memman_alloc>
  28437c:	83 c4 10             	add    $0x10,%esp
  28437f:	89 03                	mov    %eax,(%ebx)
  284381:	e9 68 03 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 10)
  284386:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  28438a:	75 2f                	jne    2843bb <sys_api+0x31d>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  28438c:	8b 45 20             	mov    0x20(%ebp),%eax
  28438f:	83 c0 0f             	add    $0xf,%eax
  284392:	83 e0 f0             	and    $0xfffffff0,%eax
  284395:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  284398:	8b 45 20             	mov    0x20(%ebp),%eax
  28439b:	8b 55 24             	mov    0x24(%ebp),%edx
  28439e:	89 d3                	mov    %edx,%ebx
  2843a0:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  2843a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  2843a6:	01 ca                	add    %ecx,%edx
  2843a8:	83 ec 04             	sub    $0x4,%esp
  2843ab:	50                   	push   %eax
  2843ac:	53                   	push   %ebx
  2843ad:	52                   	push   %edx
  2843ae:	e8 47 df ff ff       	call   2822fa <memman_free>
  2843b3:	83 c4 10             	add    $0x10,%esp
  2843b6:	e9 33 03 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 11)
  2843bb:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  2843bf:	75 58                	jne    284419 <sys_api+0x37b>
	{
		sht = (struct SHEET *)ebx;
  2843c1:	8b 45 18             	mov    0x18(%ebp),%eax
  2843c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  2843c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2843ca:	8b 10                	mov    (%eax),%edx
  2843cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2843cf:	8b 40 04             	mov    0x4(%eax),%eax
  2843d2:	0f af 45 08          	imul   0x8(%ebp),%eax
  2843d6:	89 c1                	mov    %eax,%ecx
  2843d8:	8b 45 0c             	mov    0xc(%ebp),%eax
  2843db:	01 c8                	add    %ecx,%eax
  2843dd:	01 d0                	add    %edx,%eax
  2843df:	8b 55 24             	mov    0x24(%ebp),%edx
  2843e2:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  2843e4:	8b 45 18             	mov    0x18(%ebp),%eax
  2843e7:	83 e0 01             	and    $0x1,%eax
  2843ea:	85 c0                	test   %eax,%eax
  2843ec:	0f 85 fc 02 00 00    	jne    2846ee <sys_api+0x650>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  2843f2:	8b 45 08             	mov    0x8(%ebp),%eax
  2843f5:	8d 50 01             	lea    0x1(%eax),%edx
  2843f8:	8b 45 0c             	mov    0xc(%ebp),%eax
  2843fb:	83 c0 01             	add    $0x1,%eax
  2843fe:	83 ec 0c             	sub    $0xc,%esp
  284401:	52                   	push   %edx
  284402:	50                   	push   %eax
  284403:	ff 75 08             	pushl  0x8(%ebp)
  284406:	ff 75 0c             	pushl  0xc(%ebp)
  284409:	ff 75 d4             	pushl  -0x2c(%ebp)
  28440c:	e8 9d e5 ff ff       	call   2829ae <sheet_refresh>
  284411:	83 c4 20             	add    $0x20,%esp
  284414:	e9 d5 02 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 12)
  284419:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  28441d:	75 26                	jne    284445 <sys_api+0x3a7>
	{
		sht = (struct SHEET *)ebx;
  28441f:	8b 45 18             	mov    0x18(%ebp),%eax
  284422:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  284425:	8b 45 24             	mov    0x24(%ebp),%eax
  284428:	83 ec 0c             	sub    $0xc,%esp
  28442b:	ff 75 08             	pushl  0x8(%ebp)
  28442e:	ff 75 0c             	pushl  0xc(%ebp)
  284431:	ff 75 20             	pushl  0x20(%ebp)
  284434:	50                   	push   %eax
  284435:	ff 75 d4             	pushl  -0x2c(%ebp)
  284438:	e8 71 e5 ff ff       	call   2829ae <sheet_refresh>
  28443d:	83 c4 20             	add    $0x20,%esp
  284440:	e9 a9 02 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 13)
  284445:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  284449:	75 5d                	jne    2844a8 <sys_api+0x40a>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  28444b:	8b 45 18             	mov    0x18(%ebp),%eax
  28444e:	83 e0 fe             	and    $0xfffffffe,%eax
  284451:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  284454:	8b 45 24             	mov    0x24(%ebp),%eax
  284457:	83 ec 08             	sub    $0x8,%esp
  28445a:	ff 75 10             	pushl  0x10(%ebp)
  28445d:	ff 75 08             	pushl  0x8(%ebp)
  284460:	ff 75 0c             	pushl  0xc(%ebp)
  284463:	ff 75 20             	pushl  0x20(%ebp)
  284466:	50                   	push   %eax
  284467:	ff 75 d4             	pushl  -0x2c(%ebp)
  28446a:	e8 3f d0 ff ff       	call   2814ae <drawline8_sht>
  28446f:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284472:	8b 45 18             	mov    0x18(%ebp),%eax
  284475:	83 e0 01             	and    $0x1,%eax
  284478:	85 c0                	test   %eax,%eax
  28447a:	0f 85 6e 02 00 00    	jne    2846ee <sys_api+0x650>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  284480:	8b 45 08             	mov    0x8(%ebp),%eax
  284483:	8d 48 01             	lea    0x1(%eax),%ecx
  284486:	8b 45 0c             	mov    0xc(%ebp),%eax
  284489:	8d 50 01             	lea    0x1(%eax),%edx
  28448c:	8b 45 24             	mov    0x24(%ebp),%eax
  28448f:	83 ec 0c             	sub    $0xc,%esp
  284492:	51                   	push   %ecx
  284493:	52                   	push   %edx
  284494:	ff 75 20             	pushl  0x20(%ebp)
  284497:	50                   	push   %eax
  284498:	ff 75 d4             	pushl  -0x2c(%ebp)
  28449b:	e8 0e e5 ff ff       	call   2829ae <sheet_refresh>
  2844a0:	83 c4 20             	add    $0x20,%esp
  2844a3:	e9 46 02 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 14)
  2844a8:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  2844ac:	75 14                	jne    2844c2 <sys_api+0x424>
	{
		sheet_free((struct SHEET *)ebx);
  2844ae:	8b 45 18             	mov    0x18(%ebp),%eax
  2844b1:	83 ec 0c             	sub    $0xc,%esp
  2844b4:	50                   	push   %eax
  2844b5:	e8 70 e6 ff ff       	call   282b2a <sheet_free>
  2844ba:	83 c4 10             	add    $0x10,%esp
  2844bd:	e9 2c 02 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 15)
  2844c2:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  2844c6:	0f 85 f3 00 00 00    	jne    2845bf <sys_api+0x521>
	{
		for(;;)
		{
			io_cli();
  2844cc:	e8 01 c8 ff ff       	call   280cd2 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  2844d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2844d4:	83 c0 10             	add    $0x10,%eax
  2844d7:	83 ec 0c             	sub    $0xc,%esp
  2844da:	50                   	push   %eax
  2844db:	e8 96 d9 ff ff       	call   281e76 <fifo32_status>
  2844e0:	83 c4 10             	add    $0x10,%esp
  2844e3:	85 c0                	test   %eax,%eax
  2844e5:	75 32                	jne    284519 <sys_api+0x47b>
			{
				if(eax != 0)
  2844e7:	8b 45 24             	mov    0x24(%ebp),%eax
  2844ea:	85 c0                	test   %eax,%eax
  2844ec:	74 10                	je     2844fe <sys_api+0x460>
					task_sleep(task);
  2844ee:	83 ec 0c             	sub    $0xc,%esp
  2844f1:	ff 75 ec             	pushl  -0x14(%ebp)
  2844f4:	e8 d0 ed ff ff       	call   2832c9 <task_sleep>
  2844f9:	83 c4 10             	add    $0x10,%esp
  2844fc:	eb 1b                	jmp    284519 <sys_api+0x47b>
				else
				{
					io_sti();
  2844fe:	e8 d1 c7 ff ff       	call   280cd4 <io_sti>
					reg[7] = -1;
  284503:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284506:	83 c0 1c             	add    $0x1c,%eax
  284509:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  28450f:	b8 00 00 00 00       	mov    $0x0,%eax
  284514:	e9 da 01 00 00       	jmp    2846f3 <sys_api+0x655>
				}
			}
			int i = fifo32_get(&task->fifo);
  284519:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28451c:	83 c0 10             	add    $0x10,%eax
  28451f:	83 ec 0c             	sub    $0xc,%esp
  284522:	50                   	push   %eax
  284523:	e8 13 d9 ff ff       	call   281e3b <fifo32_get>
  284528:	83 c4 10             	add    $0x10,%esp
  28452b:	89 45 e0             	mov    %eax,-0x20(%ebp)
			io_sti();
  28452e:	e8 a1 c7 ff ff       	call   280cd4 <io_sti>
			if(i <= 1)
  284533:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
  284537:	7f 34                	jg     28456d <sys_api+0x4cf>
			{
				timer_init(cons->timer,&task->fifo,1);
  284539:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28453c:	8d 50 10             	lea    0x10(%eax),%edx
  28453f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284542:	8b 40 10             	mov    0x10(%eax),%eax
  284545:	83 ec 04             	sub    $0x4,%esp
  284548:	6a 01                	push   $0x1
  28454a:	52                   	push   %edx
  28454b:	50                   	push   %eax
  28454c:	e8 cb e6 ff ff       	call   282c1c <timer_init>
  284551:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  284554:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284557:	8b 40 10             	mov    0x10(%eax),%eax
  28455a:	83 ec 08             	sub    $0x8,%esp
  28455d:	6a 32                	push   $0x32
  28455f:	50                   	push   %eax
  284560:	e8 cb e6 ff ff       	call   282c30 <timer_settime>
  284565:	83 c4 10             	add    $0x10,%esp
  284568:	e9 5f ff ff ff       	jmp    2844cc <sys_api+0x42e>
			}
			else if(i == 2)
  28456d:	83 7d e0 02          	cmpl   $0x2,-0x20(%ebp)
  284571:	75 0f                	jne    284582 <sys_api+0x4e4>
			{
				cons->cur_c = COL8_FFFFFF;
  284573:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284576:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  28457d:	e9 4a ff ff ff       	jmp    2844cc <sys_api+0x42e>
			}
			else if(i == 3)
  284582:	83 7d e0 03          	cmpl   $0x3,-0x20(%ebp)
  284586:	75 0f                	jne    284597 <sys_api+0x4f9>
			{
				cons->cur_c = -1;
  284588:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28458b:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  284592:	e9 35 ff ff ff       	jmp    2844cc <sys_api+0x42e>
			}
			else if(i>=256)
  284597:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%ebp)
  28459e:	0f 8e 28 ff ff ff    	jle    2844cc <sys_api+0x42e>
			{
				reg[7] = i-256;
  2845a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2845a7:	83 c0 1c             	add    $0x1c,%eax
  2845aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2845ad:	81 ea 00 01 00 00    	sub    $0x100,%edx
  2845b3:	89 10                	mov    %edx,(%eax)
				return 0;
  2845b5:	b8 00 00 00 00       	mov    $0x0,%eax
  2845ba:	e9 34 01 00 00       	jmp    2846f3 <sys_api+0x655>
			}
		}
	}
	else if(edx == 16)
  2845bf:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  2845c3:	75 1e                	jne    2845e3 <sys_api+0x545>
	{
		reg[7] = (int)timer_alloc();
  2845c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2845c8:	8d 58 1c             	lea    0x1c(%eax),%ebx
  2845cb:	e8 7e e5 ff ff       	call   282b4e <timer_alloc>
  2845d0:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  2845d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2845d5:	83 c0 1c             	add    $0x1c,%eax
  2845d8:	8b 00                	mov    (%eax),%eax
  2845da:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  2845de:	e9 0b 01 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 17)
  2845e3:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  2845e7:	75 25                	jne    28460e <sys_api+0x570>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  2845e9:	8b 45 24             	mov    0x24(%ebp),%eax
  2845ec:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  2845f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2845f5:	8d 50 10             	lea    0x10(%eax),%edx
  2845f8:	8b 45 18             	mov    0x18(%ebp),%eax
  2845fb:	83 ec 04             	sub    $0x4,%esp
  2845fe:	51                   	push   %ecx
  2845ff:	52                   	push   %edx
  284600:	50                   	push   %eax
  284601:	e8 16 e6 ff ff       	call   282c1c <timer_init>
  284606:	83 c4 10             	add    $0x10,%esp
  284609:	e9 e0 00 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 18)
  28460e:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284612:	75 1a                	jne    28462e <sys_api+0x590>
	{
		timer_settime((struct TIMER *)ebx,eax);
  284614:	8b 45 24             	mov    0x24(%ebp),%eax
  284617:	89 c2                	mov    %eax,%edx
  284619:	8b 45 18             	mov    0x18(%ebp),%eax
  28461c:	83 ec 08             	sub    $0x8,%esp
  28461f:	52                   	push   %edx
  284620:	50                   	push   %eax
  284621:	e8 0a e6 ff ff       	call   282c30 <timer_settime>
  284626:	83 c4 10             	add    $0x10,%esp
  284629:	e9 c0 00 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 19)
  28462e:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  284632:	75 14                	jne    284648 <sys_api+0x5aa>
	{
		timer_free((struct TIMER *)ebx);
  284634:	8b 45 18             	mov    0x18(%ebp),%eax
  284637:	83 ec 0c             	sub    $0xc,%esp
  28463a:	50                   	push   %eax
  28463b:	e8 d0 e5 ff ff       	call   282c10 <timer_free>
  284640:	83 c4 10             	add    $0x10,%esp
  284643:	e9 a6 00 00 00       	jmp    2846ee <sys_api+0x650>
	}
	else if(edx == 20)
  284648:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  28464c:	0f 85 9c 00 00 00    	jne    2846ee <sys_api+0x650>
	{
		if(eax == 0)
  284652:	8b 45 24             	mov    0x24(%ebp),%eax
  284655:	85 c0                	test   %eax,%eax
  284657:	75 26                	jne    28467f <sys_api+0x5e1>
		{
			int i = io_in8(0x61);
  284659:	83 ec 0c             	sub    $0xc,%esp
  28465c:	6a 61                	push   $0x61
  28465e:	e8 81 c6 ff ff       	call   280ce4 <io_in8>
  284663:	83 c4 10             	add    $0x10,%esp
  284666:	89 45 dc             	mov    %eax,-0x24(%ebp)
			io_out8(0x61,i&0x0d);
  284669:	8b 45 dc             	mov    -0x24(%ebp),%eax
  28466c:	83 e0 0d             	and    $0xd,%eax
  28466f:	83 ec 08             	sub    $0x8,%esp
  284672:	50                   	push   %eax
  284673:	6a 61                	push   $0x61
  284675:	e8 8c c6 ff ff       	call   280d06 <io_out8>
  28467a:	83 c4 10             	add    $0x10,%esp
  28467d:	eb 6f                	jmp    2846ee <sys_api+0x650>
		}
		else
		{
			int i = 1193180000/eax;
  28467f:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284682:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  284687:	99                   	cltd   
  284688:	f7 fb                	idiv   %ebx
  28468a:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x43,0xb6);
  28468d:	83 ec 08             	sub    $0x8,%esp
  284690:	68 b6 00 00 00       	push   $0xb6
  284695:	6a 43                	push   $0x43
  284697:	e8 6a c6 ff ff       	call   280d06 <io_out8>
  28469c:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  28469f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2846a2:	0f b6 c0             	movzbl %al,%eax
  2846a5:	83 ec 08             	sub    $0x8,%esp
  2846a8:	50                   	push   %eax
  2846a9:	6a 42                	push   $0x42
  2846ab:	e8 56 c6 ff ff       	call   280d06 <io_out8>
  2846b0:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  2846b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2846b6:	c1 f8 08             	sar    $0x8,%eax
  2846b9:	83 ec 08             	sub    $0x8,%esp
  2846bc:	50                   	push   %eax
  2846bd:	6a 42                	push   $0x42
  2846bf:	e8 42 c6 ff ff       	call   280d06 <io_out8>
  2846c4:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  2846c7:	83 ec 0c             	sub    $0xc,%esp
  2846ca:	6a 61                	push   $0x61
  2846cc:	e8 13 c6 ff ff       	call   280ce4 <io_in8>
  2846d1:	83 c4 10             	add    $0x10,%esp
  2846d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  2846d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2846da:	83 e0 0c             	and    $0xc,%eax
  2846dd:	83 c8 03             	or     $0x3,%eax
  2846e0:	83 ec 08             	sub    $0x8,%esp
  2846e3:	50                   	push   %eax
  2846e4:	6a 61                	push   $0x61
  2846e6:	e8 1b c6 ff ff       	call   280d06 <io_out8>
  2846eb:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  2846ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2846f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2846f6:	c9                   	leave  
  2846f7:	c3                   	ret    
  2846f8:	66 90                	xchg   %ax,%ax
  2846fa:	66 90                	xchg   %ax,%ax
  2846fc:	66 90                	xchg   %ax,%ax
  2846fe:	66 90                	xchg   %ax,%ax

00284700 <api_putchar>:
  284700:	ba 01 00 00 00       	mov    $0x1,%edx
  284705:	8a 44 24 04          	mov    0x4(%esp),%al
  284709:	cd 40                	int    $0x40
  28470b:	c3                   	ret    

0028470c <api_putstr>:
  28470c:	ba 02 00 00 00       	mov    $0x2,%edx
  284711:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284715:	cd 40                	int    $0x40
  284717:	c3                   	ret    

00284718 <api_end>:
  284718:	ba 04 00 00 00       	mov    $0x4,%edx
  28471d:	cd 40                	int    $0x40

0028471f <api_test>:
  28471f:	05 80 00 00 00       	add    $0x80,%eax
  284724:	c3                   	ret    

00284725 <api_openwin>:
  284725:	57                   	push   %edi
  284726:	56                   	push   %esi
  284727:	53                   	push   %ebx
  284728:	ba 05 00 00 00       	mov    $0x5,%edx
  28472d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284731:	8b 74 24 14          	mov    0x14(%esp),%esi
  284735:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284739:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  28473d:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  284741:	cd 40                	int    $0x40
  284743:	5b                   	pop    %ebx
  284744:	5e                   	pop    %esi
  284745:	5f                   	pop    %edi
  284746:	c3                   	ret    

00284747 <api_putstrwin>:
  284747:	57                   	push   %edi
  284748:	56                   	push   %esi
  284749:	55                   	push   %ebp
  28474a:	53                   	push   %ebx
  28474b:	ba 06 00 00 00       	mov    $0x6,%edx
  284750:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284754:	8b 74 24 18          	mov    0x18(%esp),%esi
  284758:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  28475c:	8b 44 24 20          	mov    0x20(%esp),%eax
  284760:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  284764:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284768:	cd 40                	int    $0x40
  28476a:	5b                   	pop    %ebx
  28476b:	5d                   	pop    %ebp
  28476c:	5e                   	pop    %esi
  28476d:	5f                   	pop    %edi
  28476e:	c3                   	ret    

0028476f <api_boxfilwin>:
  28476f:	57                   	push   %edi
  284770:	56                   	push   %esi
  284771:	55                   	push   %ebp
  284772:	53                   	push   %ebx
  284773:	ba 07 00 00 00       	mov    $0x7,%edx
  284778:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  28477c:	8b 44 24 18          	mov    0x18(%esp),%eax
  284780:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284784:	8b 74 24 20          	mov    0x20(%esp),%esi
  284788:	8b 7c 24 24          	mov    0x24(%esp),%edi
  28478c:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284790:	cd 40                	int    $0x40
  284792:	5b                   	pop    %ebx
  284793:	5d                   	pop    %ebp
  284794:	5e                   	pop    %esi
  284795:	5f                   	pop    %edi
  284796:	c3                   	ret    

00284797 <api_initmalloc>:
  284797:	53                   	push   %ebx
  284798:	ba 08 00 00 00       	mov    $0x8,%edx
  28479d:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  2847a4:	89 d8                	mov    %ebx,%eax
  2847a6:	05 00 80 00 00       	add    $0x8000,%eax
  2847ab:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  2847b2:	29 c1                	sub    %eax,%ecx
  2847b4:	cd 40                	int    $0x40
  2847b6:	5b                   	pop    %ebx
  2847b7:	c3                   	ret    

002847b8 <api_malloc>:
  2847b8:	53                   	push   %ebx
  2847b9:	ba 09 00 00 00       	mov    $0x9,%edx
  2847be:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  2847c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  2847c9:	cd 40                	int    $0x40
  2847cb:	5b                   	pop    %ebx
  2847cc:	c3                   	ret    

002847cd <api_free>:
  2847cd:	53                   	push   %ebx
  2847ce:	ba 0a 00 00 00       	mov    $0xa,%edx
  2847d3:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  2847da:	8b 44 24 08          	mov    0x8(%esp),%eax
  2847de:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  2847e2:	cd 40                	int    $0x40
  2847e4:	5b                   	pop    %ebx
  2847e5:	c3                   	ret    

002847e6 <api_pointwin>:
  2847e6:	57                   	push   %edi
  2847e7:	56                   	push   %esi
  2847e8:	53                   	push   %ebx
  2847e9:	ba 0b 00 00 00       	mov    $0xb,%edx
  2847ee:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  2847f2:	8b 74 24 14          	mov    0x14(%esp),%esi
  2847f6:	8b 7c 24 18          	mov    0x18(%esp),%edi
  2847fa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  2847fe:	cd 40                	int    $0x40
  284800:	5b                   	pop    %ebx
  284801:	5e                   	pop    %esi
  284802:	5f                   	pop    %edi
  284803:	c3                   	ret    

00284804 <api_refreshwin>:
  284804:	57                   	push   %edi
  284805:	56                   	push   %esi
  284806:	53                   	push   %ebx
  284807:	ba 0c 00 00 00       	mov    $0xc,%edx
  28480c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284810:	8b 44 24 14          	mov    0x14(%esp),%eax
  284814:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284818:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  28481c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284820:	cd 40                	int    $0x40
  284822:	5b                   	pop    %ebx
  284823:	5e                   	pop    %esi
  284824:	5f                   	pop    %edi
  284825:	c3                   	ret    

00284826 <api_linewin>:
  284826:	57                   	push   %edi
  284827:	56                   	push   %esi
  284828:	55                   	push   %ebp
  284829:	53                   	push   %ebx
  28482a:	ba 0d 00 00 00       	mov    $0xd,%edx
  28482f:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284833:	8b 44 24 18          	mov    0x18(%esp),%eax
  284837:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  28483b:	8b 74 24 20          	mov    0x20(%esp),%esi
  28483f:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284843:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284847:	cd 40                	int    $0x40
  284849:	5b                   	pop    %ebx
  28484a:	5d                   	pop    %ebp
  28484b:	5e                   	pop    %esi
  28484c:	5f                   	pop    %edi
  28484d:	c3                   	ret    

0028484e <api_closewin>:
  28484e:	53                   	push   %ebx
  28484f:	ba 0e 00 00 00       	mov    $0xe,%edx
  284854:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284858:	cd 40                	int    $0x40
  28485a:	5b                   	pop    %ebx
  28485b:	c3                   	ret    

0028485c <api_getkey>:
  28485c:	ba 0f 00 00 00       	mov    $0xf,%edx
  284861:	8b 44 24 04          	mov    0x4(%esp),%eax
  284865:	cd 40                	int    $0x40
  284867:	c3                   	ret    

00284868 <api_alloctimer>:
  284868:	ba 10 00 00 00       	mov    $0x10,%edx
  28486d:	cd 40                	int    $0x40
  28486f:	c3                   	ret    

00284870 <api_inittimer>:
  284870:	53                   	push   %ebx
  284871:	ba 11 00 00 00       	mov    $0x11,%edx
  284876:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  28487a:	8b 44 24 0c          	mov    0xc(%esp),%eax
  28487e:	cd 40                	int    $0x40
  284880:	5b                   	pop    %ebx
  284881:	c3                   	ret    

00284882 <api_settimer>:
  284882:	53                   	push   %ebx
  284883:	ba 12 00 00 00       	mov    $0x12,%edx
  284888:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  28488c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284890:	cd 40                	int    $0x40
  284892:	5b                   	pop    %ebx
  284893:	c3                   	ret    

00284894 <api_freetimer>:
  284894:	53                   	push   %ebx
  284895:	ba 13 00 00 00       	mov    $0x13,%edx
  28489a:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  28489e:	cd 40                	int    $0x40
  2848a0:	5b                   	pop    %ebx
  2848a1:	c3                   	ret    

002848a2 <api_beep>:
  2848a2:	ba 14 00 00 00       	mov    $0x14,%edx
  2848a7:	8b 44 24 04          	mov    0x4(%esp),%eax
  2848ab:	cd 40                	int    $0x40
  2848ad:	c3                   	ret    

002848ae <change_wtitle8>:
	}
	return cur_c;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  2848ae:	55                   	push   %ebp
  2848af:	89 e5                	mov    %esp,%ebp
  2848b1:	57                   	push   %edi
  2848b2:	56                   	push   %esi
  2848b3:	53                   	push   %ebx
  2848b4:	83 ec 2c             	sub    $0x2c,%esp
  2848b7:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  2848ba:	8b 7d 08             	mov    0x8(%ebp),%edi
  2848bd:	8b 7f 04             	mov    0x4(%edi),%edi
  2848c0:	89 fe                	mov    %edi,%esi
  2848c2:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  2848c5:	3c 01                	cmp    $0x1,%al
  2848c7:	19 ff                	sbb    %edi,%edi
  2848c9:	89 fb                	mov    %edi,%ebx
  2848cb:	83 e3 fd             	and    $0xfffffffd,%ebx
  2848ce:	83 c3 0f             	add    $0xf,%ebx
  2848d1:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  2848d4:	89 fb                	mov    %edi,%ebx
  2848d6:	83 c3 08             	add    $0x8,%ebx
  2848d9:	88 5d e7             	mov    %bl,-0x19(%ebp)
  2848dc:	83 e7 03             	and    $0x3,%edi
  2848df:	83 c7 0c             	add    $0xc,%edi
  2848e2:	3c 01                	cmp    $0x1,%al
  2848e4:	19 c0                	sbb    %eax,%eax
  2848e6:	f7 d0                	not    %eax
  2848e8:	83 c0 08             	add    $0x8,%eax
  2848eb:	88 45 e5             	mov    %al,-0x1b(%ebp)
  2848ee:	89 f0                	mov    %esi,%eax
  2848f0:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  2848f3:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  2848f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2848f9:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  2848fb:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284902:	8d 5e fc             	lea    -0x4(%esi),%ebx
  284905:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  284908:	83 e8 03             	sub    $0x3,%eax
  28490b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  28490e:	8d 46 ea             	lea    -0x16(%esi),%eax
  284911:	89 45 dc             	mov    %eax,-0x24(%ebp)
  284914:	eb 32                	jmp    284948 <change_wtitle8+0x9a>
  284916:	89 ce                	mov    %ecx,%esi
  284918:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  28491a:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  28491e:	38 45 e7             	cmp    %al,-0x19(%ebp)
  284921:	75 05                	jne    284928 <change_wtitle8+0x7a>
  284923:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  284926:	7d 08                	jge    284930 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284928:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  28492b:	0f 44 c7             	cmove  %edi,%eax
  28492e:	eb 04                	jmp    284934 <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  284930:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  284934:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284937:	83 c2 01             	add    $0x1,%edx
  28493a:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  28493d:	75 d7                	jne    284916 <change_wtitle8+0x68>
  28493f:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  284942:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  284946:	74 0d                	je     284955 <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  284948:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  28494c:	7e f1                	jle    28493f <change_wtitle8+0x91>
  28494e:	ba 03 00 00 00       	mov    $0x3,%edx
  284953:	eb c1                	jmp    284916 <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  284955:	83 ec 0c             	sub    $0xc,%esp
  284958:	6a 15                	push   $0x15
  28495a:	ff 75 cc             	pushl  -0x34(%ebp)
  28495d:	6a 03                	push   $0x3
  28495f:	6a 03                	push   $0x3
  284961:	ff 75 08             	pushl  0x8(%ebp)
  284964:	e8 45 e0 ff ff       	call   2829ae <sheet_refresh>
	return;
  284969:	83 c4 20             	add    $0x20,%esp
}
  28496c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28496f:	5b                   	pop    %ebx
  284970:	5e                   	pop    %esi
  284971:	5f                   	pop    %edi
  284972:	5d                   	pop    %ebp
  284973:	c3                   	ret    

00284974 <keywin_off>:
#include "common.h"
#include "graphics.h"
int keywin_off(struct SHEET *key_win,struct SHEET *sht_win,int cur_c,int cur_x)
{
  284974:	55                   	push   %ebp
  284975:	89 e5                	mov    %esp,%ebp
  284977:	53                   	push   %ebx
  284978:	83 ec 0c             	sub    $0xc,%esp
  28497b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  28497e:	6a 00                	push   $0x0
  284980:	53                   	push   %ebx
  284981:	e8 28 ff ff ff       	call   2848ae <change_wtitle8>
	if(key_win == sht_win)
  284986:	83 c4 10             	add    $0x10,%esp
  284989:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
  28498c:	75 29                	jne    2849b7 <keywin_off+0x43>
	{
		cur_c = -1;
		boxfill8(sht_win->buf,sht_win->bxsize,COL8_FFFFFF,cur_x,28,cur_x+7,43);
  28498e:	83 ec 04             	sub    $0x4,%esp
  284991:	6a 2b                	push   $0x2b
  284993:	8b 45 14             	mov    0x14(%ebp),%eax
  284996:	83 c0 07             	add    $0x7,%eax
  284999:	50                   	push   %eax
  28499a:	6a 1c                	push   $0x1c
  28499c:	ff 75 14             	pushl  0x14(%ebp)
  28499f:	6a 07                	push   $0x7
  2849a1:	ff 73 04             	pushl  0x4(%ebx)
  2849a4:	ff 33                	pushl  (%ebx)
  2849a6:	e8 16 c5 ff ff       	call   280ec1 <boxfill8>
  2849ab:	83 c4 20             	add    $0x20,%esp
int keywin_off(struct SHEET *key_win,struct SHEET *sht_win,int cur_c,int cur_x)
{
	change_wtitle8(key_win,0);
	if(key_win == sht_win)
	{
		cur_c = -1;
  2849ae:	c7 45 10 ff ff ff ff 	movl   $0xffffffff,0x10(%ebp)
  2849b5:	eb 1a                	jmp    2849d1 <keywin_off+0x5d>
		boxfill8(sht_win->buf,sht_win->bxsize,COL8_FFFFFF,cur_x,28,cur_x+7,43);
	} else {
		if((key_win->flags & 0x20))
  2849b7:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  2849bb:	74 14                	je     2849d1 <keywin_off+0x5d>
		{
			fifo32_put(&key_win->task->fifo,3);
  2849bd:	83 ec 08             	sub    $0x8,%esp
  2849c0:	6a 03                	push   $0x3
  2849c2:	8b 43 24             	mov    0x24(%ebx),%eax
  2849c5:	83 c0 10             	add    $0x10,%eax
  2849c8:	50                   	push   %eax
  2849c9:	e8 fb d3 ff ff       	call   281dc9 <fifo32_put>
  2849ce:	83 c4 10             	add    $0x10,%esp
		}
	}
	return cur_c;
}
  2849d1:	8b 45 10             	mov    0x10(%ebp),%eax
  2849d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2849d7:	c9                   	leave  
  2849d8:	c3                   	ret    

002849d9 <keywin_on>:

int keywin_on(struct SHEET *key_win,struct SHEET *sht_win,int cur_c)
{
  2849d9:	55                   	push   %ebp
  2849da:	89 e5                	mov    %esp,%ebp
  2849dc:	53                   	push   %ebx
  2849dd:	83 ec 0c             	sub    $0xc,%esp
  2849e0:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  2849e3:	6a 01                	push   $0x1
  2849e5:	53                   	push   %ebx
  2849e6:	e8 c3 fe ff ff       	call   2848ae <change_wtitle8>
	if(key_win == sht_win)
  2849eb:	83 c4 10             	add    $0x10,%esp
  2849ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
  2849f1:	74 1c                	je     284a0f <keywin_on+0x36>
	{
		cur_c = COL8_000000;
	} else {
		if((key_win->flags & 0x20))
  2849f3:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  2849f7:	74 1d                	je     284a16 <keywin_on+0x3d>
		{
			fifo32_put(&key_win->task->fifo,2);
  2849f9:	83 ec 08             	sub    $0x8,%esp
  2849fc:	6a 02                	push   $0x2
  2849fe:	8b 43 24             	mov    0x24(%ebx),%eax
  284a01:	83 c0 10             	add    $0x10,%eax
  284a04:	50                   	push   %eax
  284a05:	e8 bf d3 ff ff       	call   281dc9 <fifo32_put>
  284a0a:	83 c4 10             	add    $0x10,%esp
  284a0d:	eb 07                	jmp    284a16 <keywin_on+0x3d>
int keywin_on(struct SHEET *key_win,struct SHEET *sht_win,int cur_c)
{
	change_wtitle8(key_win,1);
	if(key_win == sht_win)
	{
		cur_c = COL8_000000;
  284a0f:	c7 45 10 00 00 00 00 	movl   $0x0,0x10(%ebp)
		{
			fifo32_put(&key_win->task->fifo,2);
		}
	}
	return cur_c;
}
  284a16:	8b 45 10             	mov    0x10(%ebp),%eax
  284a19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284a1c:	c9                   	leave  
  284a1d:	c3                   	ret    

00284a1e <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  284a1e:	55                   	push   %ebp
  284a1f:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  284a21:	8b 45 0c             	mov    0xc(%ebp),%eax
  284a24:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  284a28:	5d                   	pop    %ebp
  284a29:	c3                   	ret    
