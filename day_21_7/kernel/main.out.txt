
main.out.o:     file format elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
  280013:	81 ec 5c 04 00 00    	sub    $0x45c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280019:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  28001b:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  280021:	6a 00                	push   $0x0
  280023:	50                   	push   %eax
  280024:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28002a:	68 80 00 00 00       	push   $0x80
  28002f:	50                   	push   %eax
  280030:	e8 33 19 00 00       	call   281968 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280035:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  28003b:	6a 00                	push   $0x0
  28003d:	50                   	push   %eax
  28003e:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280044:	6a 20                	push   $0x20
  280046:	50                   	push   %eax
  280047:	e8 1c 19 00 00       	call   281968 <fifo32_init>
	
	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
  280054:	68 ed 00 00 00       	push   $0xed
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	
	int key_leds = (binfo->leds>>4)&7;
  280059:	c0 f8 04             	sar    $0x4,%al
  28005c:	83 e0 07             	and    $0x7,%eax
  28005f:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280065:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  28006b:	50                   	push   %eax
  28006c:	e8 28 19 00 00       	call   281999 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	58                   	pop    %eax
  280072:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280078:	5a                   	pop    %edx
  280079:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  28007f:	50                   	push   %eax
  280080:	e8 14 19 00 00       	call   281999 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  280085:	e8 20 13 00 00       	call   2813aa <init_gdtidt>
	init_pic();
  28008a:	e8 b4 14 00 00       	call   281543 <init_pic>
	io_sti();
  28008f:	e8 70 0a 00 00       	call   280b04 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  280094:	59                   	pop    %ecx
  280095:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28009b:	5b                   	pop    %ebx
  28009c:	68 00 01 00 00       	push   $0x100
  2800a1:	50                   	push   %eax
  2800a2:	e8 fb 1a 00 00       	call   281ba2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  2800a7:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800ad:	83 c4 0c             	add    $0xc,%esp
  2800b0:	50                   	push   %eax
  2800b1:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  2800b7:	68 00 02 00 00       	push   $0x200
  2800bc:	50                   	push   %eax
  2800bd:	e8 92 19 00 00       	call   281a54 <enable_mouse>
	
	//init timer
	init_pit();
  2800c2:	e8 a4 26 00 00       	call   28276b <init_pit>
	
	io_out8(PIC0_IMR,0xf8);
  2800c7:	5e                   	pop    %esi
  2800c8:	5f                   	pop    %edi
  2800c9:	68 f8 00 00 00       	push   $0xf8
  2800ce:	6a 21                	push   $0x21
  2800d0:	e8 61 0a 00 00       	call   280b36 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800d5:	58                   	pop    %eax
  2800d6:	5a                   	pop    %edx
  2800d7:	68 ef 00 00 00       	push   $0xef
  2800dc:	68 a1 00 00 00       	push   $0xa1
  2800e1:	e8 50 0a 00 00       	call   280b36 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800e6:	59                   	pop    %ecx
  2800e7:	5b                   	pop    %ebx
  2800e8:	68 ff ff ff bf       	push   $0xbfffffff
  2800ed:	68 00 00 40 00       	push   $0x400000
  2800f2:	e8 45 1b 00 00       	call   281c3c <memtest>
	memman_init(memman);
  2800f7:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800fe:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%ebp)
	memman_init(memman);
  280104:	e8 72 1c 00 00       	call   281d7b <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  280109:	83 c4 0c             	add    $0xc,%esp
  28010c:	68 00 e0 09 00       	push   $0x9e000
  280111:	68 00 10 00 00       	push   $0x1000
  280116:	68 00 00 3c 00       	push   $0x3c0000
  28011b:	e8 aa 1d 00 00       	call   281eca <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  280120:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280126:	83 c4 0c             	add    $0xc,%esp
  280129:	2d 00 00 40 00       	sub    $0x400000,%eax
  28012e:	50                   	push   %eax
  28012f:	68 00 00 40 00       	push   $0x400000
  280134:	68 00 00 3c 00       	push   $0x3c0000
  280139:	e8 8c 1d 00 00       	call   281eca <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
  28013e:	e8 28 0b 00 00       	call   280c6b <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280143:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  28014a:	50                   	push   %eax
  28014b:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280152:	50                   	push   %eax
  280153:	ff 35 f8 0f 00 00    	pushl  0xff8
  280159:	68 00 00 3c 00       	push   $0x3c0000
  28015e:	e8 15 20 00 00       	call   282178 <shtctl_init>
	task_a = task_init(memman); //main task
  280163:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280166:	89 c6                	mov    %eax,%esi
	task_a = task_init(memman); //main task
  280168:	68 00 00 3c 00       	push   $0x3c0000
  28016d:	e8 63 2a 00 00       	call   282bd5 <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280172:	83 c4 0c             	add    $0xc,%esp
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	task_a = task_init(memman); //main task
  280175:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
	fifo.task = task_a;
  28017b:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280181:	6a 00                	push   $0x0
  280183:	6a 01                	push   $0x1
  280185:	50                   	push   %eax
  280186:	e8 b7 29 00 00       	call   282b42 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  28018b:	89 34 24             	mov    %esi,(%esp)
  28018e:	e8 79 20 00 00       	call   28220c <sheet_alloc>
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  280193:	5f                   	pop    %edi
  280194:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
	task_a = task_init(memman); //main task
	fifo.task = task_a;
	task_run(task_a,1,0);

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  28019b:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  2801a1:	58                   	pop    %eax
  2801a2:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801a9:	0f af c2             	imul   %edx,%eax
  2801ac:	50                   	push   %eax
  2801ad:	68 00 00 3c 00       	push   $0x3c0000
  2801b2:	e8 66 1f 00 00       	call   28211d <memman_alloc_4k>
  2801b7:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801b9:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801c0:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801c7:	50                   	push   %eax
  2801c8:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801cf:	50                   	push   %eax
  2801d0:	53                   	push   %ebx
  2801d1:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2801d7:	e8 97 20 00 00       	call   282273 <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801dc:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801e3:	83 c4 1c             	add    $0x1c,%esp
  2801e6:	50                   	push   %eax
  2801e7:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801ee:	50                   	push   %eax
  2801ef:	53                   	push   %ebx
  2801f0:	e8 ff 0a 00 00       	call   280cf4 <init_screen8>
	
	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  2801f5:	89 34 24             	mov    %esi,(%esp)
  2801f8:	e8 0f 20 00 00       	call   28220c <sheet_alloc>
  2801fd:	89 c3                	mov    %eax,%ebx
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  2801ff:	58                   	pop    %eax
  280200:	5a                   	pop    %edx
  280201:	68 80 20 00 00       	push   $0x2080
  280206:	68 00 00 3c 00       	push   $0x3c0000
  28020b:	e8 0d 1f 00 00       	call   28211d <memman_alloc_4k>
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  280210:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  280217:	6a 34                	push   $0x34
  280219:	68 90 00 00 00       	push   $0x90
  28021e:	50                   	push   %eax
  28021f:	53                   	push   %ebx
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
	
	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  280220:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  280226:	e8 48 20 00 00       	call   282273 <sheet_setbuf>
	make_window8(buf_window,144,52,"task_a",1);
  28022b:	83 c4 14             	add    $0x14,%esp
  28022e:	6a 01                	push   $0x1
  280230:	68 c0 3b 28 00       	push   $0x283bc0
  280235:	6a 34                	push   $0x34
  280237:	68 90 00 00 00       	push   $0x90
  28023c:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280242:	e8 3e 0d 00 00       	call   280f85 <make_window8>
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
  280247:	83 c4 18             	add    $0x18,%esp
  28024a:	6a 07                	push   $0x7
  28024c:	6a 10                	push   $0x10
  28024e:	68 80 00 00 00       	push   $0x80
  280253:	6a 1c                	push   $0x1c
  280255:	6a 08                	push   $0x8
  280257:	53                   	push   %ebx
  280258:	e8 eb 0e 00 00       	call   281148 <make_textbox8>
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
	//timer for cursor.
	struct TIMER *timer;
	timer = timer_alloc();
  28025d:	83 c4 20             	add    $0x20,%esp
  280260:	e8 b2 24 00 00       	call   282717 <timer_alloc>
  280265:	89 85 bc fb ff ff    	mov    %eax,-0x444(%ebp)
	timer_init(timer,&fifo,1);
  28026b:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  280271:	51                   	push   %ecx
  280272:	6a 01                	push   $0x1
  280274:	50                   	push   %eax
  280275:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  28027b:	e8 68 25 00 00       	call   2827e8 <timer_init>
	timer_settime(timer,50);
  280280:	5f                   	pop    %edi
  280281:	58                   	pop    %eax

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280282:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi
	cursor_c = COL8_FFFFFF;
	//timer for cursor.
	struct TIMER *timer;
	timer = timer_alloc();
	timer_init(timer,&fifo,1);
	timer_settime(timer,50);
  280288:	6a 32                	push   $0x32
  28028a:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280290:	e8 67 25 00 00       	call   2827fc <timer_settime>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280295:	89 34 24             	mov    %esi,(%esp)
  280298:	e8 6f 1f 00 00       	call   28220c <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  28029d:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  2802a4:	6a 10                	push   $0x10
  2802a6:	6a 10                	push   $0x10
  2802a8:	57                   	push   %edi
  2802a9:	50                   	push   %eax
	timer = timer_alloc();
	timer_init(timer,&fifo,1);
	timer_settime(timer,50);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2802aa:	89 85 b4 fb ff ff    	mov    %eax,-0x44c(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2802b0:	e8 be 1f 00 00       	call   282273 <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  2802b5:	83 c4 18             	add    $0x18,%esp
  2802b8:	6a 63                	push   $0x63
  2802ba:	57                   	push   %edi
  2802bb:	e8 a3 0b 00 00       	call   280e63 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  2802c0:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2802c7:	b9 02 00 00 00       	mov    $0x2,%ecx
  2802cc:	83 e8 10             	sub    $0x10,%eax
  2802cf:	99                   	cltd   
  2802d0:	f7 f9                	idiv   %ecx
  2802d2:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int my = (binfo->scrny-28-16)/2;
  2802d8:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802df:	89 34 24             	mov    %esi,(%esp)
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
  2802e2:	83 e8 2c             	sub    $0x2c,%eax
  2802e5:	99                   	cltd   
  2802e6:	f7 f9                	idiv   %ecx
  2802e8:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802ee:	e8 19 1f 00 00       	call   28220c <sheet_alloc>
  2802f3:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  2802f9:	58                   	pop    %eax
  2802fa:	5a                   	pop    %edx
  2802fb:	68 00 a5 00 00       	push   $0xa500
  280300:	68 00 00 3c 00       	push   $0x3c0000
  280305:	e8 13 1e 00 00       	call   28211d <memman_alloc_4k>
	sheet_setbuf(sht_console,buf_console,256,165,-1);
  28030a:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  280311:	68 a5 00 00 00       	push   $0xa5
  280316:	68 00 01 00 00       	push   $0x100
  28031b:	50                   	push   %eax
  28031c:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;

	//console sheet
	sht_console = sheet_alloc(shtctl);
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  280322:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	sheet_setbuf(sht_console,buf_console,256,165,-1);
  280328:	e8 46 1f 00 00       	call   282273 <sheet_setbuf>
	make_window8(buf_console,256,165,"console",0);
  28032d:	83 c4 14             	add    $0x14,%esp
  280330:	6a 00                	push   $0x0
  280332:	68 cc 3b 28 00       	push   $0x283bcc
  280337:	68 a5 00 00 00       	push   $0xa5
  28033c:	68 00 01 00 00       	push   $0x100
  280341:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  280347:	e8 39 0c 00 00       	call   280f85 <make_window8>
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
  28034c:	83 c4 18             	add    $0x18,%esp
  28034f:	6a 00                	push   $0x0
  280351:	68 80 00 00 00       	push   $0x80
  280356:	68 f0 00 00 00       	push   $0xf0
  28035b:	6a 1c                	push   $0x1c
  28035d:	6a 08                	push   $0x8
  28035f:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280365:	e8 de 0d 00 00       	call   281148 <make_textbox8>
	task_console = task_alloc();
  28036a:	83 c4 20             	add    $0x20,%esp
  28036d:	e8 eb 25 00 00       	call   28295d <task_alloc>
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  280372:	51                   	push   %ecx
  280373:	51                   	push   %ecx
	sht_console = sheet_alloc(shtctl);
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
  280374:	89 c7                	mov    %eax,%edi
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  280376:	68 00 00 01 00       	push   $0x10000
  28037b:	68 00 00 3c 00       	push   $0x3c0000
  280380:	e8 98 1d 00 00       	call   28211d <memman_alloc_4k>
	task_console->tss.cs = 3*8;
	task_console->tss.ss = 1*8;
	task_console->tss.ds = 1*8;
	task_console->tss.fs = 1*8;
	task_console->tss.gs = 1*8;
	*((int *)(task_console->tss.esp + 4)) = sht_console;
  280385:	8b 8d d8 fb ff ff    	mov    -0x428(%ebp),%ecx
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  28038b:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
	task_console->tss.eip = (int)&console_task - 0x280000;
  280391:	c7 47 4c f6 2d 00 00 	movl   $0x2df6,0x4c(%edi)
	task_console->tss.es = 1*8;
  280398:	c7 47 74 08 00 00 00 	movl   $0x8,0x74(%edi)
	task_console->tss.cs = 3*8;
  28039f:	c7 47 78 18 00 00 00 	movl   $0x18,0x78(%edi)
	task_console->tss.ds = 1*8;
	task_console->tss.fs = 1*8;
	task_console->tss.gs = 1*8;
	*((int *)(task_console->tss.esp + 4)) = sht_console;
	*((int *)(task_console->tss.esp + 8)) = memtotal;
	task_run(task_console,2,2);
  2803a6:	83 c4 0c             	add    $0xc,%esp
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  2803a9:	89 57 64             	mov    %edx,0x64(%edi)
	task_console->tss.eip = (int)&console_task - 0x280000;
	task_console->tss.es = 1*8;
	task_console->tss.cs = 3*8;
	task_console->tss.ss = 1*8;
  2803ac:	c7 47 7c 08 00 00 00 	movl   $0x8,0x7c(%edi)
	task_console->tss.ds = 1*8;
  2803b3:	c7 87 80 00 00 00 08 	movl   $0x8,0x80(%edi)
  2803ba:	00 00 00 
	task_console->tss.fs = 1*8;
  2803bd:	c7 87 84 00 00 00 08 	movl   $0x8,0x84(%edi)
  2803c4:	00 00 00 
	task_console->tss.gs = 1*8;
  2803c7:	c7 87 88 00 00 00 08 	movl   $0x8,0x88(%edi)
  2803ce:	00 00 00 
	*((int *)(task_console->tss.esp + 4)) = sht_console;
  2803d1:	89 88 f8 ff 00 00    	mov    %ecx,0xfff8(%eax)
	*((int *)(task_console->tss.esp + 8)) = memtotal;
  2803d7:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
  2803dd:	8b 47 64             	mov    0x64(%edi),%eax
  2803e0:	89 48 08             	mov    %ecx,0x8(%eax)
	task_run(task_console,2,2);
  2803e3:	6a 02                	push   $0x2
  2803e5:	6a 02                	push   $0x2
  2803e7:	57                   	push   %edi
  2803e8:	e8 55 27 00 00       	call   282b42 <task_run>


	sheet_slide(sht_bg,0,0);
  2803ed:	83 c4 0c             	add    $0xc,%esp
  2803f0:	6a 00                	push   $0x0
  2803f2:	6a 00                	push   $0x0
  2803f4:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2803fa:	e8 95 22 00 00       	call   282694 <sheet_slide>
	sheet_slide(sht_console,32,4);
  2803ff:	83 c4 0c             	add    $0xc,%esp
  280402:	6a 04                	push   $0x4
  280404:	6a 20                	push   $0x20
  280406:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28040c:	e8 83 22 00 00       	call   282694 <sheet_slide>
	sheet_slide(sht_window,	64, 56);
  280411:	83 c4 0c             	add    $0xc,%esp
  280414:	6a 38                	push   $0x38
  280416:	6a 40                	push   $0x40
  280418:	53                   	push   %ebx
  280419:	e8 76 22 00 00       	call   282694 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  28041e:	83 c4 0c             	add    $0xc,%esp
  280421:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280427:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28042d:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280433:	e8 5c 22 00 00       	call   282694 <sheet_slide>
	sheet_updown(sht_bg,0);
  280438:	5e                   	pop    %esi
  280439:	58                   	pop    %eax
  28043a:	6a 00                	push   $0x0
  28043c:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280442:	e8 64 21 00 00       	call   2825ab <sheet_updown>
	sheet_updown(sht_console,1);
  280447:	58                   	pop    %eax
  280448:	5a                   	pop    %edx
  280449:	6a 01                	push   $0x1
  28044b:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280451:	e8 55 21 00 00       	call   2825ab <sheet_updown>
	sheet_updown(sht_window,2);
  280456:	59                   	pop    %ecx
  280457:	5e                   	pop    %esi
  280458:	6a 02                	push   $0x2
  28045a:	53                   	push   %ebx
	sheet_setbuf(sht_window,buf_window,144,52,-1);
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
  28045b:	be 08 00 00 00       	mov    $0x8,%esi
	sheet_slide(sht_console,32,4);
	sheet_slide(sht_window,	64, 56);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,0);
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
  280460:	e8 46 21 00 00       	call   2825ab <sheet_updown>
	sheet_updown(sht_mouse,3);
  280465:	58                   	pop    %eax
  280466:	5a                   	pop    %edx
  280467:	6a 03                	push   $0x3
  280469:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  28046f:	e8 37 21 00 00       	call   2825ab <sheet_updown>

	int key_to = 0,key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280474:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
	sheet_slide(sht_window,	64, 56);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,0);
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
	sheet_updown(sht_mouse,3);
  28047a:	83 c4 10             	add    $0x10,%esp
	
	extern struct TIMERCTL timerctl;

	int key_to = 0,key_shift = 0,keycmd_wait = -1;
  28047d:	c7 85 c4 fb ff ff ff 	movl   $0xffffffff,-0x43c(%ebp)
  280484:	ff ff ff 
  280487:	c7 85 cc fb ff ff 00 	movl   $0x0,-0x434(%ebp)
  28048e:	00 00 00 
  280491:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  280498:	00 00 00 

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  28049b:	89 85 c8 fb ff ff    	mov    %eax,-0x438(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804a1:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
  2804a7:	c7 85 dc fb ff ff 07 	movl   $0x7,-0x424(%ebp)
  2804ae:	00 00 00 
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804b1:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)

	int key_to = 0,key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  2804b7:	83 ec 0c             	sub    $0xc,%esp
  2804ba:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804c0:	e8 81 15 00 00       	call   281a46 <fifo32_status>
  2804c5:	8b 8d c4 fb ff ff    	mov    -0x43c(%ebp),%ecx
  2804cb:	83 c4 10             	add    $0x10,%esp
  2804ce:	c1 e9 1f             	shr    $0x1f,%ecx
  2804d1:	74 2f                	je     280502 <bootmain+0x502>
  2804d3:	85 c0                	test   %eax,%eax
  2804d5:	7e 2b                	jle    280502 <bootmain+0x502>
		{
			keycmd_wait = fifo32_get(&keycmd);
  2804d7:	83 ec 0c             	sub    $0xc,%esp
  2804da:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804e0:	e8 26 15 00 00       	call   281a0b <fifo32_get>
  2804e5:	89 85 c4 fb ff ff    	mov    %eax,-0x43c(%ebp)
			wait_KBC_sendready();
  2804eb:	e8 99 16 00 00       	call   281b89 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  2804f0:	59                   	pop    %ecx
  2804f1:	58                   	pop    %eax
  2804f2:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2804f8:	6a 60                	push   $0x60
  2804fa:	e8 37 06 00 00       	call   280b36 <io_out8>
  2804ff:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  280502:	e8 fb 05 00 00       	call   280b02 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280507:	83 ec 0c             	sub    $0xc,%esp
  28050a:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280510:	e8 31 15 00 00       	call   281a46 <fifo32_status>
  280515:	83 c4 10             	add    $0x10,%esp
  280518:	85 c0                	test   %eax,%eax
  28051a:	75 18                	jne    280534 <bootmain+0x534>
		{	
			task_sleep(task_a);
  28051c:	83 ec 0c             	sub    $0xc,%esp
  28051f:	ff b5 a8 fb ff ff    	pushl  -0x458(%ebp)
  280525:	e8 8a 28 00 00       	call   282db4 <task_sleep>
			io_sti();
  28052a:	e8 d5 05 00 00       	call   280b04 <io_sti>
  28052f:	e9 75 05 00 00       	jmp    280aa9 <bootmain+0xaa9>
		}
		else
		{
			int i = fifo32_get(&fifo);
  280534:	83 ec 0c             	sub    $0xc,%esp
  280537:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  28053d:	e8 c9 14 00 00       	call   281a0b <fifo32_get>
  280542:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
			io_sti();
  280548:	e8 b7 05 00 00       	call   280b04 <io_sti>
			if(256<=i && i<=511)
  28054d:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  280553:	83 c4 10             	add    $0x10,%esp
  280556:	8d 82 00 ff ff ff    	lea    -0x100(%edx),%eax
  28055c:	3d ff 00 00 00       	cmp    $0xff,%eax
  280561:	0f 87 1e 04 00 00    	ja     280985 <bootmain+0x985>
			{
				xtoa(i-256,s);
  280567:	8d 8d 36 fc ff ff    	lea    -0x3ca(%ebp),%ecx
  28056d:	89 95 9c fb ff ff    	mov    %edx,-0x464(%ebp)
  280573:	52                   	push   %edx
  280574:	52                   	push   %edx
  280575:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
  28057b:	51                   	push   %ecx
  28057c:	50                   	push   %eax
  28057d:	89 8d a0 fb ff ff    	mov    %ecx,-0x460(%ebp)
  280583:	e8 8e 11 00 00       	call   281716 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  280588:	8b 8d a0 fb ff ff    	mov    -0x460(%ebp),%ecx
  28058e:	83 c4 0c             	add    $0xc,%esp
  280591:	6a 04                	push   $0x4
  280593:	51                   	push   %ecx
  280594:	6a 00                	push   $0x0
  280596:	6a 07                	push   $0x7
  280598:	6a 10                	push   $0x10
  28059a:	6a 00                	push   $0x0
  28059c:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2805a2:	e8 3c 0b 00 00       	call   2810e3 <putfonts8_asc_sht>
				
				s[0] = key_char(i-256,key_shift);
  2805a7:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  2805ad:	83 c4 18             	add    $0x18,%esp
  2805b0:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  2805b6:	50                   	push   %eax
  2805b7:	e8 58 16 00 00       	call   281c14 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2805bc:	8d 48 bf             	lea    -0x41(%eax),%ecx
  2805bf:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
				
				s[0] = key_char(i-256,key_shift);
  2805c2:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2805c8:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2805cf:	8b 95 9c fb ff ff    	mov    -0x464(%ebp),%edx
  2805d5:	80 f9 19             	cmp    $0x19,%cl
  2805d8:	77 26                	ja     280600 <bootmain+0x600>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2805da:	f6 85 e0 fb ff ff 04 	testb  $0x4,-0x420(%ebp)
  2805e1:	75 0b                	jne    2805ee <bootmain+0x5ee>
  2805e3:	83 bd cc fb ff ff 00 	cmpl   $0x0,-0x434(%ebp)
  2805ea:	75 0b                	jne    2805f7 <bootmain+0x5f7>
  2805ec:	eb 12                	jmp    280600 <bootmain+0x600>
						(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2805ee:	83 bd cc fb ff ff 00 	cmpl   $0x0,-0x434(%ebp)
  2805f5:	75 09                	jne    280600 <bootmain+0x600>
						s[0] += 0x20;		//uppercase 2 lowercases					
  2805f7:	83 c0 20             	add    $0x20,%eax
  2805fa:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0)//visible char
  280600:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280607:	84 c0                	test   %al,%al
  280609:	74 73                	je     28067e <bootmain+0x67e>
				{
					if(key_to == 0 && cursor_x <128)
  28060b:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280612:	75 30                	jne    280644 <bootmain+0x644>
  280614:	83 fe 7f             	cmp    $0x7f,%esi
  280617:	7f 2b                	jg     280644 <bootmain+0x644>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF,s,1);
  280619:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  28061f:	51                   	push   %ecx
  280620:	6a 01                	push   $0x1
  280622:	89 95 a4 fb ff ff    	mov    %edx,-0x45c(%ebp)
  280628:	50                   	push   %eax
  280629:	6a 07                	push   $0x7
  28062b:	6a 00                	push   $0x0
  28062d:	6a 1c                	push   $0x1c
  28062f:	56                   	push   %esi
  280630:	53                   	push   %ebx
						cursor_x += 8;
  280631:	83 c6 08             	add    $0x8,%esi
				}
				if(s[0]!=0)//visible char
				{
					if(key_to == 0 && cursor_x <128)
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF,s,1);
  280634:	e8 aa 0a 00 00       	call   2810e3 <putfonts8_asc_sht>
  280639:	83 c4 20             	add    $0x20,%esp
  28063c:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  280642:	eb 3a                	jmp    28067e <bootmain+0x67e>
						cursor_x += 8;
					}
					else if(key_to == 1)
  280644:	83 bd e4 fb ff ff 01 	cmpl   $0x1,-0x41c(%ebp)
  28064b:	75 31                	jne    28067e <bootmain+0x67e>
					{
						fifo32_put(&task_console->fifo,s[0]+256); //send key to console fifo
  28064d:	05 00 01 00 00       	add    $0x100,%eax
  280652:	89 95 a4 fb ff ff    	mov    %edx,-0x45c(%ebp)
  280658:	52                   	push   %edx
  280659:	52                   	push   %edx
  28065a:	50                   	push   %eax
  28065b:	8d 47 10             	lea    0x10(%edi),%eax
  28065e:	50                   	push   %eax
  28065f:	e8 35 13 00 00       	call   281999 <fifo32_put>
					}
					
				}
				if(i == 256 + 0x0f) //tab key
  280664:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  28066a:	83 c4 10             	add    $0x10,%esp
  28066d:	81 fa 0f 01 00 00    	cmp    $0x10f,%edx
  280673:	0f 85 7f 01 00 00    	jne    2807f8 <bootmain+0x7f8>
  280679:	e9 84 00 00 00       	jmp    280702 <bootmain+0x702>
  28067e:	81 fa 0f 01 00 00    	cmp    $0x10f,%edx
  280684:	0f 85 ff 00 00 00    	jne    280789 <bootmain+0x789>
				{
					if(key_to == 0)
  28068a:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280691:	75 6f                	jne    280702 <bootmain+0x702>
					{
						//switch to task_console window
						key_to = 1;
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",0);
  280693:	6a 00                	push   $0x0
  280695:	68 c0 3b 28 00       	push   $0x283bc0
  28069a:	ff 73 04             	pushl  0x4(%ebx)
  28069d:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  2806a3:	e8 25 08 00 00       	call   280ecd <make_wtitle8>
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",1);
  2806a8:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  2806ae:	6a 01                	push   $0x1
  2806b0:	68 c7 3b 28 00       	push   $0x283bc7
  2806b5:	ff 70 04             	pushl  0x4(%eax)
  2806b8:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2806be:	e8 0a 08 00 00       	call   280ecd <make_wtitle8>
						cursor_c = -1;	//set cursor color to null(-1) to hide
						boxfill8(sht_window->buf,sht_window->bxsize,COL8_FFFFFF,cursor_x,28,cursor_x+7,43);
  2806c3:	8d 46 07             	lea    0x7(%esi),%eax
  2806c6:	83 c4 1c             	add    $0x1c,%esp
  2806c9:	6a 2b                	push   $0x2b
  2806cb:	50                   	push   %eax
  2806cc:	6a 1c                	push   $0x1c
  2806ce:	56                   	push   %esi
  2806cf:	6a 07                	push   $0x7
  2806d1:	ff 73 04             	pushl  0x4(%ebx)
  2806d4:	ff 33                	pushl  (%ebx)
  2806d6:	e8 a9 05 00 00       	call   280c84 <boxfill8>
						fifo32_put(&task_console->fifo,2); //wake console cursor
  2806db:	8d 47 10             	lea    0x10(%edi),%eax
  2806de:	83 c4 18             	add    $0x18,%esp
  2806e1:	6a 02                	push   $0x2
  2806e3:	50                   	push   %eax
  2806e4:	e8 b0 12 00 00       	call   281999 <fifo32_put>
  2806e9:	83 c4 10             	add    $0x10,%esp
				if(i == 256 + 0x0f) //tab key
				{
					if(key_to == 0)
					{
						//switch to task_console window
						key_to = 1;
  2806ec:	c7 85 e4 fb ff ff 01 	movl   $0x1,-0x41c(%ebp)
  2806f3:	00 00 00 
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",0);
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",1);
						cursor_c = -1;	//set cursor color to null(-1) to hide
  2806f6:	c7 85 dc fb ff ff ff 	movl   $0xffffffff,-0x424(%ebp)
  2806fd:	ff ff ff 
  280700:	eb 55                	jmp    280757 <bootmain+0x757>
					}
					else
					{
						//back to task_a window
						key_to = 0;
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",1);
  280702:	6a 01                	push   $0x1
  280704:	68 c0 3b 28 00       	push   $0x283bc0
  280709:	ff 73 04             	pushl  0x4(%ebx)
  28070c:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280712:	e8 b6 07 00 00       	call   280ecd <make_wtitle8>
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",0);
  280717:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28071d:	6a 00                	push   $0x0
  28071f:	68 c7 3b 28 00       	push   $0x283bc7
  280724:	ff 70 04             	pushl  0x4(%eax)
  280727:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28072d:	e8 9b 07 00 00       	call   280ecd <make_wtitle8>
						cursor_c = COL8_000000;//show the cursor
						fifo32_put(&task_console->fifo,3); //stop console cursor
  280732:	8d 47 10             	lea    0x10(%edi),%eax
  280735:	83 c4 18             	add    $0x18,%esp
  280738:	6a 03                	push   $0x3
  28073a:	50                   	push   %eax
  28073b:	e8 59 12 00 00       	call   281999 <fifo32_put>
  280740:	83 c4 10             	add    $0x10,%esp
						fifo32_put(&task_console->fifo,2); //wake console cursor
					}
					else
					{
						//back to task_a window
						key_to = 0;
  280743:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  28074a:	00 00 00 
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",1);
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",0);
						cursor_c = COL8_000000;//show the cursor
  28074d:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  280754:	00 00 00 
						fifo32_put(&task_console->fifo,3); //stop console cursor
					}
					sheet_refresh(sht_window,0,0,sht_window->bxsize,21);
  280757:	83 ec 0c             	sub    $0xc,%esp
  28075a:	6a 15                	push   $0x15
  28075c:	ff 73 04             	pushl  0x4(%ebx)
  28075f:	6a 00                	push   $0x0
  280761:	6a 00                	push   $0x0
  280763:	53                   	push   %ebx
  280764:	e8 09 1e 00 00       	call   282572 <sheet_refresh>
					sheet_refresh(sht_console,0,0,sht_console->bxsize,21);
  280769:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28076f:	83 c4 14             	add    $0x14,%esp
  280772:	6a 15                	push   $0x15
  280774:	ff 70 04             	pushl  0x4(%eax)
  280777:	6a 00                	push   $0x0
  280779:	6a 00                	push   $0x0
  28077b:	50                   	push   %eax
  28077c:	e8 f1 1d 00 00       	call   282572 <sheet_refresh>
  280781:	83 c4 20             	add    $0x20,%esp
  280784:	e9 77 01 00 00       	jmp    280900 <bootmain+0x900>
				}
			 	else if(i == 256 + 0x0e) //back key
  280789:	81 fa 0e 01 00 00    	cmp    $0x10e,%edx
  28078f:	75 6f                	jne    280800 <bootmain+0x800>
				{
					if(key_to == 0 && cursor_x >8)
  280791:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280798:	75 2f                	jne    2807c9 <bootmain+0x7c9>
  28079a:	83 fe 08             	cmp    $0x8,%esi
  28079d:	7e 2a                	jle    2807c9 <bootmain+0x7c9>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
  28079f:	50                   	push   %eax
  2807a0:	6a 01                	push   $0x1
  2807a2:	68 05 3f 28 00       	push   $0x283f05
  2807a7:	6a 07                	push   $0x7
  2807a9:	6a 00                	push   $0x0
  2807ab:	6a 1c                	push   $0x1c
  2807ad:	56                   	push   %esi
  2807ae:	53                   	push   %ebx
						cursor_x -= 8;
  2807af:	83 ee 08             	sub    $0x8,%esi
				}
			 	else if(i == 256 + 0x0e) //back key
				{
					if(key_to == 0 && cursor_x >8)
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
  2807b2:	e8 2c 09 00 00       	call   2810e3 <putfonts8_asc_sht>
  2807b7:	83 c4 20             	add    $0x20,%esp
  2807ba:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2807c1:	00 00 00 
  2807c4:	e9 37 01 00 00       	jmp    280900 <bootmain+0x900>
						cursor_x -= 8;
					}
					else if(key_to == 1)
  2807c9:	83 bd e4 fb ff ff 01 	cmpl   $0x1,-0x41c(%ebp)
  2807d0:	0f 85 2a 01 00 00    	jne    280900 <bootmain+0x900>
					{
						fifo32_put(&task_console->fifo,8+256);
  2807d6:	50                   	push   %eax
  2807d7:	50                   	push   %eax
  2807d8:	8d 47 10             	lea    0x10(%edi),%eax
  2807db:	68 08 01 00 00       	push   $0x108
  2807e0:	50                   	push   %eax
  2807e1:	e8 b3 11 00 00       	call   281999 <fifo32_put>
  2807e6:	83 c4 10             	add    $0x10,%esp
  2807e9:	c7 85 e4 fb ff ff 01 	movl   $0x1,-0x41c(%ebp)
  2807f0:	00 00 00 
  2807f3:	e9 08 01 00 00       	jmp    280900 <bootmain+0x900>
						fifo32_put(&task_console->fifo,3); //stop console cursor
					}
					sheet_refresh(sht_window,0,0,sht_window->bxsize,21);
					sheet_refresh(sht_console,0,0,sht_console->bxsize,21);
				}
			 	else if(i == 256 + 0x0e) //back key
  2807f8:	81 fa 0e 01 00 00    	cmp    $0x10e,%edx
  2807fe:	74 d6                	je     2807d6 <bootmain+0x7d6>
					else if(key_to == 1)
					{
						fifo32_put(&task_console->fifo,8+256);
					}
				}
				else if(i == 256 + 0x1c)  //return key
  280800:	81 fa 1c 01 00 00    	cmp    $0x11c,%edx
  280806:	75 1d                	jne    280825 <bootmain+0x825>
				{
					if(key_to!=0) //forcus on task_console window
  280808:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  28080f:	0f 84 eb 00 00 00    	je     280900 <bootmain+0x900>
					{
						fifo32_put(&task_console->fifo,10+256);
  280815:	50                   	push   %eax
  280816:	50                   	push   %eax
  280817:	8d 47 10             	lea    0x10(%edi),%eax
  28081a:	68 0a 01 00 00       	push   $0x10a
  28081f:	50                   	push   %eax
  280820:	e9 a1 00 00 00       	jmp    2808c6 <bootmain+0x8c6>
					}
				}
				else if(i == 256 + 0x2a)  //left shift on
  280825:	81 fa 2a 01 00 00    	cmp    $0x12a,%edx
  28082b:	75 0c                	jne    280839 <bootmain+0x839>
				{
					key_shift |= 1;
  28082d:	83 8d cc fb ff ff 01 	orl    $0x1,-0x434(%ebp)
  280834:	e9 c7 00 00 00       	jmp    280900 <bootmain+0x900>
				} 
				else if(i == 256 + 0x36) //right shift on
  280839:	81 fa 36 01 00 00    	cmp    $0x136,%edx
  28083f:	75 0c                	jne    28084d <bootmain+0x84d>
				{
					key_shift |= 2;
  280841:	83 8d cc fb ff ff 02 	orl    $0x2,-0x434(%ebp)
  280848:	e9 b3 00 00 00       	jmp    280900 <bootmain+0x900>
				}
				else if(i == 256 + 0xaa)  //left shift off
  28084d:	81 fa aa 01 00 00    	cmp    $0x1aa,%edx
  280853:	75 0c                	jne    280861 <bootmain+0x861>
				{
					key_shift &= ~1;
  280855:	83 a5 cc fb ff ff fe 	andl   $0xfffffffe,-0x434(%ebp)
  28085c:	e9 9f 00 00 00       	jmp    280900 <bootmain+0x900>
				} 
				else if(i == 256 + 0xb6) //right shift off
  280861:	81 fa b6 01 00 00    	cmp    $0x1b6,%edx
  280867:	75 0c                	jne    280875 <bootmain+0x875>
				{
					key_shift &= ~2;
  280869:	83 a5 cc fb ff ff fd 	andl   $0xfffffffd,-0x434(%ebp)
  280870:	e9 8b 00 00 00       	jmp    280900 <bootmain+0x900>
				}
				else if(i == 256 + 0x3a) //CapsLock
  280875:	81 fa 3a 01 00 00    	cmp    $0x13a,%edx
  28087b:	75 09                	jne    280886 <bootmain+0x886>
				{
					key_leds ^= 4;
  28087d:	83 b5 e0 fb ff ff 04 	xorl   $0x4,-0x420(%ebp)
  280884:	eb 20                	jmp    2808a6 <bootmain+0x8a6>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  280886:	81 fa 45 01 00 00    	cmp    $0x145,%edx
  28088c:	75 09                	jne    280897 <bootmain+0x897>
				{
					key_leds ^= 2;
  28088e:	83 b5 e0 fb ff ff 02 	xorl   $0x2,-0x420(%ebp)
  280895:	eb 0f                	jmp    2808a6 <bootmain+0x8a6>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  280897:	81 fa 46 01 00 00    	cmp    $0x146,%edx
  28089d:	75 2e                	jne    2808cd <bootmain+0x8cd>
				{
					key_leds ^= 1;
  28089f:	83 b5 e0 fb ff ff 01 	xorl   $0x1,-0x420(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2808a6:	52                   	push   %edx
  2808a7:	52                   	push   %edx
  2808a8:	68 ed 00 00 00       	push   $0xed
  2808ad:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2808b3:	e8 e1 10 00 00       	call   281999 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  2808b8:	59                   	pop    %ecx
  2808b9:	58                   	pop    %eax
  2808ba:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2808c0:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2808c6:	e8 ce 10 00 00       	call   281999 <fifo32_put>
  2808cb:	eb 24                	jmp    2808f1 <bootmain+0x8f1>
				}
				else if(i == 256 + 0xfa)
  2808cd:	81 fa fa 01 00 00    	cmp    $0x1fa,%edx
  2808d3:	74 21                	je     2808f6 <bootmain+0x8f6>
				{
					keycmd_wait = -1;
				}
				else if(i == 256 + 0xfe)
  2808d5:	81 fa fe 01 00 00    	cmp    $0x1fe,%edx
  2808db:	75 23                	jne    280900 <bootmain+0x900>
				{
					wait_KBC_sendready();
  2808dd:	e8 a7 12 00 00       	call   281b89 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  2808e2:	50                   	push   %eax
  2808e3:	50                   	push   %eax
  2808e4:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2808ea:	6a 60                	push   $0x60
  2808ec:	e8 45 02 00 00       	call   280b36 <io_out8>
  2808f1:	83 c4 10             	add    $0x10,%esp
  2808f4:	eb 0a                	jmp    280900 <bootmain+0x900>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0xfa)
				{
					keycmd_wait = -1;
  2808f6:	c7 85 c4 fb ff ff ff 	movl   $0xffffffff,-0x43c(%ebp)
  2808fd:	ff ff ff 
				else if(i == 256 + 0xfe)
				{
					wait_KBC_sendready();
					io_out8(PORT_KEYDAT,keycmd_wait);
				}
				if(cursor_c >= 0)
  280900:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  280907:	78 1d                	js     280926 <bootmain+0x926>
				{
					//show cursor after show character
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  280909:	50                   	push   %eax
  28090a:	8d 46 07             	lea    0x7(%esi),%eax
  28090d:	6a 2b                	push   $0x2b
  28090f:	50                   	push   %eax
  280910:	6a 1c                	push   $0x1c
  280912:	56                   	push   %esi
  280913:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280919:	ff 73 04             	pushl  0x4(%ebx)
  28091c:	ff 33                	pushl  (%ebx)
  28091e:	e8 61 03 00 00       	call   280c84 <boxfill8>
  280923:	83 c4 20             	add    $0x20,%esp
				}
				sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  280926:	8d 46 08             	lea    0x8(%esi),%eax
  280929:	83 ec 0c             	sub    $0xc,%esp
  28092c:	6a 2c                	push   $0x2c
  28092e:	50                   	push   %eax
  28092f:	6a 1c                	push   $0x1c
  280931:	56                   	push   %esi
  280932:	53                   	push   %ebx
  280933:	e8 3a 1c 00 00       	call   282572 <sheet_refresh>
				sprintf(s,"%d,%d",key_leds,key_shift);
  280938:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  28093e:	83 c4 20             	add    $0x20,%esp
  280941:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280947:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  28094d:	68 d4 3b 28 00       	push   $0x283bd4
  280952:	50                   	push   %eax
  280953:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
  280959:	e8 4f 0e 00 00       	call   2817ad <sprintf>
				putfonts8_asc_sht(sht_bg,0,32,COL8_FFFFFF,COL8_000000,s,4);
  28095e:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  280964:	83 c4 0c             	add    $0xc,%esp
  280967:	6a 04                	push   $0x4
  280969:	50                   	push   %eax
  28096a:	6a 00                	push   $0x0
  28096c:	6a 07                	push   $0x7
  28096e:	6a 20                	push   $0x20
  280970:	6a 00                	push   $0x0
  280972:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280978:	e8 66 07 00 00       	call   2810e3 <putfonts8_asc_sht>
  28097d:	83 c4 20             	add    $0x20,%esp
  280980:	e9 32 fb ff ff       	jmp    2804b7 <bootmain+0x4b7>

			}
			else if(512<=i && i<=767)
  280985:	8d 82 00 fe ff ff    	lea    -0x200(%edx),%eax
  28098b:	3d ff 00 00 00       	cmp    $0xff,%eax
  280990:	0f 87 b5 00 00 00    	ja     280a4b <bootmain+0xa4b>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  280996:	50                   	push   %eax
  280997:	50                   	push   %eax
  280998:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  28099e:	0f b6 d2             	movzbl %dl,%edx
  2809a1:	52                   	push   %edx
  2809a2:	50                   	push   %eax
  2809a3:	e8 f6 10 00 00       	call   281a9e <mouse_decode>
  2809a8:	83 c4 10             	add    $0x10,%esp
  2809ab:	85 c0                	test   %eax,%eax
  2809ad:	0f 84 04 fb ff ff    	je     2804b7 <bootmain+0x4b7>
  2809b3:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  2809b9:	31 c9                	xor    %ecx,%ecx
  2809bb:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  2809c1:	0f 48 c1             	cmovs  %ecx,%eax
  2809c4:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809ca:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  2809d0:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  2809d6:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2809d9:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2809e0:	39 85 d4 fb ff ff    	cmp    %eax,-0x42c(%ebp)
  2809e6:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2809e9:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2809f0:	0f 4c 95 d4 fb ff ff 	cmovl  -0x42c(%ebp),%edx
  2809f7:	89 95 d4 fb ff ff    	mov    %edx,-0x42c(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2809fd:	8d 50 ff             	lea    -0x1(%eax),%edx
  280a00:	39 c1                	cmp    %eax,%ecx
					sheet_slide(sht_mouse,mx,my);
  280a02:	50                   	push   %eax
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a03:	0f 4c d1             	cmovl  %ecx,%edx
					sheet_slide(sht_mouse,mx,my);
  280a06:	52                   	push   %edx
  280a07:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280a0d:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a13:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%ebp)
					sheet_slide(sht_mouse,mx,my);
  280a19:	e8 76 1c 00 00       	call   282694 <sheet_slide>
					if(mdec.btn & 0x01)
  280a1e:	83 c4 10             	add    $0x10,%esp
  280a21:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
  280a28:	0f 84 89 fa ff ff    	je     2804b7 <bootmain+0x4b7>
					{
						sheet_slide(sht_window,mx-80,my-8);
  280a2e:	50                   	push   %eax
  280a2f:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280a35:	83 e8 08             	sub    $0x8,%eax
  280a38:	50                   	push   %eax
  280a39:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  280a3f:	83 e8 50             	sub    $0x50,%eax
  280a42:	50                   	push   %eax
  280a43:	53                   	push   %ebx
  280a44:	e8 4b 1c 00 00       	call   282694 <sheet_slide>
  280a49:	eb 5e                	jmp    280aa9 <bootmain+0xaa9>
					}
				}
			}
			else if(i<=1)
  280a4b:	83 fa 01             	cmp    $0x1,%edx
  280a4e:	0f 8f 63 fa ff ff    	jg     2804b7 <bootmain+0x4b7>
			{
				if(i != 0)
  280a54:	85 d2                	test   %edx,%edx
  280a56:	74 22                	je     280a7a <bootmain+0xa7a>
				{
					timer_init(timer,&fifo,0);
  280a58:	50                   	push   %eax
  280a59:	6a 00                	push   $0x0
  280a5b:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280a61:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280a67:	e8 7c 1d 00 00       	call   2827e8 <timer_init>
					if(cursor_c>=0) cursor_c = COL8_000000;
  280a6c:	83 c4 10             	add    $0x10,%esp
  280a6f:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  280a76:	79 39                	jns    280ab1 <bootmain+0xab1>
  280a78:	eb 20                	jmp    280a9a <bootmain+0xa9a>
				}
				else
				{
					timer_init(timer,&fifo,1);
  280a7a:	51                   	push   %ecx
  280a7b:	6a 01                	push   $0x1
  280a7d:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280a83:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280a89:	e8 5a 1d 00 00       	call   2827e8 <timer_init>
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280a8e:	83 c4 10             	add    $0x10,%esp
  280a91:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  280a98:	79 23                	jns    280abd <bootmain+0xabd>
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
				}
				timer_settime(timer,50);
  280a9a:	52                   	push   %edx
  280a9b:	52                   	push   %edx
  280a9c:	6a 32                	push   $0x32
  280a9e:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280aa4:	e8 53 1d 00 00       	call   2827fc <timer_settime>
  280aa9:	83 c4 10             	add    $0x10,%esp
  280aac:	e9 06 fa ff ff       	jmp    2804b7 <bootmain+0x4b7>
			else if(i<=1)
			{
				if(i != 0)
				{
					timer_init(timer,&fifo,0);
					if(cursor_c>=0) cursor_c = COL8_000000;
  280ab1:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  280ab8:	00 00 00 
  280abb:	eb 0a                	jmp    280ac7 <bootmain+0xac7>
				}
				else
				{
					timer_init(timer,&fifo,1);
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280abd:	c7 85 dc fb ff ff 07 	movl   $0x7,-0x424(%ebp)
  280ac4:	00 00 00 
				}
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  280ac7:	50                   	push   %eax
  280ac8:	8d 46 07             	lea    0x7(%esi),%eax
  280acb:	6a 2b                	push   $0x2b
  280acd:	50                   	push   %eax
  280ace:	6a 1c                	push   $0x1c
  280ad0:	56                   	push   %esi
  280ad1:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280ad7:	ff 73 04             	pushl  0x4(%ebx)
  280ada:	ff 33                	pushl  (%ebx)
  280adc:	e8 a3 01 00 00       	call   280c84 <boxfill8>
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  280ae1:	8d 46 08             	lea    0x8(%esi),%eax
  280ae4:	83 c4 14             	add    $0x14,%esp
  280ae7:	6a 2c                	push   $0x2c
  280ae9:	50                   	push   %eax
  280aea:	6a 1c                	push   $0x1c
  280aec:	56                   	push   %esi
  280aed:	53                   	push   %ebx
  280aee:	e8 7f 1a 00 00       	call   282572 <sheet_refresh>
  280af3:	83 c4 20             	add    $0x20,%esp
  280af6:	eb a2                	jmp    280a9a <bootmain+0xa9a>
  280af8:	66 90                	xchg   %ax,%ax
  280afa:	66 90                	xchg   %ax,%ax
  280afc:	66 90                	xchg   %ax,%ax
  280afe:	66 90                	xchg   %ax,%ax

00280b00 <io_hlt>:
  280b00:	f4                   	hlt    
  280b01:	c3                   	ret    

00280b02 <io_cli>:
  280b02:	fa                   	cli    
  280b03:	c3                   	ret    

00280b04 <io_sti>:
  280b04:	fb                   	sti    
  280b05:	c3                   	ret    

00280b06 <io_stihlt>:
  280b06:	fb                   	sti    
  280b07:	f4                   	hlt    
  280b08:	c3                   	ret    

00280b09 <write_mem8>:
  280b09:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280b0d:	8a 44 24 08          	mov    0x8(%esp),%al
  280b11:	88 01                	mov    %al,(%ecx)
  280b13:	c3                   	ret    

00280b14 <io_in8>:
  280b14:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b18:	b8 00 00 00 00       	mov    $0x0,%eax
  280b1d:	ec                   	in     (%dx),%al
  280b1e:	c3                   	ret    

00280b1f <io_in16>:
  280b1f:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b23:	b8 00 00 00 00       	mov    $0x0,%eax
  280b28:	66 ed                	in     (%dx),%ax
  280b2a:	c3                   	ret    

00280b2b <io_in32>:
  280b2b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b2f:	b8 00 00 00 00       	mov    $0x0,%eax
  280b34:	ed                   	in     (%dx),%eax
  280b35:	c3                   	ret    

00280b36 <io_out8>:
  280b36:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b3a:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b3e:	ee                   	out    %al,(%dx)
  280b3f:	c3                   	ret    

00280b40 <io_out16>:
  280b40:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b44:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b48:	66 ef                	out    %ax,(%dx)
  280b4a:	c3                   	ret    

00280b4b <io_out32>:
  280b4b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b4f:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b53:	ef                   	out    %eax,(%dx)
  280b54:	c3                   	ret    

00280b55 <io_load_eflags>:
  280b55:	9c                   	pushf  
  280b56:	58                   	pop    %eax
  280b57:	c3                   	ret    

00280b58 <io_store_eflags>:
  280b58:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b5c:	50                   	push   %eax
  280b5d:	9d                   	popf   
  280b5e:	c3                   	ret    

00280b5f <load_gdtr>:
  280b5f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b64:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b69:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280b6e:	c3                   	ret    

00280b6f <load_idtr>:
  280b6f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b74:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b79:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280b7e:	c3                   	ret    

00280b7f <load_cr0>:
  280b7f:	0f 20 c0             	mov    %cr0,%eax
  280b82:	c3                   	ret    

00280b83 <store_cr0>:
  280b83:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b87:	0f 22 c0             	mov    %eax,%cr0
  280b8a:	c3                   	ret    

00280b8b <_memtest_sub>:
  280b8b:	57                   	push   %edi
  280b8c:	56                   	push   %esi
  280b8d:	53                   	push   %ebx
  280b8e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280b93:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280b98:	8b 44 24 10          	mov    0x10(%esp),%eax

00280b9c <mts_loop>:
  280b9c:	89 c3                	mov    %eax,%ebx
  280b9e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280ba4:	8b 13                	mov    (%ebx),%edx
  280ba6:	89 33                	mov    %esi,(%ebx)
  280ba8:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280bab:	3b 3b                	cmp    (%ebx),%edi
  280bad:	75 18                	jne    280bc7 <mts_qit>
  280baf:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280bb2:	3b 33                	cmp    (%ebx),%esi
  280bb4:	75 11                	jne    280bc7 <mts_qit>
  280bb6:	89 13                	mov    %edx,(%ebx)
  280bb8:	05 00 10 00 00       	add    $0x1000,%eax
  280bbd:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280bc1:	76 d9                	jbe    280b9c <mts_loop>

00280bc3 <mts_ret>:
  280bc3:	5b                   	pop    %ebx
  280bc4:	5e                   	pop    %esi
  280bc5:	5f                   	pop    %edi
  280bc6:	c3                   	ret    

00280bc7 <mts_qit>:
  280bc7:	89 13                	mov    %edx,(%ebx)
  280bc9:	5b                   	pop    %ebx
  280bca:	5e                   	pop    %esi
  280bcb:	5f                   	pop    %edi
  280bcc:	c3                   	ret    

00280bcd <set_palette>:
	set_palette(0,15,table_rgb);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280bcd:	55                   	push   %ebp
  280bce:	89 e5                	mov    %esp,%ebp
  280bd0:	57                   	push   %edi
  280bd1:	56                   	push   %esi
  280bd2:	53                   	push   %ebx
  280bd3:	83 ec 1c             	sub    $0x1c,%esp
  280bd6:	8b 75 08             	mov    0x8(%ebp),%esi
  280bd9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280bdc:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280bdf:	e8 71 ff ff ff       	call   280b55 <io_load_eflags>
  280be4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280be7:	e8 16 ff ff ff       	call   280b02 <io_cli>
	io_out8(0x03c8,start);
  280bec:	83 ec 08             	sub    $0x8,%esp
  280bef:	56                   	push   %esi
  280bf0:	68 c8 03 00 00       	push   $0x3c8
  280bf5:	e8 3c ff ff ff       	call   280b36 <io_out8>
	for(i=start;i<=end;i++)
  280bfa:	83 c4 10             	add    $0x10,%esp
  280bfd:	39 fe                	cmp    %edi,%esi
  280bff:	7f 54                	jg     280c55 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280c01:	83 ec 08             	sub    $0x8,%esp
  280c04:	0f b6 03             	movzbl (%ebx),%eax
  280c07:	c0 e8 02             	shr    $0x2,%al
  280c0a:	0f b6 c0             	movzbl %al,%eax
  280c0d:	50                   	push   %eax
  280c0e:	68 c9 03 00 00       	push   $0x3c9
  280c13:	e8 1e ff ff ff       	call   280b36 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280c18:	83 c4 08             	add    $0x8,%esp
  280c1b:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280c1f:	c0 e8 02             	shr    $0x2,%al
  280c22:	0f b6 c0             	movzbl %al,%eax
  280c25:	50                   	push   %eax
  280c26:	68 c9 03 00 00       	push   $0x3c9
  280c2b:	e8 06 ff ff ff       	call   280b36 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280c30:	83 c4 08             	add    $0x8,%esp
  280c33:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280c37:	c0 e8 02             	shr    $0x2,%al
  280c3a:	0f b6 c0             	movzbl %al,%eax
  280c3d:	50                   	push   %eax
  280c3e:	68 c9 03 00 00       	push   $0x3c9
  280c43:	e8 ee fe ff ff       	call   280b36 <io_out8>
		rgb+=3;
  280c48:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280c4b:	83 c6 01             	add    $0x1,%esi
  280c4e:	83 c4 10             	add    $0x10,%esp
  280c51:	39 f7                	cmp    %esi,%edi
  280c53:	7d ac                	jge    280c01 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280c55:	83 ec 0c             	sub    $0xc,%esp
  280c58:	ff 75 e4             	pushl  -0x1c(%ebp)
  280c5b:	e8 f8 fe ff ff       	call   280b58 <io_store_eflags>
	return;
  280c60:	83 c4 10             	add    $0x10,%esp
}
  280c63:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c66:	5b                   	pop    %ebx
  280c67:	5e                   	pop    %esi
  280c68:	5f                   	pop    %edi
  280c69:	5d                   	pop    %ebp
  280c6a:	c3                   	ret    

00280c6b <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280c6b:	55                   	push   %ebp
  280c6c:	89 e5                	mov    %esp,%ebp
  280c6e:	83 ec 0c             	sub    $0xc,%esp
		0x00, 0x00, 0x84,	//dark blue
		0x84, 0x00, 0x84,	//dark purple
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	set_palette(0,15,table_rgb);
  280c71:	68 20 4c 28 00       	push   $0x284c20
  280c76:	6a 0f                	push   $0xf
  280c78:	6a 00                	push   $0x0
  280c7a:	e8 4e ff ff ff       	call   280bcd <set_palette>
	return;	
  280c7f:	83 c4 10             	add    $0x10,%esp
}
  280c82:	c9                   	leave  
  280c83:	c3                   	ret    

00280c84 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280c84:	55                   	push   %ebp
  280c85:	89 e5                	mov    %esp,%ebp
  280c87:	57                   	push   %edi
  280c88:	56                   	push   %esi
  280c89:	53                   	push   %ebx
  280c8a:	83 ec 04             	sub    $0x4,%esp
  280c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
  280c90:	8b 7d 14             	mov    0x14(%ebp),%edi
  280c93:	8b 75 18             	mov    0x18(%ebp),%esi
  280c96:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280c99:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280c9d:	3b 75 20             	cmp    0x20(%ebp),%esi
  280ca0:	7f 28                	jg     280cca <boxfill8+0x46>
  280ca2:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280ca5:	0f af d6             	imul   %esi,%edx
  280ca8:	03 55 08             	add    0x8(%ebp),%edx
  280cab:	eb 15                	jmp    280cc2 <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280cad:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280cb0:	83 c0 01             	add    $0x1,%eax
  280cb3:	39 c1                	cmp    %eax,%ecx
  280cb5:	7d f6                	jge    280cad <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280cb7:	83 c6 01             	add    $0x1,%esi
  280cba:	03 55 f0             	add    -0x10(%ebp),%edx
  280cbd:	39 75 20             	cmp    %esi,0x20(%ebp)
  280cc0:	7c 08                	jl     280cca <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280cc2:	89 f8                	mov    %edi,%eax
  280cc4:	39 cf                	cmp    %ecx,%edi
  280cc6:	7e e5                	jle    280cad <boxfill8+0x29>
  280cc8:	eb ed                	jmp    280cb7 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280cca:	83 c4 04             	add    $0x4,%esp
  280ccd:	5b                   	pop    %ebx
  280cce:	5e                   	pop    %esi
  280ccf:	5f                   	pop    %edi
  280cd0:	5d                   	pop    %ebp
  280cd1:	c3                   	ret    

00280cd2 <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280cd2:	55                   	push   %ebp
  280cd3:	89 e5                	mov    %esp,%ebp
  280cd5:	53                   	push   %ebx
  280cd6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280cd9:	8b 55 10             	mov    0x10(%ebp),%edx
  280cdc:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280ce0:	85 d2                	test   %edx,%edx
  280ce2:	7e 0d                	jle    280cf1 <boxfill8_test+0x1f>
  280ce4:	89 d8                	mov    %ebx,%eax
  280ce6:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280ce8:	88 08                	mov    %cl,(%eax)
  280cea:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280ced:	39 d0                	cmp    %edx,%eax
  280cef:	75 f7                	jne    280ce8 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280cf1:	5b                   	pop    %ebx
  280cf2:	5d                   	pop    %ebp
  280cf3:	c3                   	ret    

00280cf4 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280cf4:	55                   	push   %ebp
  280cf5:	89 e5                	mov    %esp,%ebp
  280cf7:	57                   	push   %edi
  280cf8:	56                   	push   %esi
  280cf9:	53                   	push   %ebx
  280cfa:	83 ec 14             	sub    $0x14,%esp
  280cfd:	8b 7d 08             	mov    0x8(%ebp),%edi
  280d00:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280d03:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280d06:	68 be 00 00 00       	push   $0xbe
  280d0b:	68 36 01 00 00       	push   $0x136
  280d10:	6a 00                	push   $0x0
  280d12:	6a 00                	push   $0x0
  280d14:	6a 0e                	push   $0xe
  280d16:	68 36 01 00 00       	push   $0x136
  280d1b:	57                   	push   %edi
  280d1c:	e8 63 ff ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280d21:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d24:	89 c2                	mov    %eax,%edx
  280d26:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d29:	50                   	push   %eax
  280d2a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d2d:	52                   	push   %edx
  280d2e:	6a 00                	push   $0x0
  280d30:	6a 00                	push   $0x0
  280d32:	6a 0e                	push   $0xe
  280d34:	53                   	push   %ebx
  280d35:	57                   	push   %edi
  280d36:	e8 49 ff ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d3b:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d3e:	83 c4 38             	add    $0x38,%esp
  280d41:	50                   	push   %eax
  280d42:	ff 75 f0             	pushl  -0x10(%ebp)
  280d45:	50                   	push   %eax
  280d46:	6a 00                	push   $0x0
  280d48:	6a 08                	push   $0x8
  280d4a:	53                   	push   %ebx
  280d4b:	57                   	push   %edi
  280d4c:	e8 33 ff ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d51:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d54:	50                   	push   %eax
  280d55:	ff 75 f0             	pushl  -0x10(%ebp)
  280d58:	50                   	push   %eax
  280d59:	6a 00                	push   $0x0
  280d5b:	6a 07                	push   $0x7
  280d5d:	53                   	push   %ebx
  280d5e:	57                   	push   %edi
  280d5f:	e8 20 ff ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280d64:	83 c4 38             	add    $0x38,%esp
  280d67:	8d 46 ff             	lea    -0x1(%esi),%eax
  280d6a:	50                   	push   %eax
  280d6b:	ff 75 f0             	pushl  -0x10(%ebp)
  280d6e:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280d71:	50                   	push   %eax
  280d72:	6a 00                	push   $0x0
  280d74:	6a 08                	push   $0x8
  280d76:	53                   	push   %ebx
  280d77:	57                   	push   %edi
  280d78:	e8 07 ff ff ff       	call   280c84 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280d7d:	8d 46 e8             	lea    -0x18(%esi),%eax
  280d80:	50                   	push   %eax
  280d81:	6a 3b                	push   $0x3b
  280d83:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280d86:	50                   	push   %eax
  280d87:	6a 03                	push   $0x3
  280d89:	6a 07                	push   $0x7
  280d8b:	53                   	push   %ebx
  280d8c:	57                   	push   %edi
  280d8d:	e8 f2 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280d92:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280d95:	83 c4 38             	add    $0x38,%esp
  280d98:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280d9b:	51                   	push   %ecx
  280d9c:	6a 02                	push   $0x2
  280d9e:	ff 75 f0             	pushl  -0x10(%ebp)
  280da1:	6a 02                	push   $0x2
  280da3:	6a 07                	push   $0x7
  280da5:	53                   	push   %ebx
  280da6:	57                   	push   %edi
  280da7:	e8 d8 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280dac:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280daf:	51                   	push   %ecx
  280db0:	6a 3b                	push   $0x3b
  280db2:	51                   	push   %ecx
  280db3:	6a 03                	push   $0x3
  280db5:	6a 0f                	push   $0xf
  280db7:	53                   	push   %ebx
  280db8:	57                   	push   %edi
  280db9:	e8 c6 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280dbe:	8d 56 e9             	lea    -0x17(%esi),%edx
  280dc1:	83 c4 38             	add    $0x38,%esp
  280dc4:	8d 46 fb             	lea    -0x5(%esi),%eax
  280dc7:	50                   	push   %eax
  280dc8:	6a 3b                	push   $0x3b
  280dca:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280dcd:	52                   	push   %edx
  280dce:	6a 3b                	push   $0x3b
  280dd0:	6a 0f                	push   $0xf
  280dd2:	53                   	push   %ebx
  280dd3:	57                   	push   %edi
  280dd4:	e8 ab fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280dd9:	83 ee 03             	sub    $0x3,%esi
  280ddc:	56                   	push   %esi
  280ddd:	6a 3b                	push   $0x3b
  280ddf:	56                   	push   %esi
  280de0:	6a 02                	push   $0x2
  280de2:	6a 00                	push   $0x0
  280de4:	53                   	push   %ebx
  280de5:	57                   	push   %edi
  280de6:	e8 99 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280deb:	83 c4 38             	add    $0x38,%esp
  280dee:	56                   	push   %esi
  280def:	6a 3c                	push   $0x3c
  280df1:	ff 75 f0             	pushl  -0x10(%ebp)
  280df4:	6a 3c                	push   $0x3c
  280df6:	6a 00                	push   $0x0
  280df8:	53                   	push   %ebx
  280df9:	57                   	push   %edi
  280dfa:	e8 85 fe ff ff       	call   280c84 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280dff:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280e02:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280e08:	50                   	push   %eax
  280e09:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280e0c:	51                   	push   %ecx
  280e0d:	50                   	push   %eax
  280e0e:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280e11:	52                   	push   %edx
  280e12:	6a 0f                	push   $0xf
  280e14:	53                   	push   %ebx
  280e15:	57                   	push   %edi
  280e16:	e8 69 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280e1b:	83 c4 38             	add    $0x38,%esp
  280e1e:	ff 75 ec             	pushl  -0x14(%ebp)
  280e21:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e24:	52                   	push   %edx
  280e25:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e28:	52                   	push   %edx
  280e29:	6a 0f                	push   $0xf
  280e2b:	53                   	push   %ebx
  280e2c:	57                   	push   %edi
  280e2d:	e8 52 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e32:	56                   	push   %esi
  280e33:	ff 75 e0             	pushl  -0x20(%ebp)
  280e36:	56                   	push   %esi
  280e37:	ff 75 e8             	pushl  -0x18(%ebp)
  280e3a:	6a 07                	push   $0x7
  280e3c:	53                   	push   %ebx
  280e3d:	57                   	push   %edi
  280e3e:	e8 41 fe ff ff       	call   280c84 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e43:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e46:	83 c4 38             	add    $0x38,%esp
  280e49:	56                   	push   %esi
  280e4a:	50                   	push   %eax
  280e4b:	ff 75 f0             	pushl  -0x10(%ebp)
  280e4e:	50                   	push   %eax
  280e4f:	6a 07                	push   $0x7
  280e51:	53                   	push   %ebx
  280e52:	57                   	push   %edi
  280e53:	e8 2c fe ff ff       	call   280c84 <boxfill8>
}
  280e58:	83 c4 1c             	add    $0x1c,%esp
  280e5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e5e:	5b                   	pop    %ebx
  280e5f:	5e                   	pop    %esi
  280e60:	5f                   	pop    %edi
  280e61:	5d                   	pop    %ebp
  280e62:	c3                   	ret    

00280e63 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280e63:	55                   	push   %ebp
  280e64:	89 e5                	mov    %esp,%ebp
  280e66:	57                   	push   %edi
  280e67:	56                   	push   %esi
  280e68:	53                   	push   %ebx
  280e69:	83 ec 08             	sub    $0x8,%esp
  280e6c:	8b 75 08             	mov    0x8(%ebp),%esi
  280e6f:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280e73:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280e76:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280e7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280e7f:	eb 38                	jmp    280eb9 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e81:	0f b6 94 03 c0 3c 28 	movzbl 0x283cc0(%ebx,%eax,1),%edx
  280e88:	00 
  280e89:	80 fa 2a             	cmp    $0x2a,%dl
  280e8c:	75 06                	jne    280e94 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280e8e:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280e92:	eb 15                	jmp    280ea9 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280e94:	80 fa 4f             	cmp    $0x4f,%dl
  280e97:	75 06                	jne    280e9f <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280e99:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280e9d:	eb 0a                	jmp    280ea9 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280e9f:	80 fa 2e             	cmp    $0x2e,%dl
  280ea2:	75 05                	jne    280ea9 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280ea4:	89 fa                	mov    %edi,%edx
  280ea6:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280ea9:	83 c0 01             	add    $0x1,%eax
  280eac:	83 f8 10             	cmp    $0x10,%eax
  280eaf:	75 d0                	jne    280e81 <init_mouse_cursor8+0x1e>
  280eb1:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280eb4:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280eb7:	74 0c                	je     280ec5 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280eb9:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280ebe:	89 f3                	mov    %esi,%ebx
  280ec0:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280ec3:	eb bc                	jmp    280e81 <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280ec5:	83 c4 08             	add    $0x8,%esp
  280ec8:	5b                   	pop    %ebx
  280ec9:	5e                   	pop    %esi
  280eca:	5f                   	pop    %edi
  280ecb:	5d                   	pop    %ebp
  280ecc:	c3                   	ret    

00280ecd <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280ecd:	55                   	push   %ebp
  280ece:	89 e5                	mov    %esp,%ebp
  280ed0:	57                   	push   %edi
  280ed1:	56                   	push   %esi
  280ed2:	53                   	push   %ebx
  280ed3:	83 ec 1c             	sub    $0x1c,%esp
  280ed6:	8b 75 08             	mov    0x8(%ebp),%esi
  280ed9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280edc:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280edf:	80 fa 01             	cmp    $0x1,%dl
  280ee2:	19 c0                	sbb    %eax,%eax
  280ee4:	83 e0 03             	and    $0x3,%eax
  280ee7:	83 c0 0c             	add    $0xc,%eax
  280eea:	80 fa 01             	cmp    $0x1,%dl
  280eed:	19 ff                	sbb    %edi,%edi
  280eef:	f7 d7                	not    %edi
  280ef1:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280ef4:	6a 14                	push   $0x14
  280ef6:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280ef9:	52                   	push   %edx
  280efa:	6a 03                	push   $0x3
  280efc:	6a 03                	push   $0x3
  280efe:	0f b6 c0             	movzbl %al,%eax
  280f01:	50                   	push   %eax
  280f02:	53                   	push   %ebx
  280f03:	56                   	push   %esi
  280f04:	e8 7b fd ff ff       	call   280c84 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280f09:	83 c4 04             	add    $0x4,%esp
  280f0c:	ff 75 10             	pushl  0x10(%ebp)
  280f0f:	89 f8                	mov    %edi,%eax
  280f11:	0f be f8             	movsbl %al,%edi
  280f14:	57                   	push   %edi
  280f15:	6a 04                	push   $0x4
  280f17:	6a 18                	push   $0x18
  280f19:	53                   	push   %ebx
  280f1a:	56                   	push   %esi
  280f1b:	e8 b9 03 00 00       	call   2812d9 <putfonts8_asc>
  280f20:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f23:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f26:	01 fb                	add    %edi,%ebx
  280f28:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f2b:	83 c4 30             	add    $0x30,%esp
  280f2e:	be 00 00 00 00       	mov    $0x0,%esi
  280f33:	eb 41                	jmp    280f76 <make_wtitle8+0xa9>
  280f35:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f37:	0f b6 9c 06 e0 3b 28 	movzbl 0x283be0(%esi,%eax,1),%ebx
  280f3e:	00 
			if(c == '@') c=COL8_000000;
  280f3f:	ba 00 00 00 00       	mov    $0x0,%edx
  280f44:	80 fb 40             	cmp    $0x40,%bl
  280f47:	74 13                	je     280f5c <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f49:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f4e:	80 fb 24             	cmp    $0x24,%bl
  280f51:	74 09                	je     280f5c <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f53:	80 fb 51             	cmp    $0x51,%bl
  280f56:	0f 94 c2             	sete   %dl
  280f59:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f5c:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280f60:	83 c0 01             	add    $0x1,%eax
  280f63:	83 f8 10             	cmp    $0x10,%eax
  280f66:	75 cd                	jne    280f35 <make_wtitle8+0x68>
  280f68:	03 7d e4             	add    -0x1c(%ebp),%edi
  280f6b:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280f6e:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280f74:	74 07                	je     280f7d <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280f76:	b8 00 00 00 00       	mov    $0x0,%eax
  280f7b:	eb b8                	jmp    280f35 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280f7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280f80:	5b                   	pop    %ebx
  280f81:	5e                   	pop    %esi
  280f82:	5f                   	pop    %edi
  280f83:	5d                   	pop    %ebp
  280f84:	c3                   	ret    

00280f85 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280f85:	55                   	push   %ebp
  280f86:	89 e5                	mov    %esp,%ebp
  280f88:	57                   	push   %edi
  280f89:	56                   	push   %esi
  280f8a:	53                   	push   %ebx
  280f8b:	83 ec 1c             	sub    $0x1c,%esp
  280f8e:	8b 75 08             	mov    0x8(%ebp),%esi
  280f91:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f94:	8b 45 18             	mov    0x18(%ebp),%eax
  280f97:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280f9a:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280f9d:	6a 00                	push   $0x0
  280f9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280fa2:	50                   	push   %eax
  280fa3:	6a 00                	push   $0x0
  280fa5:	6a 00                	push   $0x0
  280fa7:	6a 08                	push   $0x8
  280fa9:	53                   	push   %ebx
  280faa:	56                   	push   %esi
  280fab:	e8 d4 fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280fb0:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280fb3:	6a 01                	push   $0x1
  280fb5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280fb8:	52                   	push   %edx
  280fb9:	6a 01                	push   $0x1
  280fbb:	6a 01                	push   $0x1
  280fbd:	6a 07                	push   $0x7
  280fbf:	53                   	push   %ebx
  280fc0:	56                   	push   %esi
  280fc1:	e8 be fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  280fc6:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fc9:	8d 4f ff             	lea    -0x1(%edi),%ecx
  280fcc:	83 c4 38             	add    $0x38,%esp
  280fcf:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  280fd2:	51                   	push   %ecx
  280fd3:	6a 00                	push   $0x0
  280fd5:	6a 00                	push   $0x0
  280fd7:	6a 00                	push   $0x0
  280fd9:	6a 08                	push   $0x8
  280fdb:	53                   	push   %ebx
  280fdc:	56                   	push   %esi
  280fdd:	e8 a2 fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  280fe2:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fe5:	83 ef 02             	sub    $0x2,%edi
  280fe8:	57                   	push   %edi
  280fe9:	6a 01                	push   $0x1
  280feb:	6a 01                	push   $0x1
  280fed:	6a 01                	push   $0x1
  280fef:	6a 07                	push   $0x7
  280ff1:	53                   	push   %ebx
  280ff2:	56                   	push   %esi
  280ff3:	e8 8c fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  280ff8:	83 c4 38             	add    $0x38,%esp
  280ffb:	57                   	push   %edi
  280ffc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  280fff:	52                   	push   %edx
  281000:	6a 01                	push   $0x1
  281002:	52                   	push   %edx
  281003:	6a 0f                	push   $0xf
  281005:	53                   	push   %ebx
  281006:	56                   	push   %esi
  281007:	e8 78 fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  28100c:	ff 75 dc             	pushl  -0x24(%ebp)
  28100f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  281012:	50                   	push   %eax
  281013:	6a 00                	push   $0x0
  281015:	50                   	push   %eax
  281016:	6a 00                	push   $0x0
  281018:	53                   	push   %ebx
  281019:	56                   	push   %esi
  28101a:	e8 65 fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28101f:	83 c4 38             	add    $0x38,%esp
  281022:	8b 55 10             	mov    0x10(%ebp),%edx
  281025:	8d 42 fd             	lea    -0x3(%edx),%eax
  281028:	50                   	push   %eax
  281029:	8d 43 fd             	lea    -0x3(%ebx),%eax
  28102c:	50                   	push   %eax
  28102d:	6a 02                	push   $0x2
  28102f:	6a 02                	push   $0x2
  281031:	6a 08                	push   $0x8
  281033:	53                   	push   %ebx
  281034:	56                   	push   %esi
  281035:	e8 4a fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  28103a:	57                   	push   %edi
  28103b:	ff 75 e0             	pushl  -0x20(%ebp)
  28103e:	57                   	push   %edi
  28103f:	6a 01                	push   $0x1
  281041:	6a 0f                	push   $0xf
  281043:	53                   	push   %ebx
  281044:	56                   	push   %esi
  281045:	e8 3a fc ff ff       	call   280c84 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  28104a:	83 c4 38             	add    $0x38,%esp
  28104d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  281050:	51                   	push   %ecx
  281051:	ff 75 e4             	pushl  -0x1c(%ebp)
  281054:	51                   	push   %ecx
  281055:	6a 00                	push   $0x0
  281057:	6a 00                	push   $0x0
  281059:	53                   	push   %ebx
  28105a:	56                   	push   %esi
  28105b:	e8 24 fc ff ff       	call   280c84 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  281060:	83 c4 1c             	add    $0x1c,%esp
  281063:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  281067:	50                   	push   %eax
  281068:	ff 75 14             	pushl  0x14(%ebp)
  28106b:	53                   	push   %ebx
  28106c:	56                   	push   %esi
  28106d:	e8 5b fe ff ff       	call   280ecd <make_wtitle8>
	return;
  281072:	83 c4 10             	add    $0x10,%esp
}
  281075:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281078:	5b                   	pop    %ebx
  281079:	5e                   	pop    %esi
  28107a:	5f                   	pop    %edi
  28107b:	5d                   	pop    %ebp
  28107c:	c3                   	ret    

0028107d <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  28107d:	55                   	push   %ebp
  28107e:	89 e5                	mov    %esp,%ebp
  281080:	57                   	push   %edi
  281081:	56                   	push   %esi
  281082:	53                   	push   %ebx
  281083:	83 ec 04             	sub    $0x4,%esp
  281086:	8b 45 0c             	mov    0xc(%ebp),%eax
  281089:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  28108c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  281090:	7e 49                	jle    2810db <putblock8_8+0x5e>
  281092:	8b 7d 24             	mov    0x24(%ebp),%edi
  281095:	8b 4d 20             	mov    0x20(%ebp),%ecx
  281098:	89 45 f0             	mov    %eax,-0x10(%ebp)
  28109b:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  28109f:	03 45 18             	add    0x18(%ebp),%eax
  2810a2:	89 c2                	mov    %eax,%edx
  2810a4:	03 55 08             	add    0x8(%ebp),%edx
  2810a7:	be 00 00 00 00       	mov    $0x0,%esi
  2810ac:	eb 22                	jmp    2810d0 <putblock8_8+0x53>
  2810ae:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2810b1:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2810b5:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2810b8:	83 c0 01             	add    $0x1,%eax
  2810bb:	39 45 10             	cmp    %eax,0x10(%ebp)
  2810be:	75 f1                	jne    2810b1 <putblock8_8+0x34>
  2810c0:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  2810c3:	83 c6 01             	add    $0x1,%esi
  2810c6:	01 f9                	add    %edi,%ecx
  2810c8:	03 55 f0             	add    -0x10(%ebp),%edx
  2810cb:	39 75 14             	cmp    %esi,0x14(%ebp)
  2810ce:	74 0b                	je     2810db <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  2810d0:	b8 00 00 00 00       	mov    $0x0,%eax
  2810d5:	85 db                	test   %ebx,%ebx
  2810d7:	7f d5                	jg     2810ae <putblock8_8+0x31>
  2810d9:	eb e8                	jmp    2810c3 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  2810db:	83 c4 04             	add    $0x4,%esp
  2810de:	5b                   	pop    %ebx
  2810df:	5e                   	pop    %esi
  2810e0:	5f                   	pop    %edi
  2810e1:	5d                   	pop    %ebp
  2810e2:	c3                   	ret    

002810e3 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  2810e3:	55                   	push   %ebp
  2810e4:	89 e5                	mov    %esp,%ebp
  2810e6:	57                   	push   %edi
  2810e7:	56                   	push   %esi
  2810e8:	53                   	push   %ebx
  2810e9:	83 ec 0c             	sub    $0xc,%esp
  2810ec:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2810ef:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  2810f2:	8b 45 20             	mov    0x20(%ebp),%eax
  2810f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  2810f8:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  2810fb:	8d 46 0f             	lea    0xf(%esi),%eax
  2810fe:	50                   	push   %eax
  2810ff:	8d 47 ff             	lea    -0x1(%edi),%eax
  281102:	50                   	push   %eax
  281103:	56                   	push   %esi
  281104:	52                   	push   %edx
  281105:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281109:	50                   	push   %eax
  28110a:	ff 73 04             	pushl  0x4(%ebx)
  28110d:	ff 33                	pushl  (%ebx)
  28110f:	e8 70 fb ff ff       	call   280c84 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281114:	83 c4 04             	add    $0x4,%esp
  281117:	ff 75 1c             	pushl  0x1c(%ebp)
  28111a:	ff 75 14             	pushl  0x14(%ebp)
  28111d:	56                   	push   %esi
  28111e:	ff 75 0c             	pushl  0xc(%ebp)
  281121:	ff 73 04             	pushl  0x4(%ebx)
  281124:	ff 33                	pushl  (%ebx)
  281126:	e8 ae 01 00 00       	call   2812d9 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  28112b:	83 c4 24             	add    $0x24,%esp
  28112e:	8d 46 10             	lea    0x10(%esi),%eax
  281131:	50                   	push   %eax
  281132:	57                   	push   %edi
  281133:	56                   	push   %esi
  281134:	ff 75 0c             	pushl  0xc(%ebp)
  281137:	53                   	push   %ebx
  281138:	e8 35 14 00 00       	call   282572 <sheet_refresh>
}
  28113d:	83 c4 20             	add    $0x20,%esp
  281140:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281143:	5b                   	pop    %ebx
  281144:	5e                   	pop    %esi
  281145:	5f                   	pop    %edi
  281146:	5d                   	pop    %ebp
  281147:	c3                   	ret    

00281148 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281148:	55                   	push   %ebp
  281149:	89 e5                	mov    %esp,%ebp
  28114b:	57                   	push   %edi
  28114c:	56                   	push   %esi
  28114d:	53                   	push   %ebx
  28114e:	83 ec 18             	sub    $0x18,%esp
  281151:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281154:	8b 45 0c             	mov    0xc(%ebp),%eax
  281157:	03 45 14             	add    0x14(%ebp),%eax
  28115a:	8b 55 10             	mov    0x10(%ebp),%edx
  28115d:	03 55 18             	add    0x18(%ebp),%edx
  281160:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  281162:	89 45 e8             	mov    %eax,-0x18(%ebp)
  281165:	8d 48 01             	lea    0x1(%eax),%ecx
  281168:	8b 75 10             	mov    0x10(%ebp),%esi
  28116b:	83 ee 03             	sub    $0x3,%esi
  28116e:	8b 55 0c             	mov    0xc(%ebp),%edx
  281171:	83 ea 02             	sub    $0x2,%edx
  281174:	56                   	push   %esi
  281175:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  281178:	51                   	push   %ecx
  281179:	56                   	push   %esi
  28117a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28117d:	52                   	push   %edx
  28117e:	6a 0f                	push   $0xf
  281180:	ff 73 04             	pushl  0x4(%ebx)
  281183:	ff 33                	pushl  (%ebx)
  281185:	e8 fa fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  28118a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  28118d:	8d 7f 01             	lea    0x1(%edi),%edi
  281190:	89 f9                	mov    %edi,%ecx
  281192:	8b 7d 0c             	mov    0xc(%ebp),%edi
  281195:	83 ef 03             	sub    $0x3,%edi
  281198:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  28119b:	51                   	push   %ecx
  28119c:	57                   	push   %edi
  28119d:	56                   	push   %esi
  28119e:	57                   	push   %edi
  28119f:	6a 0f                	push   $0xf
  2811a1:	ff 73 04             	pushl  0x4(%ebx)
  2811a4:	ff 33                	pushl  (%ebx)
  2811a6:	e8 d9 fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2811ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2811ae:	8d 4a 02             	lea    0x2(%edx),%ecx
  2811b1:	83 c4 38             	add    $0x38,%esp
  2811b4:	51                   	push   %ecx
  2811b5:	ff 75 e0             	pushl  -0x20(%ebp)
  2811b8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2811bb:	51                   	push   %ecx
  2811bc:	57                   	push   %edi
  2811bd:	6a 07                	push   $0x7
  2811bf:	ff 73 04             	pushl  0x4(%ebx)
  2811c2:	ff 33                	pushl  (%ebx)
  2811c4:	e8 bb fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  2811c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2811cc:	83 c0 02             	add    $0x2,%eax
  2811cf:	ff 75 dc             	pushl  -0x24(%ebp)
  2811d2:	50                   	push   %eax
  2811d3:	56                   	push   %esi
  2811d4:	50                   	push   %eax
  2811d5:	6a 07                	push   $0x7
  2811d7:	ff 73 04             	pushl  0x4(%ebx)
  2811da:	ff 33                	pushl  (%ebx)
  2811dc:	e8 a3 fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  2811e1:	8b 75 10             	mov    0x10(%ebp),%esi
  2811e4:	8d 7e fe             	lea    -0x2(%esi),%edi
  2811e7:	8b 75 0c             	mov    0xc(%ebp),%esi
  2811ea:	83 ee 01             	sub    $0x1,%esi
  2811ed:	83 c4 38             	add    $0x38,%esp
  2811f0:	57                   	push   %edi
  2811f1:	ff 75 e8             	pushl  -0x18(%ebp)
  2811f4:	57                   	push   %edi
  2811f5:	56                   	push   %esi
  2811f6:	6a 00                	push   $0x0
  2811f8:	ff 73 04             	pushl  0x4(%ebx)
  2811fb:	ff 33                	pushl  (%ebx)
  2811fd:	e8 82 fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  281202:	ff 75 e4             	pushl  -0x1c(%ebp)
  281205:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281208:	52                   	push   %edx
  281209:	57                   	push   %edi
  28120a:	52                   	push   %edx
  28120b:	6a 00                	push   $0x0
  28120d:	ff 73 04             	pushl  0x4(%ebx)
  281210:	ff 33                	pushl  (%ebx)
  281212:	e8 6d fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281217:	83 c4 38             	add    $0x38,%esp
  28121a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28121d:	50                   	push   %eax
  28121e:	ff 75 e8             	pushl  -0x18(%ebp)
  281221:	50                   	push   %eax
  281222:	ff 75 f0             	pushl  -0x10(%ebp)
  281225:	6a 08                	push   $0x8
  281227:	ff 73 04             	pushl  0x4(%ebx)
  28122a:	ff 33                	pushl  (%ebx)
  28122c:	e8 53 fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  281231:	ff 75 ec             	pushl  -0x14(%ebp)
  281234:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281237:	51                   	push   %ecx
  281238:	57                   	push   %edi
  281239:	51                   	push   %ecx
  28123a:	6a 08                	push   $0x8
  28123c:	ff 73 04             	pushl  0x4(%ebx)
  28123f:	ff 33                	pushl  (%ebx)
  281241:	e8 3e fa ff ff       	call   280c84 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281246:	83 c4 38             	add    $0x38,%esp
  281249:	ff 75 e4             	pushl  -0x1c(%ebp)
  28124c:	ff 75 e8             	pushl  -0x18(%ebp)
  28124f:	8b 45 10             	mov    0x10(%ebp),%eax
  281252:	83 e8 01             	sub    $0x1,%eax
  281255:	50                   	push   %eax
  281256:	56                   	push   %esi
  281257:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  28125b:	50                   	push   %eax
  28125c:	ff 73 04             	pushl  0x4(%ebx)
  28125f:	ff 33                	pushl  (%ebx)
  281261:	e8 1e fa ff ff       	call   280c84 <boxfill8>
    return;
  281266:	83 c4 1c             	add    $0x1c,%esp
}
  281269:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28126c:	5b                   	pop    %ebx
  28126d:	5e                   	pop    %esi
  28126e:	5f                   	pop    %edi
  28126f:	5d                   	pop    %ebp
  281270:	c3                   	ret    

00281271 <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  281271:	55                   	push   %ebp
  281272:	89 e5                	mov    %esp,%ebp
  281274:	57                   	push   %edi
  281275:	56                   	push   %esi
  281276:	53                   	push   %ebx
  281277:	83 ec 08             	sub    $0x8,%esp
  28127a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28127d:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  281280:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  281284:	89 fb                	mov    %edi,%ebx
  281286:	89 45 ec             	mov    %eax,-0x14(%ebp)
  281289:	0f af 45 14          	imul   0x14(%ebp),%eax
  28128d:	03 45 10             	add    0x10(%ebp),%eax
  281290:	89 c1                	mov    %eax,%ecx
  281292:	03 4d 08             	add    0x8(%ebp),%ecx
  281295:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  281298:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  28129b:	b8 07 00 00 00       	mov    $0x7,%eax
  2812a0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2812a3:	89 f1                	mov    %esi,%ecx
  2812a5:	89 de                	mov    %ebx,%esi
  2812a7:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2812a9:	f6 c2 01             	test   $0x1,%dl
  2812ac:	74 06                	je     2812b4 <putfont8+0x43>
  2812ae:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2812b1:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2812b4:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  2812b6:	83 e8 01             	sub    $0x1,%eax
  2812b9:	83 f8 ff             	cmp    $0xffffffff,%eax
  2812bc:	75 eb                	jne    2812a9 <putfont8+0x38>
  2812be:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2812c1:	89 d8                	mov    %ebx,%eax
  2812c3:	89 f3                	mov    %esi,%ebx
  2812c5:	89 c6                	mov    %eax,%esi
  2812c7:	83 c3 01             	add    $0x1,%ebx
  2812ca:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  2812cd:	39 fb                	cmp    %edi,%ebx
  2812cf:	75 c7                	jne    281298 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  2812d1:	83 c4 08             	add    $0x8,%esp
  2812d4:	5b                   	pop    %ebx
  2812d5:	5e                   	pop    %esi
  2812d6:	5f                   	pop    %edi
  2812d7:	5d                   	pop    %ebp
  2812d8:	c3                   	ret    

002812d9 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  2812d9:	55                   	push   %ebp
  2812da:	89 e5                	mov    %esp,%ebp
  2812dc:	57                   	push   %edi
  2812dd:	56                   	push   %esi
  2812de:	53                   	push   %ebx
  2812df:	8b 75 10             	mov    0x10(%ebp),%esi
  2812e2:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  2812e5:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  2812e9:	0f b6 03             	movzbl (%ebx),%eax
  2812ec:	84 c0                	test   %al,%al
  2812ee:	74 2f                	je     28131f <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  2812f0:	0f be fa             	movsbl %dl,%edi
  2812f3:	0f b6 c0             	movzbl %al,%eax
  2812f6:	c1 e0 04             	shl    $0x4,%eax
  2812f9:	05 60 4c 28 00       	add    $0x284c60,%eax
  2812fe:	50                   	push   %eax
  2812ff:	57                   	push   %edi
  281300:	ff 75 14             	pushl  0x14(%ebp)
  281303:	56                   	push   %esi
  281304:	ff 75 0c             	pushl  0xc(%ebp)
  281307:	ff 75 08             	pushl  0x8(%ebp)
  28130a:	e8 62 ff ff ff       	call   281271 <putfont8>
		x+=HKK_TABLE_COL;
  28130f:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281312:	83 c3 01             	add    $0x1,%ebx
  281315:	0f b6 03             	movzbl (%ebx),%eax
  281318:	83 c4 18             	add    $0x18,%esp
  28131b:	84 c0                	test   %al,%al
  28131d:	75 d4                	jne    2812f3 <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28131f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281322:	5b                   	pop    %ebx
  281323:	5e                   	pop    %esi
  281324:	5f                   	pop    %edi
  281325:	5d                   	pop    %ebp
  281326:	c3                   	ret    

00281327 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281327:	55                   	push   %ebp
  281328:	89 e5                	mov    %esp,%ebp
  28132a:	57                   	push   %edi
  28132b:	56                   	push   %esi
  28132c:	53                   	push   %ebx
  28132d:	8b 55 08             	mov    0x8(%ebp),%edx
  281330:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281333:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281336:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281339:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28133f:	76 09                	jbe    28134a <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  281341:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281347:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  28134a:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  28134d:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  281351:	89 ce                	mov    %ecx,%esi
  281353:	c1 fe 10             	sar    $0x10,%esi
  281356:	89 f0                	mov    %esi,%eax
  281358:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  28135b:	89 f8                	mov    %edi,%eax
  28135d:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  281360:	c1 eb 10             	shr    $0x10,%ebx
  281363:	83 e3 0f             	and    $0xf,%ebx
  281366:	89 f8                	mov    %edi,%eax
  281368:	c1 f8 08             	sar    $0x8,%eax
  28136b:	83 e0 f0             	and    $0xfffffff0,%eax
  28136e:	09 d8                	or     %ebx,%eax
  281370:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  281373:	c1 e9 18             	shr    $0x18,%ecx
  281376:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  281379:	5b                   	pop    %ebx
  28137a:	5e                   	pop    %esi
  28137b:	5f                   	pop    %edi
  28137c:	5d                   	pop    %ebp
  28137d:	c3                   	ret    

0028137e <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  28137e:	55                   	push   %ebp
  28137f:	89 e5                	mov    %esp,%ebp
  281381:	53                   	push   %ebx
  281382:	8b 45 08             	mov    0x8(%ebp),%eax
  281385:	8b 55 0c             	mov    0xc(%ebp),%edx
  281388:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  28138b:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  28138e:	8b 5d 10             	mov    0x10(%ebp),%ebx
  281391:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281395:	89 cb                	mov    %ecx,%ebx
  281397:	c1 fb 08             	sar    $0x8,%ebx
  28139a:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  28139d:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2813a0:	c1 ea 10             	shr    $0x10,%edx
  2813a3:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2813a7:	5b                   	pop    %ebx
  2813a8:	5d                   	pop    %ebp
  2813a9:	c3                   	ret    

002813aa <init_gdtidt>:

void init_gdtidt(void)
{
  2813aa:	55                   	push   %ebp
  2813ab:	89 e5                	mov    %esp,%ebp
  2813ad:	53                   	push   %ebx
  2813ae:	83 ec 04             	sub    $0x4,%esp
  2813b1:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  2813b6:	6a 00                	push   $0x0
  2813b8:	6a 00                	push   $0x0
  2813ba:	6a 00                	push   $0x0
  2813bc:	53                   	push   %ebx
  2813bd:	e8 65 ff ff ff       	call   281327 <set_segmdesc>
  2813c2:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  2813c5:	83 c4 10             	add    $0x10,%esp
  2813c8:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  2813ce:	75 e6                	jne    2813b6 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  2813d0:	68 92 40 00 00       	push   $0x4092
  2813d5:	6a 00                	push   $0x0
  2813d7:	6a ff                	push   $0xffffffff
  2813d9:	68 08 00 27 00       	push   $0x270008
  2813de:	e8 44 ff ff ff       	call   281327 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  2813e3:	68 9a 40 00 00       	push   $0x409a
  2813e8:	6a 00                	push   $0x0
  2813ea:	68 ff ff 0f 00       	push   $0xfffff
  2813ef:	68 10 00 27 00       	push   $0x270010
  2813f4:	e8 2e ff ff ff       	call   281327 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  2813f9:	83 c4 20             	add    $0x20,%esp
  2813fc:	68 9a 40 00 00       	push   $0x409a
  281401:	68 00 00 28 00       	push   $0x280000
  281406:	68 ff ff 07 00       	push   $0x7ffff
  28140b:	68 18 00 27 00       	push   $0x270018
  281410:	e8 12 ff ff ff       	call   281327 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281415:	83 c4 08             	add    $0x8,%esp
  281418:	68 00 00 27 00       	push   $0x270000
  28141d:	68 ff ff 00 00       	push   $0xffff
  281422:	e8 38 f7 ff ff       	call   280b5f <load_gdtr>
  281427:	83 c4 10             	add    $0x10,%esp
  28142a:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28142f:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  281434:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  28143a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  28143e:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  281442:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281448:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  28144b:	3d 00 00 27 00       	cmp    $0x270000,%eax
  281450:	75 dd                	jne    28142f <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  281452:	b8 2e 16 00 00       	mov    $0x162e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281457:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  28145d:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  281464:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281466:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  28146d:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  281474:	c1 e8 10             	shr    $0x10,%eax
  281477:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  28147d:	b8 00 16 00 00       	mov    $0x1600,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281482:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  281488:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  28148f:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281491:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  281498:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  28149f:	c1 e8 10             	shr    $0x10,%eax
  2814a2:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2814a8:	b8 17 16 00 00       	mov    $0x1617,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814ad:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2814b3:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  2814ba:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814bc:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  2814c3:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  2814ca:	c1 e8 10             	shr    $0x10,%eax
  2814cd:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  2814d3:	b8 45 16 00 00       	mov    $0x1645,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814d8:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  2814de:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  2814e5:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814e7:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  2814ee:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  2814f5:	c1 e8 10             	shr    $0x10,%eax
  2814f8:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  2814fe:	b8 66 16 00 00       	mov    $0x1666,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281503:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281509:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  281510:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281512:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281519:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  281520:	c1 e8 10             	shr    $0x10,%eax
  281523:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  281529:	83 ec 08             	sub    $0x8,%esp
  28152c:	68 00 f8 26 00       	push   $0x26f800
  281531:	68 ff 07 00 00       	push   $0x7ff
  281536:	e8 34 f6 ff ff       	call   280b6f <load_idtr>

	return;
  28153b:	83 c4 10             	add    $0x10,%esp
}
  28153e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281541:	c9                   	leave  
  281542:	c3                   	ret    

00281543 <init_pic>:
#include "graphics.h"
#include "const.h"
#include "fifo.h"
#include "timer.h"
void init_pic(void)
{
  281543:	55                   	push   %ebp
  281544:	89 e5                	mov    %esp,%ebp
  281546:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  281549:	68 ff 00 00 00       	push   $0xff
  28154e:	6a 21                	push   $0x21
  281550:	e8 e1 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  281555:	83 c4 08             	add    $0x8,%esp
  281558:	68 ff 00 00 00       	push   $0xff
  28155d:	68 a1 00 00 00       	push   $0xa1
  281562:	e8 cf f5 ff ff       	call   280b36 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  281567:	83 c4 08             	add    $0x8,%esp
  28156a:	6a 11                	push   $0x11
  28156c:	6a 20                	push   $0x20
  28156e:	e8 c3 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  281573:	83 c4 08             	add    $0x8,%esp
  281576:	6a 20                	push   $0x20
  281578:	6a 21                	push   $0x21
  28157a:	e8 b7 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  28157f:	83 c4 08             	add    $0x8,%esp
  281582:	6a 04                	push   $0x4
  281584:	6a 21                	push   $0x21
  281586:	e8 ab f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  28158b:	83 c4 08             	add    $0x8,%esp
  28158e:	6a 01                	push   $0x1
  281590:	6a 21                	push   $0x21
  281592:	e8 9f f5 ff ff       	call   280b36 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  281597:	83 c4 08             	add    $0x8,%esp
  28159a:	6a 11                	push   $0x11
  28159c:	68 a0 00 00 00       	push   $0xa0
  2815a1:	e8 90 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  2815a6:	83 c4 08             	add    $0x8,%esp
  2815a9:	6a 28                	push   $0x28
  2815ab:	68 a1 00 00 00       	push   $0xa1
  2815b0:	e8 81 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC1_ICW3, 2);
  2815b5:	83 c4 08             	add    $0x8,%esp
  2815b8:	6a 02                	push   $0x2
  2815ba:	68 a1 00 00 00       	push   $0xa1
  2815bf:	e8 72 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  2815c4:	83 c4 08             	add    $0x8,%esp
  2815c7:	6a 01                	push   $0x1
  2815c9:	68 a1 00 00 00       	push   $0xa1
  2815ce:	e8 63 f5 ff ff       	call   280b36 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  2815d3:	83 c4 08             	add    $0x8,%esp
  2815d6:	68 fb 00 00 00       	push   $0xfb
  2815db:	6a 21                	push   $0x21
  2815dd:	e8 54 f5 ff ff       	call   280b36 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  2815e2:	83 c4 08             	add    $0x8,%esp
  2815e5:	68 ff 00 00 00       	push   $0xff
  2815ea:	68 a1 00 00 00       	push   $0xa1
  2815ef:	e8 42 f5 ff ff       	call   280b36 <io_out8>
}
  2815f4:	83 c4 10             	add    $0x10,%esp
  2815f7:	c9                   	leave  
  2815f8:	c3                   	ret    
  2815f9:	66 90                	xchg   %ax,%ax
  2815fb:	66 90                	xchg   %ax,%ax
  2815fd:	66 90                	xchg   %ax,%ax
  2815ff:	90                   	nop

00281600 <asm_inthandler21>:
  281600:	06                   	push   %es
  281601:	1e                   	push   %ds
  281602:	60                   	pusha  
  281603:	89 e0                	mov    %esp,%eax
  281605:	50                   	push   %eax
  281606:	66 8c d0             	mov    %ss,%ax
  281609:	8e d8                	mov    %eax,%ds
  28160b:	8e c0                	mov    %eax,%es
  28160d:	e8 cd 05 00 00       	call   281bdf <inthandler21>
  281612:	58                   	pop    %eax
  281613:	61                   	popa   
  281614:	1f                   	pop    %ds
  281615:	07                   	pop    %es
  281616:	cf                   	iret   

00281617 <asm_inthandler2c>:
  281617:	06                   	push   %es
  281618:	1e                   	push   %ds
  281619:	60                   	pusha  
  28161a:	89 e0                	mov    %esp,%eax
  28161c:	50                   	push   %eax
  28161d:	66 8c d0             	mov    %ss,%ax
  281620:	8e d8                	mov    %eax,%ds
  281622:	8e c0                	mov    %eax,%es
  281624:	e8 1c 05 00 00       	call   281b45 <inthandler2c>
  281629:	58                   	pop    %eax
  28162a:	61                   	popa   
  28162b:	1f                   	pop    %ds
  28162c:	07                   	pop    %es
  28162d:	cf                   	iret   

0028162e <asm_inthandler20>:
  28162e:	06                   	push   %es
  28162f:	1e                   	push   %ds
  281630:	60                   	pusha  
  281631:	89 e0                	mov    %esp,%eax
  281633:	50                   	push   %eax
  281634:	66 8c d0             	mov    %ss,%ax
  281637:	8e d8                	mov    %eax,%ds
  281639:	8e c0                	mov    %eax,%es
  28163b:	e8 58 12 00 00       	call   282898 <inthandler20>
  281640:	58                   	pop    %eax
  281641:	61                   	popa   
  281642:	1f                   	pop    %ds
  281643:	07                   	pop    %es
  281644:	cf                   	iret   

00281645 <asm_sys_api>:
  281645:	fb                   	sti    
  281646:	1e                   	push   %ds
  281647:	06                   	push   %es
  281648:	60                   	pusha  
  281649:	60                   	pusha  
  28164a:	66 8c d0             	mov    %ss,%ax
  28164d:	8e d8                	mov    %eax,%ds
  28164f:	8e c0                	mov    %eax,%es
  281651:	e8 98 24 00 00       	call   283aee <sys_api>
  281656:	83 f8 00             	cmp    $0x0,%eax
  281659:	75 07                	jne    281662 <end_app>
  28165b:	83 c4 20             	add    $0x20,%esp
  28165e:	61                   	popa   
  28165f:	07                   	pop    %es
  281660:	1f                   	pop    %ds
  281661:	cf                   	iret   

00281662 <end_app>:
  281662:	8b 20                	mov    (%eax),%esp
  281664:	61                   	popa   
  281665:	c3                   	ret    

00281666 <asm_inthandler0d>:
  281666:	fb                   	sti    
  281667:	06                   	push   %es
  281668:	1e                   	push   %ds
  281669:	60                   	pusha  
  28166a:	89 e0                	mov    %esp,%eax
  28166c:	50                   	push   %eax
  28166d:	66 8c d0             	mov    %ss,%ax
  281670:	8e d8                	mov    %eax,%ds
  281672:	8e c0                	mov    %eax,%es
  281674:	e8 0e 24 00 00       	call   283a87 <inthandler0d>
  281679:	83 f8 00             	cmp    $0x0,%eax
  28167c:	75 e4                	jne    281662 <end_app>
  28167e:	58                   	pop    %eax
  28167f:	61                   	popa   
  281680:	1f                   	pop    %ds
  281681:	07                   	pop    %es
  281682:	83 c4 04             	add    $0x4,%esp
  281685:	cf                   	iret   

00281686 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  281686:	55                   	push   %ebp
  281687:	89 e5                	mov    %esp,%ebp
  281689:	57                   	push   %edi
  28168a:	56                   	push   %esi
  28168b:	53                   	push   %ebx
  28168c:	83 ec 10             	sub    $0x10,%esp
  28168f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281692:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  281695:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  28169c:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  2816a3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  2816a9:	85 c9                	test   %ecx,%ecx
  2816ab:	79 08                	jns    2816b5 <itoa+0x2f>
		*buf++ = '-';
  2816ad:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  2816b0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  2816b2:	8d 7f 01             	lea    0x1(%edi),%edi
  2816b5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  2816b8:	be 67 66 66 66       	mov    $0x66666667,%esi
  2816bd:	83 c3 01             	add    $0x1,%ebx
  2816c0:	89 c8                	mov    %ecx,%eax
  2816c2:	f7 ee                	imul   %esi
  2816c4:	c1 fa 02             	sar    $0x2,%edx
  2816c7:	89 c8                	mov    %ecx,%eax
  2816c9:	c1 f8 1f             	sar    $0x1f,%eax
  2816cc:	29 c2                	sub    %eax,%edx
  2816ce:	8d 04 92             	lea    (%edx,%edx,4),%eax
  2816d1:	01 c0                	add    %eax,%eax
  2816d3:	29 c1                	sub    %eax,%ecx
  2816d5:	83 c1 30             	add    $0x30,%ecx
  2816d8:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  2816db:	89 d1                	mov    %edx,%ecx
	}while(value);
  2816dd:	85 d2                	test   %edx,%edx
  2816df:	75 dc                	jne    2816bd <itoa+0x37>
	while(tmp_buf != tbp--)
  2816e1:	8d 73 ff             	lea    -0x1(%ebx),%esi
  2816e4:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2816e7:	39 c3                	cmp    %eax,%ebx
  2816e9:	74 20                	je     28170b <itoa+0x85>
  2816eb:	89 f0                	mov    %esi,%eax
  2816ed:	89 fa                	mov    %edi,%edx
  2816ef:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  2816f2:	83 c2 01             	add    $0x1,%edx
  2816f5:	0f b6 08             	movzbl (%eax),%ecx
  2816f8:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  2816fb:	83 e8 01             	sub    $0x1,%eax
  2816fe:	39 d8                	cmp    %ebx,%eax
  281700:	75 f0                	jne    2816f2 <itoa+0x6c>
  281702:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281705:	29 c6                	sub    %eax,%esi
  281707:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  28170b:	c6 07 00             	movb   $0x0,(%edi)
}
  28170e:	83 c4 10             	add    $0x10,%esp
  281711:	5b                   	pop    %ebx
  281712:	5e                   	pop    %esi
  281713:	5f                   	pop    %edi
  281714:	5d                   	pop    %ebp
  281715:	c3                   	ret    

00281716 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281716:	55                   	push   %ebp
  281717:	89 e5                	mov    %esp,%ebp
  281719:	57                   	push   %edi
  28171a:	56                   	push   %esi
  28171b:	53                   	push   %ebx
  28171c:	83 ec 20             	sub    $0x20,%esp
  28171f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281722:	bb 00 00 00 00       	mov    $0x0,%ebx
  281727:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28172e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281735:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28173a:	ba 00 00 00 00       	mov    $0x0,%edx
  28173f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281743:	83 c2 04             	add    $0x4,%edx
  281746:	39 ca                	cmp    %ecx,%edx
  281748:	72 f5                	jb     28173f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28174a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28174d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281750:	83 c6 02             	add    $0x2,%esi
  281753:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281756:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28175a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28175d:	83 c3 01             	add    $0x1,%ebx
  281760:	89 c1                	mov    %eax,%ecx
  281762:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281765:	8d 79 37             	lea    0x37(%ecx),%edi
  281768:	8d 51 30             	lea    0x30(%ecx),%edx
  28176b:	83 f9 0a             	cmp    $0xa,%ecx
  28176e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281771:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  281774:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  281777:	85 c0                	test   %eax,%eax
  281779:	75 e2                	jne    28175d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  28177b:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28177e:	39 c3                	cmp    %eax,%ebx
  281780:	74 20                	je     2817a2 <xtoa+0x8c>
  281782:	89 d8                	mov    %ebx,%eax
  281784:	89 f1                	mov    %esi,%ecx
  281786:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  281789:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  28178c:	83 c1 01             	add    $0x1,%ecx
  28178f:	0f b6 10             	movzbl (%eax),%edx
  281792:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  281795:	39 f8                	cmp    %edi,%eax
  281797:	75 f0                	jne    281789 <xtoa+0x73>
  281799:	8d 45 f4             	lea    -0xc(%ebp),%eax
  28179c:	29 c3                	sub    %eax,%ebx
  28179e:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  2817a2:	c6 06 00             	movb   $0x0,(%esi)
}
  2817a5:	83 c4 20             	add    $0x20,%esp
  2817a8:	5b                   	pop    %ebx
  2817a9:	5e                   	pop    %esi
  2817aa:	5f                   	pop    %edi
  2817ab:	5d                   	pop    %ebp
  2817ac:	c3                   	ret    

002817ad <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  2817ad:	55                   	push   %ebp
  2817ae:	89 e5                	mov    %esp,%ebp
  2817b0:	57                   	push   %edi
  2817b1:	56                   	push   %esi
  2817b2:	53                   	push   %ebx
  2817b3:	83 ec 10             	sub    $0x10,%esp
  2817b6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  2817b9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2817bc:	e9 a8 00 00 00       	jmp    281869 <sprintf+0xbc>
		if(*format!='%'){
  2817c1:	3c 25                	cmp    $0x25,%al
  2817c3:	74 10                	je     2817d5 <sprintf+0x28>
			*str++=*format++;
  2817c5:	83 c6 01             	add    $0x1,%esi
  2817c8:	89 75 0c             	mov    %esi,0xc(%ebp)
  2817cb:	88 03                	mov    %al,(%ebx)
  2817cd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  2817d0:	e9 94 00 00 00       	jmp    281869 <sprintf+0xbc>
		}
		else{
			format++;
  2817d5:	8d 46 01             	lea    0x1(%esi),%eax
  2817d8:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  2817db:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  2817df:	3c 73                	cmp    $0x73,%al
  2817e1:	74 5e                	je     281841 <sprintf+0x94>
  2817e3:	3c 78                	cmp    $0x78,%al
  2817e5:	74 2f                	je     281816 <sprintf+0x69>
  2817e7:	3c 64                	cmp    $0x64,%al
  2817e9:	75 75                	jne    281860 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  2817eb:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2817ee:	50                   	push   %eax
  2817ef:	ff 37                	pushl  (%edi)
  2817f1:	e8 90 fe ff ff       	call   281686 <itoa>
  2817f6:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  2817fa:	83 c4 08             	add    $0x8,%esp
  2817fd:	84 c0                	test   %al,%al
  2817ff:	74 5f                	je     281860 <sprintf+0xb3>
  281801:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281804:	83 c3 01             	add    $0x1,%ebx
  281807:	83 c2 01             	add    $0x1,%edx
  28180a:	88 43 ff             	mov    %al,-0x1(%ebx)
  28180d:	0f b6 02             	movzbl (%edx),%eax
  281810:	84 c0                	test   %al,%al
  281812:	75 f0                	jne    281804 <sprintf+0x57>
  281814:	eb 4a                	jmp    281860 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281816:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281819:	50                   	push   %eax
  28181a:	ff 37                	pushl  (%edi)
  28181c:	e8 f5 fe ff ff       	call   281716 <xtoa>
  281821:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281825:	83 c4 08             	add    $0x8,%esp
  281828:	84 c0                	test   %al,%al
  28182a:	74 34                	je     281860 <sprintf+0xb3>
  28182c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  28182f:	83 c3 01             	add    $0x1,%ebx
  281832:	83 c2 01             	add    $0x1,%edx
  281835:	88 43 ff             	mov    %al,-0x1(%ebx)
  281838:	0f b6 02             	movzbl (%edx),%eax
  28183b:	84 c0                	test   %al,%al
  28183d:	75 f0                	jne    28182f <sprintf+0x82>
  28183f:	eb 1f                	jmp    281860 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281841:	8b 0f                	mov    (%edi),%ecx
  281843:	0f b6 11             	movzbl (%ecx),%edx
  281846:	84 d2                	test   %dl,%dl
  281848:	74 16                	je     281860 <sprintf+0xb3>
  28184a:	89 d8                	mov    %ebx,%eax
  28184c:	83 c0 01             	add    $0x1,%eax
  28184f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281852:	89 c2                	mov    %eax,%edx
  281854:	29 da                	sub    %ebx,%edx
  281856:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  28185a:	84 d2                	test   %dl,%dl
  28185c:	75 ee                	jne    28184c <sprintf+0x9f>
  28185e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281860:	83 c7 04             	add    $0x4,%edi
			format++;
  281863:	83 c6 02             	add    $0x2,%esi
  281866:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281869:	8b 75 0c             	mov    0xc(%ebp),%esi
  28186c:	0f b6 06             	movzbl (%esi),%eax
  28186f:	84 c0                	test   %al,%al
  281871:	0f 85 4a ff ff ff    	jne    2817c1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281877:	c6 03 00             	movb   $0x0,(%ebx)
}
  28187a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28187d:	5b                   	pop    %ebx
  28187e:	5e                   	pop    %esi
  28187f:	5f                   	pop    %edi
  281880:	5d                   	pop    %ebp
  281881:	c3                   	ret    

00281882 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281882:	55                   	push   %ebp
  281883:	89 e5                	mov    %esp,%ebp
  281885:	57                   	push   %edi
  281886:	56                   	push   %esi
  281887:	53                   	push   %ebx
  281888:	8b 7d 08             	mov    0x8(%ebp),%edi
  28188b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  28188e:	0f b6 17             	movzbl (%edi),%edx
  281891:	be 00 00 00 00       	mov    $0x0,%esi
  281896:	84 d2                	test   %dl,%dl
  281898:	74 40                	je     2818da <strcmp+0x58>
  28189a:	eb 1d                	jmp    2818b9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  28189c:	38 ca                	cmp    %cl,%dl
  28189e:	75 0f                	jne    2818af <strcmp+0x2d>
  2818a0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2818a3:	89 c6                	mov    %eax,%esi
  2818a5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  2818a9:	84 d2                	test   %dl,%dl
  2818ab:	75 1e                	jne    2818cb <strcmp+0x49>
  2818ad:	eb 2b                	jmp    2818da <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  2818af:	0f be c2             	movsbl %dl,%eax
  2818b2:	0f be c9             	movsbl %cl,%ecx
  2818b5:	29 c8                	sub    %ecx,%eax
  2818b7:	eb 2a                	jmp    2818e3 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2818b9:	0f b6 0b             	movzbl (%ebx),%ecx
  2818bc:	84 c9                	test   %cl,%cl
  2818be:	74 15                	je     2818d5 <strcmp+0x53>
	{
		if(c1==c2) i++;
  2818c0:	b8 00 00 00 00       	mov    $0x0,%eax
  2818c5:	38 ca                	cmp    %cl,%dl
  2818c7:	74 d7                	je     2818a0 <strcmp+0x1e>
  2818c9:	eb e4                	jmp    2818af <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2818cb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  2818cf:	84 c9                	test   %cl,%cl
  2818d1:	75 c9                	jne    28189c <strcmp+0x1a>
  2818d3:	eb 05                	jmp    2818da <strcmp+0x58>
  2818d5:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  2818da:	0f be c2             	movsbl %dl,%eax
  2818dd:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  2818e1:	29 d0                	sub    %edx,%eax
}
  2818e3:	5b                   	pop    %ebx
  2818e4:	5e                   	pop    %esi
  2818e5:	5f                   	pop    %edi
  2818e6:	5d                   	pop    %ebp
  2818e7:	c3                   	ret    

002818e8 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  2818e8:	55                   	push   %ebp
  2818e9:	89 e5                	mov    %esp,%ebp
  2818eb:	57                   	push   %edi
  2818ec:	56                   	push   %esi
  2818ed:	53                   	push   %ebx
  2818ee:	8b 75 08             	mov    0x8(%ebp),%esi
  2818f1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  2818f4:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  2818f7:	b8 00 00 00 00       	mov    $0x0,%eax
  2818fc:	85 ff                	test   %edi,%edi
  2818fe:	74 63                	je     281963 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281900:	83 ef 01             	sub    $0x1,%edi
  281903:	89 fa                	mov    %edi,%edx
  281905:	74 52                	je     281959 <strncmp+0x71>
  281907:	eb 19                	jmp    281922 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281909:	38 c8                	cmp    %cl,%al
  28190b:	75 0b                	jne    281918 <strncmp+0x30>
  28190d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281910:	39 fa                	cmp    %edi,%edx
  281912:	75 27                	jne    28193b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281914:	89 fa                	mov    %edi,%edx
  281916:	eb 41                	jmp    281959 <strncmp+0x71>
		else return c1-c2;
  281918:	0f be c0             	movsbl %al,%eax
  28191b:	0f be c9             	movsbl %cl,%ecx
  28191e:	29 c8                	sub    %ecx,%eax
  281920:	eb 41                	jmp    281963 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281922:	0f b6 06             	movzbl (%esi),%eax
  281925:	84 c0                	test   %al,%al
  281927:	74 24                	je     28194d <strncmp+0x65>
  281929:	0f b6 0b             	movzbl (%ebx),%ecx
  28192c:	84 c9                	test   %cl,%cl
  28192e:	74 24                	je     281954 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281930:	ba 00 00 00 00       	mov    $0x0,%edx
  281935:	38 c8                	cmp    %cl,%al
  281937:	74 d4                	je     28190d <strncmp+0x25>
  281939:	eb dd                	jmp    281918 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  28193b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  28193f:	84 c0                	test   %al,%al
  281941:	74 16                	je     281959 <strncmp+0x71>
  281943:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281947:	84 c9                	test   %cl,%cl
  281949:	75 be                	jne    281909 <strncmp+0x21>
  28194b:	eb 0c                	jmp    281959 <strncmp+0x71>
  28194d:	ba 00 00 00 00       	mov    $0x0,%edx
  281952:	eb 05                	jmp    281959 <strncmp+0x71>
  281954:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281959:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  28195d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281961:	29 d0                	sub    %edx,%eax
}
  281963:	5b                   	pop    %ebx
  281964:	5e                   	pop    %esi
  281965:	5f                   	pop    %edi
  281966:	5d                   	pop    %ebp
  281967:	c3                   	ret    

00281968 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281968:	55                   	push   %ebp
  281969:	89 e5                	mov    %esp,%ebp
  28196b:	8b 45 08             	mov    0x8(%ebp),%eax
  28196e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281971:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281974:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281977:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281979:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  28197c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281983:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  28198a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281991:	8b 55 14             	mov    0x14(%ebp),%edx
  281994:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281997:	5d                   	pop    %ebp
  281998:	c3                   	ret    

00281999 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281999:	55                   	push   %ebp
  28199a:	89 e5                	mov    %esp,%ebp
  28199c:	53                   	push   %ebx
  28199d:	83 ec 04             	sub    $0x4,%esp
  2819a0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  2819a3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2819a7:	75 0b                	jne    2819b4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  2819a9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  2819ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  2819b2:	eb 52                	jmp    281a06 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  2819b4:	8b 48 04             	mov    0x4(%eax),%ecx
  2819b7:	8b 10                	mov    (%eax),%edx
  2819b9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  2819bc:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  2819bf:	8b 48 04             	mov    0x4(%eax),%ecx
  2819c2:	8d 51 01             	lea    0x1(%ecx),%edx
  2819c5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  2819c8:	3b 50 0c             	cmp    0xc(%eax),%edx
  2819cb:	75 07                	jne    2819d4 <fifo32_put+0x3b>
		fifo->p = 0;
  2819cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  2819d4:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  2819d8:	8b 50 18             	mov    0x18(%eax),%edx
  2819db:	85 d2                	test   %edx,%edx
  2819dd:	74 22                	je     281a01 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  2819df:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  2819e4:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  2819e8:	74 1c                	je     281a06 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  2819ea:	83 ec 04             	sub    $0x4,%esp
  2819ed:	6a 00                	push   $0x0
  2819ef:	6a ff                	push   $0xffffffff
  2819f1:	52                   	push   %edx
  2819f2:	e8 4b 11 00 00       	call   282b42 <task_run>
  2819f7:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  2819fa:	b8 00 00 00 00       	mov    $0x0,%eax
  2819ff:	eb 05                	jmp    281a06 <fifo32_put+0x6d>
  281a01:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281a06:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281a09:	c9                   	leave  
  281a0a:	c3                   	ret    

00281a0b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281a0b:	55                   	push   %ebp
  281a0c:	89 e5                	mov    %esp,%ebp
  281a0e:	56                   	push   %esi
  281a0f:	53                   	push   %ebx
  281a10:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281a13:	8b 59 10             	mov    0x10(%ecx),%ebx
  281a16:	8b 71 0c             	mov    0xc(%ecx),%esi
  281a19:	39 f3                	cmp    %esi,%ebx
  281a1b:	74 20                	je     281a3d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281a1d:	8b 51 08             	mov    0x8(%ecx),%edx
  281a20:	8b 01                	mov    (%ecx),%eax
  281a22:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281a25:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281a28:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281a2a:	be 00 00 00 00       	mov    $0x0,%esi
  281a2f:	0f 44 d6             	cmove  %esi,%edx
  281a32:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281a35:	83 c3 01             	add    $0x1,%ebx
  281a38:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281a3b:	eb 05                	jmp    281a42 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281a3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281a42:	5b                   	pop    %ebx
  281a43:	5e                   	pop    %esi
  281a44:	5d                   	pop    %ebp
  281a45:	c3                   	ret    

00281a46 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281a46:	55                   	push   %ebp
  281a47:	89 e5                	mov    %esp,%ebp
  281a49:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281a4c:	8b 42 0c             	mov    0xc(%edx),%eax
  281a4f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281a52:	5d                   	pop    %ebp
  281a53:	c3                   	ret    

00281a54 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281a54:	55                   	push   %ebp
  281a55:	89 e5                	mov    %esp,%ebp
  281a57:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281a5a:	8b 45 08             	mov    0x8(%ebp),%eax
  281a5d:	a3 44 66 28 00       	mov    %eax,0x286644
	mousedata0 = data0;
  281a62:	8b 45 0c             	mov    0xc(%ebp),%eax
  281a65:	a3 40 66 28 00       	mov    %eax,0x286640

	wait_KBC_sendready();
  281a6a:	e8 1a 01 00 00       	call   281b89 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281a6f:	83 ec 08             	sub    $0x8,%esp
  281a72:	68 d4 00 00 00       	push   $0xd4
  281a77:	6a 64                	push   $0x64
  281a79:	e8 b8 f0 ff ff       	call   280b36 <io_out8>
	wait_KBC_sendready();
  281a7e:	e8 06 01 00 00       	call   281b89 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281a83:	83 c4 08             	add    $0x8,%esp
  281a86:	68 f4 00 00 00       	push   $0xf4
  281a8b:	6a 60                	push   $0x60
  281a8d:	e8 a4 f0 ff ff       	call   280b36 <io_out8>
	mdec->phase = 0;
  281a92:	8b 45 10             	mov    0x10(%ebp),%eax
  281a95:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281a99:	83 c4 10             	add    $0x10,%esp
}
  281a9c:	c9                   	leave  
  281a9d:	c3                   	ret    

00281a9e <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281a9e:	55                   	push   %ebp
  281a9f:	89 e5                	mov    %esp,%ebp
  281aa1:	56                   	push   %esi
  281aa2:	53                   	push   %ebx
  281aa3:	8b 55 08             	mov    0x8(%ebp),%edx
  281aa6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281aa9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281aad:	84 c0                	test   %al,%al
  281aaf:	75 14                	jne    281ac5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281ab1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281ab6:	80 f9 fa             	cmp    $0xfa,%cl
  281ab9:	0f 85 82 00 00 00    	jne    281b41 <mouse_decode+0xa3>
			mdec->phase = 1;
  281abf:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281ac3:	eb 7c                	jmp    281b41 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281ac5:	3c 01                	cmp    $0x1,%al
  281ac7:	75 17                	jne    281ae0 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281ac9:	89 cb                	mov    %ecx,%ebx
  281acb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281ace:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281ad3:	80 fb 08             	cmp    $0x8,%bl
  281ad6:	75 69                	jne    281b41 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281ad8:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281ada:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281ade:	eb 61                	jmp    281b41 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281ae0:	3c 02                	cmp    $0x2,%al
  281ae2:	75 0e                	jne    281af2 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281ae4:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281ae7:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281aeb:	b8 00 00 00 00       	mov    $0x0,%eax
  281af0:	eb 4f                	jmp    281b41 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281af2:	3c 03                	cmp    $0x3,%al
  281af4:	75 46                	jne    281b3c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281af6:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281af9:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281afd:	0f b6 02             	movzbl (%edx),%eax
  281b00:	89 c3                	mov    %eax,%ebx
  281b02:	83 e3 07             	and    $0x7,%ebx
  281b05:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281b08:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281b0c:	0f b6 f3             	movzbl %bl,%esi
  281b0f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281b12:	0f b6 f1             	movzbl %cl,%esi
  281b15:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281b18:	a8 10                	test   $0x10,%al
  281b1a:	74 09                	je     281b25 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281b1c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281b22:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281b25:	a8 20                	test   $0x20,%al
  281b27:	74 09                	je     281b32 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281b29:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281b2f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281b32:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281b35:	b8 01 00 00 00       	mov    $0x1,%eax
  281b3a:	eb 05                	jmp    281b41 <mouse_decode+0xa3>
	}
	return -1;
  281b3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281b41:	5b                   	pop    %ebx
  281b42:	5e                   	pop    %esi
  281b43:	5d                   	pop    %ebp
  281b44:	c3                   	ret    

00281b45 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281b45:	55                   	push   %ebp
  281b46:	89 e5                	mov    %esp,%ebp
  281b48:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281b4b:	6a 64                	push   $0x64
  281b4d:	68 a0 00 00 00       	push   $0xa0
  281b52:	e8 df ef ff ff       	call   280b36 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281b57:	83 c4 08             	add    $0x8,%esp
  281b5a:	6a 62                	push   $0x62
  281b5c:	6a 20                	push   $0x20
  281b5e:	e8 d3 ef ff ff       	call   280b36 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281b63:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281b6a:	e8 a5 ef ff ff       	call   280b14 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281b6f:	83 c4 08             	add    $0x8,%esp
  281b72:	03 05 40 66 28 00    	add    0x286640,%eax
  281b78:	50                   	push   %eax
  281b79:	ff 35 44 66 28 00    	pushl  0x286644
  281b7f:	e8 15 fe ff ff       	call   281999 <fifo32_put>
	return;
  281b84:	83 c4 10             	add    $0x10,%esp
}
  281b87:	c9                   	leave  
  281b88:	c3                   	ret    

00281b89 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281b89:	55                   	push   %ebp
  281b8a:	89 e5                	mov    %esp,%ebp
  281b8c:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281b8f:	83 ec 0c             	sub    $0xc,%esp
  281b92:	6a 64                	push   $0x64
  281b94:	e8 7b ef ff ff       	call   280b14 <io_in8>
  281b99:	83 c4 10             	add    $0x10,%esp
  281b9c:	a8 02                	test   $0x2,%al
  281b9e:	75 ef                	jne    281b8f <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281ba0:	c9                   	leave  
  281ba1:	c3                   	ret    

00281ba2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281ba2:	55                   	push   %ebp
  281ba3:	89 e5                	mov    %esp,%ebp
  281ba5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281ba8:	8b 45 08             	mov    0x8(%ebp),%eax
  281bab:	a3 48 66 28 00       	mov    %eax,0x286648
	keydata0 = data0;
  281bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281bb3:	a3 4c 66 28 00       	mov    %eax,0x28664c
	wait_KBC_sendready();
  281bb8:	e8 cc ff ff ff       	call   281b89 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281bbd:	83 ec 08             	sub    $0x8,%esp
  281bc0:	6a 60                	push   $0x60
  281bc2:	6a 64                	push   $0x64
  281bc4:	e8 6d ef ff ff       	call   280b36 <io_out8>
	wait_KBC_sendready();
  281bc9:	e8 bb ff ff ff       	call   281b89 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281bce:	83 c4 08             	add    $0x8,%esp
  281bd1:	6a 47                	push   $0x47
  281bd3:	6a 60                	push   $0x60
  281bd5:	e8 5c ef ff ff       	call   280b36 <io_out8>
	return;
  281bda:	83 c4 10             	add    $0x10,%esp
}
  281bdd:	c9                   	leave  
  281bde:	c3                   	ret    

00281bdf <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281bdf:	55                   	push   %ebp
  281be0:	89 e5                	mov    %esp,%ebp
  281be2:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281be5:	6a 61                	push   $0x61
  281be7:	6a 20                	push   $0x20
  281be9:	e8 48 ef ff ff       	call   280b36 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281bee:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281bf5:	e8 1a ef ff ff       	call   280b14 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281bfa:	83 c4 08             	add    $0x8,%esp
  281bfd:	03 05 4c 66 28 00    	add    0x28664c,%eax
  281c03:	50                   	push   %eax
  281c04:	ff 35 48 66 28 00    	pushl  0x286648
  281c0a:	e8 8a fd ff ff       	call   281999 <fifo32_put>
	return;
  281c0f:	83 c4 10             	add    $0x10,%esp
}
  281c12:	c9                   	leave  
  281c13:	c3                   	ret    

00281c14 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281c14:	55                   	push   %ebp
  281c15:	89 e5                	mov    %esp,%ebp
  281c17:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281c1a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281c1f:	83 fa 7f             	cmp    $0x7f,%edx
  281c22:	77 16                	ja     281c3a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281c24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281c28:	75 09                	jne    281c33 <key_char+0x1f>
  281c2a:	0f b6 82 40 3e 28 00 	movzbl 0x283e40(%edx),%eax
  281c31:	eb 07                	jmp    281c3a <key_char+0x26>
		else return keytable1[key];
  281c33:	0f b6 82 c0 3d 28 00 	movzbl 0x283dc0(%edx),%eax
	}
	else return 0;
}
  281c3a:	5d                   	pop    %ebp
  281c3b:	c3                   	ret    

00281c3c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281c3c:	55                   	push   %ebp
  281c3d:	89 e5                	mov    %esp,%ebp
  281c3f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281c42:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281c46:	e8 0a ef ff ff       	call   280b55 <io_load_eflags>
  281c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281c51:	83 ec 0c             	sub    $0xc,%esp
  281c54:	50                   	push   %eax
  281c55:	e8 fe ee ff ff       	call   280b58 <io_store_eflags>
  281c5a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281c5d:	e8 f3 ee ff ff       	call   280b55 <io_load_eflags>
  281c62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281c68:	25 00 00 04 00       	and    $0x40000,%eax
  281c6d:	85 c0                	test   %eax,%eax
  281c6f:	74 04                	je     281c75 <memtest+0x39>
		flg486 = 1;
  281c71:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281c75:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281c7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281c7f:	83 ec 0c             	sub    $0xc,%esp
  281c82:	50                   	push   %eax
  281c83:	e8 d0 ee ff ff       	call   280b58 <io_store_eflags>
  281c88:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281c8b:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281c8f:	74 1d                	je     281cae <memtest+0x72>
	{
		cr0 = load_cr0;
  281c91:	c7 45 ec 7f 0b 28 00 	movl   $0x280b7f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281c98:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281c9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281ca2:	83 ec 0c             	sub    $0xc,%esp
  281ca5:	50                   	push   %eax
  281ca6:	e8 d8 ee ff ff       	call   280b83 <store_cr0>
  281cab:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281cae:	83 ec 08             	sub    $0x8,%esp
  281cb1:	ff 75 0c             	pushl  0xc(%ebp)
  281cb4:	ff 75 08             	pushl  0x8(%ebp)
  281cb7:	e8 cf ee ff ff       	call   280b8b <_memtest_sub>
  281cbc:	83 c4 10             	add    $0x10,%esp
  281cbf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281cc2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281cc6:	74 1e                	je     281ce6 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281cc8:	e8 b2 ee ff ff       	call   280b7f <load_cr0>
  281ccd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281cd0:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281cd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281cda:	83 ec 0c             	sub    $0xc,%esp
  281cdd:	50                   	push   %eax
  281cde:	e8 a0 ee ff ff       	call   280b83 <store_cr0>
  281ce3:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281ce6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281ce9:	c9                   	leave  
  281cea:	c3                   	ret    

00281ceb <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281ceb:	55                   	push   %ebp
  281cec:	89 e5                	mov    %esp,%ebp
  281cee:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281cf1:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281cf8:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281cff:	8b 45 08             	mov    0x8(%ebp),%eax
  281d02:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281d05:	eb 67                	jmp    281d6e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281d07:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281d0a:	05 fc 0f 00 00       	add    $0xffc,%eax
  281d0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281d12:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d15:	8b 00                	mov    (%eax),%eax
  281d17:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281d1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d1d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281d20:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d25:	8b 00                	mov    (%eax),%eax
  281d27:	f7 d0                	not    %eax
  281d29:	89 c2                	mov    %eax,%edx
  281d2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d2e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281d30:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d33:	8b 00                	mov    (%eax),%eax
  281d35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281d38:	74 0d                	je     281d47 <memtest_sub+0x5c>
  281d3a:	eb 01                	jmp    281d3d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281d3c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281d3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d40:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281d43:	89 10                	mov    %edx,(%eax)
			break;
  281d45:	eb 2f                	jmp    281d76 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281d47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d4a:	8b 00                	mov    (%eax),%eax
  281d4c:	f7 d0                	not    %eax
  281d4e:	89 c2                	mov    %eax,%edx
  281d50:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d53:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281d55:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d58:	8b 00                	mov    (%eax),%eax
  281d5a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281d5d:	75 dd                	jne    281d3c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281d5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d62:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281d65:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281d67:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281d6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281d71:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281d74:	76 91                	jbe    281d07 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281d76:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281d79:	c9                   	leave  
  281d7a:	c3                   	ret    

00281d7b <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281d7b:	55                   	push   %ebp
  281d7c:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281d7e:	8b 45 08             	mov    0x8(%ebp),%eax
  281d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281d87:	8b 45 08             	mov    0x8(%ebp),%eax
  281d8a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281d91:	8b 45 08             	mov    0x8(%ebp),%eax
  281d94:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281d9b:	8b 45 08             	mov    0x8(%ebp),%eax
  281d9e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281da5:	90                   	nop
}
  281da6:	5d                   	pop    %ebp
  281da7:	c3                   	ret    

00281da8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281da8:	55                   	push   %ebp
  281da9:	89 e5                	mov    %esp,%ebp
  281dab:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281dae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281db5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281dbc:	eb 14                	jmp    281dd2 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281dbe:	8b 45 08             	mov    0x8(%ebp),%eax
  281dc1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281dc4:	83 c2 02             	add    $0x2,%edx
  281dc7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281dcb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281dce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281dd2:	8b 45 08             	mov    0x8(%ebp),%eax
  281dd5:	8b 00                	mov    (%eax),%eax
  281dd7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281dda:	77 e2                	ja     281dbe <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281ddc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281ddf:	c9                   	leave  
  281de0:	c3                   	ret    

00281de1 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281de1:	55                   	push   %ebp
  281de2:	89 e5                	mov    %esp,%ebp
  281de4:	53                   	push   %ebx
  281de5:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281de8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281def:	e9 bd 00 00 00       	jmp    281eb1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  281df4:	8b 45 08             	mov    0x8(%ebp),%eax
  281df7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281dfa:	83 c2 02             	add    $0x2,%edx
  281dfd:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281e01:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281e04:	0f 82 a3 00 00 00    	jb     281ead <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  281e0a:	8b 45 08             	mov    0x8(%ebp),%eax
  281e0d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e10:	83 c2 02             	add    $0x2,%edx
  281e13:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  281e19:	8b 45 08             	mov    0x8(%ebp),%eax
  281e1c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e1f:	83 c2 02             	add    $0x2,%edx
  281e22:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  281e25:	8b 45 0c             	mov    0xc(%ebp),%eax
  281e28:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281e2b:	8b 45 08             	mov    0x8(%ebp),%eax
  281e2e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e31:	83 c2 02             	add    $0x2,%edx
  281e34:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  281e37:	8b 45 08             	mov    0x8(%ebp),%eax
  281e3a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e3d:	83 c2 02             	add    $0x2,%edx
  281e40:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281e44:	2b 45 0c             	sub    0xc(%ebp),%eax
  281e47:	89 c2                	mov    %eax,%edx
  281e49:	8b 45 08             	mov    0x8(%ebp),%eax
  281e4c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  281e4f:	83 c1 02             	add    $0x2,%ecx
  281e52:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  281e56:	8b 45 08             	mov    0x8(%ebp),%eax
  281e59:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e5c:	83 c2 02             	add    $0x2,%edx
  281e5f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281e63:	85 c0                	test   %eax,%eax
  281e65:	75 41                	jne    281ea8 <memman_alloc+0xc7>
			{
				man->frees--;
  281e67:	8b 45 08             	mov    0x8(%ebp),%eax
  281e6a:	8b 00                	mov    (%eax),%eax
  281e6c:	8d 50 ff             	lea    -0x1(%eax),%edx
  281e6f:	8b 45 08             	mov    0x8(%ebp),%eax
  281e72:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  281e74:	eb 28                	jmp    281e9e <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  281e76:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281e79:	8d 50 01             	lea    0x1(%eax),%edx
  281e7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281e7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281e82:	8d 58 02             	lea    0x2(%eax),%ebx
  281e85:	8b 45 08             	mov    0x8(%ebp),%eax
  281e88:	83 c2 02             	add    $0x2,%edx
  281e8b:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  281e8e:	8b 02                	mov    (%edx),%eax
  281e90:	8b 52 04             	mov    0x4(%edx),%edx
  281e93:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  281e96:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  281e9a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281e9e:	8b 45 08             	mov    0x8(%ebp),%eax
  281ea1:	8b 00                	mov    (%eax),%eax
  281ea3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281ea6:	77 ce                	ja     281e76 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  281ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  281eab:	eb 17                	jmp    281ec4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281ead:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281eb1:	8b 45 08             	mov    0x8(%ebp),%eax
  281eb4:	8b 00                	mov    (%eax),%eax
  281eb6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281eb9:	0f 87 35 ff ff ff    	ja     281df4 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  281ebf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281ec4:	83 c4 10             	add    $0x10,%esp
  281ec7:	5b                   	pop    %ebx
  281ec8:	5d                   	pop    %ebp
  281ec9:	c3                   	ret    

00281eca <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  281eca:	55                   	push   %ebp
  281ecb:	89 e5                	mov    %esp,%ebp
  281ecd:	53                   	push   %ebx
  281ece:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  281ed1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281ed8:	eb 15                	jmp    281eef <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  281eda:	8b 45 08             	mov    0x8(%ebp),%eax
  281edd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281ee0:	83 c2 02             	add    $0x2,%edx
  281ee3:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281ee6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281ee9:	77 10                	ja     281efb <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  281eeb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281eef:	8b 45 08             	mov    0x8(%ebp),%eax
  281ef2:	8b 00                	mov    (%eax),%eax
  281ef4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281ef7:	7f e1                	jg     281eda <memman_free+0x10>
  281ef9:	eb 01                	jmp    281efc <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  281efb:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  281efc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  281f00:	0f 8e f2 00 00 00    	jle    281ff8 <memman_free+0x12e>
  281f06:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f09:	8d 50 ff             	lea    -0x1(%eax),%edx
  281f0c:	8b 45 08             	mov    0x8(%ebp),%eax
  281f0f:	83 c2 02             	add    $0x2,%edx
  281f12:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  281f15:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f18:	8d 48 ff             	lea    -0x1(%eax),%ecx
  281f1b:	8b 45 08             	mov    0x8(%ebp),%eax
  281f1e:	83 c1 02             	add    $0x2,%ecx
  281f21:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  281f25:	01 d0                	add    %edx,%eax
  281f27:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f2a:	0f 85 c8 00 00 00    	jne    281ff8 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  281f30:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f33:	8d 58 ff             	lea    -0x1(%eax),%ebx
  281f36:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f39:	8d 50 ff             	lea    -0x1(%eax),%edx
  281f3c:	8b 45 08             	mov    0x8(%ebp),%eax
  281f3f:	83 c2 02             	add    $0x2,%edx
  281f42:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  281f46:	8b 45 10             	mov    0x10(%ebp),%eax
  281f49:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281f4c:	8b 45 08             	mov    0x8(%ebp),%eax
  281f4f:	8d 53 02             	lea    0x2(%ebx),%edx
  281f52:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  281f56:	8b 45 08             	mov    0x8(%ebp),%eax
  281f59:	8b 00                	mov    (%eax),%eax
  281f5b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281f5e:	0f 8e 8a 00 00 00    	jle    281fee <memman_free+0x124>
  281f64:	8b 55 0c             	mov    0xc(%ebp),%edx
  281f67:	8b 45 10             	mov    0x10(%ebp),%eax
  281f6a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281f6d:	8b 45 08             	mov    0x8(%ebp),%eax
  281f70:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f73:	83 c2 02             	add    $0x2,%edx
  281f76:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281f79:	39 c1                	cmp    %eax,%ecx
  281f7b:	75 71                	jne    281fee <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  281f7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f80:	8d 58 ff             	lea    -0x1(%eax),%ebx
  281f83:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281f86:	8d 50 ff             	lea    -0x1(%eax),%edx
  281f89:	8b 45 08             	mov    0x8(%ebp),%eax
  281f8c:	83 c2 02             	add    $0x2,%edx
  281f8f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  281f93:	8b 45 08             	mov    0x8(%ebp),%eax
  281f96:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  281f99:	83 c1 02             	add    $0x2,%ecx
  281f9c:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  281fa0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281fa3:	8b 45 08             	mov    0x8(%ebp),%eax
  281fa6:	8d 53 02             	lea    0x2(%ebx),%edx
  281fa9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  281fad:	eb 28                	jmp    281fd7 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  281faf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fb2:	8d 50 01             	lea    0x1(%eax),%edx
  281fb5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281fb8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fbb:	8d 58 02             	lea    0x2(%eax),%ebx
  281fbe:	8b 45 08             	mov    0x8(%ebp),%eax
  281fc1:	83 c2 02             	add    $0x2,%edx
  281fc4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  281fc7:	8b 02                	mov    (%edx),%eax
  281fc9:	8b 52 04             	mov    0x4(%edx),%edx
  281fcc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  281fcf:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  281fd3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281fd7:	8b 45 08             	mov    0x8(%ebp),%eax
  281fda:	8b 00                	mov    (%eax),%eax
  281fdc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281fdf:	7f ce                	jg     281faf <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  281fe1:	8b 45 08             	mov    0x8(%ebp),%eax
  281fe4:	8b 00                	mov    (%eax),%eax
  281fe6:	8d 50 ff             	lea    -0x1(%eax),%edx
  281fe9:	8b 45 08             	mov    0x8(%ebp),%eax
  281fec:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  281fee:	b8 00 00 00 00       	mov    $0x0,%eax
  281ff3:	e9 1f 01 00 00       	jmp    282117 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  281ff8:	8b 45 08             	mov    0x8(%ebp),%eax
  281ffb:	8b 00                	mov    (%eax),%eax
  281ffd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282000:	7e 52                	jle    282054 <memman_free+0x18a>
  282002:	8b 55 0c             	mov    0xc(%ebp),%edx
  282005:	8b 45 10             	mov    0x10(%ebp),%eax
  282008:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28200b:	8b 45 08             	mov    0x8(%ebp),%eax
  28200e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282011:	83 c2 02             	add    $0x2,%edx
  282014:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282017:	39 c1                	cmp    %eax,%ecx
  282019:	75 39                	jne    282054 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28201b:	8b 45 08             	mov    0x8(%ebp),%eax
  28201e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282021:	8d 4a 02             	lea    0x2(%edx),%ecx
  282024:	8b 55 0c             	mov    0xc(%ebp),%edx
  282027:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28202a:	8b 45 08             	mov    0x8(%ebp),%eax
  28202d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282030:	83 c2 02             	add    $0x2,%edx
  282033:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282037:	8b 45 10             	mov    0x10(%ebp),%eax
  28203a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28203d:	8b 45 08             	mov    0x8(%ebp),%eax
  282040:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282043:	83 c2 02             	add    $0x2,%edx
  282046:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28204a:	b8 00 00 00 00       	mov    $0x0,%eax
  28204f:	e9 c3 00 00 00       	jmp    282117 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282054:	8b 45 08             	mov    0x8(%ebp),%eax
  282057:	8b 00                	mov    (%eax),%eax
  282059:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28205e:	0f 8f 8a 00 00 00    	jg     2820ee <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282064:	8b 45 08             	mov    0x8(%ebp),%eax
  282067:	8b 00                	mov    (%eax),%eax
  282069:	83 e8 01             	sub    $0x1,%eax
  28206c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28206f:	eb 28                	jmp    282099 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  282071:	8b 45 f4             	mov    -0xc(%ebp),%eax
  282074:	83 c0 01             	add    $0x1,%eax
  282077:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28207a:	8d 58 02             	lea    0x2(%eax),%ebx
  28207d:	8b 45 08             	mov    0x8(%ebp),%eax
  282080:	8b 55 f4             	mov    -0xc(%ebp),%edx
  282083:	83 c2 02             	add    $0x2,%edx
  282086:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282089:	8b 02                	mov    (%edx),%eax
  28208b:	8b 52 04             	mov    0x4(%edx),%edx
  28208e:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  282091:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  282095:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  282099:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28209c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28209f:	7d d0                	jge    282071 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2820a1:	8b 45 08             	mov    0x8(%ebp),%eax
  2820a4:	8b 50 04             	mov    0x4(%eax),%edx
  2820a7:	8b 45 08             	mov    0x8(%ebp),%eax
  2820aa:	8b 00                	mov    (%eax),%eax
  2820ac:	39 c2                	cmp    %eax,%edx
  2820ae:	7d 0b                	jge    2820bb <memman_free+0x1f1>
  2820b0:	8b 45 08             	mov    0x8(%ebp),%eax
  2820b3:	8b 10                	mov    (%eax),%edx
  2820b5:	8b 45 08             	mov    0x8(%ebp),%eax
  2820b8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2820bb:	8b 45 08             	mov    0x8(%ebp),%eax
  2820be:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820c1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2820c4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2820c7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2820ca:	8b 45 08             	mov    0x8(%ebp),%eax
  2820cd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820d0:	8d 4a 02             	lea    0x2(%edx),%ecx
  2820d3:	8b 55 10             	mov    0x10(%ebp),%edx
  2820d6:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  2820da:	8b 45 08             	mov    0x8(%ebp),%eax
  2820dd:	8b 00                	mov    (%eax),%eax
  2820df:	8d 50 01             	lea    0x1(%eax),%edx
  2820e2:	8b 45 08             	mov    0x8(%ebp),%eax
  2820e5:	89 10                	mov    %edx,(%eax)
		return 0;
  2820e7:	b8 00 00 00 00       	mov    $0x0,%eax
  2820ec:	eb 29                	jmp    282117 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  2820ee:	8b 45 08             	mov    0x8(%ebp),%eax
  2820f1:	8b 40 0c             	mov    0xc(%eax),%eax
  2820f4:	8d 50 01             	lea    0x1(%eax),%edx
  2820f7:	8b 45 08             	mov    0x8(%ebp),%eax
  2820fa:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  2820fd:	8b 45 08             	mov    0x8(%ebp),%eax
  282100:	8b 40 08             	mov    0x8(%eax),%eax
  282103:	89 c2                	mov    %eax,%edx
  282105:	8b 45 10             	mov    0x10(%ebp),%eax
  282108:	01 d0                	add    %edx,%eax
  28210a:	89 c2                	mov    %eax,%edx
  28210c:	8b 45 08             	mov    0x8(%ebp),%eax
  28210f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282112:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282117:	83 c4 10             	add    $0x10,%esp
  28211a:	5b                   	pop    %ebx
  28211b:	5d                   	pop    %ebp
  28211c:	c3                   	ret    

0028211d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28211d:	55                   	push   %ebp
  28211e:	89 e5                	mov    %esp,%ebp
  282120:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282123:	8b 45 0c             	mov    0xc(%ebp),%eax
  282126:	05 ff 0f 00 00       	add    $0xfff,%eax
  28212b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282130:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282133:	ff 75 0c             	pushl  0xc(%ebp)
  282136:	ff 75 08             	pushl  0x8(%ebp)
  282139:	e8 a3 fc ff ff       	call   281de1 <memman_alloc>
  28213e:	83 c4 08             	add    $0x8,%esp
  282141:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282144:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282147:	c9                   	leave  
  282148:	c3                   	ret    

00282149 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282149:	55                   	push   %ebp
  28214a:	89 e5                	mov    %esp,%ebp
  28214c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28214f:	8b 45 10             	mov    0x10(%ebp),%eax
  282152:	05 ff 0f 00 00       	add    $0xfff,%eax
  282157:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28215c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28215f:	ff 75 10             	pushl  0x10(%ebp)
  282162:	ff 75 0c             	pushl  0xc(%ebp)
  282165:	ff 75 08             	pushl  0x8(%ebp)
  282168:	e8 5d fd ff ff       	call   281eca <memman_free>
  28216d:	83 c4 0c             	add    $0xc,%esp
  282170:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  282173:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282176:	c9                   	leave  
  282177:	c3                   	ret    

00282178 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  282178:	55                   	push   %ebp
  282179:	89 e5                	mov    %esp,%ebp
  28217b:	57                   	push   %edi
  28217c:	56                   	push   %esi
  28217d:	53                   	push   %ebx
  28217e:	83 ec 14             	sub    $0x14,%esp
  282181:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  282184:	68 14 28 00 00       	push   $0x2814
  282189:	57                   	push   %edi
  28218a:	e8 8e ff ff ff       	call   28211d <memman_alloc_4k>
  28218f:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  282191:	83 c4 10             	add    $0x10,%esp
  282194:	85 c0                	test   %eax,%eax
  282196:	74 6a                	je     282202 <shtctl_init+0x8a>
  282198:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  28219a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28219d:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  28219f:	83 ec 08             	sub    $0x8,%esp
  2821a2:	8b 45 10             	mov    0x10(%ebp),%eax
  2821a5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2821a9:	50                   	push   %eax
  2821aa:	57                   	push   %edi
  2821ab:	e8 6d ff ff ff       	call   28211d <memman_alloc_4k>
  2821b0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2821b3:	83 c4 10             	add    $0x10,%esp
  2821b6:	85 c0                	test   %eax,%eax
  2821b8:	75 19                	jne    2821d3 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2821ba:	83 ec 04             	sub    $0x4,%esp
  2821bd:	68 14 28 00 00       	push   $0x2814
  2821c2:	56                   	push   %esi
  2821c3:	57                   	push   %edi
  2821c4:	e8 80 ff ff ff       	call   282149 <memman_free_4k>
		ctl = 0;
		goto err;
  2821c9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2821cc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  2821d1:	eb 2f                	jmp    282202 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  2821d3:	8b 45 10             	mov    0x10(%ebp),%eax
  2821d6:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  2821d9:	8b 45 14             	mov    0x14(%ebp),%eax
  2821dc:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  2821df:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  2821e6:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  2821ec:	81 c3 30 28 00 00    	add    $0x2830,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  2821f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  2821f8:	89 70 04             	mov    %esi,0x4(%eax)
  2821fb:	83 c0 24             	add    $0x24,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  2821fe:	39 d8                	cmp    %ebx,%eax
  282200:	75 f0                	jne    2821f2 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
	err:
		return ctl;
}
  282202:	89 f0                	mov    %esi,%eax
  282204:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282207:	5b                   	pop    %ebx
  282208:	5e                   	pop    %esi
  282209:	5f                   	pop    %edi
  28220a:	5d                   	pop    %ebp
  28220b:	c3                   	ret    

0028220c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28220c:	55                   	push   %ebp
  28220d:	89 e5                	mov    %esp,%ebp
  28220f:	56                   	push   %esi
  282210:	53                   	push   %ebx
  282211:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282214:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28221b:	74 12                	je     28222f <sheet_alloc+0x23>
  28221d:	8d 91 54 04 00 00    	lea    0x454(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282223:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282228:	83 3a 00             	cmpl   $0x0,(%edx)
  28222b:	75 30                	jne    28225d <sheet_alloc+0x51>
  28222d:	eb 05                	jmp    282234 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28222f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282234:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
  28223b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
			sht->flags = SHEET_USE;
  28223e:	c7 84 99 30 04 00 00 	movl   $0x1,0x430(%ecx,%ebx,4)
  282245:	01 00 00 00 
			sht->height = -1;
  282249:	c7 84 99 2c 04 00 00 	movl   $0xffffffff,0x42c(%ecx,%ebx,4)
  282250:	ff ff ff ff 
			return sht;
  282254:	8d 84 99 14 04 00 00 	lea    0x414(%ecx,%ebx,4),%eax
  28225b:	eb 12                	jmp    28226f <sheet_alloc+0x63>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28225d:	83 c0 01             	add    $0x1,%eax
  282260:	83 c2 24             	add    $0x24,%edx
  282263:	3d 00 01 00 00       	cmp    $0x100,%eax
  282268:	75 be                	jne    282228 <sheet_alloc+0x1c>
			sht->flags = SHEET_USE;
			sht->height = -1;
			return sht;
		}
	}
	return 0;
  28226a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28226f:	5b                   	pop    %ebx
  282270:	5e                   	pop    %esi
  282271:	5d                   	pop    %ebp
  282272:	c3                   	ret    

00282273 <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  282273:	55                   	push   %ebp
  282274:	89 e5                	mov    %esp,%ebp
  282276:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  282279:	8b 55 0c             	mov    0xc(%ebp),%edx
  28227c:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  28227e:	8b 55 10             	mov    0x10(%ebp),%edx
  282281:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  282284:	8b 55 14             	mov    0x14(%ebp),%edx
  282287:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  28228a:	8b 55 18             	mov    0x18(%ebp),%edx
  28228d:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  282290:	5d                   	pop    %ebp
  282291:	c3                   	ret    

00282292 <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  282292:	55                   	push   %ebp
  282293:	89 e5                	mov    %esp,%ebp
  282295:	57                   	push   %edi
  282296:	56                   	push   %esi
  282297:	53                   	push   %ebx
  282298:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  28229b:	8b 45 08             	mov    0x8(%ebp),%eax
  28229e:	8b 00                	mov    (%eax),%eax
  2822a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2822a3:	8b 45 08             	mov    0x8(%ebp),%eax
  2822a6:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2822aa:	0f 88 80 00 00 00    	js     282330 <sheet_refresh_ob+0x9e>
  2822b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2822b7:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ba:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2822bd:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2822c1:	8b 02                	mov    (%edx),%eax
  2822c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  2822c6:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  2822ca:	7e 55                	jle    282321 <sheet_refresh_ob+0x8f>
  2822cc:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  2822d1:	89 f8                	mov    %edi,%eax
  2822d3:	03 42 10             	add    0x10(%edx),%eax
  2822d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  2822d9:	8b 4a 04             	mov    0x4(%edx),%ecx
  2822dc:	85 c9                	test   %ecx,%ecx
  2822de:	7e 39                	jle    282319 <sheet_refresh_ob+0x87>
  2822e0:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  2822e5:	0f af cf             	imul   %edi,%ecx
  2822e8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  2822eb:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2822ee:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  2822f2:	0f b6 cb             	movzbl %bl,%ecx
  2822f5:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2822f8:	74 15                	je     28230f <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  2822fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2822fd:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282300:	0f af 71 08          	imul   0x8(%ecx),%esi
  282304:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282307:	01 c1                	add    %eax,%ecx
  282309:	03 4a 0c             	add    0xc(%edx),%ecx
  28230c:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28230f:	83 c0 01             	add    $0x1,%eax
  282312:	8b 4a 04             	mov    0x4(%edx),%ecx
  282315:	39 c1                	cmp    %eax,%ecx
  282317:	7f cc                	jg     2822e5 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282319:	83 c7 01             	add    $0x1,%edi
  28231c:	39 7a 08             	cmp    %edi,0x8(%edx)
  28231f:	7f b0                	jg     2822d1 <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282321:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282325:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282328:	8b 7d 08             	mov    0x8(%ebp),%edi
  28232b:	39 47 10             	cmp    %eax,0x10(%edi)
  28232e:	7d 87                	jge    2822b7 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  282330:	83 c4 10             	add    $0x10,%esp
  282333:	5b                   	pop    %ebx
  282334:	5e                   	pop    %esi
  282335:	5f                   	pop    %edi
  282336:	5d                   	pop    %ebp
  282337:	c3                   	ret    

00282338 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282338:	55                   	push   %ebp
  282339:	89 e5                	mov    %esp,%ebp
  28233b:	57                   	push   %edi
  28233c:	56                   	push   %esi
  28233d:	53                   	push   %ebx
  28233e:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  282341:	8b 45 08             	mov    0x8(%ebp),%eax
  282344:	8b 00                	mov    (%eax),%eax
  282346:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282349:	8b 45 08             	mov    0x8(%ebp),%eax
  28234c:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  282350:	0f 88 a7 00 00 00    	js     2823fd <sheet_refreshsub1+0xc5>
  282356:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  28235d:	8b 45 08             	mov    0x8(%ebp),%eax
  282360:	8b 7d e0             	mov    -0x20(%ebp),%edi
  282363:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282367:	8b 01                	mov    (%ecx),%eax
  282369:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  28236c:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282370:	7e 78                	jle    2823ea <sheet_refreshsub1+0xb2>
  282372:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  282379:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  28237c:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  28237f:	8b 71 04             	mov    0x4(%ecx),%esi
  282382:	85 f6                	test   %esi,%esi
  282384:	7e 58                	jle    2823de <sheet_refreshsub1+0xa6>
  282386:	b8 00 00 00 00       	mov    $0x0,%eax
  28238b:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  28238e:	89 c2                	mov    %eax,%edx
  282390:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  282393:	3b 55 0c             	cmp    0xc(%ebp),%edx
  282396:	7c 3c                	jl     2823d4 <sheet_refreshsub1+0x9c>
  282398:	3b 55 14             	cmp    0x14(%ebp),%edx
  28239b:	7d 37                	jge    2823d4 <sheet_refreshsub1+0x9c>
  28239d:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2823a0:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2823a3:	7c 2f                	jl     2823d4 <sheet_refreshsub1+0x9c>
  2823a5:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2823a8:	7d 2a                	jge    2823d4 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2823aa:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2823ae:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2823b1:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2823b4:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2823b8:	89 f3                	mov    %esi,%ebx
  2823ba:	0f b6 fb             	movzbl %bl,%edi
  2823bd:	3b 79 14             	cmp    0x14(%ecx),%edi
  2823c0:	74 12                	je     2823d4 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2823c2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2823c5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2823c8:	0f af 7b 08          	imul   0x8(%ebx),%edi
  2823cc:	03 55 e4             	add    -0x1c(%ebp),%edx
  2823cf:	89 f3                	mov    %esi,%ebx
  2823d1:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  2823d4:	83 c0 01             	add    $0x1,%eax
  2823d7:	8b 71 04             	mov    0x4(%ecx),%esi
  2823da:	39 c6                	cmp    %eax,%esi
  2823dc:	7f b0                	jg     28238e <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  2823de:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  2823e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2823e5:	39 41 08             	cmp    %eax,0x8(%ecx)
  2823e8:	7f 8f                	jg     282379 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2823ea:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  2823ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
  2823f1:	8b 7d 08             	mov    0x8(%ebp),%edi
  2823f4:	39 47 10             	cmp    %eax,0x10(%edi)
  2823f7:	0f 8d 60 ff ff ff    	jge    28235d <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  2823fd:	83 c4 14             	add    $0x14,%esp
  282400:	5b                   	pop    %ebx
  282401:	5e                   	pop    %esi
  282402:	5f                   	pop    %edi
  282403:	5d                   	pop    %ebp
  282404:	c3                   	ret    

00282405 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282405:	55                   	push   %ebp
  282406:	89 e5                	mov    %esp,%ebp
  282408:	57                   	push   %edi
  282409:	56                   	push   %esi
  28240a:	53                   	push   %ebx
  28240b:	83 ec 30             	sub    $0x30,%esp
  28240e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  282411:	8b 55 10             	mov    0x10(%ebp),%edx
  282414:	8b 75 14             	mov    0x14(%ebp),%esi
  282417:	8b 7d 18             	mov    0x18(%ebp),%edi
  28241a:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  28241d:	8b 45 08             	mov    0x8(%ebp),%eax
  282420:	8b 00                	mov    (%eax),%eax
  282422:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  282425:	8b 45 08             	mov    0x8(%ebp),%eax
  282428:	8b 40 04             	mov    0x4(%eax),%eax
  28242b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28242e:	b8 00 00 00 00       	mov    $0x0,%eax
  282433:	85 c9                	test   %ecx,%ecx
  282435:	0f 48 c8             	cmovs  %eax,%ecx
  282438:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  28243b:	85 d2                	test   %edx,%edx
  28243d:	0f 48 d0             	cmovs  %eax,%edx
  282440:	89 55 d0             	mov    %edx,-0x30(%ebp)
	struct SHEET *sht;
	
	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  282443:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282446:	8b 51 08             	mov    0x8(%ecx),%edx
  282449:	39 f2                	cmp    %esi,%edx
  28244b:	0f 4e f2             	cmovle %edx,%esi
  28244e:	89 75 d4             	mov    %esi,-0x2c(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  282451:	8b 51 0c             	mov    0xc(%ecx),%edx
  282454:	39 fa                	cmp    %edi,%edx
  282456:	0f 4e fa             	cmovle %edx,%edi
  282459:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28245c:	85 db                	test   %ebx,%ebx
  28245e:	0f 49 c3             	cmovns %ebx,%eax
  282461:	89 45 d8             	mov    %eax,-0x28(%ebp)
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282464:	39 41 10             	cmp    %eax,0x10(%ecx)
  282467:	0f 8c b3 00 00 00    	jl     282520 <sheet_refreshsub2+0x11b>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  28246d:	8b 45 08             	mov    0x8(%ebp),%eax
  282470:	8b 7d d8             	mov    -0x28(%ebp),%edi
  282473:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282477:	8b 01                	mov    (%ecx),%eax
  282479:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  28247c:	8b 41 0c             	mov    0xc(%ecx),%eax
		by0 = vy0 - sht->vy0;
  28247f:	8b 71 10             	mov    0x10(%ecx),%esi
		bx1 = vx1 - sht->vx0;
  282482:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  282485:	29 c2                	sub    %eax,%edx
		by1 = vy1 - sht->vy0;
  282487:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  28248a:	29 f3                	sub    %esi,%ebx
  28248c:	8b 7d c8             	mov    -0x38(%ebp),%edi
  28248f:	29 c7                	sub    %eax,%edi
  282491:	89 f8                	mov    %edi,%eax
  282493:	bf 00 00 00 00       	mov    $0x0,%edi
  282498:	0f 48 c7             	cmovs  %edi,%eax
  28249b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  28249e:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2824a1:	29 f0                	sub    %esi,%eax
  2824a3:	0f 49 f8             	cmovns %eax,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2824a6:	8b 41 04             	mov    0x4(%ecx),%eax
  2824a9:	39 c2                	cmp    %eax,%edx
  2824ab:	0f 4e c2             	cmovle %edx,%eax
  2824ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2824b1:	8b 41 08             	mov    0x8(%ecx),%eax
  2824b4:	39 c3                	cmp    %eax,%ebx
  2824b6:	0f 4e c3             	cmovle %ebx,%eax
  2824b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		for(by=by0;by<by1;by++)
  2824bc:	39 f8                	cmp    %edi,%eax
  2824be:	7e 4d                	jle    28250d <sheet_refreshsub2+0x108>
		{
			vy = sht->vy0+by;
  2824c0:	89 f8                	mov    %edi,%eax
  2824c2:	03 41 10             	add    0x10(%ecx),%eax
  2824c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			for(bx=bx0;bx<bx1;bx++)
  2824c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2824cb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2824ce:	7e 35                	jle    282505 <sheet_refreshsub2+0x100>
			{
				vx = sht->vx0+bx;
				c  = buf[by*sht->bxsize+bx];
  2824d0:	89 fa                	mov    %edi,%edx
  2824d2:	0f af 51 04          	imul   0x4(%ecx),%edx
  2824d6:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2824d9:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2824dc:	0f b6 1c 13          	movzbl (%ebx,%edx,1),%ebx
				if(c!=sht->col_inv)
  2824e0:	0f b6 d3             	movzbl %bl,%edx
  2824e3:	3b 51 14             	cmp    0x14(%ecx),%edx
  2824e6:	74 15                	je     2824fd <sheet_refreshsub2+0xf8>
					map[vy*ctl->xsize+vx] = c;
  2824e8:	8b 55 08             	mov    0x8(%ebp),%edx
  2824eb:	8b 75 e8             	mov    -0x18(%ebp),%esi
  2824ee:	0f af 72 08          	imul   0x8(%edx),%esi
  2824f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2824f5:	01 c2                	add    %eax,%edx
  2824f7:	03 51 0c             	add    0xc(%ecx),%edx
  2824fa:	88 1c 32             	mov    %bl,(%edx,%esi,1)
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
		{
			vy = sht->vy0+by;
			for(bx=bx0;bx<bx1;bx++)
  2824fd:	83 c0 01             	add    $0x1,%eax
  282500:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282503:	75 cb                	jne    2824d0 <sheet_refreshsub2+0xcb>

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
  282505:	83 c7 01             	add    $0x1,%edi
  282508:	39 7d e0             	cmp    %edi,-0x20(%ebp)
  28250b:	75 b3                	jne    2824c0 <sheet_refreshsub2+0xbb>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  28250d:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
  282511:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282514:	8b 7d 08             	mov    0x8(%ebp),%edi
  282517:	39 47 10             	cmp    %eax,0x10(%edi)
  28251a:	0f 8d 4d ff ff ff    	jge    28246d <sheet_refreshsub2+0x68>
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  282520:	8b 7d d0             	mov    -0x30(%ebp),%edi
  282523:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  282526:	7f 2a                	jg     282552 <sheet_refreshsub2+0x14d>
  282528:	eb 40                	jmp    28256a <sheet_refreshsub2+0x165>
  28252a:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		for(vx=vx0;vx<vx1;vx++)
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  28252d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282530:	0f af 47 08          	imul   0x8(%edi),%eax
  282534:	01 d0                	add    %edx,%eax
  282536:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  28253a:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
		for(vx=vx0;vx<vx1;vx++)
  28253d:	83 c2 01             	add    $0x1,%edx
  282540:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
  282543:	75 e8                	jne    28252d <sheet_refreshsub2+0x128>
  282545:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  282548:	83 c1 01             	add    $0x1,%ecx
  28254b:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28254e:	74 1a                	je     28256a <sheet_refreshsub2+0x165>
  282550:	eb 0c                	jmp    28255e <sheet_refreshsub2+0x159>
  282552:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  282555:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  282558:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  28255b:	8b 7d 08             	mov    0x8(%ebp),%edi
		for(vx=vx0;vx<vx1;vx++)
  28255e:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282561:	89 c2                	mov    %eax,%edx
  282563:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
  282566:	7f c2                	jg     28252a <sheet_refreshsub2+0x125>
  282568:	eb de                	jmp    282548 <sheet_refreshsub2+0x143>
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
}
  28256a:	83 c4 30             	add    $0x30,%esp
  28256d:	5b                   	pop    %ebx
  28256e:	5e                   	pop    %esi
  28256f:	5f                   	pop    %edi
  282570:	5d                   	pop    %ebp
  282571:	c3                   	ret    

00282572 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  282572:	55                   	push   %ebp
  282573:	89 e5                	mov    %esp,%ebp
  282575:	53                   	push   %ebx
  282576:	8b 45 08             	mov    0x8(%ebp),%eax
	if(sht->height >= 0)
  282579:	8b 58 18             	mov    0x18(%eax),%ebx
  28257c:	85 db                	test   %ebx,%ebx
  28257e:	78 26                	js     2825a6 <sheet_refresh+0x34>
	{
		struct SHTCTL *ctl = sht->ctl;
		sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  282580:	8b 48 10             	mov    0x10(%eax),%ecx
  282583:	8b 50 0c             	mov    0xc(%eax),%edx
  282586:	53                   	push   %ebx
  282587:	89 cb                	mov    %ecx,%ebx
  282589:	03 5d 18             	add    0x18(%ebp),%ebx
  28258c:	53                   	push   %ebx
  28258d:	89 d3                	mov    %edx,%ebx
  28258f:	03 5d 14             	add    0x14(%ebp),%ebx
  282592:	53                   	push   %ebx
  282593:	03 4d 10             	add    0x10(%ebp),%ecx
  282596:	51                   	push   %ecx
  282597:	03 55 0c             	add    0xc(%ebp),%edx
  28259a:	52                   	push   %edx
  28259b:	ff 70 20             	pushl  0x20(%eax)
  28259e:	e8 62 fe ff ff       	call   282405 <sheet_refreshsub2>
  2825a3:	83 c4 18             	add    $0x18,%esp
	}
	return;
}
  2825a6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2825a9:	c9                   	leave  
  2825aa:	c3                   	ret    

002825ab <sheet_updown>:
	return;
}

//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  2825ab:	55                   	push   %ebp
  2825ac:	89 e5                	mov    %esp,%ebp
  2825ae:	57                   	push   %edi
  2825af:	56                   	push   %esi
  2825b0:	53                   	push   %ebx
  2825b1:	8b 75 08             	mov    0x8(%ebp),%esi
  2825b4:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  2825b7:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  2825ba:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  2825bd:	8b 79 10             	mov    0x10(%ecx),%edi
  2825c0:	8d 57 01             	lea    0x1(%edi),%edx
  2825c3:	39 da                	cmp    %ebx,%edx
  2825c5:	0f 4f d3             	cmovg  %ebx,%edx
  2825c8:	85 d2                	test   %edx,%edx
  2825ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  2825cf:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  2825d2:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  2825d5:	39 d8                	cmp    %ebx,%eax
  2825d7:	7e 59                	jle    282632 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  2825d9:	85 db                	test   %ebx,%ebx
  2825db:	79 09                	jns    2825e6 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  2825dd:	8b 59 10             	mov    0x10(%ecx),%ebx
  2825e0:	39 d8                	cmp    %ebx,%eax
  2825e2:	7c 1c                	jl     282600 <sheet_updown+0x55>
  2825e4:	eb 31                	jmp    282617 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  2825e6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2825e9:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  2825ed:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  2825f1:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  2825f4:	89 d0                	mov    %edx,%eax
  2825f6:	39 d3                	cmp    %edx,%ebx
  2825f8:	75 ec                	jne    2825e6 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  2825fa:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  2825fe:	eb 1d                	jmp    28261d <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282600:	8d 50 01             	lea    0x1(%eax),%edx
  282603:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282607:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28260b:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28260e:	8b 59 10             	mov    0x10(%ecx),%ebx
  282611:	89 d0                	mov    %edx,%eax
  282613:	39 d3                	cmp    %edx,%ebx
  282615:	7f e9                	jg     282600 <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282617:	83 eb 01             	sub    $0x1,%ebx
  28261a:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28261d:	ff 76 08             	pushl  0x8(%esi)
  282620:	ff 76 04             	pushl  0x4(%esi)
  282623:	6a 00                	push   $0x0
  282625:	6a 00                	push   $0x0
  282627:	56                   	push   %esi
  282628:	e8 45 ff ff ff       	call   282572 <sheet_refresh>
  28262d:	83 c4 14             	add    $0x14,%esp
  282630:	eb 5a                	jmp    28268c <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282632:	39 d8                	cmp    %ebx,%eax
  282634:	7d 56                	jge    28268c <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282636:	85 c0                	test   %eax,%eax
  282638:	78 1a                	js     282654 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28263a:	8d 50 01             	lea    0x1(%eax),%edx
  28263d:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282641:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282645:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  282648:	89 d0                	mov    %edx,%eax
  28264a:	39 d3                	cmp    %edx,%ebx
  28264c:	75 ec                	jne    28263a <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  28264e:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282652:	eb 25                	jmp    282679 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  282654:	8b 41 10             	mov    0x10(%ecx),%eax
  282657:	8d 50 01             	lea    0x1(%eax),%edx
  28265a:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  28265d:	39 d3                	cmp    %edx,%ebx
  28265f:	7d 14                	jge    282675 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282661:	8d 42 ff             	lea    -0x1(%edx),%eax
  282664:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  282668:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  28266c:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  28266f:	89 c2                	mov    %eax,%edx
  282671:	39 c3                	cmp    %eax,%ebx
  282673:	75 ec                	jne    282661 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  282675:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  282679:	ff 76 08             	pushl  0x8(%esi)
  28267c:	ff 76 04             	pushl  0x4(%esi)
  28267f:	6a 00                	push   $0x0
  282681:	6a 00                	push   $0x0
  282683:	56                   	push   %esi
  282684:	e8 e9 fe ff ff       	call   282572 <sheet_refresh>
  282689:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  28268c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28268f:	5b                   	pop    %ebx
  282690:	5e                   	pop    %esi
  282691:	5f                   	pop    %edi
  282692:	5d                   	pop    %ebp
  282693:	c3                   	ret    

00282694 <sheet_slide>:
	}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  282694:	55                   	push   %ebp
  282695:	89 e5                	mov    %esp,%ebp
  282697:	57                   	push   %edi
  282698:	56                   	push   %esi
  282699:	53                   	push   %ebx
  28269a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28269d:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  2826a0:	8b 43 0c             	mov    0xc(%ebx),%eax
  2826a3:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  2826a6:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2826a9:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  2826ac:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  2826af:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  2826b3:	78 36                	js     2826eb <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  2826b5:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  2826b8:	6a 00                	push   $0x0
  2826ba:	89 d1                	mov    %edx,%ecx
  2826bc:	03 4b 08             	add    0x8(%ebx),%ecx
  2826bf:	51                   	push   %ecx
  2826c0:	89 c1                	mov    %eax,%ecx
  2826c2:	03 4b 04             	add    0x4(%ebx),%ecx
  2826c5:	51                   	push   %ecx
  2826c6:	52                   	push   %edx
  2826c7:	50                   	push   %eax
  2826c8:	57                   	push   %edi
  2826c9:	e8 37 fd ff ff       	call   282405 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  2826ce:	ff 73 18             	pushl  0x18(%ebx)
  2826d1:	89 f0                	mov    %esi,%eax
  2826d3:	03 43 08             	add    0x8(%ebx),%eax
  2826d6:	50                   	push   %eax
  2826d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  2826da:	03 43 04             	add    0x4(%ebx),%eax
  2826dd:	50                   	push   %eax
  2826de:	56                   	push   %esi
  2826df:	ff 75 0c             	pushl  0xc(%ebp)
  2826e2:	57                   	push   %edi
  2826e3:	e8 1d fd ff ff       	call   282405 <sheet_refreshsub2>
  2826e8:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  2826eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2826ee:	5b                   	pop    %ebx
  2826ef:	5e                   	pop    %esi
  2826f0:	5f                   	pop    %edi
  2826f1:	5d                   	pop    %ebp
  2826f2:	c3                   	ret    

002826f3 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  2826f3:	55                   	push   %ebp
  2826f4:	89 e5                	mov    %esp,%ebp
  2826f6:	53                   	push   %ebx
  2826f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  2826fa:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  2826fe:	78 0b                	js     28270b <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282700:	6a ff                	push   $0xffffffff
  282702:	53                   	push   %ebx
  282703:	e8 a3 fe ff ff       	call   2825ab <sheet_updown>
  282708:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  28270b:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282712:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282715:	c9                   	leave  
  282716:	c3                   	ret    

00282717 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282717:	55                   	push   %ebp
  282718:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  28271a:	83 3d 70 66 28 00 00 	cmpl   $0x0,0x286670
  282721:	74 11                	je     282734 <timer_alloc+0x1d>
  282723:	ba 84 66 28 00       	mov    $0x286684,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282728:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  28272d:	83 3a 00             	cmpl   $0x0,(%edx)
  282730:	75 25                	jne    282757 <timer_alloc+0x40>
  282732:	eb 05                	jmp    282739 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282734:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282739:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282740:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282743:	c7 04 8d 70 66 28 00 	movl   $0x1,0x286670(,%ecx,4)
  28274a:	01 00 00 00 
			return &timerctl.timers0[i];
  28274e:	8d 04 8d 68 66 28 00 	lea    0x286668(,%ecx,4),%eax
  282755:	eb 12                	jmp    282769 <timer_alloc+0x52>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282757:	83 c0 01             	add    $0x1,%eax
  28275a:	83 c2 14             	add    $0x14,%edx
  28275d:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282762:	75 c9                	jne    28272d <timer_alloc+0x16>
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282764:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282769:	5d                   	pop    %ebp
  28276a:	c3                   	ret    

0028276b <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  28276b:	55                   	push   %ebp
  28276c:	89 e5                	mov    %esp,%ebp
  28276e:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282771:	6a 34                	push   $0x34
  282773:	6a 43                	push   $0x43
  282775:	e8 bc e3 ff ff       	call   280b36 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  28277a:	83 c4 08             	add    $0x8,%esp
  28277d:	68 9c 00 00 00       	push   $0x9c
  282782:	6a 40                	push   $0x40
  282784:	e8 ad e3 ff ff       	call   280b36 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282789:	83 c4 08             	add    $0x8,%esp
  28278c:	6a 2e                	push   $0x2e
  28278e:	6a 40                	push   $0x40
  282790:	e8 a1 e3 ff ff       	call   280b36 <io_out8>
  282795:	b8 70 66 28 00       	mov    $0x286670,%eax
  28279a:	ba 80 8d 28 00       	mov    $0x288d80,%edx
  28279f:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  2827a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  2827a8:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  2827ab:	39 d0                	cmp    %edx,%eax
  2827ad:	75 f3                	jne    2827a2 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  2827af:	e8 63 ff ff ff       	call   282717 <timer_alloc>
	t->next = 0;
  2827b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  2827ba:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  2827c1:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
	timerctl.t0 = t;
  2827c8:	a3 78 8d 28 00       	mov    %eax,0x288d78
	timerctl.next = 0xffffffff;
  2827cd:	c7 05 64 66 28 00 ff 	movl   $0xffffffff,0x286664
  2827d4:	ff ff ff 
	return;
}
  2827d7:	c9                   	leave  
  2827d8:	c3                   	ret    

002827d9 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  2827d9:	55                   	push   %ebp
  2827da:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  2827dc:	8b 45 08             	mov    0x8(%ebp),%eax
  2827df:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	return;
}
  2827e6:	5d                   	pop    %ebp
  2827e7:	c3                   	ret    

002827e8 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,unsigned char data)
{
  2827e8:	55                   	push   %ebp
  2827e9:	89 e5                	mov    %esp,%ebp
  2827eb:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  2827ee:	8b 55 0c             	mov    0xc(%ebp),%edx
  2827f1:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  2827f4:	8b 55 10             	mov    0x10(%ebp),%edx
  2827f7:	88 50 10             	mov    %dl,0x10(%eax)
	return ;
}
  2827fa:	5d                   	pop    %ebp
  2827fb:	c3                   	ret    

002827fc <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  2827fc:	55                   	push   %ebp
  2827fd:	89 e5                	mov    %esp,%ebp
  2827ff:	57                   	push   %edi
  282800:	56                   	push   %esi
  282801:	53                   	push   %ebx
  282802:	83 ec 0c             	sub    $0xc,%esp
  282805:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282808:	a1 60 66 28 00       	mov    0x286660,%eax
  28280d:	03 45 0c             	add    0xc(%ebp),%eax
  282810:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282813:	c7 43 08 02 00 00 00 	movl   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  28281a:	e8 36 e3 ff ff       	call   280b55 <io_load_eflags>
  28281f:	89 c6                	mov    %eax,%esi
	io_cli();
  282821:	e8 dc e2 ff ff       	call   280b02 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282826:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282829:	8b 3d 78 8d 28 00    	mov    0x288d78,%edi
  28282f:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282832:	77 1e                	ja     282852 <timer_settime+0x56>
	{
		timer->next = timerctl.t0;
  282834:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282836:	89 1d 78 8d 28 00    	mov    %ebx,0x288d78
		timerctl.next = timer->timeout;
  28283c:	8b 43 04             	mov    0x4(%ebx),%eax
  28283f:	a3 64 66 28 00       	mov    %eax,0x286664
		io_store_eflags(e);
  282844:	83 ec 0c             	sub    $0xc,%esp
  282847:	56                   	push   %esi
  282848:	e8 0b e3 ff ff       	call   280b58 <io_store_eflags>
		return;
  28284d:	83 c4 10             	add    $0x10,%esp
  282850:	eb 3e                	jmp    282890 <timer_settime+0x94>
	}
	t = timerctl.t0->next;
  282852:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282854:	85 d2                	test   %edx,%edx
  282856:	74 2c                	je     282884 <timer_settime+0x88>
	{
		if(timer->timeout<=t->timeout)
  282858:	3b 4a 04             	cmp    0x4(%edx),%ecx
  28285b:	77 21                	ja     28287e <timer_settime+0x82>
  28285d:	eb 07                	jmp    282866 <timer_settime+0x6a>
  28285f:	3b 48 04             	cmp    0x4(%eax),%ecx
  282862:	77 18                	ja     28287c <timer_settime+0x80>
  282864:	eb 04                	jmp    28286a <timer_settime+0x6e>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282866:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282868:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  28286a:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  28286c:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  28286e:	83 ec 0c             	sub    $0xc,%esp
  282871:	56                   	push   %esi
  282872:	e8 e1 e2 ff ff       	call   280b58 <io_store_eflags>
			return;
  282877:	83 c4 10             	add    $0x10,%esp
  28287a:	eb 14                	jmp    282890 <timer_settime+0x94>
		}
		s = t;
		t = t->next;
  28287c:	89 c2                	mov    %eax,%edx
  28287e:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282880:	85 c0                	test   %eax,%eax
  282882:	75 db                	jne    28285f <timer_settime+0x63>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282884:	83 ec 0c             	sub    $0xc,%esp
  282887:	56                   	push   %esi
  282888:	e8 cb e2 ff ff       	call   280b58 <io_store_eflags>
	return;
  28288d:	83 c4 10             	add    $0x10,%esp
}
  282890:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282893:	5b                   	pop    %ebx
  282894:	5e                   	pop    %esi
  282895:	5f                   	pop    %edi
  282896:	5d                   	pop    %ebp
  282897:	c3                   	ret    

00282898 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282898:	55                   	push   %ebp
  282899:	89 e5                	mov    %esp,%ebp
  28289b:	56                   	push   %esi
  28289c:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  28289d:	83 ec 08             	sub    $0x8,%esp
  2828a0:	6a 60                	push   $0x60
  2828a2:	6a 20                	push   $0x20
  2828a4:	e8 8d e2 ff ff       	call   280b36 <io_out8>
	timerctl.count ++;
  2828a9:	a1 60 66 28 00       	mov    0x286660,%eax
  2828ae:	8d 50 01             	lea    0x1(%eax),%edx
  2828b1:	89 15 60 66 28 00    	mov    %edx,0x286660
	
	if(timerctl.count >= timerctl.next)
  2828b7:	83 c4 10             	add    $0x10,%esp
  2828ba:	3b 15 64 66 28 00    	cmp    0x286664,%edx
  2828c0:	72 6e                	jb     282930 <inthandler20+0x98>
	{
		struct TIMER *t = timerctl.t0;
  2828c2:	8b 1d 78 8d 28 00    	mov    0x288d78,%ebx
		while(t)
  2828c8:	85 db                	test   %ebx,%ebx
  2828ca:	75 4b                	jne    282917 <inthandler20+0x7f>
  2828cc:	eb 62                	jmp    282930 <inthandler20+0x98>
		{
			if(t->timeout <= timerctl.count)
  2828ce:	8b 43 04             	mov    0x4(%ebx),%eax
  2828d1:	3b 05 60 66 28 00    	cmp    0x286660,%eax
  2828d7:	77 31                	ja     28290a <inthandler20+0x72>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  2828d9:	c7 43 08 01 00 00 00 	movl   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  2828e0:	39 1d 80 8d 28 00    	cmp    %ebx,0x288d80
  2828e6:	74 15                	je     2828fd <inthandler20+0x65>
  2828e8:	83 ec 08             	sub    $0x8,%esp
  2828eb:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  2828ef:	50                   	push   %eax
  2828f0:	ff 73 0c             	pushl  0xc(%ebx)
  2828f3:	e8 a1 f0 ff ff       	call   281999 <fifo32_put>
  2828f8:	83 c4 10             	add    $0x10,%esp
  2828fb:	eb 05                	jmp    282902 <inthandler20+0x6a>
				else ts=1;
  2828fd:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282902:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282904:	85 db                	test   %ebx,%ebx
  282906:	75 c6                	jne    2828ce <inthandler20+0x36>
  282908:	eb 1b                	jmp    282925 <inthandler20+0x8d>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  28290a:	a3 64 66 28 00       	mov    %eax,0x286664
				timerctl.t0 = t;
  28290f:	89 1d 78 8d 28 00    	mov    %ebx,0x288d78
				break;
  282915:	eb 0e                	jmp    282925 <inthandler20+0x8d>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282917:	8b 43 04             	mov    0x4(%ebx),%eax
  28291a:	be 00 00 00 00       	mov    $0x0,%esi
  28291f:	39 c2                	cmp    %eax,%edx
  282921:	73 b6                	jae    2828d9 <inthandler20+0x41>
  282923:	eb e5                	jmp    28290a <inthandler20+0x72>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282925:	89 f0                	mov    %esi,%eax
  282927:	84 c0                	test   %al,%al
  282929:	74 05                	je     282930 <inthandler20+0x98>
  28292b:	e8 f6 03 00 00       	call   282d26 <task_switch>
	return;
}
  282930:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282933:	5b                   	pop    %ebx
  282934:	5e                   	pop    %esi
  282935:	5d                   	pop    %ebp
  282936:	c3                   	ret    
  282937:	66 90                	xchg   %ax,%ax
  282939:	66 90                	xchg   %ax,%ax
  28293b:	66 90                	xchg   %ax,%ax
  28293d:	66 90                	xchg   %ax,%ax
  28293f:	90                   	nop

00282940 <load_tr>:
  282940:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282945:	c3                   	ret    

00282946 <farjmp>:
  282946:	ff 6c 24 04          	ljmp   *0x4(%esp)
  28294a:	c3                   	ret    

0028294b <farcall>:
  28294b:	ff 5c 24 04          	lcall  *0x4(%esp)
  28294f:	c3                   	ret    

00282950 <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282950:	55                   	push   %ebp
  282951:	89 e5                	mov    %esp,%ebp
  282953:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282956:	e8 a5 e1 ff ff       	call   280b00 <io_hlt>
  28295b:	eb f9                	jmp    282956 <task_idle+0x6>

0028295d <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  28295d:	55                   	push   %ebp
  28295e:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282960:	8b 0d 7c 8d 28 00    	mov    0x288d7c,%ecx
  282966:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  28296d:	74 16                	je     282985 <task_alloc+0x28>
  28296f:	8d 91 90 10 00 00    	lea    0x1090(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282975:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  28297a:	83 3a 00             	cmpl   $0x0,(%edx)
  28297d:	0f 85 af 00 00 00    	jne    282a32 <task_alloc+0xd5>
  282983:	eb 05                	jmp    28298a <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282985:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  28298a:	69 c0 94 00 00 00    	imul   $0x94,%eax,%eax
			task->flags = 1;
  282990:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282993:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  28299a:	00 00 00 
			task->tss.eflags = 0x202;
  28299d:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  2829a4:	02 00 00 
			task->tss.eax = 0;
  2829a7:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  2829ae:	00 00 00 
			task->tss.ecx = 0;
  2829b1:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  2829b8:	00 00 00 
			task->tss.edx = 0;
  2829bb:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  2829c2:	00 00 00 
			task->tss.ebx = 0;
  2829c5:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  2829cc:	00 00 00 
			task->tss.ebp = 0;
  2829cf:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  2829d6:	00 00 00 
			task->tss.esi = 0;
  2829d9:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  2829e0:	00 00 00 
			task->tss.edi = 0;
  2829e3:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  2829ea:	00 00 00 
			task->tss.es  = 0;
  2829ed:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  2829f4:	00 00 00 
			task->tss.ds  = 0;
  2829f7:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  2829fe:	00 00 00 
			task->tss.fs  = 0;
  282a01:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282a08:	00 00 00 
			task->tss.gs  = 0;
  282a0b:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282a12:	00 00 00 
			task->tss.ldtr= 0;
  282a15:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282a1c:	00 00 00 
			task->tss.iomap = 0x40000000;
  282a1f:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282a26:	00 00 40 
			return task;
  282a29:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282a30:	eb 19                	jmp    282a4b <task_alloc+0xee>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282a32:	83 c0 01             	add    $0x1,%eax
  282a35:	81 c2 94 00 00 00    	add    $0x94,%edx
  282a3b:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282a40:	0f 85 34 ff ff ff    	jne    28297a <task_alloc+0x1d>
			task->tss.ldtr= 0;
			task->tss.iomap = 0x40000000;
			return task;
		}
	}
	return 0;
  282a46:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282a4b:	5d                   	pop    %ebp
  282a4c:	c3                   	ret    

00282a4d <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282a4d:	55                   	push   %ebp
  282a4e:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282a50:	8b 15 7c 8d 28 00    	mov    0x288d7c,%edx
  282a56:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282a58:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282a5e:	6b c0 66             	imul   $0x66,%eax,%eax
  282a61:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282a65:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282a69:	5d                   	pop    %ebp
  282a6a:	c3                   	ret    

00282a6b <task_add>:

void task_add(struct TASK *task)
{
  282a6b:	55                   	push   %ebp
  282a6c:	89 e5                	mov    %esp,%ebp
  282a6e:	56                   	push   %esi
  282a6f:	53                   	push   %ebx
  282a70:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282a73:	8b 35 7c 8d 28 00    	mov    0x288d7c,%esi
  282a79:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282a7c:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282a82:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282a84:	8b 50 08             	mov    0x8(%eax),%edx
  282a87:	83 fa 64             	cmp    $0x64,%edx
  282a8a:	74 14                	je     282aa0 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282a8c:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282a8f:	01 ca                	add    %ecx,%edx
  282a91:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282a95:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282a99:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282aa0:	5b                   	pop    %ebx
  282aa1:	5e                   	pop    %esi
  282aa2:	5d                   	pop    %ebp
  282aa3:	c3                   	ret    

00282aa4 <task_remove>:

void task_remove(struct TASK *task)
{
  282aa4:	55                   	push   %ebp
  282aa5:	89 e5                	mov    %esp,%ebp
  282aa7:	57                   	push   %edi
  282aa8:	56                   	push   %esi
  282aa9:	53                   	push   %ebx
  282aaa:	83 ec 04             	sub    $0x4,%esp
  282aad:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282ab0:	8b 3d 7c 8d 28 00    	mov    0x288d7c,%edi
  282ab6:	8b 43 08             	mov    0x8(%ebx),%eax
  282ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282abc:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282ac2:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282ac4:	8b 4a 08             	mov    0x8(%edx),%ecx
  282ac7:	85 c9                	test   %ecx,%ecx
  282ac9:	7e 1d                	jle    282ae8 <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282acb:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282ace:	74 1f                	je     282aef <task_remove+0x4b>
  282ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  282ad5:	eb 06                	jmp    282add <task_remove+0x39>
  282ad7:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282adb:	74 17                	je     282af4 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282add:	83 c0 01             	add    $0x1,%eax
  282ae0:	39 c8                	cmp    %ecx,%eax
  282ae2:	75 f3                	jne    282ad7 <task_remove+0x33>
  282ae4:	89 c8                	mov    %ecx,%eax
  282ae6:	eb 0c                	jmp    282af4 <task_remove+0x50>
  282ae8:	b8 00 00 00 00       	mov    $0x0,%eax
  282aed:	eb 05                	jmp    282af4 <task_remove+0x50>
  282aef:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282af4:	83 e9 01             	sub    $0x1,%ecx
  282af7:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282afa:	8b 72 0c             	mov    0xc(%edx),%esi
  282afd:	39 c6                	cmp    %eax,%esi
  282aff:	7e 06                	jle    282b07 <task_remove+0x63>
	{
		tl->now--;
  282b01:	83 ee 01             	sub    $0x1,%esi
  282b04:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282b07:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282b0a:	7f 07                	jg     282b13 <task_remove+0x6f>
	{
		tl->now = 0;
  282b0c:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282b13:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282b1a:	39 42 08             	cmp    %eax,0x8(%edx)
  282b1d:	7e 1b                	jle    282b3a <task_remove+0x96>
  282b1f:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282b23:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282b27:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282b2a:	83 c0 01             	add    $0x1,%eax
  282b2d:	8b 19                	mov    (%ecx),%ebx
  282b2f:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282b32:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282b35:	39 42 08             	cmp    %eax,0x8(%edx)
  282b38:	7f f0                	jg     282b2a <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282b3a:	83 c4 04             	add    $0x4,%esp
  282b3d:	5b                   	pop    %ebx
  282b3e:	5e                   	pop    %esi
  282b3f:	5f                   	pop    %edi
  282b40:	5d                   	pop    %ebp
  282b41:	c3                   	ret    

00282b42 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282b42:	55                   	push   %ebp
  282b43:	89 e5                	mov    %esp,%ebp
  282b45:	56                   	push   %esi
  282b46:	53                   	push   %ebx
  282b47:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282b4a:	8b 75 0c             	mov    0xc(%ebp),%esi
  282b4d:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282b50:	85 f6                	test   %esi,%esi
  282b52:	79 03                	jns    282b57 <task_run+0x15>
  282b54:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282b57:	85 c0                	test   %eax,%eax
  282b59:	7e 03                	jle    282b5e <task_run+0x1c>
  282b5b:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282b5e:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282b62:	75 14                	jne    282b78 <task_run+0x36>
  282b64:	3b 73 08             	cmp    0x8(%ebx),%esi
  282b67:	74 1b                	je     282b84 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282b69:	53                   	push   %ebx
  282b6a:	e8 35 ff ff ff       	call   282aa4 <task_remove>
	}
	if(task->flags != 2)
  282b6f:	83 c4 04             	add    $0x4,%esp
  282b72:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282b76:	74 0c                	je     282b84 <task_run+0x42>
	{
		task->level = level;
  282b78:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282b7b:	53                   	push   %ebx
  282b7c:	e8 ea fe ff ff       	call   282a6b <task_add>
  282b81:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282b84:	a1 7c 8d 28 00       	mov    0x288d7c,%eax
  282b89:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282b8d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282b90:	5b                   	pop    %ebx
  282b91:	5e                   	pop    %esi
  282b92:	5d                   	pop    %ebp
  282b93:	c3                   	ret    

00282b94 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282b94:	55                   	push   %ebp
  282b95:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282b97:	8b 0d 7c 8d 28 00    	mov    0x288d7c,%ecx
  282b9d:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282ba1:	7f 20                	jg     282bc3 <task_switchsub+0x2f>
  282ba3:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282ba9:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282bae:	83 3a 00             	cmpl   $0x0,(%edx)
  282bb1:	7f 15                	jg     282bc8 <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282bb3:	83 c0 01             	add    $0x1,%eax
  282bb6:	81 c2 98 01 00 00    	add    $0x198,%edx
  282bbc:	83 f8 0a             	cmp    $0xa,%eax
  282bbf:	75 ed                	jne    282bae <task_switchsub+0x1a>
  282bc1:	eb 05                	jmp    282bc8 <task_switchsub+0x34>
  282bc3:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282bc8:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282bca:	a1 7c 8d 28 00       	mov    0x288d7c,%eax
  282bcf:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282bd3:	5d                   	pop    %ebp
  282bd4:	c3                   	ret    

00282bd5 <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  282bd5:	55                   	push   %ebp
  282bd6:	89 e5                	mov    %esp,%ebp
  282bd8:	57                   	push   %edi
  282bd9:	56                   	push   %esi
  282bda:	53                   	push   %ebx
  282bdb:	83 ec 14             	sub    $0x14,%esp
  282bde:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  282be1:	68 18 52 02 00       	push   $0x25218
  282be6:	57                   	push   %edi
  282be7:	e8 31 f5 ff ff       	call   28211d <memman_alloc_4k>
  282bec:	a3 7c 8d 28 00       	mov    %eax,0x288d7c
  282bf1:	83 c4 10             	add    $0x10,%esp
  282bf4:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  282bf9:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  282bfe:	8b 15 7c 8d 28 00    	mov    0x288d7c,%edx
  282c04:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
  282c0a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282c0d:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  282c14:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  282c17:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  282c1d:	68 89 00 00 00       	push   $0x89
  282c22:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  282c29:	50                   	push   %eax
  282c2a:	6a 67                	push   $0x67
  282c2c:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  282c32:	50                   	push   %eax
  282c33:	e8 ef e6 ff ff       	call   281327 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  282c38:	83 c3 01             	add    $0x1,%ebx
  282c3b:	83 c6 08             	add    $0x8,%esi
  282c3e:	83 c4 10             	add    $0x10,%esp
  282c41:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  282c47:	75 b5                	jne    282bfe <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  282c49:	8b 15 7c 8d 28 00    	mov    0x288d7c,%edx
  282c4f:	8d 42 08             	lea    0x8(%edx),%eax
  282c52:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  282c58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  282c5e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282c65:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  282c6a:	39 d0                	cmp    %edx,%eax
  282c6c:	75 ea                	jne    282c58 <task_init+0x83>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  282c6e:	e8 ea fc ff ff       	call   28295d <task_alloc>
  282c73:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  282c75:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  282c7c:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  282c83:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  282c8a:	83 ec 0c             	sub    $0xc,%esp
  282c8d:	50                   	push   %eax
  282c8e:	e8 d8 fd ff ff       	call   282a6b <task_add>
	
	task_switchsub();
  282c93:	e8 fc fe ff ff       	call   282b94 <task_switchsub>
	load_tr(task->sel);
  282c98:	83 c4 04             	add    $0x4,%esp
  282c9b:	ff 36                	pushl  (%esi)
  282c9d:	e8 9e fc ff ff       	call   282940 <load_tr>
	task_timer = timer_alloc();
  282ca2:	e8 70 fa ff ff       	call   282717 <timer_alloc>
  282ca7:	a3 80 8d 28 00       	mov    %eax,0x288d80
	timer_settime(task_timer,task->priority);
  282cac:	83 c4 08             	add    $0x8,%esp
  282caf:	ff 76 0c             	pushl  0xc(%esi)
  282cb2:	50                   	push   %eax
  282cb3:	e8 44 fb ff ff       	call   2827fc <timer_settime>

	struct TASK *idle = task_alloc();
  282cb8:	e8 a0 fc ff ff       	call   28295d <task_alloc>
  282cbd:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  282cbf:	83 c4 08             	add    $0x8,%esp
  282cc2:	68 00 00 01 00       	push   $0x10000
  282cc7:	57                   	push   %edi
  282cc8:	e8 14 f1 ff ff       	call   281de1 <memman_alloc>
  282ccd:	05 00 00 01 00       	add    $0x10000,%eax
  282cd2:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  282cd5:	c7 43 4c 50 29 00 00 	movl   $0x2950,0x4c(%ebx)
	idle->tss.es = 1*8;
  282cdc:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  282ce3:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  282cea:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  282cf1:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  282cf8:	00 00 00 
	idle->tss.fs = 1*8;
  282cfb:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  282d02:	00 00 00 
	idle->tss.gs = 1*8;
  282d05:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  282d0c:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  282d0f:	83 c4 0c             	add    $0xc,%esp
  282d12:	6a 01                	push   $0x1
  282d14:	6a 09                	push   $0x9
  282d16:	53                   	push   %ebx
  282d17:	e8 26 fe ff ff       	call   282b42 <task_run>
	return task;
}
  282d1c:	89 f0                	mov    %esi,%eax
  282d1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282d21:	5b                   	pop    %ebx
  282d22:	5e                   	pop    %esi
  282d23:	5f                   	pop    %edi
  282d24:	5d                   	pop    %ebp
  282d25:	c3                   	ret    

00282d26 <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  282d26:	55                   	push   %ebp
  282d27:	89 e5                	mov    %esp,%ebp
  282d29:	56                   	push   %esi
  282d2a:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282d2b:	8b 0d 7c 8d 28 00    	mov    0x288d7c,%ecx
  282d31:	8b 31                	mov    (%ecx),%esi
  282d33:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  282d39:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  282d3b:	8b 50 0c             	mov    0xc(%eax),%edx
  282d3e:	6b de 66             	imul   $0x66,%esi,%ebx
  282d41:	01 d3                	add    %edx,%ebx
  282d43:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  282d47:	83 c2 01             	add    $0x1,%edx
  282d4a:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  282d4d:	3b 50 08             	cmp    0x8(%eax),%edx
  282d50:	75 07                	jne    282d59 <task_switch+0x33>
	{
		tl->now = 0;
  282d52:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  282d59:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  282d5d:	75 0c                	jne    282d6b <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282d5f:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  282d65:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  282d69:	eb 14                	jmp    282d7f <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  282d6b:	e8 24 fe ff ff       	call   282b94 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  282d70:	a1 7c 8d 28 00       	mov    0x288d7c,%eax
  282d75:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  282d7b:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  282d7f:	8b 50 04             	mov    0x4(%eax),%edx
  282d82:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  282d86:	83 ec 08             	sub    $0x8,%esp
  282d89:	ff 76 0c             	pushl  0xc(%esi)
  282d8c:	ff 35 80 8d 28 00    	pushl  0x288d80
  282d92:	e8 65 fa ff ff       	call   2827fc <timer_settime>
	if(new_task != now_task)
  282d97:	83 c4 10             	add    $0x10,%esp
  282d9a:	39 f3                	cmp    %esi,%ebx
  282d9c:	74 0f                	je     282dad <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  282d9e:	83 ec 08             	sub    $0x8,%esp
  282da1:	ff 36                	pushl  (%esi)
  282da3:	6a 00                	push   $0x0
  282da5:	e8 9c fb ff ff       	call   282946 <farjmp>
  282daa:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  282dad:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282db0:	5b                   	pop    %ebx
  282db1:	5e                   	pop    %esi
  282db2:	5d                   	pop    %ebp
  282db3:	c3                   	ret    

00282db4 <task_sleep>:

void task_sleep(struct TASK *task)
{
  282db4:	55                   	push   %ebp
  282db5:	89 e5                	mov    %esp,%ebp
  282db7:	56                   	push   %esi
  282db8:	53                   	push   %ebx
  282db9:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  282dbc:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282dc0:	75 2d                	jne    282def <task_sleep+0x3b>
	{
		now_task = task_now();
  282dc2:	e8 86 fc ff ff       	call   282a4d <task_now>
  282dc7:	89 c6                	mov    %eax,%esi
		task_remove(task);
  282dc9:	53                   	push   %ebx
  282dca:	e8 d5 fc ff ff       	call   282aa4 <task_remove>
		if(task == now_task)
  282dcf:	83 c4 04             	add    $0x4,%esp
  282dd2:	39 f3                	cmp    %esi,%ebx
  282dd4:	75 19                	jne    282def <task_sleep+0x3b>
		{
			task_switchsub();
  282dd6:	e8 b9 fd ff ff       	call   282b94 <task_switchsub>
			now_task = task_now();
  282ddb:	e8 6d fc ff ff       	call   282a4d <task_now>
			farjmp(0,now_task->sel);
  282de0:	83 ec 08             	sub    $0x8,%esp
  282de3:	ff 30                	pushl  (%eax)
  282de5:	6a 00                	push   $0x0
  282de7:	e8 5a fb ff ff       	call   282946 <farjmp>
  282dec:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  282def:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282df2:	5b                   	pop    %ebx
  282df3:	5e                   	pop    %esi
  282df4:	5d                   	pop    %ebp
  282df5:	c3                   	ret    

00282df6 <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  282df6:	55                   	push   %ebp
  282df7:	89 e5                	mov    %esp,%ebp
  282df9:	57                   	push   %edi
  282dfa:	56                   	push   %esi
  282dfb:	53                   	push   %ebx
  282dfc:	81 ec 4c 02 00 00    	sub    $0x24c,%esp
  282e02:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TIMER *timer;
	struct TASK *task = task_now();
  282e05:	e8 43 fc ff ff       	call   282a4d <task_now>
  282e0a:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  282e10:	89 7d b8             	mov    %edi,-0x48(%ebp)
	cons.cur_x = 8;
  282e13:	c7 45 bc 08 00 00 00 	movl   $0x8,-0x44(%ebp)
	cons.cur_y = 28;
  282e1a:	c7 45 c0 1c 00 00 00 	movl   $0x1c,-0x40(%ebp)
	cons.cur_c = -1;
  282e21:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
	*((int *)0x0fec) = (int)&cons; //for api
  282e28:	8d 5d b8             	lea    -0x48(%ebp),%ebx
  282e2b:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int i,fifobuf[128];
	fifo32_init(&task->fifo,128,fifobuf,task);
  282e31:	8d 70 10             	lea    0x10(%eax),%esi
  282e34:	50                   	push   %eax
  282e35:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
  282e3b:	50                   	push   %eax
  282e3c:	68 80 00 00 00       	push   $0x80
  282e41:	56                   	push   %esi
  282e42:	e8 21 eb ff ff       	call   281968 <fifo32_init>
	timer = timer_alloc();
  282e47:	e8 cb f8 ff ff       	call   282717 <timer_alloc>
	timer_init(timer,&task->fifo,1);
  282e4c:	83 c4 0c             	add    $0xc,%esp
  282e4f:	6a 01                	push   $0x1
  282e51:	56                   	push   %esi
  282e52:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
  282e58:	50                   	push   %eax
  282e59:	e8 8a f9 ff ff       	call   2827e8 <timer_init>
	timer_settime(timer,50);
  282e5e:	83 c4 08             	add    $0x8,%esp
  282e61:	6a 32                	push   $0x32
  282e63:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  282e69:	e8 8e f9 ff ff       	call   2827fc <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  282e6e:	83 c4 08             	add    $0x8,%esp
  282e71:	68 00 2d 00 00       	push   $0x2d00
  282e76:	68 00 00 3c 00       	push   $0x3c0000
  282e7b:	e8 9d f2 ff ff       	call   28211d <memman_alloc_4k>
  282e80:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  282e86:	83 c4 08             	add    $0x8,%esp
  282e89:	68 00 02 10 00       	push   $0x100200
  282e8e:	50                   	push   %eax
  282e8f:	e8 17 02 00 00       	call   2830ab <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  282e94:	83 c4 0c             	add    $0xc,%esp
  282e97:	6a 01                	push   $0x1
  282e99:	6a 3e                	push   $0x3e
  282e9b:	53                   	push   %ebx
  282e9c:	e8 a4 05 00 00       	call   283445 <cons_putchar>
  282ea1:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  282ea4:	e8 59 dc ff ff       	call   280b02 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  282ea9:	83 ec 0c             	sub    $0xc,%esp
  282eac:	56                   	push   %esi
  282ead:	e8 94 eb ff ff       	call   281a46 <fifo32_status>
  282eb2:	83 c4 10             	add    $0x10,%esp
  282eb5:	85 c0                	test   %eax,%eax
  282eb7:	75 18                	jne    282ed1 <console_task+0xdb>
		{
			task_sleep(task);
  282eb9:	83 ec 0c             	sub    $0xc,%esp
  282ebc:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  282ec2:	e8 ed fe ff ff       	call   282db4 <task_sleep>
			io_sti();
  282ec7:	e8 38 dc ff ff       	call   280b04 <io_sti>
  282ecc:	83 c4 10             	add    $0x10,%esp
  282ecf:	eb d3                	jmp    282ea4 <console_task+0xae>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  282ed1:	83 ec 0c             	sub    $0xc,%esp
  282ed4:	56                   	push   %esi
  282ed5:	e8 31 eb ff ff       	call   281a0b <fifo32_get>
  282eda:	89 c3                	mov    %eax,%ebx
			io_sti();
  282edc:	e8 23 dc ff ff       	call   280b04 <io_sti>
			if(i<=1) //for cursor
  282ee1:	83 c4 10             	add    $0x10,%esp
  282ee4:	83 fb 01             	cmp    $0x1,%ebx
  282ee7:	7f 60                	jg     282f49 <console_task+0x153>
			{
				if(i!=0)
  282ee9:	85 db                	test   %ebx,%ebx
  282eeb:	74 23                	je     282f10 <console_task+0x11a>
				{
					timer_init(timer,&task->fifo,0);
  282eed:	83 ec 04             	sub    $0x4,%esp
  282ef0:	6a 00                	push   $0x0
  282ef2:	56                   	push   %esi
  282ef3:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  282ef9:	e8 ea f8 ff ff       	call   2827e8 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  282efe:	83 c4 10             	add    $0x10,%esp
  282f01:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  282f05:	78 2a                	js     282f31 <console_task+0x13b>
  282f07:	c7 45 c4 07 00 00 00 	movl   $0x7,-0x3c(%ebp)
  282f0e:	eb 21                	jmp    282f31 <console_task+0x13b>
				}
				else
				{
					timer_init(timer,&task->fifo,1);
  282f10:	83 ec 04             	sub    $0x4,%esp
  282f13:	6a 01                	push   $0x1
  282f15:	56                   	push   %esi
  282f16:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  282f1c:	e8 c7 f8 ff ff       	call   2827e8 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  282f21:	83 c4 10             	add    $0x10,%esp
  282f24:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  282f28:	78 07                	js     282f31 <console_task+0x13b>
  282f2a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
				}
				timer_settime(timer,50);
  282f31:	83 ec 08             	sub    $0x8,%esp
  282f34:	6a 32                	push   $0x32
  282f36:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  282f3c:	e8 bb f8 ff ff       	call   2827fc <timer_settime>
  282f41:	83 c4 10             	add    $0x10,%esp
  282f44:	e9 16 01 00 00       	jmp    28305f <console_task+0x269>
							
			}
			else if(i == 2) //get show cursor msg
  282f49:	83 fb 02             	cmp    $0x2,%ebx
  282f4c:	75 11                	jne    282f5f <console_task+0x169>
			{
				cons.cur_c = COL8_FFFFFF;
  282f4e:	c7 45 c4 07 00 00 00 	movl   $0x7,-0x3c(%ebp)
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  282f55:	b8 07 00 00 00       	mov    $0x7,%eax
  282f5a:	e9 07 01 00 00       	jmp    283066 <console_task+0x270>
			}
			else if(i == 2) //get show cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide cursor msg
  282f5f:	83 fb 03             	cmp    $0x3,%ebx
  282f62:	75 2a                	jne    282f8e <console_task+0x198>
			{
				cons.cur_c = -1;
  282f64:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
				boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,28,cons.cur_x+7,43);
  282f6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
  282f6e:	83 ec 04             	sub    $0x4,%esp
  282f71:	6a 2b                	push   $0x2b
  282f73:	8d 50 07             	lea    0x7(%eax),%edx
  282f76:	52                   	push   %edx
  282f77:	6a 1c                	push   $0x1c
  282f79:	50                   	push   %eax
  282f7a:	6a 00                	push   $0x0
  282f7c:	ff 77 04             	pushl  0x4(%edi)
  282f7f:	ff 37                	pushl  (%edi)
  282f81:	e8 fe dc ff ff       	call   280c84 <boxfill8>
  282f86:	83 c4 20             	add    $0x20,%esp
  282f89:	e9 d1 00 00 00       	jmp    28305f <console_task+0x269>
			}
			else if(256<=i && i<=511)
  282f8e:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  282f94:	3d ff 00 00 00       	cmp    $0xff,%eax
  282f99:	0f 87 c0 00 00 00    	ja     28305f <console_task+0x269>
			{
				if(i == 8+256) //back key
  282f9f:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  282fa5:	75 26                	jne    282fcd <console_task+0x1d7>
				{
					if(cons.cur_x > 16)
  282fa7:	83 7d bc 10          	cmpl   $0x10,-0x44(%ebp)
  282fab:	0f 8e ae 00 00 00    	jle    28305f <console_task+0x269>
					{
						cons_putchar(&cons,' ',0);
  282fb1:	83 ec 04             	sub    $0x4,%esp
  282fb4:	6a 00                	push   $0x0
  282fb6:	6a 20                	push   $0x20
  282fb8:	8d 45 b8             	lea    -0x48(%ebp),%eax
  282fbb:	50                   	push   %eax
  282fbc:	e8 84 04 00 00       	call   283445 <cons_putchar>
						cons.cur_x -= 8;
  282fc1:	83 6d bc 08          	subl   $0x8,-0x44(%ebp)
  282fc5:	83 c4 10             	add    $0x10,%esp
  282fc8:	e9 92 00 00 00       	jmp    28305f <console_task+0x269>
					}
				}
				else if(i == 10+256) //return key
  282fcd:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  282fd3:	75 59                	jne    28302e <console_task+0x238>
				{
					cons_putchar(&cons,' ',0);
  282fd5:	83 ec 04             	sub    $0x4,%esp
  282fd8:	6a 00                	push   $0x0
  282fda:	6a 20                	push   $0x20
  282fdc:	8d 45 b8             	lea    -0x48(%ebp),%eax
  282fdf:	50                   	push   %eax
  282fe0:	e8 60 04 00 00       	call   283445 <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  282fe5:	8b 55 bc             	mov    -0x44(%ebp),%edx
  282fe8:	8d 42 07             	lea    0x7(%edx),%eax
  282feb:	85 d2                	test   %edx,%edx
  282fed:	0f 49 c2             	cmovns %edx,%eax
  282ff0:	c1 f8 03             	sar    $0x3,%eax
  282ff3:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  282ff8:	8d 45 b8             	lea    -0x48(%ebp),%eax
  282ffb:	89 04 24             	mov    %eax,(%esp)
  282ffe:	e8 77 03 00 00       	call   28337a <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  283003:	ff 75 0c             	pushl  0xc(%ebp)
  283006:	ff b5 ac fd ff ff    	pushl  -0x254(%ebp)
  28300c:	8d 45 b8             	lea    -0x48(%ebp),%eax
  28300f:	50                   	push   %eax
  283010:	8d 45 ca             	lea    -0x36(%ebp),%eax
  283013:	50                   	push   %eax
  283014:	e8 fe 08 00 00       	call   283917 <cons_runcmd>
					cons_putchar(&cons,'>',1);
  283019:	83 c4 1c             	add    $0x1c,%esp
  28301c:	6a 01                	push   $0x1
  28301e:	6a 3e                	push   $0x3e
  283020:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283023:	50                   	push   %eax
  283024:	e8 1c 04 00 00       	call   283445 <cons_putchar>
  283029:	83 c4 10             	add    $0x10,%esp
  28302c:	eb 31                	jmp    28305f <console_task+0x269>
				}
				else
				{
					if(cons.cur_x<240)
  28302e:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283031:	3d ef 00 00 00       	cmp    $0xef,%eax
  283036:	7f 27                	jg     28305f <console_task+0x269>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  283038:	8d 50 07             	lea    0x7(%eax),%edx
  28303b:	85 c0                	test   %eax,%eax
  28303d:	0f 48 c2             	cmovs  %edx,%eax
  283040:	c1 f8 03             	sar    $0x3,%eax
  283043:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  283047:	83 ec 04             	sub    $0x4,%esp
  28304a:	6a 01                	push   $0x1
  28304c:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  283052:	53                   	push   %ebx
  283053:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283056:	50                   	push   %eax
  283057:	e8 e9 03 00 00       	call   283445 <cons_putchar>
  28305c:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  28305f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283062:	85 c0                	test   %eax,%eax
  283064:	78 24                	js     28308a <console_task+0x294>
  283066:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  283069:	8b 55 bc             	mov    -0x44(%ebp),%edx
  28306c:	83 ec 04             	sub    $0x4,%esp
  28306f:	8d 59 0f             	lea    0xf(%ecx),%ebx
  283072:	53                   	push   %ebx
  283073:	8d 5a 07             	lea    0x7(%edx),%ebx
  283076:	53                   	push   %ebx
  283077:	51                   	push   %ecx
  283078:	52                   	push   %edx
  283079:	0f b6 c0             	movzbl %al,%eax
  28307c:	50                   	push   %eax
  28307d:	ff 77 04             	pushl  0x4(%edi)
  283080:	ff 37                	pushl  (%edi)
  283082:	e8 fd db ff ff       	call   280c84 <boxfill8>
  283087:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  28308a:	8b 55 c0             	mov    -0x40(%ebp),%edx
  28308d:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283090:	83 ec 0c             	sub    $0xc,%esp
  283093:	8d 4a 10             	lea    0x10(%edx),%ecx
  283096:	51                   	push   %ecx
  283097:	8d 48 08             	lea    0x8(%eax),%ecx
  28309a:	51                   	push   %ecx
  28309b:	52                   	push   %edx
  28309c:	50                   	push   %eax
  28309d:	57                   	push   %edi
  28309e:	e8 cf f4 ff ff       	call   282572 <sheet_refresh>
  2830a3:	83 c4 20             	add    $0x20,%esp
  2830a6:	e9 f9 fd ff ff       	jmp    282ea4 <console_task+0xae>

002830ab <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2830ab:	55                   	push   %ebp
  2830ac:	89 e5                	mov    %esp,%ebp
  2830ae:	53                   	push   %ebx
  2830af:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2830b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2830b9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2830c0:	e9 87 00 00 00       	jmp    28314c <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  2830c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2830c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2830cf:	8b 45 08             	mov    0x8(%ebp),%eax
  2830d2:	01 d0                	add    %edx,%eax
  2830d4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2830d7:	8b 55 0c             	mov    0xc(%ebp),%edx
  2830da:	01 ca                	add    %ecx,%edx
  2830dc:	0f b6 12             	movzbl (%edx),%edx
  2830df:	0f b6 d2             	movzbl %dl,%edx
  2830e2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2830e5:	8d 59 01             	lea    0x1(%ecx),%ebx
  2830e8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2830eb:	01 d9                	add    %ebx,%ecx
  2830ed:	0f b6 09             	movzbl (%ecx),%ecx
  2830f0:	0f b6 c9             	movzbl %cl,%ecx
  2830f3:	c1 e1 08             	shl    $0x8,%ecx
  2830f6:	09 ca                	or     %ecx,%edx
  2830f8:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  2830fe:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  283100:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283103:	83 c0 01             	add    $0x1,%eax
  283106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28310d:	8b 45 08             	mov    0x8(%ebp),%eax
  283110:	01 d0                	add    %edx,%eax
  283112:	8b 55 f4             	mov    -0xc(%ebp),%edx
  283115:	8d 4a 01             	lea    0x1(%edx),%ecx
  283118:	8b 55 0c             	mov    0xc(%ebp),%edx
  28311b:	01 ca                	add    %ecx,%edx
  28311d:	0f b6 12             	movzbl (%edx),%edx
  283120:	c0 ea 04             	shr    $0x4,%dl
  283123:	0f b6 d2             	movzbl %dl,%edx
  283126:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  283129:	8d 59 02             	lea    0x2(%ecx),%ebx
  28312c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28312f:	01 d9                	add    %ebx,%ecx
  283131:	0f b6 09             	movzbl (%ecx),%ecx
  283134:	0f b6 c9             	movzbl %cl,%ecx
  283137:	c1 e1 04             	shl    $0x4,%ecx
  28313a:	09 ca                	or     %ecx,%edx
  28313c:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283142:	89 10                	mov    %edx,(%eax)
		j+=3;
  283144:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  283148:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  28314c:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283153:	0f 8e 6c ff ff ff    	jle    2830c5 <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  283159:	90                   	nop
}
  28315a:	83 c4 10             	add    $0x10,%esp
  28315d:	5b                   	pop    %ebx
  28315e:	5d                   	pop    %ebp
  28315f:	c3                   	ret    

00283160 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  283160:	55                   	push   %ebp
  283161:	89 e5                	mov    %esp,%ebp
  283163:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  283166:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  28316d:	7f 38                	jg     2831a7 <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  28316f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283176:	eb 25                	jmp    28319d <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  283178:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28317b:	8b 45 10             	mov    0x10(%ebp),%eax
  28317e:	01 c2                	add    %eax,%edx
  283180:	8b 45 08             	mov    0x8(%ebp),%eax
  283183:	c1 e0 09             	shl    $0x9,%eax
  283186:	89 c1                	mov    %eax,%ecx
  283188:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28318b:	01 c8                	add    %ecx,%eax
  28318d:	89 c1                	mov    %eax,%ecx
  28318f:	8b 45 18             	mov    0x18(%ebp),%eax
  283192:	01 c8                	add    %ecx,%eax
  283194:	0f b6 00             	movzbl (%eax),%eax
  283197:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  283199:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  28319d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2831a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2831a3:	7c d3                	jl     283178 <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  2831a5:	eb 5e                	jmp    283205 <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2831a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2831ae:	eb 25                	jmp    2831d5 <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2831b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2831b3:	8b 45 10             	mov    0x10(%ebp),%eax
  2831b6:	01 c2                	add    %eax,%edx
  2831b8:	8b 45 08             	mov    0x8(%ebp),%eax
  2831bb:	c1 e0 09             	shl    $0x9,%eax
  2831be:	89 c1                	mov    %eax,%ecx
  2831c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2831c3:	01 c8                	add    %ecx,%eax
  2831c5:	89 c1                	mov    %eax,%ecx
  2831c7:	8b 45 18             	mov    0x18(%ebp),%eax
  2831ca:	01 c8                	add    %ecx,%eax
  2831cc:	0f b6 00             	movzbl (%eax),%eax
  2831cf:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  2831d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2831d5:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  2831dc:	7e d2                	jle    2831b0 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  2831de:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  2831e5:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  2831ec:	8b 45 08             	mov    0x8(%ebp),%eax
  2831ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2831f6:	8b 45 14             	mov    0x14(%ebp),%eax
  2831f9:	01 d0                	add    %edx,%eax
  2831fb:	8b 00                	mov    (%eax),%eax
  2831fd:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  283200:	e9 61 ff ff ff       	jmp    283166 <file_loadfile+0x6>
	return;
}
  283205:	c9                   	leave  
  283206:	c3                   	ret    

00283207 <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  283207:	55                   	push   %ebp
  283208:	89 e5                	mov    %esp,%ebp
  28320a:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  28320d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283214:	eb 0f                	jmp    283225 <file_search+0x1e>
	{
		s[j] = ' ';
  283216:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283219:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28321c:	01 d0                	add    %edx,%eax
  28321e:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283221:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283225:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283229:	7e eb                	jle    283216 <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  28322b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283232:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283239:	e9 83 00 00 00       	jmp    2832c1 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  28323e:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283242:	7e 0a                	jle    28324e <file_search+0x47>
  283244:	b8 00 00 00 00       	mov    $0x0,%eax
  283249:	e9 2a 01 00 00       	jmp    283378 <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  28324e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283251:	8b 45 08             	mov    0x8(%ebp),%eax
  283254:	01 d0                	add    %edx,%eax
  283256:	0f b6 00             	movzbl (%eax),%eax
  283259:	3c 2e                	cmp    $0x2e,%al
  28325b:	75 0f                	jne    28326c <file_search+0x65>
  28325d:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  283261:	7f 09                	jg     28326c <file_search+0x65>
			j = 8;
  283263:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  28326a:	eb 51                	jmp    2832bd <file_search+0xb6>
		else
		{
			s[j] = name[i];
  28326c:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28326f:	8b 45 08             	mov    0x8(%ebp),%eax
  283272:	01 d0                	add    %edx,%eax
  283274:	0f b6 00             	movzbl (%eax),%eax
  283277:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28327a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28327d:	01 ca                	add    %ecx,%edx
  28327f:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  283281:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283284:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283287:	01 d0                	add    %edx,%eax
  283289:	0f b6 00             	movzbl (%eax),%eax
  28328c:	3c 60                	cmp    $0x60,%al
  28328e:	7e 29                	jle    2832b9 <file_search+0xb2>
  283290:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283293:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283296:	01 d0                	add    %edx,%eax
  283298:	0f b6 00             	movzbl (%eax),%eax
  28329b:	3c 7a                	cmp    $0x7a,%al
  28329d:	7f 1a                	jg     2832b9 <file_search+0xb2>
				s[j] -= 0x20;
  28329f:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2832a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2832a5:	01 d0                	add    %edx,%eax
  2832a7:	0f b6 00             	movzbl (%eax),%eax
  2832aa:	83 e8 20             	sub    $0x20,%eax
  2832ad:	89 c1                	mov    %eax,%ecx
  2832af:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2832b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2832b5:	01 d0                	add    %edx,%eax
  2832b7:	88 08                	mov    %cl,(%eax)
			j++;
  2832b9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  2832bd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2832c1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2832c4:	8b 45 08             	mov    0x8(%ebp),%eax
  2832c7:	01 d0                	add    %edx,%eax
  2832c9:	0f b6 00             	movzbl (%eax),%eax
  2832cc:	84 c0                	test   %al,%al
  2832ce:	0f 85 6a ff ff ff    	jne    28323e <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2832d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2832db:	e9 84 00 00 00       	jmp    283364 <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  2832e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2832e3:	c1 e0 06             	shl    $0x6,%eax
  2832e6:	89 c2                	mov    %eax,%edx
  2832e8:	8b 45 0c             	mov    0xc(%ebp),%eax
  2832eb:	01 d0                	add    %edx,%eax
  2832ed:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  2832f1:	84 c0                	test   %al,%al
  2832f3:	74 7d                	je     283372 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  2832f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2832f8:	c1 e0 06             	shl    $0x6,%eax
  2832fb:	89 c2                	mov    %eax,%edx
  2832fd:	8b 45 0c             	mov    0xc(%ebp),%eax
  283300:	01 d0                	add    %edx,%eax
  283302:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  283306:	0f b6 c0             	movzbl %al,%eax
  283309:	83 e0 18             	and    $0x18,%eax
  28330c:	85 c0                	test   %eax,%eax
  28330e:	75 50                	jne    283360 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  283310:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283317:	eb 31                	jmp    28334a <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  283319:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28331c:	c1 e0 06             	shl    $0x6,%eax
  28331f:	89 c2                	mov    %eax,%edx
  283321:	8b 45 0c             	mov    0xc(%ebp),%eax
  283324:	01 c2                	add    %eax,%edx
  283326:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283329:	01 d0                	add    %edx,%eax
  28332b:	83 c0 20             	add    $0x20,%eax
  28332e:	0f b6 00             	movzbl (%eax),%eax
  283331:	0f b6 d0             	movzbl %al,%edx
  283334:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283337:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28333a:	01 c8                	add    %ecx,%eax
  28333c:	0f b6 00             	movzbl (%eax),%eax
  28333f:	0f be c0             	movsbl %al,%eax
  283342:	39 c2                	cmp    %eax,%edx
  283344:	75 19                	jne    28335f <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  283346:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28334a:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28334e:	7e c9                	jle    283319 <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283350:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283353:	c1 e0 06             	shl    $0x6,%eax
  283356:	89 c2                	mov    %eax,%edx
  283358:	8b 45 0c             	mov    0xc(%ebp),%eax
  28335b:	01 d0                	add    %edx,%eax
  28335d:	eb 19                	jmp    283378 <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  28335f:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  283360:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  283364:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283367:	3b 45 10             	cmp    0x10(%ebp),%eax
  28336a:	0f 8c 70 ff ff ff    	jl     2832e0 <file_search+0xd9>
  283370:	eb 01                	jmp    283373 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  283372:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  283373:	b8 00 00 00 00       	mov    $0x0,%eax
}
  283378:	c9                   	leave  
  283379:	c3                   	ret    

0028337a <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  28337a:	55                   	push   %ebp
  28337b:	89 e5                	mov    %esp,%ebp
  28337d:	57                   	push   %edi
  28337e:	56                   	push   %esi
  28337f:	53                   	push   %ebx
  283380:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  283383:	8b 45 08             	mov    0x8(%ebp),%eax
  283386:	8b 40 08             	mov    0x8(%eax),%eax
  283389:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  28338e:	7e 0c                	jle    28339c <cons_newline+0x22>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283390:	8b 45 08             	mov    0x8(%ebp),%eax
  283393:	8b 18                	mov    (%eax),%ebx
  283395:	bf 1c 00 00 00       	mov    $0x1c,%edi
  28339a:	eb 43                	jmp    2833df <cons_newline+0x65>
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
  28339c:	83 c0 10             	add    $0x10,%eax
  28339f:	8b 7d 08             	mov    0x8(%ebp),%edi
  2833a2:	89 47 08             	mov    %eax,0x8(%edi)
  2833a5:	e9 89 00 00 00       	jmp    283433 <cons_newline+0xb9>
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2833aa:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2833ad:	8b 43 04             	mov    0x4(%ebx),%eax
  2833b0:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2833b3:	0f af f0             	imul   %eax,%esi
  2833b6:	89 d1                	mov    %edx,%ecx
  2833b8:	03 0b                	add    (%ebx),%ecx
  2833ba:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  2833be:	0f af c7             	imul   %edi,%eax
  2833c1:	89 f3                	mov    %esi,%ebx
  2833c3:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  2833c6:	83 c2 01             	add    $0x1,%edx
  2833c9:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  2833cf:	75 d9                	jne    2833aa <cons_newline+0x30>
  2833d1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
  2833d4:	83 c7 01             	add    $0x1,%edi
  2833d7:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  2833dd:	74 33                	je     283412 <cons_newline+0x98>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2833df:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2833e4:	8d 47 10             	lea    0x10(%edi),%eax
  2833e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  2833ea:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  2833ed:	eb bb                	jmp    2833aa <cons_newline+0x30>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2833ef:	89 fa                	mov    %edi,%edx
  2833f1:	0f af 53 04          	imul   0x4(%ebx),%edx
  2833f5:	89 c1                	mov    %eax,%ecx
  2833f7:	03 0b                	add    (%ebx),%ecx
  2833f9:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  2833fd:	83 c0 01             	add    $0x1,%eax
  283400:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283405:	75 e8                	jne    2833ef <cons_newline+0x75>
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  283407:	83 c7 01             	add    $0x1,%edi
  28340a:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283410:	74 07                	je     283419 <cons_newline+0x9f>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283412:	b8 08 00 00 00       	mov    $0x8,%eax
  283417:	eb d6                	jmp    2833ef <cons_newline+0x75>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  283419:	83 ec 0c             	sub    $0xc,%esp
  28341c:	68 9c 00 00 00       	push   $0x9c
  283421:	68 f8 00 00 00       	push   $0xf8
  283426:	6a 1c                	push   $0x1c
  283428:	6a 08                	push   $0x8
  28342a:	53                   	push   %ebx
  28342b:	e8 42 f1 ff ff       	call   282572 <sheet_refresh>
  283430:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  283433:	8b 45 08             	mov    0x8(%ebp),%eax
  283436:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  28343d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283440:	5b                   	pop    %ebx
  283441:	5e                   	pop    %esi
  283442:	5f                   	pop    %edi
  283443:	5d                   	pop    %ebp
  283444:	c3                   	ret    

00283445 <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  283445:	55                   	push   %ebp
  283446:	89 e5                	mov    %esp,%ebp
  283448:	56                   	push   %esi
  283449:	53                   	push   %ebx
  28344a:	83 ec 10             	sub    $0x10,%esp
  28344d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283450:	8b 45 0c             	mov    0xc(%ebp),%eax
  283453:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  283456:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  283459:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  28345d:	3c 09                	cmp    $0x9,%al
  28345f:	75 46                	jne    2834a7 <cons_putchar+0x62>
	{
		//tab
		for(;;)
		{
			putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  283461:	83 ec 04             	sub    $0x4,%esp
  283464:	6a 01                	push   $0x1
  283466:	68 05 3f 28 00       	push   $0x283f05
  28346b:	6a 00                	push   $0x0
  28346d:	6a 07                	push   $0x7
  28346f:	ff 73 08             	pushl  0x8(%ebx)
  283472:	ff 73 04             	pushl  0x4(%ebx)
  283475:	ff 33                	pushl  (%ebx)
  283477:	e8 67 dc ff ff       	call   2810e3 <putfonts8_asc_sht>
			cons->cur_x += 8;
  28347c:	8b 43 04             	mov    0x4(%ebx),%eax
  28347f:	83 c0 08             	add    $0x8,%eax
  283482:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  283485:	83 c4 20             	add    $0x20,%esp
  283488:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28348d:	75 0c                	jne    28349b <cons_putchar+0x56>
				cons_newline(cons);
  28348f:	83 ec 0c             	sub    $0xc,%esp
  283492:	53                   	push   %ebx
  283493:	e8 e2 fe ff ff       	call   28337a <cons_newline>
  283498:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  28349b:	8b 43 04             	mov    0x4(%ebx),%eax
  28349e:	83 e8 08             	sub    $0x8,%eax
  2834a1:	a8 1f                	test   $0x1f,%al
  2834a3:	75 bc                	jne    283461 <cons_putchar+0x1c>
  2834a5:	eb 55                	jmp    2834fc <cons_putchar+0xb7>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2834a7:	3c 0a                	cmp    $0xa,%al
  2834a9:	75 0e                	jne    2834b9 <cons_putchar+0x74>
		cons_newline(cons);
  2834ab:	83 ec 0c             	sub    $0xc,%esp
  2834ae:	53                   	push   %ebx
  2834af:	e8 c6 fe ff ff       	call   28337a <cons_newline>
  2834b4:	83 c4 10             	add    $0x10,%esp
  2834b7:	eb 43                	jmp    2834fc <cons_putchar+0xb7>
	else if(s[0] == 0x0d) 
  2834b9:	3c 0d                	cmp    $0xd,%al
  2834bb:	74 3f                	je     2834fc <cons_putchar+0xb7>
		;//todo
	else
	{
		putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  2834bd:	83 ec 04             	sub    $0x4,%esp
  2834c0:	6a 01                	push   $0x1
  2834c2:	8d 45 f6             	lea    -0xa(%ebp),%eax
  2834c5:	50                   	push   %eax
  2834c6:	6a 00                	push   $0x0
  2834c8:	6a 07                	push   $0x7
  2834ca:	ff 73 08             	pushl  0x8(%ebx)
  2834cd:	ff 73 04             	pushl  0x4(%ebx)
  2834d0:	ff 33                	pushl  (%ebx)
  2834d2:	e8 0c dc ff ff       	call   2810e3 <putfonts8_asc_sht>
		if(move != 0)
  2834d7:	83 c4 20             	add    $0x20,%esp
  2834da:	89 f0                	mov    %esi,%eax
  2834dc:	84 c0                	test   %al,%al
  2834de:	74 1c                	je     2834fc <cons_putchar+0xb7>
		{
			cons->cur_x += 8;
  2834e0:	8b 43 04             	mov    0x4(%ebx),%eax
  2834e3:	83 c0 08             	add    $0x8,%eax
  2834e6:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  2834e9:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2834ee:	75 0c                	jne    2834fc <cons_putchar+0xb7>
				cons_newline(cons);
  2834f0:	83 ec 0c             	sub    $0xc,%esp
  2834f3:	53                   	push   %ebx
  2834f4:	e8 81 fe ff ff       	call   28337a <cons_newline>
  2834f9:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2834fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2834ff:	5b                   	pop    %ebx
  283500:	5e                   	pop    %esi
  283501:	5d                   	pop    %ebp
  283502:	c3                   	ret    

00283503 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283503:	55                   	push   %ebp
  283504:	89 e5                	mov    %esp,%ebp
  283506:	56                   	push   %esi
  283507:	53                   	push   %ebx
  283508:	83 ec 24             	sub    $0x24,%esp
  28350b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  28350e:	8b 45 0c             	mov    0xc(%ebp),%eax
  283511:	c1 e8 14             	shr    $0x14,%eax
  283514:	50                   	push   %eax
  283515:	68 c0 3e 28 00       	push   $0x283ec0
  28351a:	8d 75 da             	lea    -0x26(%ebp),%esi
  28351d:	56                   	push   %esi
  28351e:	e8 8a e2 ff ff       	call   2817ad <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283523:	83 c4 0c             	add    $0xc,%esp
  283526:	6a 1e                	push   $0x1e
  283528:	56                   	push   %esi
  283529:	6a 00                	push   $0x0
  28352b:	6a 07                	push   $0x7
  28352d:	ff 73 08             	pushl  0x8(%ebx)
  283530:	6a 08                	push   $0x8
  283532:	ff 33                	pushl  (%ebx)
  283534:	e8 aa db ff ff       	call   2810e3 <putfonts8_asc_sht>
	cons_newline(cons);
  283539:	83 c4 14             	add    $0x14,%esp
  28353c:	53                   	push   %ebx
  28353d:	e8 38 fe ff ff       	call   28337a <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283542:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  283549:	e8 5a e8 ff ff       	call   281da8 <memman_total>
  28354e:	83 c4 0c             	add    $0xc,%esp
  283551:	c1 e8 0a             	shr    $0xa,%eax
  283554:	50                   	push   %eax
  283555:	68 cb 3e 28 00       	push   $0x283ecb
  28355a:	56                   	push   %esi
  28355b:	e8 4d e2 ff ff       	call   2817ad <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283560:	83 c4 0c             	add    $0xc,%esp
  283563:	6a 1e                	push   $0x1e
  283565:	56                   	push   %esi
  283566:	6a 00                	push   $0x0
  283568:	6a 07                	push   $0x7
  28356a:	ff 73 08             	pushl  0x8(%ebx)
  28356d:	6a 08                	push   $0x8
  28356f:	ff 33                	pushl  (%ebx)
  283571:	e8 6d db ff ff       	call   2810e3 <putfonts8_asc_sht>
	cons_newline(cons);
  283576:	83 c4 14             	add    $0x14,%esp
  283579:	53                   	push   %ebx
  28357a:	e8 fb fd ff ff       	call   28337a <cons_newline>
	cons_newline(cons);
  28357f:	89 1c 24             	mov    %ebx,(%esp)
  283582:	e8 f3 fd ff ff       	call   28337a <cons_newline>
	return;
  283587:	83 c4 10             	add    $0x10,%esp
}
  28358a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28358d:	5b                   	pop    %ebx
  28358e:	5e                   	pop    %esi
  28358f:	5d                   	pop    %ebp
  283590:	c3                   	ret    

00283591 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  283591:	55                   	push   %ebp
  283592:	89 e5                	mov    %esp,%ebp
  283594:	57                   	push   %edi
  283595:	56                   	push   %esi
  283596:	53                   	push   %ebx
  283597:	83 ec 0c             	sub    $0xc,%esp
  28359a:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  28359d:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  28359f:	be 1c 00 00 00       	mov    $0x1c,%esi
  2835a4:	eb 23                	jmp    2835c9 <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2835a6:	89 f1                	mov    %esi,%ecx
  2835a8:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2835ac:	89 c3                	mov    %eax,%ebx
  2835ae:	03 1a                	add    (%edx),%ebx
  2835b0:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  2835b4:	83 c0 01             	add    $0x1,%eax
  2835b7:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2835bc:	75 e8                	jne    2835a6 <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  2835be:	83 c6 01             	add    $0x1,%esi
  2835c1:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  2835c7:	74 07                	je     2835d0 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  2835c9:	b8 08 00 00 00       	mov    $0x8,%eax
  2835ce:	eb d6                	jmp    2835a6 <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  2835d0:	83 ec 0c             	sub    $0xc,%esp
  2835d3:	68 9c 00 00 00       	push   $0x9c
  2835d8:	68 f8 00 00 00       	push   $0xf8
  2835dd:	6a 1c                	push   $0x1c
  2835df:	6a 08                	push   $0x8
  2835e1:	52                   	push   %edx
  2835e2:	e8 8b ef ff ff       	call   282572 <sheet_refresh>
	cons->cur_y = 28;
  2835e7:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  2835ee:	83 c4 20             	add    $0x20,%esp
}
  2835f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2835f4:	5b                   	pop    %ebx
  2835f5:	5e                   	pop    %esi
  2835f6:	5f                   	pop    %edi
  2835f7:	5d                   	pop    %ebp
  2835f8:	c3                   	ret    

002835f9 <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  2835f9:	55                   	push   %ebp
  2835fa:	89 e5                	mov    %esp,%ebp
  2835fc:	57                   	push   %edi
  2835fd:	56                   	push   %esi
  2835fe:	53                   	push   %ebx
  2835ff:	83 ec 2c             	sub    $0x2c,%esp
  283602:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283605:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  28360c:	84 c0                	test   %al,%al
  28360e:	0f 84 87 00 00 00    	je     28369b <cmd_dir+0xa2>
  283614:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283619:	8d 75 ca             	lea    -0x36(%ebp),%esi
  28361c:	eb 0b                	jmp    283629 <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  28361e:	83 c3 40             	add    $0x40,%ebx
  283621:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283625:	84 c0                	test   %al,%al
  283627:	74 72                	je     28369b <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283629:	3c e5                	cmp    $0xe5,%al
  28362b:	74 66                	je     283693 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  28362d:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283631:	75 60                	jne    283693 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283633:	83 ec 04             	sub    $0x4,%esp
  283636:	ff 73 3c             	pushl  0x3c(%ebx)
  283639:	68 d5 3e 28 00       	push   $0x283ed5
  28363e:	56                   	push   %esi
  28363f:	e8 69 e1 ff ff       	call   2817ad <sprintf>
  283644:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283647:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  28364c:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283651:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283654:	83 c0 01             	add    $0x1,%eax
  283657:	83 f8 08             	cmp    $0x8,%eax
  28365a:	75 f0                	jne    28364c <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  28365c:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283660:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283663:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283667:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  28366a:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  28366e:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283671:	83 ec 04             	sub    $0x4,%esp
  283674:	6a 1e                	push   $0x1e
  283676:	56                   	push   %esi
  283677:	6a 00                	push   $0x0
  283679:	6a 07                	push   $0x7
  28367b:	ff 77 08             	pushl  0x8(%edi)
  28367e:	6a 08                	push   $0x8
  283680:	ff 37                	pushl  (%edi)
  283682:	e8 5c da ff ff       	call   2810e3 <putfonts8_asc_sht>
				cons_newline(cons);
  283687:	83 c4 14             	add    $0x14,%esp
  28368a:	57                   	push   %edi
  28368b:	e8 ea fc ff ff       	call   28337a <cons_newline>
  283690:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283693:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283699:	75 83                	jne    28361e <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  28369b:	83 ec 0c             	sub    $0xc,%esp
  28369e:	57                   	push   %edi
  28369f:	e8 d6 fc ff ff       	call   28337a <cons_newline>
	return;
  2836a4:	83 c4 10             	add    $0x10,%esp
}
  2836a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2836aa:	5b                   	pop    %ebx
  2836ab:	5e                   	pop    %esi
  2836ac:	5f                   	pop    %edi
  2836ad:	5d                   	pop    %ebp
  2836ae:	c3                   	ret    

002836af <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  2836af:	55                   	push   %ebp
  2836b0:	89 e5                	mov    %esp,%ebp
  2836b2:	57                   	push   %edi
  2836b3:	56                   	push   %esi
  2836b4:	53                   	push   %ebx
  2836b5:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  2836b8:	68 e0 00 00 00       	push   $0xe0
  2836bd:	68 00 26 10 00       	push   $0x102600
  2836c2:	8b 45 10             	mov    0x10(%ebp),%eax
  2836c5:	83 c0 05             	add    $0x5,%eax
  2836c8:	50                   	push   %eax
  2836c9:	e8 39 fb ff ff       	call   283207 <file_search>
	char *p;
	int i;
	if(finfo != 0)
  2836ce:	83 c4 10             	add    $0x10,%esp
  2836d1:	85 c0                	test   %eax,%eax
  2836d3:	74 6e                	je     283743 <cmd_type+0x94>
  2836d5:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  2836d7:	83 ec 08             	sub    $0x8,%esp
  2836da:	ff 70 3c             	pushl  0x3c(%eax)
  2836dd:	68 00 00 3c 00       	push   $0x3c0000
  2836e2:	e8 36 ea ff ff       	call   28211d <memman_alloc_4k>
  2836e7:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  2836e9:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  2836f0:	ff 75 0c             	pushl  0xc(%ebp)
  2836f3:	50                   	push   %eax
  2836f4:	ff 76 3c             	pushl  0x3c(%esi)
  2836f7:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  2836fb:	50                   	push   %eax
  2836fc:	e8 5f fa ff ff       	call   283160 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283701:	8b 46 3c             	mov    0x3c(%esi),%eax
  283704:	83 c4 20             	add    $0x20,%esp
  283707:	85 c0                	test   %eax,%eax
  283709:	74 24                	je     28372f <cmd_type+0x80>
  28370b:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283710:	83 ec 04             	sub    $0x4,%esp
  283713:	6a 01                	push   $0x1
  283715:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283719:	50                   	push   %eax
  28371a:	ff 75 08             	pushl  0x8(%ebp)
  28371d:	e8 23 fd ff ff       	call   283445 <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283722:	83 c3 01             	add    $0x1,%ebx
  283725:	8b 46 3c             	mov    0x3c(%esi),%eax
  283728:	83 c4 10             	add    $0x10,%esp
  28372b:	39 d8                	cmp    %ebx,%eax
  28372d:	77 e1                	ja     283710 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  28372f:	83 ec 04             	sub    $0x4,%esp
  283732:	50                   	push   %eax
  283733:	57                   	push   %edi
  283734:	68 00 00 3c 00       	push   $0x3c0000
  283739:	e8 0b ea ff ff       	call   282149 <memman_free_4k>
  28373e:	83 c4 10             	add    $0x10,%esp
  283741:	eb 2b                	jmp    28376e <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283743:	83 ec 04             	sub    $0x4,%esp
  283746:	6a 0f                	push   $0xf
  283748:	68 e5 3e 28 00       	push   $0x283ee5
  28374d:	6a 00                	push   $0x0
  28374f:	6a 07                	push   $0x7
  283751:	8b 45 08             	mov    0x8(%ebp),%eax
  283754:	ff 70 08             	pushl  0x8(%eax)
  283757:	6a 08                	push   $0x8
  283759:	ff 30                	pushl  (%eax)
  28375b:	e8 83 d9 ff ff       	call   2810e3 <putfonts8_asc_sht>
		cons_newline(cons);
  283760:	83 c4 14             	add    $0x14,%esp
  283763:	ff 75 08             	pushl  0x8(%ebp)
  283766:	e8 0f fc ff ff       	call   28337a <cons_newline>
  28376b:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  28376e:	83 ec 0c             	sub    $0xc,%esp
  283771:	ff 75 08             	pushl  0x8(%ebp)
  283774:	e8 01 fc ff ff       	call   28337a <cons_newline>
	return;
  283779:	83 c4 10             	add    $0x10,%esp
}
  28377c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28377f:	5b                   	pop    %ebx
  283780:	5e                   	pop    %esi
  283781:	5f                   	pop    %edi
  283782:	5d                   	pop    %ebp
  283783:	c3                   	ret    

00283784 <cmd_app>:



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283784:	55                   	push   %ebp
  283785:	89 e5                	mov    %esp,%ebp
  283787:	57                   	push   %edi
  283788:	56                   	push   %esi
  283789:	53                   	push   %ebx
  28378a:	83 ec 3c             	sub    $0x3c,%esp
  28378d:	8b 5d 10             	mov    0x10(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283790:	e8 b8 f2 ff ff       	call   282a4d <task_now>
  283795:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283798:	0f b6 03             	movzbl (%ebx),%eax
  28379b:	3c 20                	cmp    $0x20,%al
  28379d:	0f 8f 5f 01 00 00    	jg     283902 <cmd_app+0x17e>
  2837a3:	eb 16                	jmp    2837bb <cmd_app+0x37>
  2837a5:	0f b6 04 33          	movzbl (%ebx,%esi,1),%eax
  2837a9:	3c 20                	cmp    $0x20,%al
  2837ab:	7e 13                	jle    2837c0 <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  2837ad:	88 44 35 d6          	mov    %al,-0x2a(%ebp,%esi,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  2837b1:	83 c6 01             	add    $0x1,%esi
  2837b4:	83 fe 0d             	cmp    $0xd,%esi
  2837b7:	75 ec                	jne    2837a5 <cmd_app+0x21>
  2837b9:	eb 05                	jmp    2837c0 <cmd_app+0x3c>
  2837bb:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  2837c0:	c6 44 35 d6 00       	movb   $0x0,-0x2a(%ebp,%esi,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  2837c5:	83 ec 04             	sub    $0x4,%esp
  2837c8:	68 e0 00 00 00       	push   $0xe0
  2837cd:	68 00 26 10 00       	push   $0x102600
  2837d2:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  2837d5:	50                   	push   %eax
  2837d6:	e8 2c fa ff ff       	call   283207 <file_search>
  2837db:	89 c3                	mov    %eax,%ebx
	if(finfo == 0 && name[i-1]!='.')
  2837dd:	83 c4 10             	add    $0x10,%esp
  2837e0:	85 c0                	test   %eax,%eax
  2837e2:	75 4c                	jne    283830 <cmd_app+0xac>
		memman_free_4k(memman,(int)p,finfo->size);
		memman_free_4k(memman,(int)q,64*1024);
		cons_newline(cons);
		return 1;
	}
	return 0;
  2837e4:	b8 00 00 00 00       	mov    $0x0,%eax
		name[i] = cmdline[i];
	}
	name[i] = 0;

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
	if(finfo == 0 && name[i-1]!='.')
  2837e9:	80 7c 35 d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%esi,1)
  2837ee:	0f 84 1b 01 00 00    	je     28390f <cmd_app+0x18b>
	{
		name[i  ] = '.';
  2837f4:	c6 44 35 d6 2e       	movb   $0x2e,-0x2a(%ebp,%esi,1)
		name[i+1] = 'B';
  2837f9:	c6 44 35 d7 42       	movb   $0x42,-0x29(%ebp,%esi,1)
		name[i+2] = 'I';
  2837fe:	c6 44 35 d8 49       	movb   $0x49,-0x28(%ebp,%esi,1)
		name[i+3] = 'N';
  283803:	c6 44 35 d9 4e       	movb   $0x4e,-0x27(%ebp,%esi,1)
		name[i+4] = 0;
  283808:	c6 44 35 da 00       	movb   $0x0,-0x26(%ebp,%esi,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  28380d:	83 ec 04             	sub    $0x4,%esp
  283810:	68 e0 00 00 00       	push   $0xe0
  283815:	68 00 26 10 00       	push   $0x102600
  28381a:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28381d:	50                   	push   %eax
  28381e:	e8 e4 f9 ff ff       	call   283207 <file_search>
  283823:	89 c3                	mov    %eax,%ebx
	}

	if(finfo != 0)
  283825:	83 c4 10             	add    $0x10,%esp
  283828:	85 c0                	test   %eax,%eax
  28382a:	0f 84 cb 00 00 00    	je     2838fb <cmd_app+0x177>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283830:	83 ec 08             	sub    $0x8,%esp
  283833:	ff 73 3c             	pushl  0x3c(%ebx)
  283836:	68 00 00 3c 00       	push   $0x3c0000
  28383b:	e8 dd e8 ff ff       	call   28211d <memman_alloc_4k>
  283840:	89 c6                	mov    %eax,%esi
		*((int *)0xfe8) = (int)p;
  283842:	a3 e8 0f 00 00       	mov    %eax,0xfe8
		q = (char *)memman_alloc_4k(memman,64*1024);
  283847:	83 c4 08             	add    $0x8,%esp
  28384a:	68 00 00 01 00       	push   $0x10000
  28384f:	68 00 00 3c 00       	push   $0x3c0000
  283854:	e8 c4 e8 ff ff       	call   28211d <memman_alloc_4k>
  283859:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  28385b:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283862:	ff 75 0c             	pushl  0xc(%ebp)
  283865:	56                   	push   %esi
  283866:	ff 73 3c             	pushl  0x3c(%ebx)
  283869:	0f b7 43 3a          	movzwl 0x3a(%ebx),%eax
  28386d:	50                   	push   %eax
  28386e:	e8 ed f8 ff ff       	call   283160 <file_loadfile>
		set_segmdesc(gdt+1003,finfo->size-1,(int)p,AR_CODE32_ER + 0x60);
  283873:	83 c4 20             	add    $0x20,%esp
  283876:	68 fa 40 00 00       	push   $0x40fa
  28387b:	56                   	push   %esi
  28387c:	8b 43 3c             	mov    0x3c(%ebx),%eax
  28387f:	83 e8 01             	sub    $0x1,%eax
  283882:	50                   	push   %eax
  283883:	68 58 1f 27 00       	push   $0x271f58
  283888:	e8 9a da ff ff       	call   281327 <set_segmdesc>
		//data segment selector for stack
		set_segmdesc(gdt+1004,62*1024-1,(int)q,AR_DATA32_RW + 0x60);
  28388d:	68 f2 40 00 00       	push   $0x40f2
  283892:	57                   	push   %edi
  283893:	68 ff f7 00 00       	push   $0xf7ff
  283898:	68 60 1f 27 00       	push   $0x271f60
  28389d:	e8 85 da ff ff       	call   281327 <set_segmdesc>
		//farcall(0,1003*8);
		//eip = 0; cs = 1003*8
		//esp = 1024*64; ds = 1004 * 8
		start_app(0,1003*8,64*1024,1004*8,&(task->tss.esp0));
  2838a2:	83 c4 14             	add    $0x14,%esp
  2838a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  2838a8:	83 c0 30             	add    $0x30,%eax
  2838ab:	50                   	push   %eax
  2838ac:	68 60 1f 00 00       	push   $0x1f60
  2838b1:	68 00 00 01 00       	push   $0x10000
  2838b6:	68 58 1f 00 00       	push   $0x1f58
  2838bb:	6a 00                	push   $0x0
  2838bd:	e8 fe 01 00 00       	call   283ac0 <start_app>
		memman_free_4k(memman,(int)p,finfo->size);
  2838c2:	83 c4 1c             	add    $0x1c,%esp
  2838c5:	ff 73 3c             	pushl  0x3c(%ebx)
  2838c8:	56                   	push   %esi
  2838c9:	68 00 00 3c 00       	push   $0x3c0000
  2838ce:	e8 76 e8 ff ff       	call   282149 <memman_free_4k>
		memman_free_4k(memman,(int)q,64*1024);
  2838d3:	83 c4 0c             	add    $0xc,%esp
  2838d6:	68 00 00 01 00       	push   $0x10000
  2838db:	57                   	push   %edi
  2838dc:	68 00 00 3c 00       	push   $0x3c0000
  2838e1:	e8 63 e8 ff ff       	call   282149 <memman_free_4k>
		cons_newline(cons);
  2838e6:	83 c4 04             	add    $0x4,%esp
  2838e9:	ff 75 08             	pushl  0x8(%ebp)
  2838ec:	e8 89 fa ff ff       	call   28337a <cons_newline>
		return 1;
  2838f1:	83 c4 10             	add    $0x10,%esp
  2838f4:	b8 01 00 00 00       	mov    $0x1,%eax
  2838f9:	eb 14                	jmp    28390f <cmd_app+0x18b>
	}
	return 0;
  2838fb:	b8 00 00 00 00       	mov    $0x0,%eax
  283900:	eb 0d                	jmp    28390f <cmd_app+0x18b>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283902:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283905:	be 01 00 00 00       	mov    $0x1,%esi
  28390a:	e9 96 fe ff ff       	jmp    2837a5 <cmd_app+0x21>
		memman_free_4k(memman,(int)q,64*1024);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  28390f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283912:	5b                   	pop    %ebx
  283913:	5e                   	pop    %esi
  283914:	5f                   	pop    %edi
  283915:	5d                   	pop    %ebp
  283916:	c3                   	ret    

00283917 <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  283917:	55                   	push   %ebp
  283918:	89 e5                	mov    %esp,%ebp
  28391a:	53                   	push   %ebx
  28391b:	83 ec 0c             	sub    $0xc,%esp
  28391e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  283921:	68 f5 3e 28 00       	push   $0x283ef5
  283926:	53                   	push   %ebx
  283927:	e8 56 df ff ff       	call   281882 <strcmp>
  28392c:	83 c4 10             	add    $0x10,%esp
  28392f:	85 c0                	test   %eax,%eax
  283931:	75 16                	jne    283949 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  283933:	83 ec 08             	sub    $0x8,%esp
  283936:	ff 75 14             	pushl  0x14(%ebp)
  283939:	ff 75 0c             	pushl  0xc(%ebp)
  28393c:	e8 c2 fb ff ff       	call   283503 <cmd_mem>
  283941:	83 c4 10             	add    $0x10,%esp
  283944:	e9 c9 00 00 00       	jmp    283a12 <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"cls") == 0)
  283949:	83 ec 08             	sub    $0x8,%esp
  28394c:	68 f9 3e 28 00       	push   $0x283ef9
  283951:	53                   	push   %ebx
  283952:	e8 2b df ff ff       	call   281882 <strcmp>
  283957:	83 c4 10             	add    $0x10,%esp
  28395a:	85 c0                	test   %eax,%eax
  28395c:	75 13                	jne    283971 <cons_runcmd+0x5a>
		cmd_cls(cons);
  28395e:	83 ec 0c             	sub    $0xc,%esp
  283961:	ff 75 0c             	pushl  0xc(%ebp)
  283964:	e8 28 fc ff ff       	call   283591 <cmd_cls>
  283969:	83 c4 10             	add    $0x10,%esp
  28396c:	e9 a1 00 00 00       	jmp    283a12 <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"dir") == 0)
  283971:	83 ec 08             	sub    $0x8,%esp
  283974:	68 fd 3e 28 00       	push   $0x283efd
  283979:	53                   	push   %ebx
  28397a:	e8 03 df ff ff       	call   281882 <strcmp>
  28397f:	83 c4 10             	add    $0x10,%esp
  283982:	85 c0                	test   %eax,%eax
  283984:	75 10                	jne    283996 <cons_runcmd+0x7f>
		cmd_dir(cons);
  283986:	83 ec 0c             	sub    $0xc,%esp
  283989:	ff 75 0c             	pushl  0xc(%ebp)
  28398c:	e8 68 fc ff ff       	call   2835f9 <cmd_dir>
  283991:	83 c4 10             	add    $0x10,%esp
  283994:	eb 7c                	jmp    283a12 <cons_runcmd+0xfb>
	else if(strncmp(cmdline,"type ",5) == 0)
  283996:	83 ec 04             	sub    $0x4,%esp
  283999:	6a 05                	push   $0x5
  28399b:	68 01 3f 28 00       	push   $0x283f01
  2839a0:	53                   	push   %ebx
  2839a1:	e8 42 df ff ff       	call   2818e8 <strncmp>
  2839a6:	83 c4 10             	add    $0x10,%esp
  2839a9:	85 c0                	test   %eax,%eax
  2839ab:	75 14                	jne    2839c1 <cons_runcmd+0xaa>
		cmd_type(cons,fat,cmdline);
  2839ad:	83 ec 04             	sub    $0x4,%esp
  2839b0:	53                   	push   %ebx
  2839b1:	ff 75 10             	pushl  0x10(%ebp)
  2839b4:	ff 75 0c             	pushl  0xc(%ebp)
  2839b7:	e8 f3 fc ff ff       	call   2836af <cmd_type>
  2839bc:	83 c4 10             	add    $0x10,%esp
  2839bf:	eb 51                	jmp    283a12 <cons_runcmd+0xfb>
	else if(cmdline[0] != 0)
  2839c1:	80 3b 00             	cmpb   $0x0,(%ebx)
  2839c4:	74 4c                	je     283a12 <cons_runcmd+0xfb>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  2839c6:	83 ec 04             	sub    $0x4,%esp
  2839c9:	53                   	push   %ebx
  2839ca:	ff 75 10             	pushl  0x10(%ebp)
  2839cd:	ff 75 0c             	pushl  0xc(%ebp)
  2839d0:	e8 af fd ff ff       	call   283784 <cmd_app>
  2839d5:	83 c4 10             	add    $0x10,%esp
  2839d8:	85 c0                	test   %eax,%eax
  2839da:	75 36                	jne    283a12 <cons_runcmd+0xfb>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  2839dc:	83 ec 04             	sub    $0x4,%esp
  2839df:	6a 0c                	push   $0xc
  2839e1:	68 07 3f 28 00       	push   $0x283f07
  2839e6:	6a 00                	push   $0x0
  2839e8:	6a 07                	push   $0x7
  2839ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  2839ed:	ff 70 08             	pushl  0x8(%eax)
  2839f0:	6a 08                	push   $0x8
  2839f2:	ff 30                	pushl  (%eax)
  2839f4:	e8 ea d6 ff ff       	call   2810e3 <putfonts8_asc_sht>
			cons_newline(cons);
  2839f9:	83 c4 14             	add    $0x14,%esp
  2839fc:	ff 75 0c             	pushl  0xc(%ebp)
  2839ff:	e8 76 f9 ff ff       	call   28337a <cons_newline>
			cons_newline(cons);
  283a04:	83 c4 04             	add    $0x4,%esp
  283a07:	ff 75 0c             	pushl  0xc(%ebp)
  283a0a:	e8 6b f9 ff ff       	call   28337a <cons_newline>
  283a0f:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283a12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  283a15:	c9                   	leave  
  283a16:	c3                   	ret    

00283a17 <cons_putstr0>:
	return 0;
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283a17:	55                   	push   %ebp
  283a18:	89 e5                	mov    %esp,%ebp
  283a1a:	56                   	push   %esi
  283a1b:	53                   	push   %ebx
  283a1c:	8b 75 08             	mov    0x8(%ebp),%esi
  283a1f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283a22:	0f b6 03             	movzbl (%ebx),%eax
  283a25:	84 c0                	test   %al,%al
  283a27:	74 1c                	je     283a45 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283a29:	83 ec 04             	sub    $0x4,%esp
  283a2c:	6a 01                	push   $0x1
  283a2e:	0f be c0             	movsbl %al,%eax
  283a31:	50                   	push   %eax
  283a32:	56                   	push   %esi
  283a33:	e8 0d fa ff ff       	call   283445 <cons_putchar>
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283a38:	83 c3 01             	add    $0x1,%ebx
  283a3b:	0f b6 03             	movzbl (%ebx),%eax
  283a3e:	83 c4 10             	add    $0x10,%esp
  283a41:	84 c0                	test   %al,%al
  283a43:	75 e4                	jne    283a29 <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283a45:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a48:	5b                   	pop    %ebx
  283a49:	5e                   	pop    %esi
  283a4a:	5d                   	pop    %ebp
  283a4b:	c3                   	ret    

00283a4c <cons_putstr1>:

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  283a4c:	55                   	push   %ebp
  283a4d:	89 e5                	mov    %esp,%ebp
  283a4f:	57                   	push   %edi
  283a50:	56                   	push   %esi
  283a51:	53                   	push   %ebx
  283a52:	83 ec 0c             	sub    $0xc,%esp
  283a55:	8b 7d 08             	mov    0x8(%ebp),%edi
  283a58:	8b 75 0c             	mov    0xc(%ebp),%esi
  283a5b:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  283a5e:	85 c0                	test   %eax,%eax
  283a60:	7e 1d                	jle    283a7f <cons_putstr1+0x33>
  283a62:	89 f3                	mov    %esi,%ebx
  283a64:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  283a66:	83 ec 04             	sub    $0x4,%esp
  283a69:	6a 01                	push   $0x1
  283a6b:	0f be 03             	movsbl (%ebx),%eax
  283a6e:	50                   	push   %eax
  283a6f:	57                   	push   %edi
  283a70:	e8 d0 f9 ff ff       	call   283445 <cons_putchar>
  283a75:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  283a78:	83 c4 10             	add    $0x10,%esp
  283a7b:	39 f3                	cmp    %esi,%ebx
  283a7d:	75 e7                	jne    283a66 <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  283a7f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283a82:	5b                   	pop    %ebx
  283a83:	5e                   	pop    %esi
  283a84:	5f                   	pop    %edi
  283a85:	5d                   	pop    %ebp
  283a86:	c3                   	ret    

00283a87 <inthandler0d>:

int inthandler0d(int *esp)
{
  283a87:	55                   	push   %ebp
  283a88:	89 e5                	mov    %esp,%ebp
  283a8a:	56                   	push   %esi
  283a8b:	53                   	push   %ebx
	struct CONSOLE *cons = (struct CONSOLE *)*((int *)0x0fec);
  283a8c:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	struct TASK *task = task_now();
  283a92:	e8 b6 ef ff ff       	call   282a4d <task_now>
  283a97:	89 c3                	mov    %eax,%ebx
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  283a99:	83 ec 08             	sub    $0x8,%esp
  283a9c:	68 14 3f 28 00       	push   $0x283f14
  283aa1:	56                   	push   %esi
  283aa2:	e8 70 ff ff ff       	call   283a17 <cons_putstr0>
	return &(task->tss.esp0);
  283aa7:	8d 43 30             	lea    0x30(%ebx),%eax
}
  283aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283aad:	5b                   	pop    %ebx
  283aae:	5e                   	pop    %esi
  283aaf:	5d                   	pop    %ebp
  283ab0:	c3                   	ret    
  283ab1:	66 90                	xchg   %ax,%ax
  283ab3:	66 90                	xchg   %ax,%ax
  283ab5:	66 90                	xchg   %ax,%ax
  283ab7:	66 90                	xchg   %ax,%ax
  283ab9:	66 90                	xchg   %ax,%ax
  283abb:	66 90                	xchg   %ax,%ax
  283abd:	66 90                	xchg   %ax,%ax
  283abf:	90                   	nop

00283ac0 <start_app>:
  283ac0:	60                   	pusha  
  283ac1:	8b 44 24 24          	mov    0x24(%esp),%eax
  283ac5:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  283ac9:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  283acd:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  283ad1:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  283ad5:	89 65 00             	mov    %esp,0x0(%ebp)
  283ad8:	8c 55 04             	mov    %ss,0x4(%ebp)
  283adb:	8e c3                	mov    %ebx,%es
  283add:	8e db                	mov    %ebx,%ds
  283adf:	8e e3                	mov    %ebx,%fs
  283ae1:	8e eb                	mov    %ebx,%gs
  283ae3:	83 c9 03             	or     $0x3,%ecx
  283ae6:	83 cb 03             	or     $0x3,%ebx
  283ae9:	53                   	push   %ebx
  283aea:	52                   	push   %edx
  283aeb:	51                   	push   %ecx
  283aec:	50                   	push   %eax
  283aed:	cb                   	lret   

00283aee <sys_api>:
#include "console.h"
#include "task.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  283aee:	55                   	push   %ebp
  283aef:	89 e5                	mov    %esp,%ebp
  283af1:	57                   	push   %edi
  283af2:	56                   	push   %esi
  283af3:	53                   	push   %ebx
  283af4:	83 ec 0c             	sub    $0xc,%esp
  283af7:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
  283afa:	8b 3d ec 0f 00 00    	mov    0xfec,%edi
	int cs_base = *((int *)0xfe8);
  283b00:	8b 35 e8 0f 00 00    	mov    0xfe8,%esi
	struct TASK *task = task_now();
  283b06:	e8 42 ef ff ff       	call   282a4d <task_now>
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  283b0b:	83 fb 01             	cmp    $0x1,%ebx
  283b0e:	75 1a                	jne    283b2a <sys_api+0x3c>
  283b10:	83 ec 04             	sub    $0x4,%esp
  283b13:	6a 01                	push   $0x1
  283b15:	0f b6 45 24          	movzbl 0x24(%ebp),%eax
  283b19:	50                   	push   %eax
  283b1a:	57                   	push   %edi
  283b1b:	e8 25 f9 ff ff       	call   283445 <cons_putchar>
  283b20:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283b23:	b8 00 00 00 00       	mov    $0x0,%eax
  283b28:	eb 49                	jmp    283b73 <sys_api+0x85>
{
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
	int cs_base = *((int *)0xfe8);
	struct TASK *task = task_now();
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
	else if(edx == 2) cons_putstr0(cons,(char *)ebx + cs_base);
  283b2a:	83 fb 02             	cmp    $0x2,%ebx
  283b2d:	75 17                	jne    283b46 <sys_api+0x58>
  283b2f:	83 ec 08             	sub    $0x8,%esp
  283b32:	03 75 18             	add    0x18(%ebp),%esi
  283b35:	56                   	push   %esi
  283b36:	57                   	push   %edi
  283b37:	e8 db fe ff ff       	call   283a17 <cons_putstr0>
  283b3c:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283b3f:	b8 00 00 00 00       	mov    $0x0,%eax
  283b44:	eb 2d                	jmp    283b73 <sys_api+0x85>
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
	int cs_base = *((int *)0xfe8);
	struct TASK *task = task_now();
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
	else if(edx == 2) cons_putstr0(cons,(char *)ebx + cs_base);
	else if(edx == 3) cons_putstr1(cons,(char *)ebx + cs_base,ecx);
  283b46:	83 fb 03             	cmp    $0x3,%ebx
  283b49:	75 1a                	jne    283b65 <sys_api+0x77>
  283b4b:	83 ec 04             	sub    $0x4,%esp
  283b4e:	ff 75 20             	pushl  0x20(%ebp)
  283b51:	03 75 18             	add    0x18(%ebp),%esi
  283b54:	56                   	push   %esi
  283b55:	57                   	push   %edi
  283b56:	e8 f1 fe ff ff       	call   283a4c <cons_putstr1>
  283b5b:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283b5e:	b8 00 00 00 00       	mov    $0x0,%eax
  283b63:	eb 0e                	jmp    283b73 <sys_api+0x85>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx + cs_base);
	else if(edx == 3) cons_putstr1(cons,(char *)ebx + cs_base,ecx);
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
  283b65:	83 c0 30             	add    $0x30,%eax
  283b68:	83 fb 04             	cmp    $0x4,%ebx
  283b6b:	ba 00 00 00 00       	mov    $0x0,%edx
  283b70:	0f 45 c2             	cmovne %edx,%eax
	}
	return 0;
}
  283b73:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283b76:	5b                   	pop    %ebx
  283b77:	5e                   	pop    %esi
  283b78:	5f                   	pop    %edi
  283b79:	5d                   	pop    %ebp
  283b7a:	c3                   	ret    
  283b7b:	66 90                	xchg   %ax,%ax
  283b7d:	66 90                	xchg   %ax,%ax
  283b7f:	90                   	nop

00283b80 <api_putchar>:
  283b80:	ba 01 00 00 00       	mov    $0x1,%edx
  283b85:	8a 44 24 04          	mov    0x4(%esp),%al
  283b89:	cd 40                	int    $0x40
  283b8b:	c3                   	ret    

00283b8c <api_putstr>:
  283b8c:	ba 02 00 00 00       	mov    $0x2,%edx
  283b91:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  283b95:	cd 40                	int    $0x40
  283b97:	c3                   	ret    

00283b98 <api_end>:
  283b98:	ba 04 00 00 00       	mov    $0x4,%edx
  283b9d:	cd 40                	int    $0x40

00283b9f <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  283b9f:	55                   	push   %ebp
  283ba0:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  283ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
  283ba5:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  283ba9:	5d                   	pop    %ebp
  283baa:	c3                   	ret    
