
main.out.o:     file format elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
  280013:	81 ec 5c 04 00 00    	sub    $0x45c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280019:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  28001b:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  280021:	6a 00                	push   $0x0
  280023:	50                   	push   %eax
  280024:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28002a:	68 80 00 00 00       	push   $0x80
  28002f:	50                   	push   %eax
  280030:	e8 63 1a 00 00       	call   281a98 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280035:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  28003b:	6a 00                	push   $0x0
  28003d:	50                   	push   %eax
  28003e:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280044:	6a 20                	push   $0x20
  280046:	50                   	push   %eax
  280047:	e8 4c 1a 00 00       	call   281a98 <fifo32_init>
	
	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
  280054:	68 ed 00 00 00       	push   $0xed
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	
	int key_leds = (binfo->leds>>4)&7;
  280059:	c0 f8 04             	sar    $0x4,%al
  28005c:	83 e0 07             	and    $0x7,%eax
  28005f:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280065:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  28006b:	50                   	push   %eax
  28006c:	e8 58 1a 00 00       	call   281ac9 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	58                   	pop    %eax
  280072:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280078:	5a                   	pop    %edx
  280079:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  28007f:	50                   	push   %eax
  280080:	e8 44 1a 00 00       	call   281ac9 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  280085:	e8 60 13 00 00       	call   2813ea <init_gdtidt>
	init_pic();
  28008a:	e8 1f 15 00 00       	call   2815ae <init_pic>
	io_sti();
  28008f:	e8 b0 0a 00 00       	call   280b44 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  280094:	59                   	pop    %ecx
  280095:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  28009b:	5b                   	pop    %ebx
  28009c:	68 00 01 00 00       	push   $0x100
  2800a1:	50                   	push   %eax
  2800a2:	e8 2b 1c 00 00       	call   281cd2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  2800a7:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800ad:	83 c4 0c             	add    $0xc,%esp
  2800b0:	50                   	push   %eax
  2800b1:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  2800b7:	68 00 02 00 00       	push   $0x200
  2800bc:	50                   	push   %eax
  2800bd:	e8 c2 1a 00 00       	call   281b84 <enable_mouse>
	
	//init timer
	init_pit();
  2800c2:	e8 d4 27 00 00       	call   28289b <init_pit>
	
	io_out8(PIC0_IMR,0xf8);
  2800c7:	5e                   	pop    %esi
  2800c8:	5f                   	pop    %edi
  2800c9:	68 f8 00 00 00       	push   $0xf8
  2800ce:	6a 21                	push   $0x21
  2800d0:	e8 a1 0a 00 00       	call   280b76 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800d5:	58                   	pop    %eax
  2800d6:	5a                   	pop    %edx
  2800d7:	68 ef 00 00 00       	push   $0xef
  2800dc:	68 a1 00 00 00       	push   $0xa1
  2800e1:	e8 90 0a 00 00       	call   280b76 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800e6:	59                   	pop    %ecx
  2800e7:	5b                   	pop    %ebx
  2800e8:	68 ff ff ff bf       	push   $0xbfffffff
  2800ed:	68 00 00 40 00       	push   $0x400000
  2800f2:	e8 75 1c 00 00       	call   281d6c <memtest>
	memman_init(memman);
  2800f7:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800fe:	89 c7                	mov    %eax,%edi
	memman_init(memman);
  280100:	e8 a6 1d 00 00       	call   281eab <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  280105:	83 c4 0c             	add    $0xc,%esp
  280108:	68 00 e0 09 00       	push   $0x9e000
  28010d:	68 00 10 00 00       	push   $0x1000
  280112:	68 00 00 3c 00       	push   $0x3c0000
  280117:	e8 de 1e 00 00       	call   281ffa <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28011c:	8d 87 00 00 c0 ff    	lea    -0x400000(%edi),%eax
  280122:	83 c4 0c             	add    $0xc,%esp
  280125:	50                   	push   %eax
  280126:	68 00 00 40 00       	push   $0x400000
  28012b:	68 00 00 3c 00       	push   $0x3c0000
  280130:	e8 c5 1e 00 00       	call   281ffa <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
  280135:	e8 71 0b 00 00       	call   280cab <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  28013a:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280141:	50                   	push   %eax
  280142:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280149:	50                   	push   %eax
  28014a:	ff 35 f8 0f 00 00    	pushl  0xff8
  280150:	68 00 00 3c 00       	push   $0x3c0000
  280155:	e8 4e 21 00 00       	call   2822a8 <shtctl_init>
	task_a = task_init(memman); //main task
  28015a:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse, *sht_window, *sht_console;
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  28015d:	89 c6                	mov    %eax,%esi
	task_a = task_init(memman); //main task
  28015f:	68 00 00 3c 00       	push   $0x3c0000
  280164:	e8 b1 2b 00 00       	call   282d1a <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280169:	83 c4 0c             	add    $0xc,%esp
	unsigned char *buf_bg,buf_mouse[256],*buf_window,*buf_console;
	struct TASK *task_a, *task_console;
	
	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	task_a = task_init(memman); //main task
  28016c:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
	fifo.task = task_a;
  280172:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280178:	6a 00                	push   $0x0
  28017a:	6a 01                	push   $0x1
  28017c:	50                   	push   %eax
  28017d:	e8 05 2b 00 00       	call   282c87 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280182:	89 34 24             	mov    %esi,(%esp)
  280185:	e8 b2 21 00 00       	call   28233c <sheet_alloc>
  28018a:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  280190:	58                   	pop    %eax
  280191:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280198:	5a                   	pop    %edx
  280199:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801a0:	0f af c2             	imul   %edx,%eax
  2801a3:	50                   	push   %eax
  2801a4:	68 00 00 3c 00       	push   $0x3c0000
  2801a9:	e8 9f 20 00 00       	call   28224d <memman_alloc_4k>
  2801ae:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801b0:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801b7:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801be:	50                   	push   %eax
  2801bf:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801c6:	50                   	push   %eax
  2801c7:	53                   	push   %ebx
  2801c8:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2801ce:	e8 d0 21 00 00       	call   2823a3 <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801d3:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801da:	83 c4 1c             	add    $0x1c,%esp
  2801dd:	50                   	push   %eax
  2801de:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801e5:	50                   	push   %eax
  2801e6:	53                   	push   %ebx
  2801e7:	e8 48 0b 00 00       	call   280d34 <init_screen8>
	
	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  2801ec:	89 34 24             	mov    %esi,(%esp)
  2801ef:	e8 48 21 00 00       	call   28233c <sheet_alloc>
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  2801f4:	59                   	pop    %ecx
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
	
	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
  2801f5:	89 c3                	mov    %eax,%ebx
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  2801f7:	58                   	pop    %eax
  2801f8:	68 80 20 00 00       	push   $0x2080
  2801fd:	68 00 00 3c 00       	push   $0x3c0000
  280202:	e8 46 20 00 00       	call   28224d <memman_alloc_4k>
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  280207:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  28020e:	6a 34                	push   $0x34
  280210:	68 90 00 00 00       	push   $0x90
  280215:	50                   	push   %eax
  280216:	53                   	push   %ebx
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
	
	//task_a window sheet
	sht_window = sheet_alloc(shtctl);
	buf_window = (unsigned char *)memman_alloc_4k(memman,160*52);
  280217:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
	sheet_setbuf(sht_window,buf_window,144,52,-1);
  28021d:	e8 81 21 00 00       	call   2823a3 <sheet_setbuf>
	make_window8(buf_window,144,52,"task_a",1);
  280222:	83 c4 14             	add    $0x14,%esp
  280225:	6a 01                	push   $0x1
  280227:	68 60 3d 28 00       	push   $0x283d60
  28022c:	6a 34                	push   $0x34
  28022e:	68 90 00 00 00       	push   $0x90
  280233:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280239:	e8 87 0d 00 00       	call   280fc5 <make_window8>
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
  28023e:	83 c4 18             	add    $0x18,%esp
  280241:	6a 07                	push   $0x7
  280243:	6a 10                	push   $0x10
  280245:	68 80 00 00 00       	push   $0x80
  28024a:	6a 1c                	push   $0x1c
  28024c:	6a 08                	push   $0x8
  28024e:	53                   	push   %ebx
  28024f:	e8 34 0f 00 00       	call   281188 <make_textbox8>
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
	//timer for cursor.
	struct TIMER *timer;
	timer = timer_alloc();
  280254:	83 c4 20             	add    $0x20,%esp
  280257:	e8 eb 25 00 00       	call   282847 <timer_alloc>
  28025c:	89 85 bc fb ff ff    	mov    %eax,-0x444(%ebp)
	timer_init(timer,&fifo,1);
  280262:	50                   	push   %eax
  280263:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
  280269:	6a 01                	push   $0x1
  28026b:	50                   	push   %eax
  28026c:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280272:	e8 a1 26 00 00       	call   282918 <timer_init>
	timer_settime(timer,50);
  280277:	58                   	pop    %eax
  280278:	5a                   	pop    %edx
  280279:	6a 32                	push   $0x32
  28027b:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280281:	e8 a6 26 00 00       	call   28292c <timer_settime>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280286:	89 34 24             	mov    %esi,(%esp)
  280289:	e8 ae 20 00 00       	call   28233c <sheet_alloc>
  28028e:	89 85 b4 fb ff ff    	mov    %eax,-0x44c(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280294:	8d 85 e8 fc ff ff    	lea    -0x318(%ebp),%eax
  28029a:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  2802a1:	6a 10                	push   $0x10
  2802a3:	6a 10                	push   $0x10
  2802a5:	50                   	push   %eax
  2802a6:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2802ac:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%ebp)
  2802b2:	e8 ec 20 00 00       	call   2823a3 <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  2802b7:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  2802bd:	83 c4 18             	add    $0x18,%esp
  2802c0:	6a 63                	push   $0x63
  2802c2:	50                   	push   %eax
  2802c3:	e8 db 0b 00 00       	call   280ea3 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  2802c8:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2802cf:	b9 02 00 00 00       	mov    $0x2,%ecx
  2802d4:	83 e8 10             	sub    $0x10,%eax
  2802d7:	99                   	cltd   
  2802d8:	f7 f9                	idiv   %ecx
  2802da:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int my = (binfo->scrny-28-16)/2;
  2802e0:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802e7:	89 34 24             	mov    %esi,(%esp)
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
  2802ea:	83 e8 2c             	sub    $0x2c,%eax
  2802ed:	99                   	cltd   
  2802ee:	f7 f9                	idiv   %ecx
  2802f0:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)

	//console sheet
	sht_console = sheet_alloc(shtctl);
  2802f6:	e8 41 20 00 00       	call   28233c <sheet_alloc>
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  2802fb:	59                   	pop    %ecx
  2802fc:	5e                   	pop    %esi
  2802fd:	68 00 a5 00 00       	push   $0xa500
  280302:	68 00 00 3c 00       	push   $0x3c0000
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;

	//console sheet
	sht_console = sheet_alloc(shtctl);
  280307:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  28030d:	e8 3b 1f 00 00       	call   28224d <memman_alloc_4k>
	sheet_setbuf(sht_console,buf_console,256,165,-1);
  280312:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  280319:	68 a5 00 00 00       	push   $0xa5
  28031e:	68 00 01 00 00       	push   $0x100
  280323:	50                   	push   %eax
  280324:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;

	//console sheet
	sht_console = sheet_alloc(shtctl);
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
  28032a:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	sheet_setbuf(sht_console,buf_console,256,165,-1);
  280330:	e8 6e 20 00 00       	call   2823a3 <sheet_setbuf>
	make_window8(buf_console,256,165,"console",0);
  280335:	83 c4 14             	add    $0x14,%esp
  280338:	6a 00                	push   $0x0
  28033a:	68 6c 3d 28 00       	push   $0x283d6c
  28033f:	68 a5 00 00 00       	push   $0xa5
  280344:	68 00 01 00 00       	push   $0x100
  280349:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28034f:	e8 71 0c 00 00       	call   280fc5 <make_window8>
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
  280354:	83 c4 18             	add    $0x18,%esp
  280357:	6a 00                	push   $0x0
  280359:	68 80 00 00 00       	push   $0x80
  28035e:	68 f0 00 00 00       	push   $0xf0
  280363:	6a 1c                	push   $0x1c
  280365:	6a 08                	push   $0x8
  280367:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28036d:	e8 16 0e 00 00       	call   281188 <make_textbox8>
	task_console = task_alloc();
  280372:	83 c4 20             	add    $0x20,%esp
  280375:	e8 1e 27 00 00       	call   282a98 <task_alloc>
  28037a:	89 c6                	mov    %eax,%esi
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  28037c:	50                   	push   %eax
  28037d:	50                   	push   %eax
  28037e:	68 00 00 01 00       	push   $0x10000
  280383:	68 00 00 3c 00       	push   $0x3c0000
  280388:	e8 c0 1e 00 00       	call   28224d <memman_alloc_4k>
	task_console->tss.cs = 3*8;
	task_console->tss.ss = 1*8;
	task_console->tss.ds = 1*8;
	task_console->tss.fs = 1*8;
	task_console->tss.gs = 1*8;
	*((int *)(task_console->tss.esp + 4)) = sht_console;
  28038d:	8b 8d d4 fb ff ff    	mov    -0x42c(%ebp),%ecx
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  280393:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
	task_console->tss.eip = (int)&console_task - 0x280000;
  280399:	c7 46 4c 3b 2f 00 00 	movl   $0x2f3b,0x4c(%esi)
	task_console->tss.es = 1*8;
  2803a0:	c7 46 74 08 00 00 00 	movl   $0x8,0x74(%esi)
	task_console->tss.cs = 3*8;
  2803a7:	c7 46 78 18 00 00 00 	movl   $0x18,0x78(%esi)
	task_console->tss.ds = 1*8;
	task_console->tss.fs = 1*8;
	task_console->tss.gs = 1*8;
	*((int *)(task_console->tss.esp + 4)) = sht_console;
	*((int *)(task_console->tss.esp + 8)) = memtotal;
	task_run(task_console,2,2);
  2803ae:	83 c4 0c             	add    $0xc,%esp
	buf_console = (unsigned char *)memman_alloc_4k(memman,256*165);
	sheet_setbuf(sht_console,buf_console,256,165,-1);
	make_window8(buf_console,256,165,"console",0);
	make_textbox8(sht_console,8,28,240,128,COL8_000000);
	task_console = task_alloc();
	task_console->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  2803b1:	89 56 64             	mov    %edx,0x64(%esi)
	task_console->tss.eip = (int)&console_task - 0x280000;
	task_console->tss.es = 1*8;
	task_console->tss.cs = 3*8;
	task_console->tss.ss = 1*8;
  2803b4:	c7 46 7c 08 00 00 00 	movl   $0x8,0x7c(%esi)
	task_console->tss.ds = 1*8;
  2803bb:	c7 86 80 00 00 00 08 	movl   $0x8,0x80(%esi)
  2803c2:	00 00 00 
	task_console->tss.fs = 1*8;
  2803c5:	c7 86 84 00 00 00 08 	movl   $0x8,0x84(%esi)
  2803cc:	00 00 00 
	task_console->tss.gs = 1*8;
  2803cf:	c7 86 88 00 00 00 08 	movl   $0x8,0x88(%esi)
  2803d6:	00 00 00 
	*((int *)(task_console->tss.esp + 4)) = sht_console;
  2803d9:	89 88 f8 ff 00 00    	mov    %ecx,0xfff8(%eax)
	*((int *)(task_console->tss.esp + 8)) = memtotal;
  2803df:	8b 46 64             	mov    0x64(%esi),%eax
  2803e2:	89 78 08             	mov    %edi,0x8(%eax)
	task_run(task_console,2,2);
  2803e5:	6a 02                	push   $0x2
  2803e7:	6a 02                	push   $0x2
  2803e9:	56                   	push   %esi
  2803ea:	e8 98 28 00 00       	call   282c87 <task_run>


	sheet_slide(sht_bg,0,0);
  2803ef:	83 c4 0c             	add    $0xc,%esp
  2803f2:	6a 00                	push   $0x0
  2803f4:	6a 00                	push   $0x0
  2803f6:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2803fc:	e8 c3 23 00 00       	call   2827c4 <sheet_slide>
	sheet_slide(sht_console,32,4);
  280401:	83 c4 0c             	add    $0xc,%esp
  280404:	6a 04                	push   $0x4
  280406:	6a 20                	push   $0x20
  280408:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28040e:	e8 b1 23 00 00       	call   2827c4 <sheet_slide>
	sheet_slide(sht_window,	64, 56);
  280413:	83 c4 0c             	add    $0xc,%esp
  280416:	6a 38                	push   $0x38
  280418:	6a 40                	push   $0x40
  28041a:	53                   	push   %ebx
  28041b:	e8 a4 23 00 00       	call   2827c4 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  280420:	83 c4 0c             	add    $0xc,%esp
  280423:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280429:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  28042f:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280435:	e8 8a 23 00 00       	call   2827c4 <sheet_slide>
	sheet_updown(sht_bg,0);
  28043a:	58                   	pop    %eax
  28043b:	5a                   	pop    %edx
  28043c:	6a 00                	push   $0x0
  28043e:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280444:	e8 92 22 00 00       	call   2826db <sheet_updown>
	sheet_updown(sht_console,1);
  280449:	59                   	pop    %ecx
  28044a:	5f                   	pop    %edi
  28044b:	6a 01                	push   $0x1
  28044d:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280453:	e8 83 22 00 00       	call   2826db <sheet_updown>
	sheet_updown(sht_window,2);
  280458:	58                   	pop    %eax
  280459:	5a                   	pop    %edx
  28045a:	6a 02                	push   $0x2
  28045c:	53                   	push   %ebx
  28045d:	e8 79 22 00 00       	call   2826db <sheet_updown>
	sheet_updown(sht_mouse,3);
  280462:	59                   	pop    %ecx
  280463:	5f                   	pop    %edi
  280464:	6a 03                	push   $0x3
  280466:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
	sheet_setbuf(sht_window,buf_window,144,52,-1);
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
  28046c:	bf 08 00 00 00       	mov    $0x8,%edi
	sheet_slide(sht_window,	64, 56);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,0);
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
	sheet_updown(sht_mouse,3);
  280471:	e8 65 22 00 00       	call   2826db <sheet_updown>

	int key_to = 0,key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280476:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
	sheet_slide(sht_window,	64, 56);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,0);
	sheet_updown(sht_console,1);
	sheet_updown(sht_window,2);
	sheet_updown(sht_mouse,3);
  28047c:	83 c4 10             	add    $0x10,%esp
	
	extern struct TIMERCTL timerctl;

	int key_to = 0,key_shift = 0,keycmd_wait = -1;
  28047f:	c7 85 c4 fb ff ff ff 	movl   $0xffffffff,-0x43c(%ebp)
  280486:	ff ff ff 
  280489:	c7 85 d8 fb ff ff 00 	movl   $0x0,-0x428(%ebp)
  280490:	00 00 00 
  280493:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  28049a:	00 00 00 

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  28049d:	89 85 c8 fb ff ff    	mov    %eax,-0x438(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804a3:	8d 85 fc fb ff ff    	lea    -0x404(%ebp),%eax
	make_window8(buf_window,144,52,"task_a",1);
	//text box in task_a window
	int cursor_x,cursor_c;
	make_textbox8(sht_window,8,28,128,16,COL8_FFFFFF);
	cursor_x = 8;
	cursor_c = COL8_FFFFFF;
  2804a9:	c7 85 dc fb ff ff 07 	movl   $0x7,-0x424(%ebp)
  2804b0:	00 00 00 
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  2804b3:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)

	int key_to = 0,key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  2804b9:	83 ec 0c             	sub    $0xc,%esp
  2804bc:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804c2:	e8 af 16 00 00       	call   281b76 <fifo32_status>
  2804c7:	8b 8d c4 fb ff ff    	mov    -0x43c(%ebp),%ecx
  2804cd:	83 c4 10             	add    $0x10,%esp
  2804d0:	c1 e9 1f             	shr    $0x1f,%ecx
  2804d3:	74 2f                	je     280504 <bootmain+0x504>
  2804d5:	85 c0                	test   %eax,%eax
  2804d7:	7e 2b                	jle    280504 <bootmain+0x504>
		{
			keycmd_wait = fifo32_get(&keycmd);
  2804d9:	83 ec 0c             	sub    $0xc,%esp
  2804dc:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804e2:	e8 54 16 00 00       	call   281b3b <fifo32_get>
  2804e7:	89 85 c4 fb ff ff    	mov    %eax,-0x43c(%ebp)
			wait_KBC_sendready();
  2804ed:	e8 c7 17 00 00       	call   281cb9 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  2804f2:	59                   	pop    %ecx
  2804f3:	58                   	pop    %eax
  2804f4:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2804fa:	6a 60                	push   $0x60
  2804fc:	e8 75 06 00 00       	call   280b76 <io_out8>
  280501:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  280504:	e8 39 06 00 00       	call   280b42 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280509:	83 ec 0c             	sub    $0xc,%esp
  28050c:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280512:	e8 5f 16 00 00       	call   281b76 <fifo32_status>
  280517:	83 c4 10             	add    $0x10,%esp
  28051a:	85 c0                	test   %eax,%eax
  28051c:	75 18                	jne    280536 <bootmain+0x536>
		{	
			task_sleep(task_a);
  28051e:	83 ec 0c             	sub    $0xc,%esp
  280521:	ff b5 a8 fb ff ff    	pushl  -0x458(%ebp)
  280527:	e8 cd 29 00 00       	call   282ef9 <task_sleep>
			io_sti();
  28052c:	e8 13 06 00 00       	call   280b44 <io_sti>
  280531:	e9 ba 05 00 00       	jmp    280af0 <bootmain+0xaf0>
		}
		else
		{
			int i = fifo32_get(&fifo);
  280536:	83 ec 0c             	sub    $0xc,%esp
  280539:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  28053f:	e8 f7 15 00 00       	call   281b3b <fifo32_get>
  280544:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
			io_sti();
  28054a:	e8 f5 05 00 00       	call   280b44 <io_sti>
			if(256<=i && i<=511)
  28054f:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  280555:	83 c4 10             	add    $0x10,%esp
  280558:	8d 82 00 ff ff ff    	lea    -0x100(%edx),%eax
  28055e:	3d ff 00 00 00       	cmp    $0xff,%eax
  280563:	0f 87 63 04 00 00    	ja     2809cc <bootmain+0x9cc>
			{
				xtoa(i-256,s);
  280569:	8d 8d 36 fc ff ff    	lea    -0x3ca(%ebp),%ecx
  28056f:	89 95 9c fb ff ff    	mov    %edx,-0x464(%ebp)
  280575:	52                   	push   %edx
  280576:	52                   	push   %edx
  280577:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
  28057d:	51                   	push   %ecx
  28057e:	50                   	push   %eax
  28057f:	89 8d a0 fb ff ff    	mov    %ecx,-0x460(%ebp)
  280585:	e8 bc 12 00 00       	call   281846 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  28058a:	8b 8d a0 fb ff ff    	mov    -0x460(%ebp),%ecx
  280590:	83 c4 0c             	add    $0xc,%esp
  280593:	6a 04                	push   $0x4
  280595:	51                   	push   %ecx
  280596:	6a 00                	push   $0x0
  280598:	6a 07                	push   $0x7
  28059a:	6a 10                	push   $0x10
  28059c:	6a 00                	push   $0x0
  28059e:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2805a4:	e8 7a 0b 00 00       	call   281123 <putfonts8_asc_sht>
				
				s[0] = key_char(i-256,key_shift);
  2805a9:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  2805af:	83 c4 18             	add    $0x18,%esp
  2805b2:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2805b8:	50                   	push   %eax
  2805b9:	e8 86 17 00 00       	call   281d44 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2805be:	8d 48 bf             	lea    -0x41(%eax),%ecx
  2805c1:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
				
				s[0] = key_char(i-256,key_shift);
  2805c4:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2805ca:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2805d1:	8b 95 9c fb ff ff    	mov    -0x464(%ebp),%edx
  2805d7:	80 f9 19             	cmp    $0x19,%cl
  2805da:	77 26                	ja     280602 <bootmain+0x602>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2805dc:	f6 85 e0 fb ff ff 04 	testb  $0x4,-0x420(%ebp)
  2805e3:	75 0b                	jne    2805f0 <bootmain+0x5f0>
  2805e5:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  2805ec:	75 0b                	jne    2805f9 <bootmain+0x5f9>
  2805ee:	eb 12                	jmp    280602 <bootmain+0x602>
						(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2805f0:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  2805f7:	75 09                	jne    280602 <bootmain+0x602>
						s[0] += 0x20;		//uppercase 2 lowercases					
  2805f9:	83 c0 20             	add    $0x20,%eax
  2805fc:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0)//visible char
  280602:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280609:	84 c0                	test   %al,%al
  28060b:	74 73                	je     280680 <bootmain+0x680>
				{
					if(key_to == 0 && cursor_x <128)
  28060d:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280614:	75 30                	jne    280646 <bootmain+0x646>
  280616:	83 ff 7f             	cmp    $0x7f,%edi
  280619:	7f 2b                	jg     280646 <bootmain+0x646>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF,s,1);
  28061b:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280621:	51                   	push   %ecx
  280622:	6a 01                	push   $0x1
  280624:	89 95 a4 fb ff ff    	mov    %edx,-0x45c(%ebp)
  28062a:	50                   	push   %eax
  28062b:	6a 07                	push   $0x7
  28062d:	6a 00                	push   $0x0
  28062f:	6a 1c                	push   $0x1c
  280631:	57                   	push   %edi
  280632:	53                   	push   %ebx
						cursor_x += 8;
  280633:	83 c7 08             	add    $0x8,%edi
				}
				if(s[0]!=0)//visible char
				{
					if(key_to == 0 && cursor_x <128)
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF,s,1);
  280636:	e8 e8 0a 00 00       	call   281123 <putfonts8_asc_sht>
  28063b:	83 c4 20             	add    $0x20,%esp
  28063e:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  280644:	eb 3a                	jmp    280680 <bootmain+0x680>
						cursor_x += 8;
					}
					else if(key_to == 1)
  280646:	83 bd e4 fb ff ff 01 	cmpl   $0x1,-0x41c(%ebp)
  28064d:	75 31                	jne    280680 <bootmain+0x680>
					{
						fifo32_put(&task_console->fifo,s[0]+256); //send key to console fifo
  28064f:	05 00 01 00 00       	add    $0x100,%eax
  280654:	89 95 a4 fb ff ff    	mov    %edx,-0x45c(%ebp)
  28065a:	52                   	push   %edx
  28065b:	52                   	push   %edx
  28065c:	50                   	push   %eax
  28065d:	8d 46 10             	lea    0x10(%esi),%eax
  280660:	50                   	push   %eax
  280661:	e8 63 14 00 00       	call   281ac9 <fifo32_put>
					}
					
				}
				if(i == 256 + 0x0f) //tab key
  280666:	8b 95 a4 fb ff ff    	mov    -0x45c(%ebp),%edx
  28066c:	83 c4 10             	add    $0x10,%esp
  28066f:	81 fa 0f 01 00 00    	cmp    $0x10f,%edx
  280675:	0f 85 7f 01 00 00    	jne    2807fa <bootmain+0x7fa>
  28067b:	e9 84 00 00 00       	jmp    280704 <bootmain+0x704>
  280680:	81 fa 0f 01 00 00    	cmp    $0x10f,%edx
  280686:	0f 85 ff 00 00 00    	jne    28078b <bootmain+0x78b>
				{
					if(key_to == 0)
  28068c:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280693:	75 6f                	jne    280704 <bootmain+0x704>
					{
						//switch to task_console window
						key_to = 1;
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",0);
  280695:	6a 00                	push   $0x0
  280697:	68 60 3d 28 00       	push   $0x283d60
  28069c:	ff 73 04             	pushl  0x4(%ebx)
  28069f:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  2806a5:	e8 63 08 00 00       	call   280f0d <make_wtitle8>
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",1);
  2806aa:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  2806b0:	6a 01                	push   $0x1
  2806b2:	68 67 3d 28 00       	push   $0x283d67
  2806b7:	ff 70 04             	pushl  0x4(%eax)
  2806ba:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2806c0:	e8 48 08 00 00       	call   280f0d <make_wtitle8>
						cursor_c = -1;	//set cursor color to null(-1) to hide
						boxfill8(sht_window->buf,sht_window->bxsize,COL8_FFFFFF,cursor_x,28,cursor_x+7,43);
  2806c5:	8d 47 07             	lea    0x7(%edi),%eax
  2806c8:	83 c4 1c             	add    $0x1c,%esp
  2806cb:	6a 2b                	push   $0x2b
  2806cd:	50                   	push   %eax
  2806ce:	6a 1c                	push   $0x1c
  2806d0:	57                   	push   %edi
  2806d1:	6a 07                	push   $0x7
  2806d3:	ff 73 04             	pushl  0x4(%ebx)
  2806d6:	ff 33                	pushl  (%ebx)
  2806d8:	e8 e7 05 00 00       	call   280cc4 <boxfill8>
						fifo32_put(&task_console->fifo,2); //wake console cursor
  2806dd:	8d 46 10             	lea    0x10(%esi),%eax
  2806e0:	83 c4 18             	add    $0x18,%esp
  2806e3:	6a 02                	push   $0x2
  2806e5:	50                   	push   %eax
  2806e6:	e8 de 13 00 00       	call   281ac9 <fifo32_put>
  2806eb:	83 c4 10             	add    $0x10,%esp
				if(i == 256 + 0x0f) //tab key
				{
					if(key_to == 0)
					{
						//switch to task_console window
						key_to = 1;
  2806ee:	c7 85 e4 fb ff ff 01 	movl   $0x1,-0x41c(%ebp)
  2806f5:	00 00 00 
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",0);
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",1);
						cursor_c = -1;	//set cursor color to null(-1) to hide
  2806f8:	c7 85 dc fb ff ff ff 	movl   $0xffffffff,-0x424(%ebp)
  2806ff:	ff ff ff 
  280702:	eb 55                	jmp    280759 <bootmain+0x759>
					}
					else
					{
						//back to task_a window
						key_to = 0;
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",1);
  280704:	6a 01                	push   $0x1
  280706:	68 60 3d 28 00       	push   $0x283d60
  28070b:	ff 73 04             	pushl  0x4(%ebx)
  28070e:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280714:	e8 f4 07 00 00       	call   280f0d <make_wtitle8>
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",0);
  280719:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  28071f:	6a 00                	push   $0x0
  280721:	68 67 3d 28 00       	push   $0x283d67
  280726:	ff 70 04             	pushl  0x4(%eax)
  280729:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28072f:	e8 d9 07 00 00       	call   280f0d <make_wtitle8>
						cursor_c = COL8_000000;//show the cursor
						fifo32_put(&task_console->fifo,3); //stop console cursor
  280734:	8d 46 10             	lea    0x10(%esi),%eax
  280737:	83 c4 18             	add    $0x18,%esp
  28073a:	6a 03                	push   $0x3
  28073c:	50                   	push   %eax
  28073d:	e8 87 13 00 00       	call   281ac9 <fifo32_put>
  280742:	83 c4 10             	add    $0x10,%esp
						fifo32_put(&task_console->fifo,2); //wake console cursor
					}
					else
					{
						//back to task_a window
						key_to = 0;
  280745:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  28074c:	00 00 00 
						make_wtitle8(buf_window,sht_window->bxsize,"task_a",1);
						make_wtitle8(buf_console,sht_console->bxsize,"task_console",0);
						cursor_c = COL8_000000;//show the cursor
  28074f:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  280756:	00 00 00 
						fifo32_put(&task_console->fifo,3); //stop console cursor
					}
					sheet_refresh(sht_window,0,0,sht_window->bxsize,21);
  280759:	83 ec 0c             	sub    $0xc,%esp
  28075c:	6a 15                	push   $0x15
  28075e:	ff 73 04             	pushl  0x4(%ebx)
  280761:	6a 00                	push   $0x0
  280763:	6a 00                	push   $0x0
  280765:	53                   	push   %ebx
  280766:	e8 37 1f 00 00       	call   2826a2 <sheet_refresh>
					sheet_refresh(sht_console,0,0,sht_console->bxsize,21);
  28076b:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  280771:	83 c4 14             	add    $0x14,%esp
  280774:	6a 15                	push   $0x15
  280776:	ff 70 04             	pushl  0x4(%eax)
  280779:	6a 00                	push   $0x0
  28077b:	6a 00                	push   $0x0
  28077d:	50                   	push   %eax
  28077e:	e8 1f 1f 00 00       	call   2826a2 <sheet_refresh>
  280783:	83 c4 20             	add    $0x20,%esp
  280786:	e9 bc 01 00 00       	jmp    280947 <bootmain+0x947>
				}
			 	else if(i == 256 + 0x0e) //back key
  28078b:	81 fa 0e 01 00 00    	cmp    $0x10e,%edx
  280791:	75 6f                	jne    280802 <bootmain+0x802>
				{
					if(key_to == 0 && cursor_x >8)
  280793:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  28079a:	75 2f                	jne    2807cb <bootmain+0x7cb>
  28079c:	83 ff 08             	cmp    $0x8,%edi
  28079f:	7e 2a                	jle    2807cb <bootmain+0x7cb>
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
  2807a1:	50                   	push   %eax
  2807a2:	6a 01                	push   $0x1
  2807a4:	68 43 41 28 00       	push   $0x284143
  2807a9:	6a 07                	push   $0x7
  2807ab:	6a 00                	push   $0x0
  2807ad:	6a 1c                	push   $0x1c
  2807af:	57                   	push   %edi
  2807b0:	53                   	push   %ebx
						cursor_x -= 8;
  2807b1:	83 ef 08             	sub    $0x8,%edi
				}
			 	else if(i == 256 + 0x0e) //back key
				{
					if(key_to == 0 && cursor_x >8)
					{
						putfonts8_asc_sht(sht_window,cursor_x,28,COL8_000000,COL8_FFFFFF," ",1);
  2807b4:	e8 6a 09 00 00       	call   281123 <putfonts8_asc_sht>
  2807b9:	83 c4 20             	add    $0x20,%esp
  2807bc:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2807c3:	00 00 00 
  2807c6:	e9 7c 01 00 00       	jmp    280947 <bootmain+0x947>
						cursor_x -= 8;
					}
					else if(key_to == 1)
  2807cb:	83 bd e4 fb ff ff 01 	cmpl   $0x1,-0x41c(%ebp)
  2807d2:	0f 85 6f 01 00 00    	jne    280947 <bootmain+0x947>
					{
						fifo32_put(&task_console->fifo,8+256);
  2807d8:	50                   	push   %eax
  2807d9:	50                   	push   %eax
  2807da:	8d 46 10             	lea    0x10(%esi),%eax
  2807dd:	68 08 01 00 00       	push   $0x108
  2807e2:	50                   	push   %eax
  2807e3:	e8 e1 12 00 00       	call   281ac9 <fifo32_put>
  2807e8:	83 c4 10             	add    $0x10,%esp
  2807eb:	c7 85 e4 fb ff ff 01 	movl   $0x1,-0x41c(%ebp)
  2807f2:	00 00 00 
  2807f5:	e9 4d 01 00 00       	jmp    280947 <bootmain+0x947>
						fifo32_put(&task_console->fifo,3); //stop console cursor
					}
					sheet_refresh(sht_window,0,0,sht_window->bxsize,21);
					sheet_refresh(sht_console,0,0,sht_console->bxsize,21);
				}
			 	else if(i == 256 + 0x0e) //back key
  2807fa:	81 fa 0e 01 00 00    	cmp    $0x10e,%edx
  280800:	74 d6                	je     2807d8 <bootmain+0x7d8>
					else if(key_to == 1)
					{
						fifo32_put(&task_console->fifo,8+256);
					}
				}
				else if(i == 256 + 0x1c)  //return key
  280802:	81 fa 1c 01 00 00    	cmp    $0x11c,%edx
  280808:	75 1a                	jne    280824 <bootmain+0x824>
				{
					if(key_to!=0) //forcus on task_console window
  28080a:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  280811:	0f 84 30 01 00 00    	je     280947 <bootmain+0x947>
					{
						fifo32_put(&task_console->fifo,10+256);
  280817:	8d 46 10             	lea    0x10(%esi),%eax
  28081a:	51                   	push   %ecx
  28081b:	51                   	push   %ecx
  28081c:	68 0a 01 00 00       	push   $0x10a
  280821:	50                   	push   %eax
  280822:	eb 7f                	jmp    2808a3 <bootmain+0x8a3>
					}
				}
				else if(i == 256 + 0x2a)  //left shift on
  280824:	81 fa 2a 01 00 00    	cmp    $0x12a,%edx
  28082a:	75 0c                	jne    280838 <bootmain+0x838>
				{
					key_shift |= 1;
  28082c:	83 8d d8 fb ff ff 01 	orl    $0x1,-0x428(%ebp)
  280833:	e9 0f 01 00 00       	jmp    280947 <bootmain+0x947>
				} 
				else if(i == 256 + 0x36) //right shift on
  280838:	81 fa 36 01 00 00    	cmp    $0x136,%edx
  28083e:	75 0c                	jne    28084c <bootmain+0x84c>
				{
					key_shift |= 2;
  280840:	83 8d d8 fb ff ff 02 	orl    $0x2,-0x428(%ebp)
  280847:	e9 fb 00 00 00       	jmp    280947 <bootmain+0x947>
				}
				else if(i == 256 + 0xaa)  //left shift off
  28084c:	81 fa aa 01 00 00    	cmp    $0x1aa,%edx
  280852:	75 0c                	jne    280860 <bootmain+0x860>
				{
					key_shift &= ~1;
  280854:	83 a5 d8 fb ff ff fe 	andl   $0xfffffffe,-0x428(%ebp)
  28085b:	e9 e7 00 00 00       	jmp    280947 <bootmain+0x947>
				} 
				else if(i == 256 + 0xb6) //right shift off
  280860:	81 fa b6 01 00 00    	cmp    $0x1b6,%edx
  280866:	75 0c                	jne    280874 <bootmain+0x874>
				{
					key_shift &= ~2;
  280868:	83 a5 d8 fb ff ff fd 	andl   $0xfffffffd,-0x428(%ebp)
  28086f:	e9 d3 00 00 00       	jmp    280947 <bootmain+0x947>
				}
				else if(i == 256 + 0x3a) //CapsLock
  280874:	81 fa 3a 01 00 00    	cmp    $0x13a,%edx
  28087a:	75 34                	jne    2808b0 <bootmain+0x8b0>
				{
					key_leds ^= 4;
  28087c:	83 b5 e0 fb ff ff 04 	xorl   $0x4,-0x420(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  280883:	51                   	push   %ecx
  280884:	51                   	push   %ecx
  280885:	68 ed 00 00 00       	push   $0xed
  28088a:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  280890:	e8 34 12 00 00       	call   281ac9 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  280895:	58                   	pop    %eax
  280896:	5a                   	pop    %edx
  280897:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  28089d:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2808a3:	e8 21 12 00 00       	call   281ac9 <fifo32_put>
  2808a8:	83 c4 10             	add    $0x10,%esp
  2808ab:	e9 97 00 00 00       	jmp    280947 <bootmain+0x947>
				}
				else if(i == 256 + 0x45) //NumLock
  2808b0:	81 fa 45 01 00 00    	cmp    $0x145,%edx
  2808b6:	75 09                	jne    2808c1 <bootmain+0x8c1>
				{
					key_leds ^= 2;
  2808b8:	83 b5 e0 fb ff ff 02 	xorl   $0x2,-0x420(%ebp)
  2808bf:	eb c2                	jmp    280883 <bootmain+0x883>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2808c1:	81 fa 46 01 00 00    	cmp    $0x146,%edx
  2808c7:	75 09                	jne    2808d2 <bootmain+0x8d2>
				{
					key_leds ^= 1;
  2808c9:	83 b5 e0 fb ff ff 01 	xorl   $0x1,-0x420(%ebp)
  2808d0:	eb b1                	jmp    280883 <bootmain+0x883>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0xfa)
  2808d2:	81 fa fa 01 00 00    	cmp    $0x1fa,%edx
  2808d8:	74 63                	je     28093d <bootmain+0x93d>
				{
					keycmd_wait = -1;
				}
				else if(i == 256 + 0xfe)
  2808da:	81 fa fe 01 00 00    	cmp    $0x1fe,%edx
  2808e0:	75 16                	jne    2808f8 <bootmain+0x8f8>
				{
					wait_KBC_sendready();
  2808e2:	e8 d2 13 00 00       	call   281cb9 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  2808e7:	52                   	push   %edx
  2808e8:	52                   	push   %edx
  2808e9:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2808ef:	6a 60                	push   $0x60
  2808f1:	e8 80 02 00 00       	call   280b76 <io_out8>
  2808f6:	eb b0                	jmp    2808a8 <bootmain+0x8a8>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && task_console->tss.esp0 != 0)	//shift + F1
  2808f8:	81 fa 3b 01 00 00    	cmp    $0x13b,%edx
  2808fe:	75 47                	jne    280947 <bootmain+0x947>
  280900:	83 bd d8 fb ff ff 00 	cmpl   $0x0,-0x428(%ebp)
  280907:	74 3e                	je     280947 <bootmain+0x947>
  280909:	83 7e 30 00          	cmpl   $0x0,0x30(%esi)
  28090d:	74 38                	je     280947 <bootmain+0x947>
				{
					struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
					extern void asm_end_app();
					cons_putstr0(cons,"\nBreak(key):\n");
  28090f:	50                   	push   %eax
  280910:	50                   	push   %eax
  280911:	68 74 3d 28 00       	push   $0x283d74
  280916:	ff 35 ec 0f 00 00    	pushl  0xfec
  28091c:	e8 a8 2f 00 00       	call   2838c9 <cons_putstr0>
					io_cli();
  280921:	e8 1c 02 00 00       	call   280b42 <io_cli>
					task_console->tss.eax = (int)&(task_console->tss.esp0);
  280926:	8d 46 30             	lea    0x30(%esi),%eax
					task_console->tss.eip = (int)asm_end_app;
  280929:	c7 46 4c 80 2a 28 00 	movl   $0x282a80,0x4c(%esi)
				{
					struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
					extern void asm_end_app();
					cons_putstr0(cons,"\nBreak(key):\n");
					io_cli();
					task_console->tss.eax = (int)&(task_console->tss.esp0);
  280930:	89 46 54             	mov    %eax,0x54(%esi)
					task_console->tss.eip = (int)asm_end_app;
					io_sti();
  280933:	e8 0c 02 00 00       	call   280b44 <io_sti>
  280938:	e9 6b ff ff ff       	jmp    2808a8 <bootmain+0x8a8>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0xfa)
				{
					keycmd_wait = -1;
  28093d:	c7 85 c4 fb ff ff ff 	movl   $0xffffffff,-0x43c(%ebp)
  280944:	ff ff ff 
					io_cli();
					task_console->tss.eax = (int)&(task_console->tss.esp0);
					task_console->tss.eip = (int)asm_end_app;
					io_sti();
				}
				if(cursor_c >= 0)
  280947:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  28094e:	78 1d                	js     28096d <bootmain+0x96d>
				{
					//show cursor after show character
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  280950:	50                   	push   %eax
  280951:	8d 47 07             	lea    0x7(%edi),%eax
  280954:	6a 2b                	push   $0x2b
  280956:	50                   	push   %eax
  280957:	6a 1c                	push   $0x1c
  280959:	57                   	push   %edi
  28095a:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280960:	ff 73 04             	pushl  0x4(%ebx)
  280963:	ff 33                	pushl  (%ebx)
  280965:	e8 5a 03 00 00       	call   280cc4 <boxfill8>
  28096a:	83 c4 20             	add    $0x20,%esp
				}
				sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  28096d:	8d 47 08             	lea    0x8(%edi),%eax
  280970:	83 ec 0c             	sub    $0xc,%esp
  280973:	6a 2c                	push   $0x2c
  280975:	50                   	push   %eax
  280976:	6a 1c                	push   $0x1c
  280978:	57                   	push   %edi
  280979:	53                   	push   %ebx
  28097a:	e8 23 1d 00 00       	call   2826a2 <sheet_refresh>
				sprintf(s,"%d,%d",key_leds,key_shift);
  28097f:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280985:	83 c4 20             	add    $0x20,%esp
  280988:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28098e:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  280994:	68 82 3d 28 00       	push   $0x283d82
  280999:	50                   	push   %eax
  28099a:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
  2809a0:	e8 38 0f 00 00       	call   2818dd <sprintf>
				putfonts8_asc_sht(sht_bg,0,32,COL8_FFFFFF,COL8_000000,s,4);
  2809a5:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  2809ab:	83 c4 0c             	add    $0xc,%esp
  2809ae:	6a 04                	push   $0x4
  2809b0:	50                   	push   %eax
  2809b1:	6a 00                	push   $0x0
  2809b3:	6a 07                	push   $0x7
  2809b5:	6a 20                	push   $0x20
  2809b7:	6a 00                	push   $0x0
  2809b9:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2809bf:	e8 5f 07 00 00       	call   281123 <putfonts8_asc_sht>
  2809c4:	83 c4 20             	add    $0x20,%esp
  2809c7:	e9 ed fa ff ff       	jmp    2804b9 <bootmain+0x4b9>

			}
			else if(512<=i && i<=767)
  2809cc:	8d 82 00 fe ff ff    	lea    -0x200(%edx),%eax
  2809d2:	3d ff 00 00 00       	cmp    $0xff,%eax
  2809d7:	0f 87 b5 00 00 00    	ja     280a92 <bootmain+0xa92>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  2809dd:	50                   	push   %eax
  2809de:	50                   	push   %eax
  2809df:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2809e5:	0f b6 d2             	movzbl %dl,%edx
  2809e8:	52                   	push   %edx
  2809e9:	50                   	push   %eax
  2809ea:	e8 df 11 00 00       	call   281bce <mouse_decode>
  2809ef:	83 c4 10             	add    $0x10,%esp
  2809f2:	85 c0                	test   %eax,%eax
  2809f4:	0f 84 bf fa ff ff    	je     2804b9 <bootmain+0x4b9>
  2809fa:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280a00:	31 c9                	xor    %ecx,%ecx
  280a02:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  280a08:	0f 48 c1             	cmovs  %ecx,%eax
  280a0b:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a11:	8b 85 cc fb ff ff    	mov    -0x434(%ebp),%eax
  280a17:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  280a1d:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  280a20:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280a27:	39 85 d0 fb ff ff    	cmp    %eax,-0x430(%ebp)
  280a2d:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a30:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  280a37:	0f 4c 95 d0 fb ff ff 	cmovl  -0x430(%ebp),%edx
  280a3e:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a44:	8d 50 ff             	lea    -0x1(%eax),%edx
  280a47:	39 c1                	cmp    %eax,%ecx
					sheet_slide(sht_mouse,mx,my);
  280a49:	50                   	push   %eax
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a4a:	0f 4c d1             	cmovl  %ecx,%edx
					sheet_slide(sht_mouse,mx,my);
  280a4d:	52                   	push   %edx
  280a4e:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280a54:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280a5a:	89 95 cc fb ff ff    	mov    %edx,-0x434(%ebp)
					sheet_slide(sht_mouse,mx,my);
  280a60:	e8 5f 1d 00 00       	call   2827c4 <sheet_slide>
					if(mdec.btn & 0x01)
  280a65:	83 c4 10             	add    $0x10,%esp
  280a68:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
  280a6f:	0f 84 44 fa ff ff    	je     2804b9 <bootmain+0x4b9>
					{
						sheet_slide(sht_window,mx-80,my-8);
  280a75:	50                   	push   %eax
  280a76:	8b 85 cc fb ff ff    	mov    -0x434(%ebp),%eax
  280a7c:	83 e8 08             	sub    $0x8,%eax
  280a7f:	50                   	push   %eax
  280a80:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280a86:	83 e8 50             	sub    $0x50,%eax
  280a89:	50                   	push   %eax
  280a8a:	53                   	push   %ebx
  280a8b:	e8 34 1d 00 00       	call   2827c4 <sheet_slide>
  280a90:	eb 5e                	jmp    280af0 <bootmain+0xaf0>
					}
				}
			}
			else if(i<=1)
  280a92:	83 fa 01             	cmp    $0x1,%edx
  280a95:	0f 8f 1e fa ff ff    	jg     2804b9 <bootmain+0x4b9>
			{
				if(i != 0)
  280a9b:	85 d2                	test   %edx,%edx
  280a9d:	74 22                	je     280ac1 <bootmain+0xac1>
				{
					timer_init(timer,&fifo,0);
  280a9f:	50                   	push   %eax
  280aa0:	6a 00                	push   $0x0
  280aa2:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280aa8:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280aae:	e8 65 1e 00 00       	call   282918 <timer_init>
					if(cursor_c>=0) cursor_c = COL8_000000;
  280ab3:	83 c4 10             	add    $0x10,%esp
  280ab6:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  280abd:	79 39                	jns    280af8 <bootmain+0xaf8>
  280abf:	eb 20                	jmp    280ae1 <bootmain+0xae1>
				}
				else
				{
					timer_init(timer,&fifo,1);
  280ac1:	51                   	push   %ecx
  280ac2:	6a 01                	push   $0x1
  280ac4:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  280aca:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280ad0:	e8 43 1e 00 00       	call   282918 <timer_init>
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280ad5:	83 c4 10             	add    $0x10,%esp
  280ad8:	83 bd dc fb ff ff 00 	cmpl   $0x0,-0x424(%ebp)
  280adf:	79 23                	jns    280b04 <bootmain+0xb04>
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
				}
				timer_settime(timer,50);
  280ae1:	52                   	push   %edx
  280ae2:	52                   	push   %edx
  280ae3:	6a 32                	push   $0x32
  280ae5:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280aeb:	e8 3c 1e 00 00       	call   28292c <timer_settime>
  280af0:	83 c4 10             	add    $0x10,%esp
  280af3:	e9 c1 f9 ff ff       	jmp    2804b9 <bootmain+0x4b9>
			else if(i<=1)
			{
				if(i != 0)
				{
					timer_init(timer,&fifo,0);
					if(cursor_c>=0) cursor_c = COL8_000000;
  280af8:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  280aff:	00 00 00 
  280b02:	eb 0a                	jmp    280b0e <bootmain+0xb0e>
				}
				else
				{
					timer_init(timer,&fifo,1);
					if(cursor_c>=0) cursor_c = COL8_FFFFFF;
  280b04:	c7 85 dc fb ff ff 07 	movl   $0x7,-0x424(%ebp)
  280b0b:	00 00 00 
				}
				if(cursor_c >= 0) // check if the color invalid
				{
					boxfill8(sht_window->buf,sht_window->bxsize,cursor_c,cursor_x,28,cursor_x+7,43);
  280b0e:	50                   	push   %eax
  280b0f:	8d 47 07             	lea    0x7(%edi),%eax
  280b12:	6a 2b                	push   $0x2b
  280b14:	50                   	push   %eax
  280b15:	6a 1c                	push   $0x1c
  280b17:	57                   	push   %edi
  280b18:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280b1e:	ff 73 04             	pushl  0x4(%ebx)
  280b21:	ff 33                	pushl  (%ebx)
  280b23:	e8 9c 01 00 00       	call   280cc4 <boxfill8>
					sheet_refresh(sht_window,cursor_x,28,cursor_x+8,44);
  280b28:	8d 47 08             	lea    0x8(%edi),%eax
  280b2b:	83 c4 14             	add    $0x14,%esp
  280b2e:	6a 2c                	push   $0x2c
  280b30:	50                   	push   %eax
  280b31:	6a 1c                	push   $0x1c
  280b33:	57                   	push   %edi
  280b34:	53                   	push   %ebx
  280b35:	e8 68 1b 00 00       	call   2826a2 <sheet_refresh>
  280b3a:	83 c4 20             	add    $0x20,%esp
  280b3d:	eb a2                	jmp    280ae1 <bootmain+0xae1>
  280b3f:	90                   	nop

00280b40 <io_hlt>:
  280b40:	f4                   	hlt    
  280b41:	c3                   	ret    

00280b42 <io_cli>:
  280b42:	fa                   	cli    
  280b43:	c3                   	ret    

00280b44 <io_sti>:
  280b44:	fb                   	sti    
  280b45:	c3                   	ret    

00280b46 <io_stihlt>:
  280b46:	fb                   	sti    
  280b47:	f4                   	hlt    
  280b48:	c3                   	ret    

00280b49 <write_mem8>:
  280b49:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280b4d:	8a 44 24 08          	mov    0x8(%esp),%al
  280b51:	88 01                	mov    %al,(%ecx)
  280b53:	c3                   	ret    

00280b54 <io_in8>:
  280b54:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b58:	b8 00 00 00 00       	mov    $0x0,%eax
  280b5d:	ec                   	in     (%dx),%al
  280b5e:	c3                   	ret    

00280b5f <io_in16>:
  280b5f:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b63:	b8 00 00 00 00       	mov    $0x0,%eax
  280b68:	66 ed                	in     (%dx),%ax
  280b6a:	c3                   	ret    

00280b6b <io_in32>:
  280b6b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b6f:	b8 00 00 00 00       	mov    $0x0,%eax
  280b74:	ed                   	in     (%dx),%eax
  280b75:	c3                   	ret    

00280b76 <io_out8>:
  280b76:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b7a:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b7e:	ee                   	out    %al,(%dx)
  280b7f:	c3                   	ret    

00280b80 <io_out16>:
  280b80:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b84:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b88:	66 ef                	out    %ax,(%dx)
  280b8a:	c3                   	ret    

00280b8b <io_out32>:
  280b8b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b8f:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b93:	ef                   	out    %eax,(%dx)
  280b94:	c3                   	ret    

00280b95 <io_load_eflags>:
  280b95:	9c                   	pushf  
  280b96:	58                   	pop    %eax
  280b97:	c3                   	ret    

00280b98 <io_store_eflags>:
  280b98:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b9c:	50                   	push   %eax
  280b9d:	9d                   	popf   
  280b9e:	c3                   	ret    

00280b9f <load_gdtr>:
  280b9f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280ba4:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280ba9:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280bae:	c3                   	ret    

00280baf <load_idtr>:
  280baf:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280bb4:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280bb9:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280bbe:	c3                   	ret    

00280bbf <load_cr0>:
  280bbf:	0f 20 c0             	mov    %cr0,%eax
  280bc2:	c3                   	ret    

00280bc3 <store_cr0>:
  280bc3:	8b 44 24 04          	mov    0x4(%esp),%eax
  280bc7:	0f 22 c0             	mov    %eax,%cr0
  280bca:	c3                   	ret    

00280bcb <_memtest_sub>:
  280bcb:	57                   	push   %edi
  280bcc:	56                   	push   %esi
  280bcd:	53                   	push   %ebx
  280bce:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280bd3:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280bd8:	8b 44 24 10          	mov    0x10(%esp),%eax

00280bdc <mts_loop>:
  280bdc:	89 c3                	mov    %eax,%ebx
  280bde:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280be4:	8b 13                	mov    (%ebx),%edx
  280be6:	89 33                	mov    %esi,(%ebx)
  280be8:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280beb:	3b 3b                	cmp    (%ebx),%edi
  280bed:	75 18                	jne    280c07 <mts_qit>
  280bef:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280bf2:	3b 33                	cmp    (%ebx),%esi
  280bf4:	75 11                	jne    280c07 <mts_qit>
  280bf6:	89 13                	mov    %edx,(%ebx)
  280bf8:	05 00 10 00 00       	add    $0x1000,%eax
  280bfd:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280c01:	76 d9                	jbe    280bdc <mts_loop>

00280c03 <mts_ret>:
  280c03:	5b                   	pop    %ebx
  280c04:	5e                   	pop    %esi
  280c05:	5f                   	pop    %edi
  280c06:	c3                   	ret    

00280c07 <mts_qit>:
  280c07:	89 13                	mov    %edx,(%ebx)
  280c09:	5b                   	pop    %ebx
  280c0a:	5e                   	pop    %esi
  280c0b:	5f                   	pop    %edi
  280c0c:	c3                   	ret    

00280c0d <set_palette>:
	set_palette(0,15,table_rgb);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280c0d:	55                   	push   %ebp
  280c0e:	89 e5                	mov    %esp,%ebp
  280c10:	57                   	push   %edi
  280c11:	56                   	push   %esi
  280c12:	53                   	push   %ebx
  280c13:	83 ec 1c             	sub    $0x1c,%esp
  280c16:	8b 75 08             	mov    0x8(%ebp),%esi
  280c19:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280c1c:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280c1f:	e8 71 ff ff ff       	call   280b95 <io_load_eflags>
  280c24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280c27:	e8 16 ff ff ff       	call   280b42 <io_cli>
	io_out8(0x03c8,start);
  280c2c:	83 ec 08             	sub    $0x8,%esp
  280c2f:	56                   	push   %esi
  280c30:	68 c8 03 00 00       	push   $0x3c8
  280c35:	e8 3c ff ff ff       	call   280b76 <io_out8>
	for(i=start;i<=end;i++)
  280c3a:	83 c4 10             	add    $0x10,%esp
  280c3d:	39 fe                	cmp    %edi,%esi
  280c3f:	7f 54                	jg     280c95 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280c41:	83 ec 08             	sub    $0x8,%esp
  280c44:	0f b6 03             	movzbl (%ebx),%eax
  280c47:	c0 e8 02             	shr    $0x2,%al
  280c4a:	0f b6 c0             	movzbl %al,%eax
  280c4d:	50                   	push   %eax
  280c4e:	68 c9 03 00 00       	push   $0x3c9
  280c53:	e8 1e ff ff ff       	call   280b76 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280c58:	83 c4 08             	add    $0x8,%esp
  280c5b:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280c5f:	c0 e8 02             	shr    $0x2,%al
  280c62:	0f b6 c0             	movzbl %al,%eax
  280c65:	50                   	push   %eax
  280c66:	68 c9 03 00 00       	push   $0x3c9
  280c6b:	e8 06 ff ff ff       	call   280b76 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280c70:	83 c4 08             	add    $0x8,%esp
  280c73:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280c77:	c0 e8 02             	shr    $0x2,%al
  280c7a:	0f b6 c0             	movzbl %al,%eax
  280c7d:	50                   	push   %eax
  280c7e:	68 c9 03 00 00       	push   $0x3c9
  280c83:	e8 ee fe ff ff       	call   280b76 <io_out8>
		rgb+=3;
  280c88:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280c8b:	83 c6 01             	add    $0x1,%esi
  280c8e:	83 c4 10             	add    $0x10,%esp
  280c91:	39 f7                	cmp    %esi,%edi
  280c93:	7d ac                	jge    280c41 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280c95:	83 ec 0c             	sub    $0xc,%esp
  280c98:	ff 75 e4             	pushl  -0x1c(%ebp)
  280c9b:	e8 f8 fe ff ff       	call   280b98 <io_store_eflags>
	return;
  280ca0:	83 c4 10             	add    $0x10,%esp
}
  280ca3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280ca6:	5b                   	pop    %ebx
  280ca7:	5e                   	pop    %esi
  280ca8:	5f                   	pop    %edi
  280ca9:	5d                   	pop    %ebp
  280caa:	c3                   	ret    

00280cab <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280cab:	55                   	push   %ebp
  280cac:	89 e5                	mov    %esp,%ebp
  280cae:	83 ec 0c             	sub    $0xc,%esp
		0x00, 0x00, 0x84,	//dark blue
		0x84, 0x00, 0x84,	//dark purple
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	set_palette(0,15,table_rgb);
  280cb1:	68 80 4e 28 00       	push   $0x284e80
  280cb6:	6a 0f                	push   $0xf
  280cb8:	6a 00                	push   $0x0
  280cba:	e8 4e ff ff ff       	call   280c0d <set_palette>
	return;	
  280cbf:	83 c4 10             	add    $0x10,%esp
}
  280cc2:	c9                   	leave  
  280cc3:	c3                   	ret    

00280cc4 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280cc4:	55                   	push   %ebp
  280cc5:	89 e5                	mov    %esp,%ebp
  280cc7:	57                   	push   %edi
  280cc8:	56                   	push   %esi
  280cc9:	53                   	push   %ebx
  280cca:	83 ec 04             	sub    $0x4,%esp
  280ccd:	8b 55 0c             	mov    0xc(%ebp),%edx
  280cd0:	8b 7d 14             	mov    0x14(%ebp),%edi
  280cd3:	8b 75 18             	mov    0x18(%ebp),%esi
  280cd6:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280cd9:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280cdd:	3b 75 20             	cmp    0x20(%ebp),%esi
  280ce0:	7f 28                	jg     280d0a <boxfill8+0x46>
  280ce2:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280ce5:	0f af d6             	imul   %esi,%edx
  280ce8:	03 55 08             	add    0x8(%ebp),%edx
  280ceb:	eb 15                	jmp    280d02 <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280ced:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280cf0:	83 c0 01             	add    $0x1,%eax
  280cf3:	39 c1                	cmp    %eax,%ecx
  280cf5:	7d f6                	jge    280ced <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280cf7:	83 c6 01             	add    $0x1,%esi
  280cfa:	03 55 f0             	add    -0x10(%ebp),%edx
  280cfd:	39 75 20             	cmp    %esi,0x20(%ebp)
  280d00:	7c 08                	jl     280d0a <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280d02:	89 f8                	mov    %edi,%eax
  280d04:	39 cf                	cmp    %ecx,%edi
  280d06:	7e e5                	jle    280ced <boxfill8+0x29>
  280d08:	eb ed                	jmp    280cf7 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280d0a:	83 c4 04             	add    $0x4,%esp
  280d0d:	5b                   	pop    %ebx
  280d0e:	5e                   	pop    %esi
  280d0f:	5f                   	pop    %edi
  280d10:	5d                   	pop    %ebp
  280d11:	c3                   	ret    

00280d12 <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280d12:	55                   	push   %ebp
  280d13:	89 e5                	mov    %esp,%ebp
  280d15:	53                   	push   %ebx
  280d16:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280d19:	8b 55 10             	mov    0x10(%ebp),%edx
  280d1c:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280d20:	85 d2                	test   %edx,%edx
  280d22:	7e 0d                	jle    280d31 <boxfill8_test+0x1f>
  280d24:	89 d8                	mov    %ebx,%eax
  280d26:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280d28:	88 08                	mov    %cl,(%eax)
  280d2a:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280d2d:	39 d0                	cmp    %edx,%eax
  280d2f:	75 f7                	jne    280d28 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280d31:	5b                   	pop    %ebx
  280d32:	5d                   	pop    %ebp
  280d33:	c3                   	ret    

00280d34 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280d34:	55                   	push   %ebp
  280d35:	89 e5                	mov    %esp,%ebp
  280d37:	57                   	push   %edi
  280d38:	56                   	push   %esi
  280d39:	53                   	push   %ebx
  280d3a:	83 ec 14             	sub    $0x14,%esp
  280d3d:	8b 7d 08             	mov    0x8(%ebp),%edi
  280d40:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280d43:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280d46:	68 be 00 00 00       	push   $0xbe
  280d4b:	68 36 01 00 00       	push   $0x136
  280d50:	6a 00                	push   $0x0
  280d52:	6a 00                	push   $0x0
  280d54:	6a 0e                	push   $0xe
  280d56:	68 36 01 00 00       	push   $0x136
  280d5b:	57                   	push   %edi
  280d5c:	e8 63 ff ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280d61:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d64:	89 c2                	mov    %eax,%edx
  280d66:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d69:	50                   	push   %eax
  280d6a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d6d:	52                   	push   %edx
  280d6e:	6a 00                	push   $0x0
  280d70:	6a 00                	push   $0x0
  280d72:	6a 0e                	push   $0xe
  280d74:	53                   	push   %ebx
  280d75:	57                   	push   %edi
  280d76:	e8 49 ff ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d7b:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d7e:	83 c4 38             	add    $0x38,%esp
  280d81:	50                   	push   %eax
  280d82:	ff 75 f0             	pushl  -0x10(%ebp)
  280d85:	50                   	push   %eax
  280d86:	6a 00                	push   $0x0
  280d88:	6a 08                	push   $0x8
  280d8a:	53                   	push   %ebx
  280d8b:	57                   	push   %edi
  280d8c:	e8 33 ff ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d91:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d94:	50                   	push   %eax
  280d95:	ff 75 f0             	pushl  -0x10(%ebp)
  280d98:	50                   	push   %eax
  280d99:	6a 00                	push   $0x0
  280d9b:	6a 07                	push   $0x7
  280d9d:	53                   	push   %ebx
  280d9e:	57                   	push   %edi
  280d9f:	e8 20 ff ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280da4:	83 c4 38             	add    $0x38,%esp
  280da7:	8d 46 ff             	lea    -0x1(%esi),%eax
  280daa:	50                   	push   %eax
  280dab:	ff 75 f0             	pushl  -0x10(%ebp)
  280dae:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280db1:	50                   	push   %eax
  280db2:	6a 00                	push   $0x0
  280db4:	6a 08                	push   $0x8
  280db6:	53                   	push   %ebx
  280db7:	57                   	push   %edi
  280db8:	e8 07 ff ff ff       	call   280cc4 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280dbd:	8d 46 e8             	lea    -0x18(%esi),%eax
  280dc0:	50                   	push   %eax
  280dc1:	6a 3b                	push   $0x3b
  280dc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280dc6:	50                   	push   %eax
  280dc7:	6a 03                	push   $0x3
  280dc9:	6a 07                	push   $0x7
  280dcb:	53                   	push   %ebx
  280dcc:	57                   	push   %edi
  280dcd:	e8 f2 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280dd2:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280dd5:	83 c4 38             	add    $0x38,%esp
  280dd8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280ddb:	51                   	push   %ecx
  280ddc:	6a 02                	push   $0x2
  280dde:	ff 75 f0             	pushl  -0x10(%ebp)
  280de1:	6a 02                	push   $0x2
  280de3:	6a 07                	push   $0x7
  280de5:	53                   	push   %ebx
  280de6:	57                   	push   %edi
  280de7:	e8 d8 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280dec:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280def:	51                   	push   %ecx
  280df0:	6a 3b                	push   $0x3b
  280df2:	51                   	push   %ecx
  280df3:	6a 03                	push   $0x3
  280df5:	6a 0f                	push   $0xf
  280df7:	53                   	push   %ebx
  280df8:	57                   	push   %edi
  280df9:	e8 c6 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280dfe:	8d 56 e9             	lea    -0x17(%esi),%edx
  280e01:	83 c4 38             	add    $0x38,%esp
  280e04:	8d 46 fb             	lea    -0x5(%esi),%eax
  280e07:	50                   	push   %eax
  280e08:	6a 3b                	push   $0x3b
  280e0a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280e0d:	52                   	push   %edx
  280e0e:	6a 3b                	push   $0x3b
  280e10:	6a 0f                	push   $0xf
  280e12:	53                   	push   %ebx
  280e13:	57                   	push   %edi
  280e14:	e8 ab fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280e19:	83 ee 03             	sub    $0x3,%esi
  280e1c:	56                   	push   %esi
  280e1d:	6a 3b                	push   $0x3b
  280e1f:	56                   	push   %esi
  280e20:	6a 02                	push   $0x2
  280e22:	6a 00                	push   $0x0
  280e24:	53                   	push   %ebx
  280e25:	57                   	push   %edi
  280e26:	e8 99 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280e2b:	83 c4 38             	add    $0x38,%esp
  280e2e:	56                   	push   %esi
  280e2f:	6a 3c                	push   $0x3c
  280e31:	ff 75 f0             	pushl  -0x10(%ebp)
  280e34:	6a 3c                	push   $0x3c
  280e36:	6a 00                	push   $0x0
  280e38:	53                   	push   %ebx
  280e39:	57                   	push   %edi
  280e3a:	e8 85 fe ff ff       	call   280cc4 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280e3f:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280e42:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280e45:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280e48:	50                   	push   %eax
  280e49:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280e4c:	51                   	push   %ecx
  280e4d:	50                   	push   %eax
  280e4e:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280e51:	52                   	push   %edx
  280e52:	6a 0f                	push   $0xf
  280e54:	53                   	push   %ebx
  280e55:	57                   	push   %edi
  280e56:	e8 69 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280e5b:	83 c4 38             	add    $0x38,%esp
  280e5e:	ff 75 ec             	pushl  -0x14(%ebp)
  280e61:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e64:	52                   	push   %edx
  280e65:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e68:	52                   	push   %edx
  280e69:	6a 0f                	push   $0xf
  280e6b:	53                   	push   %ebx
  280e6c:	57                   	push   %edi
  280e6d:	e8 52 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e72:	56                   	push   %esi
  280e73:	ff 75 e0             	pushl  -0x20(%ebp)
  280e76:	56                   	push   %esi
  280e77:	ff 75 e8             	pushl  -0x18(%ebp)
  280e7a:	6a 07                	push   $0x7
  280e7c:	53                   	push   %ebx
  280e7d:	57                   	push   %edi
  280e7e:	e8 41 fe ff ff       	call   280cc4 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e83:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e86:	83 c4 38             	add    $0x38,%esp
  280e89:	56                   	push   %esi
  280e8a:	50                   	push   %eax
  280e8b:	ff 75 f0             	pushl  -0x10(%ebp)
  280e8e:	50                   	push   %eax
  280e8f:	6a 07                	push   $0x7
  280e91:	53                   	push   %ebx
  280e92:	57                   	push   %edi
  280e93:	e8 2c fe ff ff       	call   280cc4 <boxfill8>
}
  280e98:	83 c4 1c             	add    $0x1c,%esp
  280e9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e9e:	5b                   	pop    %ebx
  280e9f:	5e                   	pop    %esi
  280ea0:	5f                   	pop    %edi
  280ea1:	5d                   	pop    %ebp
  280ea2:	c3                   	ret    

00280ea3 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280ea3:	55                   	push   %ebp
  280ea4:	89 e5                	mov    %esp,%ebp
  280ea6:	57                   	push   %edi
  280ea7:	56                   	push   %esi
  280ea8:	53                   	push   %ebx
  280ea9:	83 ec 08             	sub    $0x8,%esp
  280eac:	8b 75 08             	mov    0x8(%ebp),%esi
  280eaf:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280eb3:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280eb6:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280ebc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280ebf:	eb 38                	jmp    280ef9 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280ec1:	0f b6 94 03 80 3e 28 	movzbl 0x283e80(%ebx,%eax,1),%edx
  280ec8:	00 
  280ec9:	80 fa 2a             	cmp    $0x2a,%dl
  280ecc:	75 06                	jne    280ed4 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280ece:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280ed2:	eb 15                	jmp    280ee9 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280ed4:	80 fa 4f             	cmp    $0x4f,%dl
  280ed7:	75 06                	jne    280edf <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280ed9:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280edd:	eb 0a                	jmp    280ee9 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280edf:	80 fa 2e             	cmp    $0x2e,%dl
  280ee2:	75 05                	jne    280ee9 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280ee4:	89 fa                	mov    %edi,%edx
  280ee6:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280ee9:	83 c0 01             	add    $0x1,%eax
  280eec:	83 f8 10             	cmp    $0x10,%eax
  280eef:	75 d0                	jne    280ec1 <init_mouse_cursor8+0x1e>
  280ef1:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280ef4:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280ef7:	74 0c                	je     280f05 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280ef9:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280efe:	89 f3                	mov    %esi,%ebx
  280f00:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280f03:	eb bc                	jmp    280ec1 <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280f05:	83 c4 08             	add    $0x8,%esp
  280f08:	5b                   	pop    %ebx
  280f09:	5e                   	pop    %esi
  280f0a:	5f                   	pop    %edi
  280f0b:	5d                   	pop    %ebp
  280f0c:	c3                   	ret    

00280f0d <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280f0d:	55                   	push   %ebp
  280f0e:	89 e5                	mov    %esp,%ebp
  280f10:	57                   	push   %edi
  280f11:	56                   	push   %esi
  280f12:	53                   	push   %ebx
  280f13:	83 ec 1c             	sub    $0x1c,%esp
  280f16:	8b 75 08             	mov    0x8(%ebp),%esi
  280f19:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f1c:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280f1f:	80 fa 01             	cmp    $0x1,%dl
  280f22:	19 c0                	sbb    %eax,%eax
  280f24:	83 e0 03             	and    $0x3,%eax
  280f27:	83 c0 0c             	add    $0xc,%eax
  280f2a:	80 fa 01             	cmp    $0x1,%dl
  280f2d:	19 ff                	sbb    %edi,%edi
  280f2f:	f7 d7                	not    %edi
  280f31:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280f34:	6a 14                	push   $0x14
  280f36:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280f39:	52                   	push   %edx
  280f3a:	6a 03                	push   $0x3
  280f3c:	6a 03                	push   $0x3
  280f3e:	0f b6 c0             	movzbl %al,%eax
  280f41:	50                   	push   %eax
  280f42:	53                   	push   %ebx
  280f43:	56                   	push   %esi
  280f44:	e8 7b fd ff ff       	call   280cc4 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280f49:	83 c4 04             	add    $0x4,%esp
  280f4c:	ff 75 10             	pushl  0x10(%ebp)
  280f4f:	89 f8                	mov    %edi,%eax
  280f51:	0f be f8             	movsbl %al,%edi
  280f54:	57                   	push   %edi
  280f55:	6a 04                	push   $0x4
  280f57:	6a 18                	push   $0x18
  280f59:	53                   	push   %ebx
  280f5a:	56                   	push   %esi
  280f5b:	e8 b9 03 00 00       	call   281319 <putfonts8_asc>
  280f60:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f63:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f66:	01 fb                	add    %edi,%ebx
  280f68:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f6b:	83 c4 30             	add    $0x30,%esp
  280f6e:	be 00 00 00 00       	mov    $0x0,%esi
  280f73:	eb 41                	jmp    280fb6 <make_wtitle8+0xa9>
  280f75:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f77:	0f b6 9c 06 a0 3d 28 	movzbl 0x283da0(%esi,%eax,1),%ebx
  280f7e:	00 
			if(c == '@') c=COL8_000000;
  280f7f:	ba 00 00 00 00       	mov    $0x0,%edx
  280f84:	80 fb 40             	cmp    $0x40,%bl
  280f87:	74 13                	je     280f9c <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f89:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f8e:	80 fb 24             	cmp    $0x24,%bl
  280f91:	74 09                	je     280f9c <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f93:	80 fb 51             	cmp    $0x51,%bl
  280f96:	0f 94 c2             	sete   %dl
  280f99:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f9c:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280fa0:	83 c0 01             	add    $0x1,%eax
  280fa3:	83 f8 10             	cmp    $0x10,%eax
  280fa6:	75 cd                	jne    280f75 <make_wtitle8+0x68>
  280fa8:	03 7d e4             	add    -0x1c(%ebp),%edi
  280fab:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280fae:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280fb4:	74 07                	je     280fbd <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280fb6:	b8 00 00 00 00       	mov    $0x0,%eax
  280fbb:	eb b8                	jmp    280f75 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280fbd:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280fc0:	5b                   	pop    %ebx
  280fc1:	5e                   	pop    %esi
  280fc2:	5f                   	pop    %edi
  280fc3:	5d                   	pop    %ebp
  280fc4:	c3                   	ret    

00280fc5 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280fc5:	55                   	push   %ebp
  280fc6:	89 e5                	mov    %esp,%ebp
  280fc8:	57                   	push   %edi
  280fc9:	56                   	push   %esi
  280fca:	53                   	push   %ebx
  280fcb:	83 ec 1c             	sub    $0x1c,%esp
  280fce:	8b 75 08             	mov    0x8(%ebp),%esi
  280fd1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280fd4:	8b 45 18             	mov    0x18(%ebp),%eax
  280fd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280fda:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280fdd:	6a 00                	push   $0x0
  280fdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280fe2:	50                   	push   %eax
  280fe3:	6a 00                	push   $0x0
  280fe5:	6a 00                	push   $0x0
  280fe7:	6a 08                	push   $0x8
  280fe9:	53                   	push   %ebx
  280fea:	56                   	push   %esi
  280feb:	e8 d4 fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280ff0:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280ff3:	6a 01                	push   $0x1
  280ff5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280ff8:	52                   	push   %edx
  280ff9:	6a 01                	push   $0x1
  280ffb:	6a 01                	push   $0x1
  280ffd:	6a 07                	push   $0x7
  280fff:	53                   	push   %ebx
  281000:	56                   	push   %esi
  281001:	e8 be fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  281006:	8b 7d 10             	mov    0x10(%ebp),%edi
  281009:	8d 4f ff             	lea    -0x1(%edi),%ecx
  28100c:	83 c4 38             	add    $0x38,%esp
  28100f:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  281012:	51                   	push   %ecx
  281013:	6a 00                	push   $0x0
  281015:	6a 00                	push   $0x0
  281017:	6a 00                	push   $0x0
  281019:	6a 08                	push   $0x8
  28101b:	53                   	push   %ebx
  28101c:	56                   	push   %esi
  28101d:	e8 a2 fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  281022:	8b 7d 10             	mov    0x10(%ebp),%edi
  281025:	83 ef 02             	sub    $0x2,%edi
  281028:	57                   	push   %edi
  281029:	6a 01                	push   $0x1
  28102b:	6a 01                	push   $0x1
  28102d:	6a 01                	push   $0x1
  28102f:	6a 07                	push   $0x7
  281031:	53                   	push   %ebx
  281032:	56                   	push   %esi
  281033:	e8 8c fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  281038:	83 c4 38             	add    $0x38,%esp
  28103b:	57                   	push   %edi
  28103c:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28103f:	52                   	push   %edx
  281040:	6a 01                	push   $0x1
  281042:	52                   	push   %edx
  281043:	6a 0f                	push   $0xf
  281045:	53                   	push   %ebx
  281046:	56                   	push   %esi
  281047:	e8 78 fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  28104c:	ff 75 dc             	pushl  -0x24(%ebp)
  28104f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  281052:	50                   	push   %eax
  281053:	6a 00                	push   $0x0
  281055:	50                   	push   %eax
  281056:	6a 00                	push   $0x0
  281058:	53                   	push   %ebx
  281059:	56                   	push   %esi
  28105a:	e8 65 fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28105f:	83 c4 38             	add    $0x38,%esp
  281062:	8b 55 10             	mov    0x10(%ebp),%edx
  281065:	8d 42 fd             	lea    -0x3(%edx),%eax
  281068:	50                   	push   %eax
  281069:	8d 43 fd             	lea    -0x3(%ebx),%eax
  28106c:	50                   	push   %eax
  28106d:	6a 02                	push   $0x2
  28106f:	6a 02                	push   $0x2
  281071:	6a 08                	push   $0x8
  281073:	53                   	push   %ebx
  281074:	56                   	push   %esi
  281075:	e8 4a fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  28107a:	57                   	push   %edi
  28107b:	ff 75 e0             	pushl  -0x20(%ebp)
  28107e:	57                   	push   %edi
  28107f:	6a 01                	push   $0x1
  281081:	6a 0f                	push   $0xf
  281083:	53                   	push   %ebx
  281084:	56                   	push   %esi
  281085:	e8 3a fc ff ff       	call   280cc4 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  28108a:	83 c4 38             	add    $0x38,%esp
  28108d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  281090:	51                   	push   %ecx
  281091:	ff 75 e4             	pushl  -0x1c(%ebp)
  281094:	51                   	push   %ecx
  281095:	6a 00                	push   $0x0
  281097:	6a 00                	push   $0x0
  281099:	53                   	push   %ebx
  28109a:	56                   	push   %esi
  28109b:	e8 24 fc ff ff       	call   280cc4 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  2810a0:	83 c4 1c             	add    $0x1c,%esp
  2810a3:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  2810a7:	50                   	push   %eax
  2810a8:	ff 75 14             	pushl  0x14(%ebp)
  2810ab:	53                   	push   %ebx
  2810ac:	56                   	push   %esi
  2810ad:	e8 5b fe ff ff       	call   280f0d <make_wtitle8>
	return;
  2810b2:	83 c4 10             	add    $0x10,%esp
}
  2810b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2810b8:	5b                   	pop    %ebx
  2810b9:	5e                   	pop    %esi
  2810ba:	5f                   	pop    %edi
  2810bb:	5d                   	pop    %ebp
  2810bc:	c3                   	ret    

002810bd <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  2810bd:	55                   	push   %ebp
  2810be:	89 e5                	mov    %esp,%ebp
  2810c0:	57                   	push   %edi
  2810c1:	56                   	push   %esi
  2810c2:	53                   	push   %ebx
  2810c3:	83 ec 04             	sub    $0x4,%esp
  2810c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2810c9:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  2810cc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  2810d0:	7e 49                	jle    28111b <putblock8_8+0x5e>
  2810d2:	8b 7d 24             	mov    0x24(%ebp),%edi
  2810d5:	8b 4d 20             	mov    0x20(%ebp),%ecx
  2810d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  2810db:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  2810df:	03 45 18             	add    0x18(%ebp),%eax
  2810e2:	89 c2                	mov    %eax,%edx
  2810e4:	03 55 08             	add    0x8(%ebp),%edx
  2810e7:	be 00 00 00 00       	mov    $0x0,%esi
  2810ec:	eb 22                	jmp    281110 <putblock8_8+0x53>
  2810ee:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2810f1:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2810f5:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2810f8:	83 c0 01             	add    $0x1,%eax
  2810fb:	39 45 10             	cmp    %eax,0x10(%ebp)
  2810fe:	75 f1                	jne    2810f1 <putblock8_8+0x34>
  281100:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  281103:	83 c6 01             	add    $0x1,%esi
  281106:	01 f9                	add    %edi,%ecx
  281108:	03 55 f0             	add    -0x10(%ebp),%edx
  28110b:	39 75 14             	cmp    %esi,0x14(%ebp)
  28110e:	74 0b                	je     28111b <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  281110:	b8 00 00 00 00       	mov    $0x0,%eax
  281115:	85 db                	test   %ebx,%ebx
  281117:	7f d5                	jg     2810ee <putblock8_8+0x31>
  281119:	eb e8                	jmp    281103 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  28111b:	83 c4 04             	add    $0x4,%esp
  28111e:	5b                   	pop    %ebx
  28111f:	5e                   	pop    %esi
  281120:	5f                   	pop    %edi
  281121:	5d                   	pop    %ebp
  281122:	c3                   	ret    

00281123 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  281123:	55                   	push   %ebp
  281124:	89 e5                	mov    %esp,%ebp
  281126:	57                   	push   %edi
  281127:	56                   	push   %esi
  281128:	53                   	push   %ebx
  281129:	83 ec 0c             	sub    $0xc,%esp
  28112c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28112f:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  281132:	8b 45 20             	mov    0x20(%ebp),%eax
  281135:	8b 55 0c             	mov    0xc(%ebp),%edx
  281138:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  28113b:	8d 46 0f             	lea    0xf(%esi),%eax
  28113e:	50                   	push   %eax
  28113f:	8d 47 ff             	lea    -0x1(%edi),%eax
  281142:	50                   	push   %eax
  281143:	56                   	push   %esi
  281144:	52                   	push   %edx
  281145:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281149:	50                   	push   %eax
  28114a:	ff 73 04             	pushl  0x4(%ebx)
  28114d:	ff 33                	pushl  (%ebx)
  28114f:	e8 70 fb ff ff       	call   280cc4 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281154:	83 c4 04             	add    $0x4,%esp
  281157:	ff 75 1c             	pushl  0x1c(%ebp)
  28115a:	ff 75 14             	pushl  0x14(%ebp)
  28115d:	56                   	push   %esi
  28115e:	ff 75 0c             	pushl  0xc(%ebp)
  281161:	ff 73 04             	pushl  0x4(%ebx)
  281164:	ff 33                	pushl  (%ebx)
  281166:	e8 ae 01 00 00       	call   281319 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  28116b:	83 c4 24             	add    $0x24,%esp
  28116e:	8d 46 10             	lea    0x10(%esi),%eax
  281171:	50                   	push   %eax
  281172:	57                   	push   %edi
  281173:	56                   	push   %esi
  281174:	ff 75 0c             	pushl  0xc(%ebp)
  281177:	53                   	push   %ebx
  281178:	e8 25 15 00 00       	call   2826a2 <sheet_refresh>
}
  28117d:	83 c4 20             	add    $0x20,%esp
  281180:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281183:	5b                   	pop    %ebx
  281184:	5e                   	pop    %esi
  281185:	5f                   	pop    %edi
  281186:	5d                   	pop    %ebp
  281187:	c3                   	ret    

00281188 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281188:	55                   	push   %ebp
  281189:	89 e5                	mov    %esp,%ebp
  28118b:	57                   	push   %edi
  28118c:	56                   	push   %esi
  28118d:	53                   	push   %ebx
  28118e:	83 ec 18             	sub    $0x18,%esp
  281191:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281194:	8b 45 0c             	mov    0xc(%ebp),%eax
  281197:	03 45 14             	add    0x14(%ebp),%eax
  28119a:	8b 55 10             	mov    0x10(%ebp),%edx
  28119d:	03 55 18             	add    0x18(%ebp),%edx
  2811a0:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  2811a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
  2811a5:	8d 48 01             	lea    0x1(%eax),%ecx
  2811a8:	8b 75 10             	mov    0x10(%ebp),%esi
  2811ab:	83 ee 03             	sub    $0x3,%esi
  2811ae:	8b 55 0c             	mov    0xc(%ebp),%edx
  2811b1:	83 ea 02             	sub    $0x2,%edx
  2811b4:	56                   	push   %esi
  2811b5:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  2811b8:	51                   	push   %ecx
  2811b9:	56                   	push   %esi
  2811ba:	89 55 f0             	mov    %edx,-0x10(%ebp)
  2811bd:	52                   	push   %edx
  2811be:	6a 0f                	push   $0xf
  2811c0:	ff 73 04             	pushl  0x4(%ebx)
  2811c3:	ff 33                	pushl  (%ebx)
  2811c5:	e8 fa fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  2811ca:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  2811cd:	8d 7f 01             	lea    0x1(%edi),%edi
  2811d0:	89 f9                	mov    %edi,%ecx
  2811d2:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2811d5:	83 ef 03             	sub    $0x3,%edi
  2811d8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  2811db:	51                   	push   %ecx
  2811dc:	57                   	push   %edi
  2811dd:	56                   	push   %esi
  2811de:	57                   	push   %edi
  2811df:	6a 0f                	push   $0xf
  2811e1:	ff 73 04             	pushl  0x4(%ebx)
  2811e4:	ff 33                	pushl  (%ebx)
  2811e6:	e8 d9 fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2811eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2811ee:	8d 4a 02             	lea    0x2(%edx),%ecx
  2811f1:	83 c4 38             	add    $0x38,%esp
  2811f4:	51                   	push   %ecx
  2811f5:	ff 75 e0             	pushl  -0x20(%ebp)
  2811f8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2811fb:	51                   	push   %ecx
  2811fc:	57                   	push   %edi
  2811fd:	6a 07                	push   $0x7
  2811ff:	ff 73 04             	pushl  0x4(%ebx)
  281202:	ff 33                	pushl  (%ebx)
  281204:	e8 bb fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  281209:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28120c:	83 c0 02             	add    $0x2,%eax
  28120f:	ff 75 dc             	pushl  -0x24(%ebp)
  281212:	50                   	push   %eax
  281213:	56                   	push   %esi
  281214:	50                   	push   %eax
  281215:	6a 07                	push   $0x7
  281217:	ff 73 04             	pushl  0x4(%ebx)
  28121a:	ff 33                	pushl  (%ebx)
  28121c:	e8 a3 fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  281221:	8b 75 10             	mov    0x10(%ebp),%esi
  281224:	8d 7e fe             	lea    -0x2(%esi),%edi
  281227:	8b 75 0c             	mov    0xc(%ebp),%esi
  28122a:	83 ee 01             	sub    $0x1,%esi
  28122d:	83 c4 38             	add    $0x38,%esp
  281230:	57                   	push   %edi
  281231:	ff 75 e8             	pushl  -0x18(%ebp)
  281234:	57                   	push   %edi
  281235:	56                   	push   %esi
  281236:	6a 00                	push   $0x0
  281238:	ff 73 04             	pushl  0x4(%ebx)
  28123b:	ff 33                	pushl  (%ebx)
  28123d:	e8 82 fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  281242:	ff 75 e4             	pushl  -0x1c(%ebp)
  281245:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281248:	52                   	push   %edx
  281249:	57                   	push   %edi
  28124a:	52                   	push   %edx
  28124b:	6a 00                	push   $0x0
  28124d:	ff 73 04             	pushl  0x4(%ebx)
  281250:	ff 33                	pushl  (%ebx)
  281252:	e8 6d fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281257:	83 c4 38             	add    $0x38,%esp
  28125a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28125d:	50                   	push   %eax
  28125e:	ff 75 e8             	pushl  -0x18(%ebp)
  281261:	50                   	push   %eax
  281262:	ff 75 f0             	pushl  -0x10(%ebp)
  281265:	6a 08                	push   $0x8
  281267:	ff 73 04             	pushl  0x4(%ebx)
  28126a:	ff 33                	pushl  (%ebx)
  28126c:	e8 53 fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  281271:	ff 75 ec             	pushl  -0x14(%ebp)
  281274:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281277:	51                   	push   %ecx
  281278:	57                   	push   %edi
  281279:	51                   	push   %ecx
  28127a:	6a 08                	push   $0x8
  28127c:	ff 73 04             	pushl  0x4(%ebx)
  28127f:	ff 33                	pushl  (%ebx)
  281281:	e8 3e fa ff ff       	call   280cc4 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281286:	83 c4 38             	add    $0x38,%esp
  281289:	ff 75 e4             	pushl  -0x1c(%ebp)
  28128c:	ff 75 e8             	pushl  -0x18(%ebp)
  28128f:	8b 45 10             	mov    0x10(%ebp),%eax
  281292:	83 e8 01             	sub    $0x1,%eax
  281295:	50                   	push   %eax
  281296:	56                   	push   %esi
  281297:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  28129b:	50                   	push   %eax
  28129c:	ff 73 04             	pushl  0x4(%ebx)
  28129f:	ff 33                	pushl  (%ebx)
  2812a1:	e8 1e fa ff ff       	call   280cc4 <boxfill8>
    return;
  2812a6:	83 c4 1c             	add    $0x1c,%esp
}
  2812a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2812ac:	5b                   	pop    %ebx
  2812ad:	5e                   	pop    %esi
  2812ae:	5f                   	pop    %edi
  2812af:	5d                   	pop    %ebp
  2812b0:	c3                   	ret    

002812b1 <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  2812b1:	55                   	push   %ebp
  2812b2:	89 e5                	mov    %esp,%ebp
  2812b4:	57                   	push   %edi
  2812b5:	56                   	push   %esi
  2812b6:	53                   	push   %ebx
  2812b7:	83 ec 08             	sub    $0x8,%esp
  2812ba:	8b 45 0c             	mov    0xc(%ebp),%eax
  2812bd:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  2812c0:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  2812c4:	89 fb                	mov    %edi,%ebx
  2812c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2812c9:	0f af 45 14          	imul   0x14(%ebp),%eax
  2812cd:	03 45 10             	add    0x10(%ebp),%eax
  2812d0:	89 c1                	mov    %eax,%ecx
  2812d2:	03 4d 08             	add    0x8(%ebp),%ecx
  2812d5:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  2812d8:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  2812db:	b8 07 00 00 00       	mov    $0x7,%eax
  2812e0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2812e3:	89 f1                	mov    %esi,%ecx
  2812e5:	89 de                	mov    %ebx,%esi
  2812e7:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2812e9:	f6 c2 01             	test   $0x1,%dl
  2812ec:	74 06                	je     2812f4 <putfont8+0x43>
  2812ee:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2812f1:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2812f4:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  2812f6:	83 e8 01             	sub    $0x1,%eax
  2812f9:	83 f8 ff             	cmp    $0xffffffff,%eax
  2812fc:	75 eb                	jne    2812e9 <putfont8+0x38>
  2812fe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  281301:	89 d8                	mov    %ebx,%eax
  281303:	89 f3                	mov    %esi,%ebx
  281305:	89 c6                	mov    %eax,%esi
  281307:	83 c3 01             	add    $0x1,%ebx
  28130a:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  28130d:	39 fb                	cmp    %edi,%ebx
  28130f:	75 c7                	jne    2812d8 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  281311:	83 c4 08             	add    $0x8,%esp
  281314:	5b                   	pop    %ebx
  281315:	5e                   	pop    %esi
  281316:	5f                   	pop    %edi
  281317:	5d                   	pop    %ebp
  281318:	c3                   	ret    

00281319 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  281319:	55                   	push   %ebp
  28131a:	89 e5                	mov    %esp,%ebp
  28131c:	57                   	push   %edi
  28131d:	56                   	push   %esi
  28131e:	53                   	push   %ebx
  28131f:	8b 75 10             	mov    0x10(%ebp),%esi
  281322:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  281325:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281329:	0f b6 03             	movzbl (%ebx),%eax
  28132c:	84 c0                	test   %al,%al
  28132e:	74 2f                	je     28135f <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  281330:	0f be fa             	movsbl %dl,%edi
  281333:	0f b6 c0             	movzbl %al,%eax
  281336:	c1 e0 04             	shl    $0x4,%eax
  281339:	05 c0 4e 28 00       	add    $0x284ec0,%eax
  28133e:	50                   	push   %eax
  28133f:	57                   	push   %edi
  281340:	ff 75 14             	pushl  0x14(%ebp)
  281343:	56                   	push   %esi
  281344:	ff 75 0c             	pushl  0xc(%ebp)
  281347:	ff 75 08             	pushl  0x8(%ebp)
  28134a:	e8 62 ff ff ff       	call   2812b1 <putfont8>
		x+=HKK_TABLE_COL;
  28134f:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281352:	83 c3 01             	add    $0x1,%ebx
  281355:	0f b6 03             	movzbl (%ebx),%eax
  281358:	83 c4 18             	add    $0x18,%esp
  28135b:	84 c0                	test   %al,%al
  28135d:	75 d4                	jne    281333 <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28135f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281362:	5b                   	pop    %ebx
  281363:	5e                   	pop    %esi
  281364:	5f                   	pop    %edi
  281365:	5d                   	pop    %ebp
  281366:	c3                   	ret    

00281367 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281367:	55                   	push   %ebp
  281368:	89 e5                	mov    %esp,%ebp
  28136a:	57                   	push   %edi
  28136b:	56                   	push   %esi
  28136c:	53                   	push   %ebx
  28136d:	8b 55 08             	mov    0x8(%ebp),%edx
  281370:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281373:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281376:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281379:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28137f:	76 09                	jbe    28138a <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  281381:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281387:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  28138a:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  28138d:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  281391:	89 ce                	mov    %ecx,%esi
  281393:	c1 fe 10             	sar    $0x10,%esi
  281396:	89 f0                	mov    %esi,%eax
  281398:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  28139b:	89 f8                	mov    %edi,%eax
  28139d:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  2813a0:	c1 eb 10             	shr    $0x10,%ebx
  2813a3:	83 e3 0f             	and    $0xf,%ebx
  2813a6:	89 f8                	mov    %edi,%eax
  2813a8:	c1 f8 08             	sar    $0x8,%eax
  2813ab:	83 e0 f0             	and    $0xfffffff0,%eax
  2813ae:	09 d8                	or     %ebx,%eax
  2813b0:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  2813b3:	c1 e9 18             	shr    $0x18,%ecx
  2813b6:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  2813b9:	5b                   	pop    %ebx
  2813ba:	5e                   	pop    %esi
  2813bb:	5f                   	pop    %edi
  2813bc:	5d                   	pop    %ebp
  2813bd:	c3                   	ret    

002813be <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  2813be:	55                   	push   %ebp
  2813bf:	89 e5                	mov    %esp,%ebp
  2813c1:	53                   	push   %ebx
  2813c2:	8b 45 08             	mov    0x8(%ebp),%eax
  2813c5:	8b 55 0c             	mov    0xc(%ebp),%edx
  2813c8:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  2813cb:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  2813ce:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2813d1:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2813d5:	89 cb                	mov    %ecx,%ebx
  2813d7:	c1 fb 08             	sar    $0x8,%ebx
  2813da:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  2813dd:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2813e0:	c1 ea 10             	shr    $0x10,%edx
  2813e3:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2813e7:	5b                   	pop    %ebx
  2813e8:	5d                   	pop    %ebp
  2813e9:	c3                   	ret    

002813ea <init_gdtidt>:

void init_gdtidt(void)
{
  2813ea:	55                   	push   %ebp
  2813eb:	89 e5                	mov    %esp,%ebp
  2813ed:	53                   	push   %ebx
  2813ee:	83 ec 04             	sub    $0x4,%esp
  2813f1:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  2813f6:	6a 00                	push   $0x0
  2813f8:	6a 00                	push   $0x0
  2813fa:	6a 00                	push   $0x0
  2813fc:	53                   	push   %ebx
  2813fd:	e8 65 ff ff ff       	call   281367 <set_segmdesc>
  281402:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  281405:	83 c4 10             	add    $0x10,%esp
  281408:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  28140e:	75 e6                	jne    2813f6 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  281410:	68 92 40 00 00       	push   $0x4092
  281415:	6a 00                	push   $0x0
  281417:	6a ff                	push   $0xffffffff
  281419:	68 08 00 27 00       	push   $0x270008
  28141e:	e8 44 ff ff ff       	call   281367 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  281423:	68 9a 40 00 00       	push   $0x409a
  281428:	6a 00                	push   $0x0
  28142a:	68 ff ff 0f 00       	push   $0xfffff
  28142f:	68 10 00 27 00       	push   $0x270010
  281434:	e8 2e ff ff ff       	call   281367 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281439:	83 c4 20             	add    $0x20,%esp
  28143c:	68 9a 40 00 00       	push   $0x409a
  281441:	68 00 00 28 00       	push   $0x280000
  281446:	68 ff ff 07 00       	push   $0x7ffff
  28144b:	68 18 00 27 00       	push   $0x270018
  281450:	e8 12 ff ff ff       	call   281367 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281455:	83 c4 08             	add    $0x8,%esp
  281458:	68 00 00 27 00       	push   $0x270000
  28145d:	68 ff ff 00 00       	push   $0xffff
  281462:	e8 38 f7 ff ff       	call   280b9f <load_gdtr>
  281467:	83 c4 10             	add    $0x10,%esp
  28146a:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28146f:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  281474:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  28147a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  28147e:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  281482:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281488:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  28148b:	3d 00 00 27 00       	cmp    $0x270000,%eax
  281490:	75 dd                	jne    28146f <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  281492:	b8 3e 17 00 00       	mov    $0x173e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281497:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  28149d:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  2814a4:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814a6:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  2814ad:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  2814b4:	c1 e8 10             	shr    $0x10,%eax
  2814b7:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  2814bd:	b8 10 17 00 00       	mov    $0x1710,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814c2:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  2814c8:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  2814cf:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814d1:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  2814d8:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  2814df:	c1 e8 10             	shr    $0x10,%eax
  2814e2:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2814e8:	b8 27 17 00 00       	mov    $0x1727,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814ed:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2814f3:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  2814fa:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814fc:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  281503:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  28150a:	c1 e8 10             	shr    $0x10,%eax
  28150d:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  281513:	b8 55 17 00 00       	mov    $0x1755,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281518:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  28151e:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  281525:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281527:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  28152e:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281535:	c1 e8 10             	shr    $0x10,%eax
  281538:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  28153e:	b8 76 17 00 00       	mov    $0x1776,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281543:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281549:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  281550:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281552:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281559:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  281560:	c1 e8 10             	shr    $0x10,%eax
  281563:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281569:	b8 96 17 00 00       	mov    $0x1796,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28156e:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  281574:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  28157b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28157d:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  281584:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  28158b:	c1 e8 10             	shr    $0x10,%eax
  28158e:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  281594:	83 ec 08             	sub    $0x8,%esp
  281597:	68 00 f8 26 00       	push   $0x26f800
  28159c:	68 ff 07 00 00       	push   $0x7ff
  2815a1:	e8 09 f6 ff ff       	call   280baf <load_idtr>

	return;
  2815a6:	83 c4 10             	add    $0x10,%esp
}
  2815a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2815ac:	c9                   	leave  
  2815ad:	c3                   	ret    

002815ae <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  2815ae:	55                   	push   %ebp
  2815af:	89 e5                	mov    %esp,%ebp
  2815b1:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  2815b4:	68 ff 00 00 00       	push   $0xff
  2815b9:	6a 21                	push   $0x21
  2815bb:	e8 b6 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  2815c0:	83 c4 08             	add    $0x8,%esp
  2815c3:	68 ff 00 00 00       	push   $0xff
  2815c8:	68 a1 00 00 00       	push   $0xa1
  2815cd:	e8 a4 f5 ff ff       	call   280b76 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  2815d2:	83 c4 08             	add    $0x8,%esp
  2815d5:	6a 11                	push   $0x11
  2815d7:	6a 20                	push   $0x20
  2815d9:	e8 98 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  2815de:	83 c4 08             	add    $0x8,%esp
  2815e1:	6a 20                	push   $0x20
  2815e3:	6a 21                	push   $0x21
  2815e5:	e8 8c f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  2815ea:	83 c4 08             	add    $0x8,%esp
  2815ed:	6a 04                	push   $0x4
  2815ef:	6a 21                	push   $0x21
  2815f1:	e8 80 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  2815f6:	83 c4 08             	add    $0x8,%esp
  2815f9:	6a 01                	push   $0x1
  2815fb:	6a 21                	push   $0x21
  2815fd:	e8 74 f5 ff ff       	call   280b76 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  281602:	83 c4 08             	add    $0x8,%esp
  281605:	6a 11                	push   $0x11
  281607:	68 a0 00 00 00       	push   $0xa0
  28160c:	e8 65 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  281611:	83 c4 08             	add    $0x8,%esp
  281614:	6a 28                	push   $0x28
  281616:	68 a1 00 00 00       	push   $0xa1
  28161b:	e8 56 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC1_ICW3, 2);
  281620:	83 c4 08             	add    $0x8,%esp
  281623:	6a 02                	push   $0x2
  281625:	68 a1 00 00 00       	push   $0xa1
  28162a:	e8 47 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  28162f:	83 c4 08             	add    $0x8,%esp
  281632:	6a 01                	push   $0x1
  281634:	68 a1 00 00 00       	push   $0xa1
  281639:	e8 38 f5 ff ff       	call   280b76 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  28163e:	83 c4 08             	add    $0x8,%esp
  281641:	68 fb 00 00 00       	push   $0xfb
  281646:	6a 21                	push   $0x21
  281648:	e8 29 f5 ff ff       	call   280b76 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  28164d:	83 c4 08             	add    $0x8,%esp
  281650:	68 ff 00 00 00       	push   $0xff
  281655:	68 a1 00 00 00       	push   $0xa1
  28165a:	e8 17 f5 ff ff       	call   280b76 <io_out8>
}
  28165f:	83 c4 10             	add    $0x10,%esp
  281662:	c9                   	leave  
  281663:	c3                   	ret    

00281664 <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  281664:	55                   	push   %ebp
  281665:	89 e5                	mov    %esp,%ebp
  281667:	57                   	push   %edi
  281668:	56                   	push   %esi
  281669:	53                   	push   %ebx
  28166a:	83 ec 2c             	sub    $0x2c,%esp
	struct CONSOLE *cons = (struct CONSOLE *)*((int *)0x0fec);
  28166d:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	struct TASK *task = task_now();
  281673:	e8 1a 15 00 00       	call   282b92 <task_now>
  281678:	89 c3                	mov    %eax,%ebx
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  28167a:	83 ec 08             	sub    $0x8,%esp
  28167d:	68 80 3f 28 00       	push   $0x283f80
  281682:	56                   	push   %esi
  281683:	e8 41 22 00 00       	call   2838c9 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281688:	83 c4 0c             	add    $0xc,%esp
  28168b:	8b 45 08             	mov    0x8(%ebp),%eax
  28168e:	ff 70 2c             	pushl  0x2c(%eax)
  281691:	68 a8 3f 28 00       	push   $0x283fa8
  281696:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281699:	57                   	push   %edi
  28169a:	e8 3e 02 00 00       	call   2818dd <sprintf>
	cons_putstr0(cons,s);
  28169f:	83 c4 08             	add    $0x8,%esp
  2816a2:	57                   	push   %edi
  2816a3:	56                   	push   %esi
  2816a4:	e8 20 22 00 00       	call   2838c9 <cons_putstr0>
	return &(task->tss.esp0);
  2816a9:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2816ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2816af:	5b                   	pop    %ebx
  2816b0:	5e                   	pop    %esi
  2816b1:	5f                   	pop    %edi
  2816b2:	5d                   	pop    %ebp
  2816b3:	c3                   	ret    

002816b4 <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  2816b4:	55                   	push   %ebp
  2816b5:	89 e5                	mov    %esp,%ebp
  2816b7:	57                   	push   %edi
  2816b8:	56                   	push   %esi
  2816b9:	53                   	push   %ebx
  2816ba:	83 ec 2c             	sub    $0x2c,%esp
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
  2816bd:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	struct TASK *task = task_now();
  2816c3:	e8 ca 14 00 00       	call   282b92 <task_now>
  2816c8:	89 c3                	mov    %eax,%ebx
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  2816ca:	83 ec 08             	sub    $0x8,%esp
  2816cd:	68 b0 3f 28 00       	push   $0x283fb0
  2816d2:	56                   	push   %esi
  2816d3:	e8 f1 21 00 00       	call   2838c9 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2816d8:	83 c4 0c             	add    $0xc,%esp
  2816db:	8b 45 08             	mov    0x8(%ebp),%eax
  2816de:	ff 70 2c             	pushl  0x2c(%eax)
  2816e1:	68 a8 3f 28 00       	push   $0x283fa8
  2816e6:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2816e9:	57                   	push   %edi
  2816ea:	e8 ee 01 00 00       	call   2818dd <sprintf>
	cons_putstr0(cons,s);
  2816ef:	83 c4 08             	add    $0x8,%esp
  2816f2:	57                   	push   %edi
  2816f3:	56                   	push   %esi
  2816f4:	e8 d0 21 00 00       	call   2838c9 <cons_putstr0>
	return &(task->tss.esp0);
  2816f9:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2816fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2816ff:	5b                   	pop    %ebx
  281700:	5e                   	pop    %esi
  281701:	5f                   	pop    %edi
  281702:	5d                   	pop    %ebp
  281703:	c3                   	ret    
  281704:	66 90                	xchg   %ax,%ax
  281706:	66 90                	xchg   %ax,%ax
  281708:	66 90                	xchg   %ax,%ax
  28170a:	66 90                	xchg   %ax,%ax
  28170c:	66 90                	xchg   %ax,%ax
  28170e:	66 90                	xchg   %ax,%ax

00281710 <asm_inthandler21>:
  281710:	06                   	push   %es
  281711:	1e                   	push   %ds
  281712:	60                   	pusha  
  281713:	89 e0                	mov    %esp,%eax
  281715:	50                   	push   %eax
  281716:	66 8c d0             	mov    %ss,%ax
  281719:	8e d8                	mov    %eax,%ds
  28171b:	8e c0                	mov    %eax,%es
  28171d:	e8 ed 05 00 00       	call   281d0f <inthandler21>
  281722:	58                   	pop    %eax
  281723:	61                   	popa   
  281724:	1f                   	pop    %ds
  281725:	07                   	pop    %es
  281726:	cf                   	iret   

00281727 <asm_inthandler2c>:
  281727:	06                   	push   %es
  281728:	1e                   	push   %ds
  281729:	60                   	pusha  
  28172a:	89 e0                	mov    %esp,%eax
  28172c:	50                   	push   %eax
  28172d:	66 8c d0             	mov    %ss,%ax
  281730:	8e d8                	mov    %eax,%ds
  281732:	8e c0                	mov    %eax,%es
  281734:	e8 3c 05 00 00       	call   281c75 <inthandler2c>
  281739:	58                   	pop    %eax
  28173a:	61                   	popa   
  28173b:	1f                   	pop    %ds
  28173c:	07                   	pop    %es
  28173d:	cf                   	iret   

0028173e <asm_inthandler20>:
  28173e:	06                   	push   %es
  28173f:	1e                   	push   %ds
  281740:	60                   	pusha  
  281741:	89 e0                	mov    %esp,%eax
  281743:	50                   	push   %eax
  281744:	66 8c d0             	mov    %ss,%ax
  281747:	8e d8                	mov    %eax,%ds
  281749:	8e c0                	mov    %eax,%es
  28174b:	e8 78 12 00 00       	call   2829c8 <inthandler20>
  281750:	58                   	pop    %eax
  281751:	61                   	popa   
  281752:	1f                   	pop    %ds
  281753:	07                   	pop    %es
  281754:	cf                   	iret   

00281755 <asm_sys_api>:
  281755:	fb                   	sti    
  281756:	1e                   	push   %ds
  281757:	06                   	push   %es
  281758:	60                   	pusha  
  281759:	60                   	pusha  
  28175a:	66 8c d0             	mov    %ss,%ax
  28175d:	8e d8                	mov    %eax,%ds
  28175f:	8e c0                	mov    %eax,%es
  281761:	e8 28 25 00 00       	call   283c8e <sys_api>
  281766:	83 f8 00             	cmp    $0x0,%eax
  281769:	75 07                	jne    281772 <end_app>
  28176b:	83 c4 20             	add    $0x20,%esp
  28176e:	61                   	popa   
  28176f:	07                   	pop    %es
  281770:	1f                   	pop    %ds
  281771:	cf                   	iret   

00281772 <end_app>:
  281772:	8b 20                	mov    (%eax),%esp
  281774:	61                   	popa   
  281775:	c3                   	ret    

00281776 <asm_inthandler0d>:
  281776:	fb                   	sti    
  281777:	06                   	push   %es
  281778:	1e                   	push   %ds
  281779:	60                   	pusha  
  28177a:	89 e0                	mov    %esp,%eax
  28177c:	50                   	push   %eax
  28177d:	66 8c d0             	mov    %ss,%ax
  281780:	8e d8                	mov    %eax,%ds
  281782:	8e c0                	mov    %eax,%es
  281784:	e8 db fe ff ff       	call   281664 <inthandler0d>
  281789:	83 f8 00             	cmp    $0x0,%eax
  28178c:	75 e4                	jne    281772 <end_app>
  28178e:	58                   	pop    %eax
  28178f:	61                   	popa   
  281790:	1f                   	pop    %ds
  281791:	07                   	pop    %es
  281792:	83 c4 04             	add    $0x4,%esp
  281795:	cf                   	iret   

00281796 <asm_inthandler0c>:
  281796:	fb                   	sti    
  281797:	06                   	push   %es
  281798:	1e                   	push   %ds
  281799:	60                   	pusha  
  28179a:	89 e0                	mov    %esp,%eax
  28179c:	50                   	push   %eax
  28179d:	66 8c d0             	mov    %ss,%ax
  2817a0:	8e d8                	mov    %eax,%ds
  2817a2:	8e c0                	mov    %eax,%es
  2817a4:	e8 0b ff ff ff       	call   2816b4 <inthandler0c>
  2817a9:	83 f8 00             	cmp    $0x0,%eax
  2817ac:	75 c4                	jne    281772 <end_app>
  2817ae:	58                   	pop    %eax
  2817af:	61                   	popa   
  2817b0:	1f                   	pop    %ds
  2817b1:	07                   	pop    %es
  2817b2:	83 c4 04             	add    $0x4,%esp
  2817b5:	cf                   	iret   

002817b6 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  2817b6:	55                   	push   %ebp
  2817b7:	89 e5                	mov    %esp,%ebp
  2817b9:	57                   	push   %edi
  2817ba:	56                   	push   %esi
  2817bb:	53                   	push   %ebx
  2817bc:	83 ec 10             	sub    $0x10,%esp
  2817bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2817c2:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  2817c5:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  2817cc:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  2817d3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  2817d9:	85 c9                	test   %ecx,%ecx
  2817db:	79 08                	jns    2817e5 <itoa+0x2f>
		*buf++ = '-';
  2817dd:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  2817e0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  2817e2:	8d 7f 01             	lea    0x1(%edi),%edi
  2817e5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  2817e8:	be 67 66 66 66       	mov    $0x66666667,%esi
  2817ed:	83 c3 01             	add    $0x1,%ebx
  2817f0:	89 c8                	mov    %ecx,%eax
  2817f2:	f7 ee                	imul   %esi
  2817f4:	c1 fa 02             	sar    $0x2,%edx
  2817f7:	89 c8                	mov    %ecx,%eax
  2817f9:	c1 f8 1f             	sar    $0x1f,%eax
  2817fc:	29 c2                	sub    %eax,%edx
  2817fe:	8d 04 92             	lea    (%edx,%edx,4),%eax
  281801:	01 c0                	add    %eax,%eax
  281803:	29 c1                	sub    %eax,%ecx
  281805:	83 c1 30             	add    $0x30,%ecx
  281808:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  28180b:	89 d1                	mov    %edx,%ecx
	}while(value);
  28180d:	85 d2                	test   %edx,%edx
  28180f:	75 dc                	jne    2817ed <itoa+0x37>
	while(tmp_buf != tbp--)
  281811:	8d 73 ff             	lea    -0x1(%ebx),%esi
  281814:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281817:	39 c3                	cmp    %eax,%ebx
  281819:	74 20                	je     28183b <itoa+0x85>
  28181b:	89 f0                	mov    %esi,%eax
  28181d:	89 fa                	mov    %edi,%edx
  28181f:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  281822:	83 c2 01             	add    $0x1,%edx
  281825:	0f b6 08             	movzbl (%eax),%ecx
  281828:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  28182b:	83 e8 01             	sub    $0x1,%eax
  28182e:	39 d8                	cmp    %ebx,%eax
  281830:	75 f0                	jne    281822 <itoa+0x6c>
  281832:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281835:	29 c6                	sub    %eax,%esi
  281837:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  28183b:	c6 07 00             	movb   $0x0,(%edi)
}
  28183e:	83 c4 10             	add    $0x10,%esp
  281841:	5b                   	pop    %ebx
  281842:	5e                   	pop    %esi
  281843:	5f                   	pop    %edi
  281844:	5d                   	pop    %ebp
  281845:	c3                   	ret    

00281846 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281846:	55                   	push   %ebp
  281847:	89 e5                	mov    %esp,%ebp
  281849:	57                   	push   %edi
  28184a:	56                   	push   %esi
  28184b:	53                   	push   %ebx
  28184c:	83 ec 20             	sub    $0x20,%esp
  28184f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281852:	bb 00 00 00 00       	mov    $0x0,%ebx
  281857:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28185e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281865:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28186a:	ba 00 00 00 00       	mov    $0x0,%edx
  28186f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281873:	83 c2 04             	add    $0x4,%edx
  281876:	39 ca                	cmp    %ecx,%edx
  281878:	72 f5                	jb     28186f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28187a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28187d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281880:	83 c6 02             	add    $0x2,%esi
  281883:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281886:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28188a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28188d:	83 c3 01             	add    $0x1,%ebx
  281890:	89 c1                	mov    %eax,%ecx
  281892:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281895:	8d 79 37             	lea    0x37(%ecx),%edi
  281898:	8d 51 30             	lea    0x30(%ecx),%edx
  28189b:	83 f9 0a             	cmp    $0xa,%ecx
  28189e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  2818a1:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  2818a4:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  2818a7:	85 c0                	test   %eax,%eax
  2818a9:	75 e2                	jne    28188d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  2818ab:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  2818ae:	39 c3                	cmp    %eax,%ebx
  2818b0:	74 20                	je     2818d2 <xtoa+0x8c>
  2818b2:	89 d8                	mov    %ebx,%eax
  2818b4:	89 f1                	mov    %esi,%ecx
  2818b6:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  2818b9:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  2818bc:	83 c1 01             	add    $0x1,%ecx
  2818bf:	0f b6 10             	movzbl (%eax),%edx
  2818c2:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  2818c5:	39 f8                	cmp    %edi,%eax
  2818c7:	75 f0                	jne    2818b9 <xtoa+0x73>
  2818c9:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2818cc:	29 c3                	sub    %eax,%ebx
  2818ce:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  2818d2:	c6 06 00             	movb   $0x0,(%esi)
}
  2818d5:	83 c4 20             	add    $0x20,%esp
  2818d8:	5b                   	pop    %ebx
  2818d9:	5e                   	pop    %esi
  2818da:	5f                   	pop    %edi
  2818db:	5d                   	pop    %ebp
  2818dc:	c3                   	ret    

002818dd <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  2818dd:	55                   	push   %ebp
  2818de:	89 e5                	mov    %esp,%ebp
  2818e0:	57                   	push   %edi
  2818e1:	56                   	push   %esi
  2818e2:	53                   	push   %ebx
  2818e3:	83 ec 10             	sub    $0x10,%esp
  2818e6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  2818e9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2818ec:	e9 a8 00 00 00       	jmp    281999 <sprintf+0xbc>
		if(*format!='%'){
  2818f1:	3c 25                	cmp    $0x25,%al
  2818f3:	74 10                	je     281905 <sprintf+0x28>
			*str++=*format++;
  2818f5:	83 c6 01             	add    $0x1,%esi
  2818f8:	89 75 0c             	mov    %esi,0xc(%ebp)
  2818fb:	88 03                	mov    %al,(%ebx)
  2818fd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  281900:	e9 94 00 00 00       	jmp    281999 <sprintf+0xbc>
		}
		else{
			format++;
  281905:	8d 46 01             	lea    0x1(%esi),%eax
  281908:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  28190b:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  28190f:	3c 73                	cmp    $0x73,%al
  281911:	74 5e                	je     281971 <sprintf+0x94>
  281913:	3c 78                	cmp    $0x78,%al
  281915:	74 2f                	je     281946 <sprintf+0x69>
  281917:	3c 64                	cmp    $0x64,%al
  281919:	75 75                	jne    281990 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  28191b:	8d 45 ea             	lea    -0x16(%ebp),%eax
  28191e:	50                   	push   %eax
  28191f:	ff 37                	pushl  (%edi)
  281921:	e8 90 fe ff ff       	call   2817b6 <itoa>
  281926:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  28192a:	83 c4 08             	add    $0x8,%esp
  28192d:	84 c0                	test   %al,%al
  28192f:	74 5f                	je     281990 <sprintf+0xb3>
  281931:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281934:	83 c3 01             	add    $0x1,%ebx
  281937:	83 c2 01             	add    $0x1,%edx
  28193a:	88 43 ff             	mov    %al,-0x1(%ebx)
  28193d:	0f b6 02             	movzbl (%edx),%eax
  281940:	84 c0                	test   %al,%al
  281942:	75 f0                	jne    281934 <sprintf+0x57>
  281944:	eb 4a                	jmp    281990 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281946:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281949:	50                   	push   %eax
  28194a:	ff 37                	pushl  (%edi)
  28194c:	e8 f5 fe ff ff       	call   281846 <xtoa>
  281951:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281955:	83 c4 08             	add    $0x8,%esp
  281958:	84 c0                	test   %al,%al
  28195a:	74 34                	je     281990 <sprintf+0xb3>
  28195c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  28195f:	83 c3 01             	add    $0x1,%ebx
  281962:	83 c2 01             	add    $0x1,%edx
  281965:	88 43 ff             	mov    %al,-0x1(%ebx)
  281968:	0f b6 02             	movzbl (%edx),%eax
  28196b:	84 c0                	test   %al,%al
  28196d:	75 f0                	jne    28195f <sprintf+0x82>
  28196f:	eb 1f                	jmp    281990 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281971:	8b 0f                	mov    (%edi),%ecx
  281973:	0f b6 11             	movzbl (%ecx),%edx
  281976:	84 d2                	test   %dl,%dl
  281978:	74 16                	je     281990 <sprintf+0xb3>
  28197a:	89 d8                	mov    %ebx,%eax
  28197c:	83 c0 01             	add    $0x1,%eax
  28197f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281982:	89 c2                	mov    %eax,%edx
  281984:	29 da                	sub    %ebx,%edx
  281986:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  28198a:	84 d2                	test   %dl,%dl
  28198c:	75 ee                	jne    28197c <sprintf+0x9f>
  28198e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281990:	83 c7 04             	add    $0x4,%edi
			format++;
  281993:	83 c6 02             	add    $0x2,%esi
  281996:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281999:	8b 75 0c             	mov    0xc(%ebp),%esi
  28199c:	0f b6 06             	movzbl (%esi),%eax
  28199f:	84 c0                	test   %al,%al
  2819a1:	0f 85 4a ff ff ff    	jne    2818f1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  2819a7:	c6 03 00             	movb   $0x0,(%ebx)
}
  2819aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2819ad:	5b                   	pop    %ebx
  2819ae:	5e                   	pop    %esi
  2819af:	5f                   	pop    %edi
  2819b0:	5d                   	pop    %ebp
  2819b1:	c3                   	ret    

002819b2 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  2819b2:	55                   	push   %ebp
  2819b3:	89 e5                	mov    %esp,%ebp
  2819b5:	57                   	push   %edi
  2819b6:	56                   	push   %esi
  2819b7:	53                   	push   %ebx
  2819b8:	8b 7d 08             	mov    0x8(%ebp),%edi
  2819bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819be:	0f b6 17             	movzbl (%edi),%edx
  2819c1:	be 00 00 00 00       	mov    $0x0,%esi
  2819c6:	84 d2                	test   %dl,%dl
  2819c8:	74 40                	je     281a0a <strcmp+0x58>
  2819ca:	eb 1d                	jmp    2819e9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  2819cc:	38 ca                	cmp    %cl,%dl
  2819ce:	75 0f                	jne    2819df <strcmp+0x2d>
  2819d0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819d3:	89 c6                	mov    %eax,%esi
  2819d5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  2819d9:	84 d2                	test   %dl,%dl
  2819db:	75 1e                	jne    2819fb <strcmp+0x49>
  2819dd:	eb 2b                	jmp    281a0a <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  2819df:	0f be c2             	movsbl %dl,%eax
  2819e2:	0f be c9             	movsbl %cl,%ecx
  2819e5:	29 c8                	sub    %ecx,%eax
  2819e7:	eb 2a                	jmp    281a13 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819e9:	0f b6 0b             	movzbl (%ebx),%ecx
  2819ec:	84 c9                	test   %cl,%cl
  2819ee:	74 15                	je     281a05 <strcmp+0x53>
	{
		if(c1==c2) i++;
  2819f0:	b8 00 00 00 00       	mov    $0x0,%eax
  2819f5:	38 ca                	cmp    %cl,%dl
  2819f7:	74 d7                	je     2819d0 <strcmp+0x1e>
  2819f9:	eb e4                	jmp    2819df <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819fb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  2819ff:	84 c9                	test   %cl,%cl
  281a01:	75 c9                	jne    2819cc <strcmp+0x1a>
  281a03:	eb 05                	jmp    281a0a <strcmp+0x58>
  281a05:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281a0a:	0f be c2             	movsbl %dl,%eax
  281a0d:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281a11:	29 d0                	sub    %edx,%eax
}
  281a13:	5b                   	pop    %ebx
  281a14:	5e                   	pop    %esi
  281a15:	5f                   	pop    %edi
  281a16:	5d                   	pop    %ebp
  281a17:	c3                   	ret    

00281a18 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281a18:	55                   	push   %ebp
  281a19:	89 e5                	mov    %esp,%ebp
  281a1b:	57                   	push   %edi
  281a1c:	56                   	push   %esi
  281a1d:	53                   	push   %ebx
  281a1e:	8b 75 08             	mov    0x8(%ebp),%esi
  281a21:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281a24:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281a27:	b8 00 00 00 00       	mov    $0x0,%eax
  281a2c:	85 ff                	test   %edi,%edi
  281a2e:	74 63                	je     281a93 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a30:	83 ef 01             	sub    $0x1,%edi
  281a33:	89 fa                	mov    %edi,%edx
  281a35:	74 52                	je     281a89 <strncmp+0x71>
  281a37:	eb 19                	jmp    281a52 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281a39:	38 c8                	cmp    %cl,%al
  281a3b:	75 0b                	jne    281a48 <strncmp+0x30>
  281a3d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a40:	39 fa                	cmp    %edi,%edx
  281a42:	75 27                	jne    281a6b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281a44:	89 fa                	mov    %edi,%edx
  281a46:	eb 41                	jmp    281a89 <strncmp+0x71>
		else return c1-c2;
  281a48:	0f be c0             	movsbl %al,%eax
  281a4b:	0f be c9             	movsbl %cl,%ecx
  281a4e:	29 c8                	sub    %ecx,%eax
  281a50:	eb 41                	jmp    281a93 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a52:	0f b6 06             	movzbl (%esi),%eax
  281a55:	84 c0                	test   %al,%al
  281a57:	74 24                	je     281a7d <strncmp+0x65>
  281a59:	0f b6 0b             	movzbl (%ebx),%ecx
  281a5c:	84 c9                	test   %cl,%cl
  281a5e:	74 24                	je     281a84 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281a60:	ba 00 00 00 00       	mov    $0x0,%edx
  281a65:	38 c8                	cmp    %cl,%al
  281a67:	74 d4                	je     281a3d <strncmp+0x25>
  281a69:	eb dd                	jmp    281a48 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a6b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281a6f:	84 c0                	test   %al,%al
  281a71:	74 16                	je     281a89 <strncmp+0x71>
  281a73:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281a77:	84 c9                	test   %cl,%cl
  281a79:	75 be                	jne    281a39 <strncmp+0x21>
  281a7b:	eb 0c                	jmp    281a89 <strncmp+0x71>
  281a7d:	ba 00 00 00 00       	mov    $0x0,%edx
  281a82:	eb 05                	jmp    281a89 <strncmp+0x71>
  281a84:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281a89:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281a8d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281a91:	29 d0                	sub    %edx,%eax
}
  281a93:	5b                   	pop    %ebx
  281a94:	5e                   	pop    %esi
  281a95:	5f                   	pop    %edi
  281a96:	5d                   	pop    %ebp
  281a97:	c3                   	ret    

00281a98 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281a98:	55                   	push   %ebp
  281a99:	89 e5                	mov    %esp,%ebp
  281a9b:	8b 45 08             	mov    0x8(%ebp),%eax
  281a9e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281aa1:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281aa4:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281aa7:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281aa9:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281aac:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281ab3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281aba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281ac1:	8b 55 14             	mov    0x14(%ebp),%edx
  281ac4:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281ac7:	5d                   	pop    %ebp
  281ac8:	c3                   	ret    

00281ac9 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281ac9:	55                   	push   %ebp
  281aca:	89 e5                	mov    %esp,%ebp
  281acc:	53                   	push   %ebx
  281acd:	83 ec 04             	sub    $0x4,%esp
  281ad0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281ad3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281ad7:	75 0b                	jne    281ae4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281ad9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281add:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281ae2:	eb 52                	jmp    281b36 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281ae4:	8b 48 04             	mov    0x4(%eax),%ecx
  281ae7:	8b 10                	mov    (%eax),%edx
  281ae9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281aec:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281aef:	8b 48 04             	mov    0x4(%eax),%ecx
  281af2:	8d 51 01             	lea    0x1(%ecx),%edx
  281af5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281af8:	3b 50 0c             	cmp    0xc(%eax),%edx
  281afb:	75 07                	jne    281b04 <fifo32_put+0x3b>
		fifo->p = 0;
  281afd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281b04:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281b08:	8b 50 18             	mov    0x18(%eax),%edx
  281b0b:	85 d2                	test   %edx,%edx
  281b0d:	74 22                	je     281b31 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281b0f:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281b14:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281b18:	74 1c                	je     281b36 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281b1a:	83 ec 04             	sub    $0x4,%esp
  281b1d:	6a 00                	push   $0x0
  281b1f:	6a ff                	push   $0xffffffff
  281b21:	52                   	push   %edx
  281b22:	e8 60 11 00 00       	call   282c87 <task_run>
  281b27:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281b2a:	b8 00 00 00 00       	mov    $0x0,%eax
  281b2f:	eb 05                	jmp    281b36 <fifo32_put+0x6d>
  281b31:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281b36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281b39:	c9                   	leave  
  281b3a:	c3                   	ret    

00281b3b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281b3b:	55                   	push   %ebp
  281b3c:	89 e5                	mov    %esp,%ebp
  281b3e:	56                   	push   %esi
  281b3f:	53                   	push   %ebx
  281b40:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281b43:	8b 59 10             	mov    0x10(%ecx),%ebx
  281b46:	8b 71 0c             	mov    0xc(%ecx),%esi
  281b49:	39 f3                	cmp    %esi,%ebx
  281b4b:	74 20                	je     281b6d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281b4d:	8b 51 08             	mov    0x8(%ecx),%edx
  281b50:	8b 01                	mov    (%ecx),%eax
  281b52:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281b55:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281b58:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281b5a:	be 00 00 00 00       	mov    $0x0,%esi
  281b5f:	0f 44 d6             	cmove  %esi,%edx
  281b62:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281b65:	83 c3 01             	add    $0x1,%ebx
  281b68:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281b6b:	eb 05                	jmp    281b72 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281b6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281b72:	5b                   	pop    %ebx
  281b73:	5e                   	pop    %esi
  281b74:	5d                   	pop    %ebp
  281b75:	c3                   	ret    

00281b76 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281b76:	55                   	push   %ebp
  281b77:	89 e5                	mov    %esp,%ebp
  281b79:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281b7c:	8b 42 0c             	mov    0xc(%edx),%eax
  281b7f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281b82:	5d                   	pop    %ebp
  281b83:	c3                   	ret    

00281b84 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281b84:	55                   	push   %ebp
  281b85:	89 e5                	mov    %esp,%ebp
  281b87:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281b8a:	8b 45 08             	mov    0x8(%ebp),%eax
  281b8d:	a3 a4 68 28 00       	mov    %eax,0x2868a4
	mousedata0 = data0;
  281b92:	8b 45 0c             	mov    0xc(%ebp),%eax
  281b95:	a3 a0 68 28 00       	mov    %eax,0x2868a0

	wait_KBC_sendready();
  281b9a:	e8 1a 01 00 00       	call   281cb9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281b9f:	83 ec 08             	sub    $0x8,%esp
  281ba2:	68 d4 00 00 00       	push   $0xd4
  281ba7:	6a 64                	push   $0x64
  281ba9:	e8 c8 ef ff ff       	call   280b76 <io_out8>
	wait_KBC_sendready();
  281bae:	e8 06 01 00 00       	call   281cb9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281bb3:	83 c4 08             	add    $0x8,%esp
  281bb6:	68 f4 00 00 00       	push   $0xf4
  281bbb:	6a 60                	push   $0x60
  281bbd:	e8 b4 ef ff ff       	call   280b76 <io_out8>
	mdec->phase = 0;
  281bc2:	8b 45 10             	mov    0x10(%ebp),%eax
  281bc5:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281bc9:	83 c4 10             	add    $0x10,%esp
}
  281bcc:	c9                   	leave  
  281bcd:	c3                   	ret    

00281bce <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281bce:	55                   	push   %ebp
  281bcf:	89 e5                	mov    %esp,%ebp
  281bd1:	56                   	push   %esi
  281bd2:	53                   	push   %ebx
  281bd3:	8b 55 08             	mov    0x8(%ebp),%edx
  281bd6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281bd9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281bdd:	84 c0                	test   %al,%al
  281bdf:	75 14                	jne    281bf5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281be1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281be6:	80 f9 fa             	cmp    $0xfa,%cl
  281be9:	0f 85 82 00 00 00    	jne    281c71 <mouse_decode+0xa3>
			mdec->phase = 1;
  281bef:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281bf3:	eb 7c                	jmp    281c71 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281bf5:	3c 01                	cmp    $0x1,%al
  281bf7:	75 17                	jne    281c10 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281bf9:	89 cb                	mov    %ecx,%ebx
  281bfb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281bfe:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281c03:	80 fb 08             	cmp    $0x8,%bl
  281c06:	75 69                	jne    281c71 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281c08:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281c0a:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281c0e:	eb 61                	jmp    281c71 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281c10:	3c 02                	cmp    $0x2,%al
  281c12:	75 0e                	jne    281c22 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281c14:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281c17:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281c1b:	b8 00 00 00 00       	mov    $0x0,%eax
  281c20:	eb 4f                	jmp    281c71 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281c22:	3c 03                	cmp    $0x3,%al
  281c24:	75 46                	jne    281c6c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281c26:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281c29:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281c2d:	0f b6 02             	movzbl (%edx),%eax
  281c30:	89 c3                	mov    %eax,%ebx
  281c32:	83 e3 07             	and    $0x7,%ebx
  281c35:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281c38:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281c3c:	0f b6 f3             	movzbl %bl,%esi
  281c3f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281c42:	0f b6 f1             	movzbl %cl,%esi
  281c45:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281c48:	a8 10                	test   $0x10,%al
  281c4a:	74 09                	je     281c55 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281c4c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281c52:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281c55:	a8 20                	test   $0x20,%al
  281c57:	74 09                	je     281c62 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281c59:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281c5f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281c62:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281c65:	b8 01 00 00 00       	mov    $0x1,%eax
  281c6a:	eb 05                	jmp    281c71 <mouse_decode+0xa3>
	}
	return -1;
  281c6c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281c71:	5b                   	pop    %ebx
  281c72:	5e                   	pop    %esi
  281c73:	5d                   	pop    %ebp
  281c74:	c3                   	ret    

00281c75 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281c75:	55                   	push   %ebp
  281c76:	89 e5                	mov    %esp,%ebp
  281c78:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281c7b:	6a 64                	push   $0x64
  281c7d:	68 a0 00 00 00       	push   $0xa0
  281c82:	e8 ef ee ff ff       	call   280b76 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281c87:	83 c4 08             	add    $0x8,%esp
  281c8a:	6a 62                	push   $0x62
  281c8c:	6a 20                	push   $0x20
  281c8e:	e8 e3 ee ff ff       	call   280b76 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281c93:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281c9a:	e8 b5 ee ff ff       	call   280b54 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281c9f:	83 c4 08             	add    $0x8,%esp
  281ca2:	03 05 a0 68 28 00    	add    0x2868a0,%eax
  281ca8:	50                   	push   %eax
  281ca9:	ff 35 a4 68 28 00    	pushl  0x2868a4
  281caf:	e8 15 fe ff ff       	call   281ac9 <fifo32_put>
	return;
  281cb4:	83 c4 10             	add    $0x10,%esp
}
  281cb7:	c9                   	leave  
  281cb8:	c3                   	ret    

00281cb9 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281cb9:	55                   	push   %ebp
  281cba:	89 e5                	mov    %esp,%ebp
  281cbc:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281cbf:	83 ec 0c             	sub    $0xc,%esp
  281cc2:	6a 64                	push   $0x64
  281cc4:	e8 8b ee ff ff       	call   280b54 <io_in8>
  281cc9:	83 c4 10             	add    $0x10,%esp
  281ccc:	a8 02                	test   $0x2,%al
  281cce:	75 ef                	jne    281cbf <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281cd0:	c9                   	leave  
  281cd1:	c3                   	ret    

00281cd2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281cd2:	55                   	push   %ebp
  281cd3:	89 e5                	mov    %esp,%ebp
  281cd5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281cd8:	8b 45 08             	mov    0x8(%ebp),%eax
  281cdb:	a3 a8 68 28 00       	mov    %eax,0x2868a8
	keydata0 = data0;
  281ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281ce3:	a3 ac 68 28 00       	mov    %eax,0x2868ac
	wait_KBC_sendready();
  281ce8:	e8 cc ff ff ff       	call   281cb9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281ced:	83 ec 08             	sub    $0x8,%esp
  281cf0:	6a 60                	push   $0x60
  281cf2:	6a 64                	push   $0x64
  281cf4:	e8 7d ee ff ff       	call   280b76 <io_out8>
	wait_KBC_sendready();
  281cf9:	e8 bb ff ff ff       	call   281cb9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281cfe:	83 c4 08             	add    $0x8,%esp
  281d01:	6a 47                	push   $0x47
  281d03:	6a 60                	push   $0x60
  281d05:	e8 6c ee ff ff       	call   280b76 <io_out8>
	return;
  281d0a:	83 c4 10             	add    $0x10,%esp
}
  281d0d:	c9                   	leave  
  281d0e:	c3                   	ret    

00281d0f <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281d0f:	55                   	push   %ebp
  281d10:	89 e5                	mov    %esp,%ebp
  281d12:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281d15:	6a 61                	push   $0x61
  281d17:	6a 20                	push   $0x20
  281d19:	e8 58 ee ff ff       	call   280b76 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d1e:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d25:	e8 2a ee ff ff       	call   280b54 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281d2a:	83 c4 08             	add    $0x8,%esp
  281d2d:	03 05 ac 68 28 00    	add    0x2868ac,%eax
  281d33:	50                   	push   %eax
  281d34:	ff 35 a8 68 28 00    	pushl  0x2868a8
  281d3a:	e8 8a fd ff ff       	call   281ac9 <fifo32_put>
	return;
  281d3f:	83 c4 10             	add    $0x10,%esp
}
  281d42:	c9                   	leave  
  281d43:	c3                   	ret    

00281d44 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281d44:	55                   	push   %ebp
  281d45:	89 e5                	mov    %esp,%ebp
  281d47:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281d4a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281d4f:	83 fa 7f             	cmp    $0x7f,%edx
  281d52:	77 16                	ja     281d6a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281d54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281d58:	75 09                	jne    281d63 <key_char+0x1f>
  281d5a:	0f b6 82 60 40 28 00 	movzbl 0x284060(%edx),%eax
  281d61:	eb 07                	jmp    281d6a <key_char+0x26>
		else return keytable1[key];
  281d63:	0f b6 82 e0 3f 28 00 	movzbl 0x283fe0(%edx),%eax
	}
	else return 0;
}
  281d6a:	5d                   	pop    %ebp
  281d6b:	c3                   	ret    

00281d6c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281d6c:	55                   	push   %ebp
  281d6d:	89 e5                	mov    %esp,%ebp
  281d6f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281d72:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281d76:	e8 1a ee ff ff       	call   280b95 <io_load_eflags>
  281d7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281d7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d81:	83 ec 0c             	sub    $0xc,%esp
  281d84:	50                   	push   %eax
  281d85:	e8 0e ee ff ff       	call   280b98 <io_store_eflags>
  281d8a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281d8d:	e8 03 ee ff ff       	call   280b95 <io_load_eflags>
  281d92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281d98:	25 00 00 04 00       	and    $0x40000,%eax
  281d9d:	85 c0                	test   %eax,%eax
  281d9f:	74 04                	je     281da5 <memtest+0x39>
		flg486 = 1;
  281da1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281da5:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281dac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281daf:	83 ec 0c             	sub    $0xc,%esp
  281db2:	50                   	push   %eax
  281db3:	e8 e0 ed ff ff       	call   280b98 <io_store_eflags>
  281db8:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281dbb:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281dbf:	74 1d                	je     281dde <memtest+0x72>
	{
		cr0 = load_cr0;
  281dc1:	c7 45 ec bf 0b 28 00 	movl   $0x280bbf,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281dc8:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281dd2:	83 ec 0c             	sub    $0xc,%esp
  281dd5:	50                   	push   %eax
  281dd6:	e8 e8 ed ff ff       	call   280bc3 <store_cr0>
  281ddb:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281dde:	83 ec 08             	sub    $0x8,%esp
  281de1:	ff 75 0c             	pushl  0xc(%ebp)
  281de4:	ff 75 08             	pushl  0x8(%ebp)
  281de7:	e8 df ed ff ff       	call   280bcb <_memtest_sub>
  281dec:	83 c4 10             	add    $0x10,%esp
  281def:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281df2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281df6:	74 1e                	je     281e16 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281df8:	e8 c2 ed ff ff       	call   280bbf <load_cr0>
  281dfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281e00:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281e0a:	83 ec 0c             	sub    $0xc,%esp
  281e0d:	50                   	push   %eax
  281e0e:	e8 b0 ed ff ff       	call   280bc3 <store_cr0>
  281e13:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281e16:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281e19:	c9                   	leave  
  281e1a:	c3                   	ret    

00281e1b <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281e1b:	55                   	push   %ebp
  281e1c:	89 e5                	mov    %esp,%ebp
  281e1e:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281e21:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281e28:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281e2f:	8b 45 08             	mov    0x8(%ebp),%eax
  281e32:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281e35:	eb 67                	jmp    281e9e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281e37:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281e3a:	05 fc 0f 00 00       	add    $0xffc,%eax
  281e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281e42:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e45:	8b 00                	mov    (%eax),%eax
  281e47:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281e4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e4d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e50:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e55:	8b 00                	mov    (%eax),%eax
  281e57:	f7 d0                	not    %eax
  281e59:	89 c2                	mov    %eax,%edx
  281e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e5e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281e60:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e63:	8b 00                	mov    (%eax),%eax
  281e65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281e68:	74 0d                	je     281e77 <memtest_sub+0x5c>
  281e6a:	eb 01                	jmp    281e6d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281e6c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281e6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e70:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281e73:	89 10                	mov    %edx,(%eax)
			break;
  281e75:	eb 2f                	jmp    281ea6 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e7a:	8b 00                	mov    (%eax),%eax
  281e7c:	f7 d0                	not    %eax
  281e7e:	89 c2                	mov    %eax,%edx
  281e80:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e83:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281e85:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e88:	8b 00                	mov    (%eax),%eax
  281e8a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281e8d:	75 dd                	jne    281e6c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e92:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281e95:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281e97:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281e9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281ea1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281ea4:	76 91                	jbe    281e37 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281ea6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281ea9:	c9                   	leave  
  281eaa:	c3                   	ret    

00281eab <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281eab:	55                   	push   %ebp
  281eac:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281eae:	8b 45 08             	mov    0x8(%ebp),%eax
  281eb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281eb7:	8b 45 08             	mov    0x8(%ebp),%eax
  281eba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281ec1:	8b 45 08             	mov    0x8(%ebp),%eax
  281ec4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281ecb:	8b 45 08             	mov    0x8(%ebp),%eax
  281ece:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281ed5:	90                   	nop
}
  281ed6:	5d                   	pop    %ebp
  281ed7:	c3                   	ret    

00281ed8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281ed8:	55                   	push   %ebp
  281ed9:	89 e5                	mov    %esp,%ebp
  281edb:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281ede:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281ee5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281eec:	eb 14                	jmp    281f02 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281eee:	8b 45 08             	mov    0x8(%ebp),%eax
  281ef1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281ef4:	83 c2 02             	add    $0x2,%edx
  281ef7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281efb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281efe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281f02:	8b 45 08             	mov    0x8(%ebp),%eax
  281f05:	8b 00                	mov    (%eax),%eax
  281f07:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281f0a:	77 e2                	ja     281eee <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281f0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281f0f:	c9                   	leave  
  281f10:	c3                   	ret    

00281f11 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281f11:	55                   	push   %ebp
  281f12:	89 e5                	mov    %esp,%ebp
  281f14:	53                   	push   %ebx
  281f15:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281f18:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281f1f:	e9 bd 00 00 00       	jmp    281fe1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  281f24:	8b 45 08             	mov    0x8(%ebp),%eax
  281f27:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f2a:	83 c2 02             	add    $0x2,%edx
  281f2d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f31:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f34:	0f 82 a3 00 00 00    	jb     281fdd <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  281f3a:	8b 45 08             	mov    0x8(%ebp),%eax
  281f3d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f40:	83 c2 02             	add    $0x2,%edx
  281f43:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281f46:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  281f49:	8b 45 08             	mov    0x8(%ebp),%eax
  281f4c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f4f:	83 c2 02             	add    $0x2,%edx
  281f52:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  281f55:	8b 45 0c             	mov    0xc(%ebp),%eax
  281f58:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281f5b:	8b 45 08             	mov    0x8(%ebp),%eax
  281f5e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f61:	83 c2 02             	add    $0x2,%edx
  281f64:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  281f67:	8b 45 08             	mov    0x8(%ebp),%eax
  281f6a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f6d:	83 c2 02             	add    $0x2,%edx
  281f70:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f74:	2b 45 0c             	sub    0xc(%ebp),%eax
  281f77:	89 c2                	mov    %eax,%edx
  281f79:	8b 45 08             	mov    0x8(%ebp),%eax
  281f7c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  281f7f:	83 c1 02             	add    $0x2,%ecx
  281f82:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  281f86:	8b 45 08             	mov    0x8(%ebp),%eax
  281f89:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f8c:	83 c2 02             	add    $0x2,%edx
  281f8f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f93:	85 c0                	test   %eax,%eax
  281f95:	75 41                	jne    281fd8 <memman_alloc+0xc7>
			{
				man->frees--;
  281f97:	8b 45 08             	mov    0x8(%ebp),%eax
  281f9a:	8b 00                	mov    (%eax),%eax
  281f9c:	8d 50 ff             	lea    -0x1(%eax),%edx
  281f9f:	8b 45 08             	mov    0x8(%ebp),%eax
  281fa2:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  281fa4:	eb 28                	jmp    281fce <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  281fa6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fa9:	8d 50 01             	lea    0x1(%eax),%edx
  281fac:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281faf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fb2:	8d 58 02             	lea    0x2(%eax),%ebx
  281fb5:	8b 45 08             	mov    0x8(%ebp),%eax
  281fb8:	83 c2 02             	add    $0x2,%edx
  281fbb:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  281fbe:	8b 02                	mov    (%edx),%eax
  281fc0:	8b 52 04             	mov    0x4(%edx),%edx
  281fc3:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  281fc6:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  281fca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281fce:	8b 45 08             	mov    0x8(%ebp),%eax
  281fd1:	8b 00                	mov    (%eax),%eax
  281fd3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281fd6:	77 ce                	ja     281fa6 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  281fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  281fdb:	eb 17                	jmp    281ff4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281fdd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281fe1:	8b 45 08             	mov    0x8(%ebp),%eax
  281fe4:	8b 00                	mov    (%eax),%eax
  281fe6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281fe9:	0f 87 35 ff ff ff    	ja     281f24 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  281fef:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281ff4:	83 c4 10             	add    $0x10,%esp
  281ff7:	5b                   	pop    %ebx
  281ff8:	5d                   	pop    %ebp
  281ff9:	c3                   	ret    

00281ffa <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  281ffa:	55                   	push   %ebp
  281ffb:	89 e5                	mov    %esp,%ebp
  281ffd:	53                   	push   %ebx
  281ffe:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  282001:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  282008:	eb 15                	jmp    28201f <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  28200a:	8b 45 08             	mov    0x8(%ebp),%eax
  28200d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282010:	83 c2 02             	add    $0x2,%edx
  282013:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282016:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282019:	77 10                	ja     28202b <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  28201b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28201f:	8b 45 08             	mov    0x8(%ebp),%eax
  282022:	8b 00                	mov    (%eax),%eax
  282024:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282027:	7f e1                	jg     28200a <memman_free+0x10>
  282029:	eb 01                	jmp    28202c <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  28202b:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  28202c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  282030:	0f 8e f2 00 00 00    	jle    282128 <memman_free+0x12e>
  282036:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282039:	8d 50 ff             	lea    -0x1(%eax),%edx
  28203c:	8b 45 08             	mov    0x8(%ebp),%eax
  28203f:	83 c2 02             	add    $0x2,%edx
  282042:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282045:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282048:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28204b:	8b 45 08             	mov    0x8(%ebp),%eax
  28204e:	83 c1 02             	add    $0x2,%ecx
  282051:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282055:	01 d0                	add    %edx,%eax
  282057:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28205a:	0f 85 c8 00 00 00    	jne    282128 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282060:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282063:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282066:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282069:	8d 50 ff             	lea    -0x1(%eax),%edx
  28206c:	8b 45 08             	mov    0x8(%ebp),%eax
  28206f:	83 c2 02             	add    $0x2,%edx
  282072:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282076:	8b 45 10             	mov    0x10(%ebp),%eax
  282079:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28207c:	8b 45 08             	mov    0x8(%ebp),%eax
  28207f:	8d 53 02             	lea    0x2(%ebx),%edx
  282082:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282086:	8b 45 08             	mov    0x8(%ebp),%eax
  282089:	8b 00                	mov    (%eax),%eax
  28208b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28208e:	0f 8e 8a 00 00 00    	jle    28211e <memman_free+0x124>
  282094:	8b 55 0c             	mov    0xc(%ebp),%edx
  282097:	8b 45 10             	mov    0x10(%ebp),%eax
  28209a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28209d:	8b 45 08             	mov    0x8(%ebp),%eax
  2820a0:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820a3:	83 c2 02             	add    $0x2,%edx
  2820a6:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2820a9:	39 c1                	cmp    %eax,%ecx
  2820ab:	75 71                	jne    28211e <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  2820ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820b0:	8d 58 ff             	lea    -0x1(%eax),%ebx
  2820b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820b6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2820b9:	8b 45 08             	mov    0x8(%ebp),%eax
  2820bc:	83 c2 02             	add    $0x2,%edx
  2820bf:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  2820c3:	8b 45 08             	mov    0x8(%ebp),%eax
  2820c6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  2820c9:	83 c1 02             	add    $0x2,%ecx
  2820cc:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2820d0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2820d3:	8b 45 08             	mov    0x8(%ebp),%eax
  2820d6:	8d 53 02             	lea    0x2(%ebx),%edx
  2820d9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  2820dd:	eb 28                	jmp    282107 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  2820df:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820e2:	8d 50 01             	lea    0x1(%eax),%edx
  2820e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2820e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820eb:	8d 58 02             	lea    0x2(%eax),%ebx
  2820ee:	8b 45 08             	mov    0x8(%ebp),%eax
  2820f1:	83 c2 02             	add    $0x2,%edx
  2820f4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2820f7:	8b 02                	mov    (%edx),%eax
  2820f9:	8b 52 04             	mov    0x4(%edx),%edx
  2820fc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2820ff:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  282103:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282107:	8b 45 08             	mov    0x8(%ebp),%eax
  28210a:	8b 00                	mov    (%eax),%eax
  28210c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28210f:	7f ce                	jg     2820df <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  282111:	8b 45 08             	mov    0x8(%ebp),%eax
  282114:	8b 00                	mov    (%eax),%eax
  282116:	8d 50 ff             	lea    -0x1(%eax),%edx
  282119:	8b 45 08             	mov    0x8(%ebp),%eax
  28211c:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  28211e:	b8 00 00 00 00       	mov    $0x0,%eax
  282123:	e9 1f 01 00 00       	jmp    282247 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  282128:	8b 45 08             	mov    0x8(%ebp),%eax
  28212b:	8b 00                	mov    (%eax),%eax
  28212d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282130:	7e 52                	jle    282184 <memman_free+0x18a>
  282132:	8b 55 0c             	mov    0xc(%ebp),%edx
  282135:	8b 45 10             	mov    0x10(%ebp),%eax
  282138:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28213b:	8b 45 08             	mov    0x8(%ebp),%eax
  28213e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282141:	83 c2 02             	add    $0x2,%edx
  282144:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282147:	39 c1                	cmp    %eax,%ecx
  282149:	75 39                	jne    282184 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28214b:	8b 45 08             	mov    0x8(%ebp),%eax
  28214e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282151:	8d 4a 02             	lea    0x2(%edx),%ecx
  282154:	8b 55 0c             	mov    0xc(%ebp),%edx
  282157:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28215a:	8b 45 08             	mov    0x8(%ebp),%eax
  28215d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282160:	83 c2 02             	add    $0x2,%edx
  282163:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282167:	8b 45 10             	mov    0x10(%ebp),%eax
  28216a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28216d:	8b 45 08             	mov    0x8(%ebp),%eax
  282170:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282173:	83 c2 02             	add    $0x2,%edx
  282176:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28217a:	b8 00 00 00 00       	mov    $0x0,%eax
  28217f:	e9 c3 00 00 00       	jmp    282247 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282184:	8b 45 08             	mov    0x8(%ebp),%eax
  282187:	8b 00                	mov    (%eax),%eax
  282189:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28218e:	0f 8f 8a 00 00 00    	jg     28221e <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282194:	8b 45 08             	mov    0x8(%ebp),%eax
  282197:	8b 00                	mov    (%eax),%eax
  282199:	83 e8 01             	sub    $0x1,%eax
  28219c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28219f:	eb 28                	jmp    2821c9 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  2821a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2821a4:	83 c0 01             	add    $0x1,%eax
  2821a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2821aa:	8d 58 02             	lea    0x2(%eax),%ebx
  2821ad:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2821b3:	83 c2 02             	add    $0x2,%edx
  2821b6:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2821b9:	8b 02                	mov    (%edx),%eax
  2821bb:	8b 52 04             	mov    0x4(%edx),%edx
  2821be:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2821c1:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  2821c5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  2821c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2821cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821cf:	7d d0                	jge    2821a1 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2821d1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821d4:	8b 50 04             	mov    0x4(%eax),%edx
  2821d7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821da:	8b 00                	mov    (%eax),%eax
  2821dc:	39 c2                	cmp    %eax,%edx
  2821de:	7d 0b                	jge    2821eb <memman_free+0x1f1>
  2821e0:	8b 45 08             	mov    0x8(%ebp),%eax
  2821e3:	8b 10                	mov    (%eax),%edx
  2821e5:	8b 45 08             	mov    0x8(%ebp),%eax
  2821e8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2821eb:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ee:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2821f1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2821f4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2821f7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2821fa:	8b 45 08             	mov    0x8(%ebp),%eax
  2821fd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282200:	8d 4a 02             	lea    0x2(%edx),%ecx
  282203:	8b 55 10             	mov    0x10(%ebp),%edx
  282206:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  28220a:	8b 45 08             	mov    0x8(%ebp),%eax
  28220d:	8b 00                	mov    (%eax),%eax
  28220f:	8d 50 01             	lea    0x1(%eax),%edx
  282212:	8b 45 08             	mov    0x8(%ebp),%eax
  282215:	89 10                	mov    %edx,(%eax)
		return 0;
  282217:	b8 00 00 00 00       	mov    $0x0,%eax
  28221c:	eb 29                	jmp    282247 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  28221e:	8b 45 08             	mov    0x8(%ebp),%eax
  282221:	8b 40 0c             	mov    0xc(%eax),%eax
  282224:	8d 50 01             	lea    0x1(%eax),%edx
  282227:	8b 45 08             	mov    0x8(%ebp),%eax
  28222a:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  28222d:	8b 45 08             	mov    0x8(%ebp),%eax
  282230:	8b 40 08             	mov    0x8(%eax),%eax
  282233:	89 c2                	mov    %eax,%edx
  282235:	8b 45 10             	mov    0x10(%ebp),%eax
  282238:	01 d0                	add    %edx,%eax
  28223a:	89 c2                	mov    %eax,%edx
  28223c:	8b 45 08             	mov    0x8(%ebp),%eax
  28223f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282242:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282247:	83 c4 10             	add    $0x10,%esp
  28224a:	5b                   	pop    %ebx
  28224b:	5d                   	pop    %ebp
  28224c:	c3                   	ret    

0028224d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28224d:	55                   	push   %ebp
  28224e:	89 e5                	mov    %esp,%ebp
  282250:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282253:	8b 45 0c             	mov    0xc(%ebp),%eax
  282256:	05 ff 0f 00 00       	add    $0xfff,%eax
  28225b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282260:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282263:	ff 75 0c             	pushl  0xc(%ebp)
  282266:	ff 75 08             	pushl  0x8(%ebp)
  282269:	e8 a3 fc ff ff       	call   281f11 <memman_alloc>
  28226e:	83 c4 08             	add    $0x8,%esp
  282271:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282274:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282277:	c9                   	leave  
  282278:	c3                   	ret    

00282279 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282279:	55                   	push   %ebp
  28227a:	89 e5                	mov    %esp,%ebp
  28227c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28227f:	8b 45 10             	mov    0x10(%ebp),%eax
  282282:	05 ff 0f 00 00       	add    $0xfff,%eax
  282287:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28228c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28228f:	ff 75 10             	pushl  0x10(%ebp)
  282292:	ff 75 0c             	pushl  0xc(%ebp)
  282295:	ff 75 08             	pushl  0x8(%ebp)
  282298:	e8 5d fd ff ff       	call   281ffa <memman_free>
  28229d:	83 c4 0c             	add    $0xc,%esp
  2822a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  2822a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  2822a6:	c9                   	leave  
  2822a7:	c3                   	ret    

002822a8 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  2822a8:	55                   	push   %ebp
  2822a9:	89 e5                	mov    %esp,%ebp
  2822ab:	57                   	push   %edi
  2822ac:	56                   	push   %esi
  2822ad:	53                   	push   %ebx
  2822ae:	83 ec 14             	sub    $0x14,%esp
  2822b1:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  2822b4:	68 14 28 00 00       	push   $0x2814
  2822b9:	57                   	push   %edi
  2822ba:	e8 8e ff ff ff       	call   28224d <memman_alloc_4k>
  2822bf:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  2822c1:	83 c4 10             	add    $0x10,%esp
  2822c4:	85 c0                	test   %eax,%eax
  2822c6:	74 6a                	je     282332 <shtctl_init+0x8a>
  2822c8:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  2822ca:	8b 45 0c             	mov    0xc(%ebp),%eax
  2822cd:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  2822cf:	83 ec 08             	sub    $0x8,%esp
  2822d2:	8b 45 10             	mov    0x10(%ebp),%eax
  2822d5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2822d9:	50                   	push   %eax
  2822da:	57                   	push   %edi
  2822db:	e8 6d ff ff ff       	call   28224d <memman_alloc_4k>
  2822e0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2822e3:	83 c4 10             	add    $0x10,%esp
  2822e6:	85 c0                	test   %eax,%eax
  2822e8:	75 19                	jne    282303 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2822ea:	83 ec 04             	sub    $0x4,%esp
  2822ed:	68 14 28 00 00       	push   $0x2814
  2822f2:	56                   	push   %esi
  2822f3:	57                   	push   %edi
  2822f4:	e8 80 ff ff ff       	call   282279 <memman_free_4k>
		ctl = 0;
		goto err;
  2822f9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2822fc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  282301:	eb 2f                	jmp    282332 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  282303:	8b 45 10             	mov    0x10(%ebp),%eax
  282306:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  282309:	8b 45 14             	mov    0x14(%ebp),%eax
  28230c:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  28230f:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  282316:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  28231c:	81 c3 30 28 00 00    	add    $0x2830,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  282322:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  282328:	89 70 04             	mov    %esi,0x4(%eax)
  28232b:	83 c0 24             	add    $0x24,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  28232e:	39 d8                	cmp    %ebx,%eax
  282330:	75 f0                	jne    282322 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
	err:
		return ctl;
}
  282332:	89 f0                	mov    %esi,%eax
  282334:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282337:	5b                   	pop    %ebx
  282338:	5e                   	pop    %esi
  282339:	5f                   	pop    %edi
  28233a:	5d                   	pop    %ebp
  28233b:	c3                   	ret    

0028233c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28233c:	55                   	push   %ebp
  28233d:	89 e5                	mov    %esp,%ebp
  28233f:	56                   	push   %esi
  282340:	53                   	push   %ebx
  282341:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282344:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28234b:	74 12                	je     28235f <sheet_alloc+0x23>
  28234d:	8d 91 54 04 00 00    	lea    0x454(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282353:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282358:	83 3a 00             	cmpl   $0x0,(%edx)
  28235b:	75 30                	jne    28238d <sheet_alloc+0x51>
  28235d:	eb 05                	jmp    282364 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28235f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282364:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
  28236b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
			sht->flags = SHEET_USE;
  28236e:	c7 84 99 30 04 00 00 	movl   $0x1,0x430(%ecx,%ebx,4)
  282375:	01 00 00 00 
			sht->height = -1;
  282379:	c7 84 99 2c 04 00 00 	movl   $0xffffffff,0x42c(%ecx,%ebx,4)
  282380:	ff ff ff ff 
			return sht;
  282384:	8d 84 99 14 04 00 00 	lea    0x414(%ecx,%ebx,4),%eax
  28238b:	eb 12                	jmp    28239f <sheet_alloc+0x63>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28238d:	83 c0 01             	add    $0x1,%eax
  282390:	83 c2 24             	add    $0x24,%edx
  282393:	3d 00 01 00 00       	cmp    $0x100,%eax
  282398:	75 be                	jne    282358 <sheet_alloc+0x1c>
			sht->flags = SHEET_USE;
			sht->height = -1;
			return sht;
		}
	}
	return 0;
  28239a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28239f:	5b                   	pop    %ebx
  2823a0:	5e                   	pop    %esi
  2823a1:	5d                   	pop    %ebp
  2823a2:	c3                   	ret    

002823a3 <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  2823a3:	55                   	push   %ebp
  2823a4:	89 e5                	mov    %esp,%ebp
  2823a6:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  2823a9:	8b 55 0c             	mov    0xc(%ebp),%edx
  2823ac:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  2823ae:	8b 55 10             	mov    0x10(%ebp),%edx
  2823b1:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  2823b4:	8b 55 14             	mov    0x14(%ebp),%edx
  2823b7:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  2823ba:	8b 55 18             	mov    0x18(%ebp),%edx
  2823bd:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  2823c0:	5d                   	pop    %ebp
  2823c1:	c3                   	ret    

002823c2 <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  2823c2:	55                   	push   %ebp
  2823c3:	89 e5                	mov    %esp,%ebp
  2823c5:	57                   	push   %edi
  2823c6:	56                   	push   %esi
  2823c7:	53                   	push   %ebx
  2823c8:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  2823cb:	8b 45 08             	mov    0x8(%ebp),%eax
  2823ce:	8b 00                	mov    (%eax),%eax
  2823d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2823d3:	8b 45 08             	mov    0x8(%ebp),%eax
  2823d6:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2823da:	0f 88 80 00 00 00    	js     282460 <sheet_refresh_ob+0x9e>
  2823e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2823e7:	8b 45 08             	mov    0x8(%ebp),%eax
  2823ea:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2823ed:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2823f1:	8b 02                	mov    (%edx),%eax
  2823f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  2823f6:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  2823fa:	7e 55                	jle    282451 <sheet_refresh_ob+0x8f>
  2823fc:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  282401:	89 f8                	mov    %edi,%eax
  282403:	03 42 10             	add    0x10(%edx),%eax
  282406:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  282409:	8b 4a 04             	mov    0x4(%edx),%ecx
  28240c:	85 c9                	test   %ecx,%ecx
  28240e:	7e 39                	jle    282449 <sheet_refresh_ob+0x87>
  282410:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  282415:	0f af cf             	imul   %edi,%ecx
  282418:	8b 75 f0             	mov    -0x10(%ebp),%esi
  28241b:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28241e:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  282422:	0f b6 cb             	movzbl %bl,%ecx
  282425:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282428:	74 15                	je     28243f <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  28242a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28242d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282430:	0f af 71 08          	imul   0x8(%ecx),%esi
  282434:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282437:	01 c1                	add    %eax,%ecx
  282439:	03 4a 0c             	add    0xc(%edx),%ecx
  28243c:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28243f:	83 c0 01             	add    $0x1,%eax
  282442:	8b 4a 04             	mov    0x4(%edx),%ecx
  282445:	39 c1                	cmp    %eax,%ecx
  282447:	7f cc                	jg     282415 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282449:	83 c7 01             	add    $0x1,%edi
  28244c:	39 7a 08             	cmp    %edi,0x8(%edx)
  28244f:	7f b0                	jg     282401 <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282451:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282455:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282458:	8b 7d 08             	mov    0x8(%ebp),%edi
  28245b:	39 47 10             	cmp    %eax,0x10(%edi)
  28245e:	7d 87                	jge    2823e7 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  282460:	83 c4 10             	add    $0x10,%esp
  282463:	5b                   	pop    %ebx
  282464:	5e                   	pop    %esi
  282465:	5f                   	pop    %edi
  282466:	5d                   	pop    %ebp
  282467:	c3                   	ret    

00282468 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282468:	55                   	push   %ebp
  282469:	89 e5                	mov    %esp,%ebp
  28246b:	57                   	push   %edi
  28246c:	56                   	push   %esi
  28246d:	53                   	push   %ebx
  28246e:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  282471:	8b 45 08             	mov    0x8(%ebp),%eax
  282474:	8b 00                	mov    (%eax),%eax
  282476:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282479:	8b 45 08             	mov    0x8(%ebp),%eax
  28247c:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  282480:	0f 88 a7 00 00 00    	js     28252d <sheet_refreshsub1+0xc5>
  282486:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  28248d:	8b 45 08             	mov    0x8(%ebp),%eax
  282490:	8b 7d e0             	mov    -0x20(%ebp),%edi
  282493:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282497:	8b 01                	mov    (%ecx),%eax
  282499:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  28249c:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  2824a0:	7e 78                	jle    28251a <sheet_refreshsub1+0xb2>
  2824a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  2824a9:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  2824ac:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  2824af:	8b 71 04             	mov    0x4(%ecx),%esi
  2824b2:	85 f6                	test   %esi,%esi
  2824b4:	7e 58                	jle    28250e <sheet_refreshsub1+0xa6>
  2824b6:	b8 00 00 00 00       	mov    $0x0,%eax
  2824bb:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  2824be:	89 c2                	mov    %eax,%edx
  2824c0:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  2824c3:	3b 55 0c             	cmp    0xc(%ebp),%edx
  2824c6:	7c 3c                	jl     282504 <sheet_refreshsub1+0x9c>
  2824c8:	3b 55 14             	cmp    0x14(%ebp),%edx
  2824cb:	7d 37                	jge    282504 <sheet_refreshsub1+0x9c>
  2824cd:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2824d0:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2824d3:	7c 2f                	jl     282504 <sheet_refreshsub1+0x9c>
  2824d5:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2824d8:	7d 2a                	jge    282504 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2824da:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2824de:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2824e1:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2824e4:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2824e8:	89 f3                	mov    %esi,%ebx
  2824ea:	0f b6 fb             	movzbl %bl,%edi
  2824ed:	3b 79 14             	cmp    0x14(%ecx),%edi
  2824f0:	74 12                	je     282504 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2824f2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2824f5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2824f8:	0f af 7b 08          	imul   0x8(%ebx),%edi
  2824fc:	03 55 e4             	add    -0x1c(%ebp),%edx
  2824ff:	89 f3                	mov    %esi,%ebx
  282501:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  282504:	83 c0 01             	add    $0x1,%eax
  282507:	8b 71 04             	mov    0x4(%ecx),%esi
  28250a:	39 c6                	cmp    %eax,%esi
  28250c:	7f b0                	jg     2824be <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  28250e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  282512:	8b 45 ec             	mov    -0x14(%ebp),%eax
  282515:	39 41 08             	cmp    %eax,0x8(%ecx)
  282518:	7f 8f                	jg     2824a9 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28251a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  28251e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  282521:	8b 7d 08             	mov    0x8(%ebp),%edi
  282524:	39 47 10             	cmp    %eax,0x10(%edi)
  282527:	0f 8d 60 ff ff ff    	jge    28248d <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  28252d:	83 c4 14             	add    $0x14,%esp
  282530:	5b                   	pop    %ebx
  282531:	5e                   	pop    %esi
  282532:	5f                   	pop    %edi
  282533:	5d                   	pop    %ebp
  282534:	c3                   	ret    

00282535 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282535:	55                   	push   %ebp
  282536:	89 e5                	mov    %esp,%ebp
  282538:	57                   	push   %edi
  282539:	56                   	push   %esi
  28253a:	53                   	push   %ebx
  28253b:	83 ec 30             	sub    $0x30,%esp
  28253e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  282541:	8b 55 10             	mov    0x10(%ebp),%edx
  282544:	8b 75 14             	mov    0x14(%ebp),%esi
  282547:	8b 7d 18             	mov    0x18(%ebp),%edi
  28254a:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  28254d:	8b 45 08             	mov    0x8(%ebp),%eax
  282550:	8b 00                	mov    (%eax),%eax
  282552:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  282555:	8b 45 08             	mov    0x8(%ebp),%eax
  282558:	8b 40 04             	mov    0x4(%eax),%eax
  28255b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28255e:	b8 00 00 00 00       	mov    $0x0,%eax
  282563:	85 c9                	test   %ecx,%ecx
  282565:	0f 48 c8             	cmovs  %eax,%ecx
  282568:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  28256b:	85 d2                	test   %edx,%edx
  28256d:	0f 48 d0             	cmovs  %eax,%edx
  282570:	89 55 d0             	mov    %edx,-0x30(%ebp)
	struct SHEET *sht;
	
	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  282573:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282576:	8b 51 08             	mov    0x8(%ecx),%edx
  282579:	39 f2                	cmp    %esi,%edx
  28257b:	0f 4e f2             	cmovle %edx,%esi
  28257e:	89 75 d4             	mov    %esi,-0x2c(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  282581:	8b 51 0c             	mov    0xc(%ecx),%edx
  282584:	39 fa                	cmp    %edi,%edx
  282586:	0f 4e fa             	cmovle %edx,%edi
  282589:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28258c:	85 db                	test   %ebx,%ebx
  28258e:	0f 49 c3             	cmovns %ebx,%eax
  282591:	89 45 d8             	mov    %eax,-0x28(%ebp)
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282594:	39 41 10             	cmp    %eax,0x10(%ecx)
  282597:	0f 8c b3 00 00 00    	jl     282650 <sheet_refreshsub2+0x11b>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  28259d:	8b 45 08             	mov    0x8(%ebp),%eax
  2825a0:	8b 7d d8             	mov    -0x28(%ebp),%edi
  2825a3:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  2825a7:	8b 01                	mov    (%ecx),%eax
  2825a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  2825ac:	8b 41 0c             	mov    0xc(%ecx),%eax
		by0 = vy0 - sht->vy0;
  2825af:	8b 71 10             	mov    0x10(%ecx),%esi
		bx1 = vx1 - sht->vx0;
  2825b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  2825b5:	29 c2                	sub    %eax,%edx
		by1 = vy1 - sht->vy0;
  2825b7:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  2825ba:	29 f3                	sub    %esi,%ebx
  2825bc:	8b 7d c8             	mov    -0x38(%ebp),%edi
  2825bf:	29 c7                	sub    %eax,%edi
  2825c1:	89 f8                	mov    %edi,%eax
  2825c3:	bf 00 00 00 00       	mov    $0x0,%edi
  2825c8:	0f 48 c7             	cmovs  %edi,%eax
  2825cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  2825ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2825d1:	29 f0                	sub    %esi,%eax
  2825d3:	0f 49 f8             	cmovns %eax,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2825d6:	8b 41 04             	mov    0x4(%ecx),%eax
  2825d9:	39 c2                	cmp    %eax,%edx
  2825db:	0f 4e c2             	cmovle %edx,%eax
  2825de:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2825e1:	8b 41 08             	mov    0x8(%ecx),%eax
  2825e4:	39 c3                	cmp    %eax,%ebx
  2825e6:	0f 4e c3             	cmovle %ebx,%eax
  2825e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		for(by=by0;by<by1;by++)
  2825ec:	39 f8                	cmp    %edi,%eax
  2825ee:	7e 4d                	jle    28263d <sheet_refreshsub2+0x108>
		{
			vy = sht->vy0+by;
  2825f0:	89 f8                	mov    %edi,%eax
  2825f2:	03 41 10             	add    0x10(%ecx),%eax
  2825f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			for(bx=bx0;bx<bx1;bx++)
  2825f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2825fb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2825fe:	7e 35                	jle    282635 <sheet_refreshsub2+0x100>
			{
				vx = sht->vx0+bx;
				c  = buf[by*sht->bxsize+bx];
  282600:	89 fa                	mov    %edi,%edx
  282602:	0f af 51 04          	imul   0x4(%ecx),%edx
  282606:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282609:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28260c:	0f b6 1c 13          	movzbl (%ebx,%edx,1),%ebx
				if(c!=sht->col_inv)
  282610:	0f b6 d3             	movzbl %bl,%edx
  282613:	3b 51 14             	cmp    0x14(%ecx),%edx
  282616:	74 15                	je     28262d <sheet_refreshsub2+0xf8>
					map[vy*ctl->xsize+vx] = c;
  282618:	8b 55 08             	mov    0x8(%ebp),%edx
  28261b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  28261e:	0f af 72 08          	imul   0x8(%edx),%esi
  282622:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  282625:	01 c2                	add    %eax,%edx
  282627:	03 51 0c             	add    0xc(%ecx),%edx
  28262a:	88 1c 32             	mov    %bl,(%edx,%esi,1)
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
		{
			vy = sht->vy0+by;
			for(bx=bx0;bx<bx1;bx++)
  28262d:	83 c0 01             	add    $0x1,%eax
  282630:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282633:	75 cb                	jne    282600 <sheet_refreshsub2+0xcb>

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		for(by=by0;by<by1;by++)
  282635:	83 c7 01             	add    $0x1,%edi
  282638:	39 7d e0             	cmp    %edi,-0x20(%ebp)
  28263b:	75 b3                	jne    2825f0 <sheet_refreshsub2+0xbb>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
	
	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  28263d:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
  282641:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282644:	8b 7d 08             	mov    0x8(%ebp),%edi
  282647:	39 47 10             	cmp    %eax,0x10(%edi)
  28264a:	0f 8d 4d ff ff ff    	jge    28259d <sheet_refreshsub2+0x68>
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  282650:	8b 7d d0             	mov    -0x30(%ebp),%edi
  282653:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  282656:	7f 2a                	jg     282682 <sheet_refreshsub2+0x14d>
  282658:	eb 40                	jmp    28269a <sheet_refreshsub2+0x165>
  28265a:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		for(vx=vx0;vx<vx1;vx++)
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  28265d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282660:	0f af 47 08          	imul   0x8(%edi),%eax
  282664:	01 d0                	add    %edx,%eax
  282666:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  28266a:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
		for(vx=vx0;vx<vx1;vx++)
  28266d:	83 c2 01             	add    $0x1,%edx
  282670:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
  282673:	75 e8                	jne    28265d <sheet_refreshsub2+0x128>
  282675:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				if(c!=sht->col_inv)
					map[vy*ctl->xsize+vx] = c;
			}
		}
	}
	for(vy=vy0;vy<vy1;vy++)
  282678:	83 c1 01             	add    $0x1,%ecx
  28267b:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28267e:	74 1a                	je     28269a <sheet_refreshsub2+0x165>
  282680:	eb 0c                	jmp    28268e <sheet_refreshsub2+0x159>
  282682:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  282685:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  282688:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  28268b:	8b 7d 08             	mov    0x8(%ebp),%edi
		for(vx=vx0;vx<vx1;vx++)
  28268e:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282691:	89 c2                	mov    %eax,%edx
  282693:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
  282696:	7f c2                	jg     28265a <sheet_refreshsub2+0x125>
  282698:	eb de                	jmp    282678 <sheet_refreshsub2+0x143>
			vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
}
  28269a:	83 c4 30             	add    $0x30,%esp
  28269d:	5b                   	pop    %ebx
  28269e:	5e                   	pop    %esi
  28269f:	5f                   	pop    %edi
  2826a0:	5d                   	pop    %ebp
  2826a1:	c3                   	ret    

002826a2 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  2826a2:	55                   	push   %ebp
  2826a3:	89 e5                	mov    %esp,%ebp
  2826a5:	53                   	push   %ebx
  2826a6:	8b 45 08             	mov    0x8(%ebp),%eax
	if(sht->height >= 0)
  2826a9:	8b 58 18             	mov    0x18(%eax),%ebx
  2826ac:	85 db                	test   %ebx,%ebx
  2826ae:	78 26                	js     2826d6 <sheet_refresh+0x34>
	{
		struct SHTCTL *ctl = sht->ctl;
		sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  2826b0:	8b 48 10             	mov    0x10(%eax),%ecx
  2826b3:	8b 50 0c             	mov    0xc(%eax),%edx
  2826b6:	53                   	push   %ebx
  2826b7:	89 cb                	mov    %ecx,%ebx
  2826b9:	03 5d 18             	add    0x18(%ebp),%ebx
  2826bc:	53                   	push   %ebx
  2826bd:	89 d3                	mov    %edx,%ebx
  2826bf:	03 5d 14             	add    0x14(%ebp),%ebx
  2826c2:	53                   	push   %ebx
  2826c3:	03 4d 10             	add    0x10(%ebp),%ecx
  2826c6:	51                   	push   %ecx
  2826c7:	03 55 0c             	add    0xc(%ebp),%edx
  2826ca:	52                   	push   %edx
  2826cb:	ff 70 20             	pushl  0x20(%eax)
  2826ce:	e8 62 fe ff ff       	call   282535 <sheet_refreshsub2>
  2826d3:	83 c4 18             	add    $0x18,%esp
	}
	return;
}
  2826d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2826d9:	c9                   	leave  
  2826da:	c3                   	ret    

002826db <sheet_updown>:
	return;
}

//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  2826db:	55                   	push   %ebp
  2826dc:	89 e5                	mov    %esp,%ebp
  2826de:	57                   	push   %edi
  2826df:	56                   	push   %esi
  2826e0:	53                   	push   %ebx
  2826e1:	8b 75 08             	mov    0x8(%ebp),%esi
  2826e4:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  2826e7:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  2826ea:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  2826ed:	8b 79 10             	mov    0x10(%ecx),%edi
  2826f0:	8d 57 01             	lea    0x1(%edi),%edx
  2826f3:	39 da                	cmp    %ebx,%edx
  2826f5:	0f 4f d3             	cmovg  %ebx,%edx
  2826f8:	85 d2                	test   %edx,%edx
  2826fa:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  2826ff:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282702:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282705:	39 d8                	cmp    %ebx,%eax
  282707:	7e 59                	jle    282762 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282709:	85 db                	test   %ebx,%ebx
  28270b:	79 09                	jns    282716 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28270d:	8b 59 10             	mov    0x10(%ecx),%ebx
  282710:	39 d8                	cmp    %ebx,%eax
  282712:	7c 1c                	jl     282730 <sheet_updown+0x55>
  282714:	eb 31                	jmp    282747 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282716:	8d 50 ff             	lea    -0x1(%eax),%edx
  282719:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28271d:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282721:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282724:	89 d0                	mov    %edx,%eax
  282726:	39 d3                	cmp    %edx,%ebx
  282728:	75 ec                	jne    282716 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  28272a:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28272e:	eb 1d                	jmp    28274d <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282730:	8d 50 01             	lea    0x1(%eax),%edx
  282733:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282737:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28273b:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28273e:	8b 59 10             	mov    0x10(%ecx),%ebx
  282741:	89 d0                	mov    %edx,%eax
  282743:	39 d3                	cmp    %edx,%ebx
  282745:	7f e9                	jg     282730 <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282747:	83 eb 01             	sub    $0x1,%ebx
  28274a:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28274d:	ff 76 08             	pushl  0x8(%esi)
  282750:	ff 76 04             	pushl  0x4(%esi)
  282753:	6a 00                	push   $0x0
  282755:	6a 00                	push   $0x0
  282757:	56                   	push   %esi
  282758:	e8 45 ff ff ff       	call   2826a2 <sheet_refresh>
  28275d:	83 c4 14             	add    $0x14,%esp
  282760:	eb 5a                	jmp    2827bc <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282762:	39 d8                	cmp    %ebx,%eax
  282764:	7d 56                	jge    2827bc <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282766:	85 c0                	test   %eax,%eax
  282768:	78 1a                	js     282784 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28276a:	8d 50 01             	lea    0x1(%eax),%edx
  28276d:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282771:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282775:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  282778:	89 d0                	mov    %edx,%eax
  28277a:	39 d3                	cmp    %edx,%ebx
  28277c:	75 ec                	jne    28276a <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  28277e:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282782:	eb 25                	jmp    2827a9 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  282784:	8b 41 10             	mov    0x10(%ecx),%eax
  282787:	8d 50 01             	lea    0x1(%eax),%edx
  28278a:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  28278d:	39 d3                	cmp    %edx,%ebx
  28278f:	7d 14                	jge    2827a5 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282791:	8d 42 ff             	lea    -0x1(%edx),%eax
  282794:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  282798:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  28279c:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  28279f:	89 c2                	mov    %eax,%edx
  2827a1:	39 c3                	cmp    %eax,%ebx
  2827a3:	75 ec                	jne    282791 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2827a5:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  2827a9:	ff 76 08             	pushl  0x8(%esi)
  2827ac:	ff 76 04             	pushl  0x4(%esi)
  2827af:	6a 00                	push   $0x0
  2827b1:	6a 00                	push   $0x0
  2827b3:	56                   	push   %esi
  2827b4:	e8 e9 fe ff ff       	call   2826a2 <sheet_refresh>
  2827b9:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  2827bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2827bf:	5b                   	pop    %ebx
  2827c0:	5e                   	pop    %esi
  2827c1:	5f                   	pop    %edi
  2827c2:	5d                   	pop    %ebp
  2827c3:	c3                   	ret    

002827c4 <sheet_slide>:
	}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  2827c4:	55                   	push   %ebp
  2827c5:	89 e5                	mov    %esp,%ebp
  2827c7:	57                   	push   %edi
  2827c8:	56                   	push   %esi
  2827c9:	53                   	push   %ebx
  2827ca:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2827cd:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  2827d0:	8b 43 0c             	mov    0xc(%ebx),%eax
  2827d3:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  2827d6:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2827d9:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  2827dc:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  2827df:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  2827e3:	78 36                	js     28281b <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  2827e5:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  2827e8:	6a 00                	push   $0x0
  2827ea:	89 d1                	mov    %edx,%ecx
  2827ec:	03 4b 08             	add    0x8(%ebx),%ecx
  2827ef:	51                   	push   %ecx
  2827f0:	89 c1                	mov    %eax,%ecx
  2827f2:	03 4b 04             	add    0x4(%ebx),%ecx
  2827f5:	51                   	push   %ecx
  2827f6:	52                   	push   %edx
  2827f7:	50                   	push   %eax
  2827f8:	57                   	push   %edi
  2827f9:	e8 37 fd ff ff       	call   282535 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  2827fe:	ff 73 18             	pushl  0x18(%ebx)
  282801:	89 f0                	mov    %esi,%eax
  282803:	03 43 08             	add    0x8(%ebx),%eax
  282806:	50                   	push   %eax
  282807:	8b 45 0c             	mov    0xc(%ebp),%eax
  28280a:	03 43 04             	add    0x4(%ebx),%eax
  28280d:	50                   	push   %eax
  28280e:	56                   	push   %esi
  28280f:	ff 75 0c             	pushl  0xc(%ebp)
  282812:	57                   	push   %edi
  282813:	e8 1d fd ff ff       	call   282535 <sheet_refreshsub2>
  282818:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  28281b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28281e:	5b                   	pop    %ebx
  28281f:	5e                   	pop    %esi
  282820:	5f                   	pop    %edi
  282821:	5d                   	pop    %ebp
  282822:	c3                   	ret    

00282823 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282823:	55                   	push   %ebp
  282824:	89 e5                	mov    %esp,%ebp
  282826:	53                   	push   %ebx
  282827:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  28282a:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  28282e:	78 0b                	js     28283b <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282830:	6a ff                	push   $0xffffffff
  282832:	53                   	push   %ebx
  282833:	e8 a3 fe ff ff       	call   2826db <sheet_updown>
  282838:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  28283b:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282842:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282845:	c9                   	leave  
  282846:	c3                   	ret    

00282847 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282847:	55                   	push   %ebp
  282848:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  28284a:	83 3d d0 68 28 00 00 	cmpl   $0x0,0x2868d0
  282851:	74 11                	je     282864 <timer_alloc+0x1d>
  282853:	ba e4 68 28 00       	mov    $0x2868e4,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282858:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  28285d:	83 3a 00             	cmpl   $0x0,(%edx)
  282860:	75 25                	jne    282887 <timer_alloc+0x40>
  282862:	eb 05                	jmp    282869 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282864:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282869:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282870:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282873:	c7 04 8d d0 68 28 00 	movl   $0x1,0x2868d0(,%ecx,4)
  28287a:	01 00 00 00 
			return &timerctl.timers0[i];
  28287e:	8d 04 8d c8 68 28 00 	lea    0x2868c8(,%ecx,4),%eax
  282885:	eb 12                	jmp    282899 <timer_alloc+0x52>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282887:	83 c0 01             	add    $0x1,%eax
  28288a:	83 c2 14             	add    $0x14,%edx
  28288d:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282892:	75 c9                	jne    28285d <timer_alloc+0x16>
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282894:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282899:	5d                   	pop    %ebp
  28289a:	c3                   	ret    

0028289b <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  28289b:	55                   	push   %ebp
  28289c:	89 e5                	mov    %esp,%ebp
  28289e:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  2828a1:	6a 34                	push   $0x34
  2828a3:	6a 43                	push   $0x43
  2828a5:	e8 cc e2 ff ff       	call   280b76 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  2828aa:	83 c4 08             	add    $0x8,%esp
  2828ad:	68 9c 00 00 00       	push   $0x9c
  2828b2:	6a 40                	push   $0x40
  2828b4:	e8 bd e2 ff ff       	call   280b76 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  2828b9:	83 c4 08             	add    $0x8,%esp
  2828bc:	6a 2e                	push   $0x2e
  2828be:	6a 40                	push   $0x40
  2828c0:	e8 b1 e2 ff ff       	call   280b76 <io_out8>
  2828c5:	b8 d0 68 28 00       	mov    $0x2868d0,%eax
  2828ca:	ba e0 8f 28 00       	mov    $0x288fe0,%edx
  2828cf:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  2828d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  2828d8:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  2828db:	39 d0                	cmp    %edx,%eax
  2828dd:	75 f3                	jne    2828d2 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  2828df:	e8 63 ff ff ff       	call   282847 <timer_alloc>
	t->next = 0;
  2828e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  2828ea:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  2828f1:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
	timerctl.t0 = t;
  2828f8:	a3 d8 8f 28 00       	mov    %eax,0x288fd8
	timerctl.next = 0xffffffff;
  2828fd:	c7 05 c4 68 28 00 ff 	movl   $0xffffffff,0x2868c4
  282904:	ff ff ff 
	return;
}
  282907:	c9                   	leave  
  282908:	c3                   	ret    

00282909 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282909:	55                   	push   %ebp
  28290a:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  28290c:	8b 45 08             	mov    0x8(%ebp),%eax
  28290f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	return;
}
  282916:	5d                   	pop    %ebp
  282917:	c3                   	ret    

00282918 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,unsigned char data)
{
  282918:	55                   	push   %ebp
  282919:	89 e5                	mov    %esp,%ebp
  28291b:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  28291e:	8b 55 0c             	mov    0xc(%ebp),%edx
  282921:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282924:	8b 55 10             	mov    0x10(%ebp),%edx
  282927:	88 50 10             	mov    %dl,0x10(%eax)
	return ;
}
  28292a:	5d                   	pop    %ebp
  28292b:	c3                   	ret    

0028292c <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  28292c:	55                   	push   %ebp
  28292d:	89 e5                	mov    %esp,%ebp
  28292f:	57                   	push   %edi
  282930:	56                   	push   %esi
  282931:	53                   	push   %ebx
  282932:	83 ec 0c             	sub    $0xc,%esp
  282935:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282938:	a1 c0 68 28 00       	mov    0x2868c0,%eax
  28293d:	03 45 0c             	add    0xc(%ebp),%eax
  282940:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282943:	c7 43 08 02 00 00 00 	movl   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  28294a:	e8 46 e2 ff ff       	call   280b95 <io_load_eflags>
  28294f:	89 c6                	mov    %eax,%esi
	io_cli();
  282951:	e8 ec e1 ff ff       	call   280b42 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282956:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282959:	8b 3d d8 8f 28 00    	mov    0x288fd8,%edi
  28295f:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282962:	77 1e                	ja     282982 <timer_settime+0x56>
	{
		timer->next = timerctl.t0;
  282964:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282966:	89 1d d8 8f 28 00    	mov    %ebx,0x288fd8
		timerctl.next = timer->timeout;
  28296c:	8b 43 04             	mov    0x4(%ebx),%eax
  28296f:	a3 c4 68 28 00       	mov    %eax,0x2868c4
		io_store_eflags(e);
  282974:	83 ec 0c             	sub    $0xc,%esp
  282977:	56                   	push   %esi
  282978:	e8 1b e2 ff ff       	call   280b98 <io_store_eflags>
		return;
  28297d:	83 c4 10             	add    $0x10,%esp
  282980:	eb 3e                	jmp    2829c0 <timer_settime+0x94>
	}
	t = timerctl.t0->next;
  282982:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282984:	85 d2                	test   %edx,%edx
  282986:	74 2c                	je     2829b4 <timer_settime+0x88>
	{
		if(timer->timeout<=t->timeout)
  282988:	3b 4a 04             	cmp    0x4(%edx),%ecx
  28298b:	77 21                	ja     2829ae <timer_settime+0x82>
  28298d:	eb 07                	jmp    282996 <timer_settime+0x6a>
  28298f:	3b 48 04             	cmp    0x4(%eax),%ecx
  282992:	77 18                	ja     2829ac <timer_settime+0x80>
  282994:	eb 04                	jmp    28299a <timer_settime+0x6e>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282996:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282998:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  28299a:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  28299c:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  28299e:	83 ec 0c             	sub    $0xc,%esp
  2829a1:	56                   	push   %esi
  2829a2:	e8 f1 e1 ff ff       	call   280b98 <io_store_eflags>
			return;
  2829a7:	83 c4 10             	add    $0x10,%esp
  2829aa:	eb 14                	jmp    2829c0 <timer_settime+0x94>
		}
		s = t;
		t = t->next;
  2829ac:	89 c2                	mov    %eax,%edx
  2829ae:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  2829b0:	85 c0                	test   %eax,%eax
  2829b2:	75 db                	jne    28298f <timer_settime+0x63>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  2829b4:	83 ec 0c             	sub    $0xc,%esp
  2829b7:	56                   	push   %esi
  2829b8:	e8 db e1 ff ff       	call   280b98 <io_store_eflags>
	return;
  2829bd:	83 c4 10             	add    $0x10,%esp
}
  2829c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2829c3:	5b                   	pop    %ebx
  2829c4:	5e                   	pop    %esi
  2829c5:	5f                   	pop    %edi
  2829c6:	5d                   	pop    %ebp
  2829c7:	c3                   	ret    

002829c8 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  2829c8:	55                   	push   %ebp
  2829c9:	89 e5                	mov    %esp,%ebp
  2829cb:	56                   	push   %esi
  2829cc:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  2829cd:	83 ec 08             	sub    $0x8,%esp
  2829d0:	6a 60                	push   $0x60
  2829d2:	6a 20                	push   $0x20
  2829d4:	e8 9d e1 ff ff       	call   280b76 <io_out8>
	timerctl.count ++;
  2829d9:	a1 c0 68 28 00       	mov    0x2868c0,%eax
  2829de:	8d 50 01             	lea    0x1(%eax),%edx
  2829e1:	89 15 c0 68 28 00    	mov    %edx,0x2868c0
	
	if(timerctl.count >= timerctl.next)
  2829e7:	83 c4 10             	add    $0x10,%esp
  2829ea:	3b 15 c4 68 28 00    	cmp    0x2868c4,%edx
  2829f0:	72 6e                	jb     282a60 <inthandler20+0x98>
	{
		struct TIMER *t = timerctl.t0;
  2829f2:	8b 1d d8 8f 28 00    	mov    0x288fd8,%ebx
		while(t)
  2829f8:	85 db                	test   %ebx,%ebx
  2829fa:	75 4b                	jne    282a47 <inthandler20+0x7f>
  2829fc:	eb 62                	jmp    282a60 <inthandler20+0x98>
		{
			if(t->timeout <= timerctl.count)
  2829fe:	8b 43 04             	mov    0x4(%ebx),%eax
  282a01:	3b 05 c0 68 28 00    	cmp    0x2868c0,%eax
  282a07:	77 31                	ja     282a3a <inthandler20+0x72>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282a09:	c7 43 08 01 00 00 00 	movl   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282a10:	39 1d e0 8f 28 00    	cmp    %ebx,0x288fe0
  282a16:	74 15                	je     282a2d <inthandler20+0x65>
  282a18:	83 ec 08             	sub    $0x8,%esp
  282a1b:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  282a1f:	50                   	push   %eax
  282a20:	ff 73 0c             	pushl  0xc(%ebx)
  282a23:	e8 a1 f0 ff ff       	call   281ac9 <fifo32_put>
  282a28:	83 c4 10             	add    $0x10,%esp
  282a2b:	eb 05                	jmp    282a32 <inthandler20+0x6a>
				else ts=1;
  282a2d:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282a32:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282a34:	85 db                	test   %ebx,%ebx
  282a36:	75 c6                	jne    2829fe <inthandler20+0x36>
  282a38:	eb 1b                	jmp    282a55 <inthandler20+0x8d>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282a3a:	a3 c4 68 28 00       	mov    %eax,0x2868c4
				timerctl.t0 = t;
  282a3f:	89 1d d8 8f 28 00    	mov    %ebx,0x288fd8
				break;
  282a45:	eb 0e                	jmp    282a55 <inthandler20+0x8d>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282a47:	8b 43 04             	mov    0x4(%ebx),%eax
  282a4a:	be 00 00 00 00       	mov    $0x0,%esi
  282a4f:	39 c2                	cmp    %eax,%edx
  282a51:	73 b6                	jae    282a09 <inthandler20+0x41>
  282a53:	eb e5                	jmp    282a3a <inthandler20+0x72>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282a55:	89 f0                	mov    %esi,%eax
  282a57:	84 c0                	test   %al,%al
  282a59:	74 05                	je     282a60 <inthandler20+0x98>
  282a5b:	e8 0b 04 00 00       	call   282e6b <task_switch>
	return;
}
  282a60:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282a63:	5b                   	pop    %ebx
  282a64:	5e                   	pop    %esi
  282a65:	5d                   	pop    %ebp
  282a66:	c3                   	ret    
  282a67:	66 90                	xchg   %ax,%ax
  282a69:	66 90                	xchg   %ax,%ax
  282a6b:	66 90                	xchg   %ax,%ax
  282a6d:	66 90                	xchg   %ax,%ax
  282a6f:	90                   	nop

00282a70 <load_tr>:
  282a70:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282a75:	c3                   	ret    

00282a76 <farjmp>:
  282a76:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282a7a:	c3                   	ret    

00282a7b <farcall>:
  282a7b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282a7f:	c3                   	ret    

00282a80 <asm_end_app>:
  282a80:	8b 20                	mov    (%eax),%esp
  282a82:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282a89:	61                   	popa   
  282a8a:	c3                   	ret    

00282a8b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282a8b:	55                   	push   %ebp
  282a8c:	89 e5                	mov    %esp,%ebp
  282a8e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282a91:	e8 aa e0 ff ff       	call   280b40 <io_hlt>
  282a96:	eb f9                	jmp    282a91 <task_idle+0x6>

00282a98 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282a98:	55                   	push   %ebp
  282a99:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282a9b:	8b 0d dc 8f 28 00    	mov    0x288fdc,%ecx
  282aa1:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282aa8:	74 16                	je     282ac0 <task_alloc+0x28>
  282aaa:	8d 91 90 10 00 00    	lea    0x1090(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282ab0:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282ab5:	83 3a 00             	cmpl   $0x0,(%edx)
  282ab8:	0f 85 b9 00 00 00    	jne    282b77 <task_alloc+0xdf>
  282abe:	eb 05                	jmp    282ac5 <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282ac0:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282ac5:	69 c0 94 00 00 00    	imul   $0x94,%eax,%eax
			task->flags = 1;
  282acb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282ace:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282ad5:	00 00 00 
			task->tss.eflags = 0x202;
  282ad8:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282adf:	02 00 00 
			task->tss.eax = 0;
  282ae2:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282ae9:	00 00 00 
			task->tss.ecx = 0;
  282aec:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282af3:	00 00 00 
			task->tss.edx = 0;
  282af6:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282afd:	00 00 00 
			task->tss.ebx = 0;
  282b00:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282b07:	00 00 00 
			task->tss.ebp = 0;
  282b0a:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282b11:	00 00 00 
			task->tss.esi = 0;
  282b14:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282b1b:	00 00 00 
			task->tss.edi = 0;
  282b1e:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282b25:	00 00 00 
			task->tss.es  = 0;
  282b28:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282b2f:	00 00 00 
			task->tss.ds  = 0;
  282b32:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282b39:	00 00 00 
			task->tss.fs  = 0;
  282b3c:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282b43:	00 00 00 
			task->tss.gs  = 0;
  282b46:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282b4d:	00 00 00 
			task->tss.ldtr= 0;
  282b50:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282b57:	00 00 00 
			task->tss.iomap = 0x40000000;
  282b5a:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282b61:	00 00 40 
			task->tss.ss0 = 0;
  282b64:	c7 82 2c 10 00 00 00 	movl   $0x0,0x102c(%edx)
  282b6b:	00 00 00 
			return task;
  282b6e:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282b75:	eb 19                	jmp    282b90 <task_alloc+0xf8>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282b77:	83 c0 01             	add    $0x1,%eax
  282b7a:	81 c2 94 00 00 00    	add    $0x94,%edx
  282b80:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282b85:	0f 85 2a ff ff ff    	jne    282ab5 <task_alloc+0x1d>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282b8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282b90:	5d                   	pop    %ebp
  282b91:	c3                   	ret    

00282b92 <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282b92:	55                   	push   %ebp
  282b93:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282b95:	8b 15 dc 8f 28 00    	mov    0x288fdc,%edx
  282b9b:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282b9d:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282ba3:	6b c0 66             	imul   $0x66,%eax,%eax
  282ba6:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282baa:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282bae:	5d                   	pop    %ebp
  282baf:	c3                   	ret    

00282bb0 <task_add>:

void task_add(struct TASK *task)
{
  282bb0:	55                   	push   %ebp
  282bb1:	89 e5                	mov    %esp,%ebp
  282bb3:	56                   	push   %esi
  282bb4:	53                   	push   %ebx
  282bb5:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282bb8:	8b 35 dc 8f 28 00    	mov    0x288fdc,%esi
  282bbe:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282bc1:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282bc7:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282bc9:	8b 50 08             	mov    0x8(%eax),%edx
  282bcc:	83 fa 64             	cmp    $0x64,%edx
  282bcf:	74 14                	je     282be5 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282bd1:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282bd4:	01 ca                	add    %ecx,%edx
  282bd6:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282bda:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282bde:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282be5:	5b                   	pop    %ebx
  282be6:	5e                   	pop    %esi
  282be7:	5d                   	pop    %ebp
  282be8:	c3                   	ret    

00282be9 <task_remove>:

void task_remove(struct TASK *task)
{
  282be9:	55                   	push   %ebp
  282bea:	89 e5                	mov    %esp,%ebp
  282bec:	57                   	push   %edi
  282bed:	56                   	push   %esi
  282bee:	53                   	push   %ebx
  282bef:	83 ec 04             	sub    $0x4,%esp
  282bf2:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282bf5:	8b 3d dc 8f 28 00    	mov    0x288fdc,%edi
  282bfb:	8b 43 08             	mov    0x8(%ebx),%eax
  282bfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282c01:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282c07:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282c09:	8b 4a 08             	mov    0x8(%edx),%ecx
  282c0c:	85 c9                	test   %ecx,%ecx
  282c0e:	7e 1d                	jle    282c2d <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282c10:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282c13:	74 1f                	je     282c34 <task_remove+0x4b>
  282c15:	b8 00 00 00 00       	mov    $0x0,%eax
  282c1a:	eb 06                	jmp    282c22 <task_remove+0x39>
  282c1c:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282c20:	74 17                	je     282c39 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282c22:	83 c0 01             	add    $0x1,%eax
  282c25:	39 c8                	cmp    %ecx,%eax
  282c27:	75 f3                	jne    282c1c <task_remove+0x33>
  282c29:	89 c8                	mov    %ecx,%eax
  282c2b:	eb 0c                	jmp    282c39 <task_remove+0x50>
  282c2d:	b8 00 00 00 00       	mov    $0x0,%eax
  282c32:	eb 05                	jmp    282c39 <task_remove+0x50>
  282c34:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282c39:	83 e9 01             	sub    $0x1,%ecx
  282c3c:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282c3f:	8b 72 0c             	mov    0xc(%edx),%esi
  282c42:	39 c6                	cmp    %eax,%esi
  282c44:	7e 06                	jle    282c4c <task_remove+0x63>
	{
		tl->now--;
  282c46:	83 ee 01             	sub    $0x1,%esi
  282c49:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282c4c:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282c4f:	7f 07                	jg     282c58 <task_remove+0x6f>
	{
		tl->now = 0;
  282c51:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282c58:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282c5f:	39 42 08             	cmp    %eax,0x8(%edx)
  282c62:	7e 1b                	jle    282c7f <task_remove+0x96>
  282c64:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282c68:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282c6c:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282c6f:	83 c0 01             	add    $0x1,%eax
  282c72:	8b 19                	mov    (%ecx),%ebx
  282c74:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282c77:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282c7a:	39 42 08             	cmp    %eax,0x8(%edx)
  282c7d:	7f f0                	jg     282c6f <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282c7f:	83 c4 04             	add    $0x4,%esp
  282c82:	5b                   	pop    %ebx
  282c83:	5e                   	pop    %esi
  282c84:	5f                   	pop    %edi
  282c85:	5d                   	pop    %ebp
  282c86:	c3                   	ret    

00282c87 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282c87:	55                   	push   %ebp
  282c88:	89 e5                	mov    %esp,%ebp
  282c8a:	56                   	push   %esi
  282c8b:	53                   	push   %ebx
  282c8c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282c8f:	8b 75 0c             	mov    0xc(%ebp),%esi
  282c92:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282c95:	85 f6                	test   %esi,%esi
  282c97:	79 03                	jns    282c9c <task_run+0x15>
  282c99:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282c9c:	85 c0                	test   %eax,%eax
  282c9e:	7e 03                	jle    282ca3 <task_run+0x1c>
  282ca0:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282ca3:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282ca7:	75 14                	jne    282cbd <task_run+0x36>
  282ca9:	3b 73 08             	cmp    0x8(%ebx),%esi
  282cac:	74 1b                	je     282cc9 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282cae:	53                   	push   %ebx
  282caf:	e8 35 ff ff ff       	call   282be9 <task_remove>
	}
	if(task->flags != 2)
  282cb4:	83 c4 04             	add    $0x4,%esp
  282cb7:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282cbb:	74 0c                	je     282cc9 <task_run+0x42>
	{
		task->level = level;
  282cbd:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282cc0:	53                   	push   %ebx
  282cc1:	e8 ea fe ff ff       	call   282bb0 <task_add>
  282cc6:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282cc9:	a1 dc 8f 28 00       	mov    0x288fdc,%eax
  282cce:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282cd2:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282cd5:	5b                   	pop    %ebx
  282cd6:	5e                   	pop    %esi
  282cd7:	5d                   	pop    %ebp
  282cd8:	c3                   	ret    

00282cd9 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282cd9:	55                   	push   %ebp
  282cda:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282cdc:	8b 0d dc 8f 28 00    	mov    0x288fdc,%ecx
  282ce2:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282ce6:	7f 20                	jg     282d08 <task_switchsub+0x2f>
  282ce8:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282cee:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282cf3:	83 3a 00             	cmpl   $0x0,(%edx)
  282cf6:	7f 15                	jg     282d0d <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282cf8:	83 c0 01             	add    $0x1,%eax
  282cfb:	81 c2 98 01 00 00    	add    $0x198,%edx
  282d01:	83 f8 0a             	cmp    $0xa,%eax
  282d04:	75 ed                	jne    282cf3 <task_switchsub+0x1a>
  282d06:	eb 05                	jmp    282d0d <task_switchsub+0x34>
  282d08:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282d0d:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282d0f:	a1 dc 8f 28 00       	mov    0x288fdc,%eax
  282d14:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282d18:	5d                   	pop    %ebp
  282d19:	c3                   	ret    

00282d1a <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  282d1a:	55                   	push   %ebp
  282d1b:	89 e5                	mov    %esp,%ebp
  282d1d:	57                   	push   %edi
  282d1e:	56                   	push   %esi
  282d1f:	53                   	push   %ebx
  282d20:	83 ec 14             	sub    $0x14,%esp
  282d23:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  282d26:	68 18 52 02 00       	push   $0x25218
  282d2b:	57                   	push   %edi
  282d2c:	e8 1c f5 ff ff       	call   28224d <memman_alloc_4k>
  282d31:	a3 dc 8f 28 00       	mov    %eax,0x288fdc
  282d36:	83 c4 10             	add    $0x10,%esp
  282d39:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  282d3e:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  282d43:	8b 15 dc 8f 28 00    	mov    0x288fdc,%edx
  282d49:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
  282d4f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282d52:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  282d59:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  282d5c:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  282d62:	68 89 00 00 00       	push   $0x89
  282d67:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  282d6e:	50                   	push   %eax
  282d6f:	6a 67                	push   $0x67
  282d71:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  282d77:	50                   	push   %eax
  282d78:	e8 ea e5 ff ff       	call   281367 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  282d7d:	83 c3 01             	add    $0x1,%ebx
  282d80:	83 c6 08             	add    $0x8,%esi
  282d83:	83 c4 10             	add    $0x10,%esp
  282d86:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  282d8c:	75 b5                	jne    282d43 <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  282d8e:	8b 15 dc 8f 28 00    	mov    0x288fdc,%edx
  282d94:	8d 42 08             	lea    0x8(%edx),%eax
  282d97:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  282d9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  282da3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282daa:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  282daf:	39 d0                	cmp    %edx,%eax
  282db1:	75 ea                	jne    282d9d <task_init+0x83>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  282db3:	e8 e0 fc ff ff       	call   282a98 <task_alloc>
  282db8:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  282dba:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  282dc1:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  282dc8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  282dcf:	83 ec 0c             	sub    $0xc,%esp
  282dd2:	50                   	push   %eax
  282dd3:	e8 d8 fd ff ff       	call   282bb0 <task_add>
	
	task_switchsub();
  282dd8:	e8 fc fe ff ff       	call   282cd9 <task_switchsub>
	load_tr(task->sel);
  282ddd:	83 c4 04             	add    $0x4,%esp
  282de0:	ff 36                	pushl  (%esi)
  282de2:	e8 89 fc ff ff       	call   282a70 <load_tr>
	task_timer = timer_alloc();
  282de7:	e8 5b fa ff ff       	call   282847 <timer_alloc>
  282dec:	a3 e0 8f 28 00       	mov    %eax,0x288fe0
	timer_settime(task_timer,task->priority);
  282df1:	83 c4 08             	add    $0x8,%esp
  282df4:	ff 76 0c             	pushl  0xc(%esi)
  282df7:	50                   	push   %eax
  282df8:	e8 2f fb ff ff       	call   28292c <timer_settime>

	struct TASK *idle = task_alloc();
  282dfd:	e8 96 fc ff ff       	call   282a98 <task_alloc>
  282e02:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  282e04:	83 c4 08             	add    $0x8,%esp
  282e07:	68 00 00 01 00       	push   $0x10000
  282e0c:	57                   	push   %edi
  282e0d:	e8 ff f0 ff ff       	call   281f11 <memman_alloc>
  282e12:	05 00 00 01 00       	add    $0x10000,%eax
  282e17:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  282e1a:	c7 43 4c 8b 2a 00 00 	movl   $0x2a8b,0x4c(%ebx)
	idle->tss.es = 1*8;
  282e21:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  282e28:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  282e2f:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  282e36:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  282e3d:	00 00 00 
	idle->tss.fs = 1*8;
  282e40:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  282e47:	00 00 00 
	idle->tss.gs = 1*8;
  282e4a:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  282e51:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  282e54:	83 c4 0c             	add    $0xc,%esp
  282e57:	6a 01                	push   $0x1
  282e59:	6a 09                	push   $0x9
  282e5b:	53                   	push   %ebx
  282e5c:	e8 26 fe ff ff       	call   282c87 <task_run>
	return task;
}
  282e61:	89 f0                	mov    %esi,%eax
  282e63:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282e66:	5b                   	pop    %ebx
  282e67:	5e                   	pop    %esi
  282e68:	5f                   	pop    %edi
  282e69:	5d                   	pop    %ebp
  282e6a:	c3                   	ret    

00282e6b <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  282e6b:	55                   	push   %ebp
  282e6c:	89 e5                	mov    %esp,%ebp
  282e6e:	56                   	push   %esi
  282e6f:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282e70:	8b 0d dc 8f 28 00    	mov    0x288fdc,%ecx
  282e76:	8b 31                	mov    (%ecx),%esi
  282e78:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  282e7e:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  282e80:	8b 50 0c             	mov    0xc(%eax),%edx
  282e83:	6b de 66             	imul   $0x66,%esi,%ebx
  282e86:	01 d3                	add    %edx,%ebx
  282e88:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  282e8c:	83 c2 01             	add    $0x1,%edx
  282e8f:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  282e92:	3b 50 08             	cmp    0x8(%eax),%edx
  282e95:	75 07                	jne    282e9e <task_switch+0x33>
	{
		tl->now = 0;
  282e97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  282e9e:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  282ea2:	75 0c                	jne    282eb0 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282ea4:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  282eaa:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  282eae:	eb 14                	jmp    282ec4 <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  282eb0:	e8 24 fe ff ff       	call   282cd9 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  282eb5:	a1 dc 8f 28 00       	mov    0x288fdc,%eax
  282eba:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  282ec0:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  282ec4:	8b 50 04             	mov    0x4(%eax),%edx
  282ec7:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  282ecb:	83 ec 08             	sub    $0x8,%esp
  282ece:	ff 76 0c             	pushl  0xc(%esi)
  282ed1:	ff 35 e0 8f 28 00    	pushl  0x288fe0
  282ed7:	e8 50 fa ff ff       	call   28292c <timer_settime>
	if(new_task != now_task)
  282edc:	83 c4 10             	add    $0x10,%esp
  282edf:	39 f3                	cmp    %esi,%ebx
  282ee1:	74 0f                	je     282ef2 <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  282ee3:	83 ec 08             	sub    $0x8,%esp
  282ee6:	ff 36                	pushl  (%esi)
  282ee8:	6a 00                	push   $0x0
  282eea:	e8 87 fb ff ff       	call   282a76 <farjmp>
  282eef:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  282ef2:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282ef5:	5b                   	pop    %ebx
  282ef6:	5e                   	pop    %esi
  282ef7:	5d                   	pop    %ebp
  282ef8:	c3                   	ret    

00282ef9 <task_sleep>:

void task_sleep(struct TASK *task)
{
  282ef9:	55                   	push   %ebp
  282efa:	89 e5                	mov    %esp,%ebp
  282efc:	56                   	push   %esi
  282efd:	53                   	push   %ebx
  282efe:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  282f01:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f05:	75 2d                	jne    282f34 <task_sleep+0x3b>
	{
		now_task = task_now();
  282f07:	e8 86 fc ff ff       	call   282b92 <task_now>
  282f0c:	89 c6                	mov    %eax,%esi
		task_remove(task);
  282f0e:	53                   	push   %ebx
  282f0f:	e8 d5 fc ff ff       	call   282be9 <task_remove>
		if(task == now_task)
  282f14:	83 c4 04             	add    $0x4,%esp
  282f17:	39 f3                	cmp    %esi,%ebx
  282f19:	75 19                	jne    282f34 <task_sleep+0x3b>
		{
			task_switchsub();
  282f1b:	e8 b9 fd ff ff       	call   282cd9 <task_switchsub>
			now_task = task_now();
  282f20:	e8 6d fc ff ff       	call   282b92 <task_now>
			farjmp(0,now_task->sel);
  282f25:	83 ec 08             	sub    $0x8,%esp
  282f28:	ff 30                	pushl  (%eax)
  282f2a:	6a 00                	push   $0x0
  282f2c:	e8 45 fb ff ff       	call   282a76 <farjmp>
  282f31:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  282f34:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282f37:	5b                   	pop    %ebx
  282f38:	5e                   	pop    %esi
  282f39:	5d                   	pop    %ebp
  282f3a:	c3                   	ret    

00282f3b <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  282f3b:	55                   	push   %ebp
  282f3c:	89 e5                	mov    %esp,%ebp
  282f3e:	57                   	push   %edi
  282f3f:	56                   	push   %esi
  282f40:	53                   	push   %ebx
  282f41:	81 ec 4c 02 00 00    	sub    $0x24c,%esp
  282f47:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TIMER *timer;
	struct TASK *task = task_now();
  282f4a:	e8 43 fc ff ff       	call   282b92 <task_now>
  282f4f:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  282f55:	89 7d b8             	mov    %edi,-0x48(%ebp)
	cons.cur_x = 8;
  282f58:	c7 45 bc 08 00 00 00 	movl   $0x8,-0x44(%ebp)
	cons.cur_y = 28;
  282f5f:	c7 45 c0 1c 00 00 00 	movl   $0x1c,-0x40(%ebp)
	cons.cur_c = -1;
  282f66:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
	*((int *)0x0fec) = (int)&cons; //for api
  282f6d:	8d 5d b8             	lea    -0x48(%ebp),%ebx
  282f70:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int i,fifobuf[128];
	fifo32_init(&task->fifo,128,fifobuf,task);
  282f76:	8d 70 10             	lea    0x10(%eax),%esi
  282f79:	50                   	push   %eax
  282f7a:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
  282f80:	50                   	push   %eax
  282f81:	68 80 00 00 00       	push   $0x80
  282f86:	56                   	push   %esi
  282f87:	e8 0c eb ff ff       	call   281a98 <fifo32_init>
	timer = timer_alloc();
  282f8c:	e8 b6 f8 ff ff       	call   282847 <timer_alloc>
	timer_init(timer,&task->fifo,1);
  282f91:	83 c4 0c             	add    $0xc,%esp
  282f94:	6a 01                	push   $0x1
  282f96:	56                   	push   %esi
  282f97:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
  282f9d:	50                   	push   %eax
  282f9e:	e8 75 f9 ff ff       	call   282918 <timer_init>
	timer_settime(timer,50);
  282fa3:	83 c4 08             	add    $0x8,%esp
  282fa6:	6a 32                	push   $0x32
  282fa8:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  282fae:	e8 79 f9 ff ff       	call   28292c <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  282fb3:	83 c4 08             	add    $0x8,%esp
  282fb6:	68 00 2d 00 00       	push   $0x2d00
  282fbb:	68 00 00 3c 00       	push   $0x3c0000
  282fc0:	e8 88 f2 ff ff       	call   28224d <memman_alloc_4k>
  282fc5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  282fcb:	83 c4 08             	add    $0x8,%esp
  282fce:	68 00 02 10 00       	push   $0x100200
  282fd3:	50                   	push   %eax
  282fd4:	e8 17 02 00 00       	call   2831f0 <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  282fd9:	83 c4 0c             	add    $0xc,%esp
  282fdc:	6a 01                	push   $0x1
  282fde:	6a 3e                	push   $0x3e
  282fe0:	53                   	push   %ebx
  282fe1:	e8 a4 05 00 00       	call   28358a <cons_putchar>
  282fe6:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  282fe9:	e8 54 db ff ff       	call   280b42 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  282fee:	83 ec 0c             	sub    $0xc,%esp
  282ff1:	56                   	push   %esi
  282ff2:	e8 7f eb ff ff       	call   281b76 <fifo32_status>
  282ff7:	83 c4 10             	add    $0x10,%esp
  282ffa:	85 c0                	test   %eax,%eax
  282ffc:	75 18                	jne    283016 <console_task+0xdb>
		{
			task_sleep(task);
  282ffe:	83 ec 0c             	sub    $0xc,%esp
  283001:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  283007:	e8 ed fe ff ff       	call   282ef9 <task_sleep>
			io_sti();
  28300c:	e8 33 db ff ff       	call   280b44 <io_sti>
  283011:	83 c4 10             	add    $0x10,%esp
  283014:	eb d3                	jmp    282fe9 <console_task+0xae>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  283016:	83 ec 0c             	sub    $0xc,%esp
  283019:	56                   	push   %esi
  28301a:	e8 1c eb ff ff       	call   281b3b <fifo32_get>
  28301f:	89 c3                	mov    %eax,%ebx
			io_sti();
  283021:	e8 1e db ff ff       	call   280b44 <io_sti>
			if(i<=1) //for cursor
  283026:	83 c4 10             	add    $0x10,%esp
  283029:	83 fb 01             	cmp    $0x1,%ebx
  28302c:	7f 60                	jg     28308e <console_task+0x153>
			{
				if(i!=0)
  28302e:	85 db                	test   %ebx,%ebx
  283030:	74 23                	je     283055 <console_task+0x11a>
				{
					timer_init(timer,&task->fifo,0);
  283032:	83 ec 04             	sub    $0x4,%esp
  283035:	6a 00                	push   $0x0
  283037:	56                   	push   %esi
  283038:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  28303e:	e8 d5 f8 ff ff       	call   282918 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  283043:	83 c4 10             	add    $0x10,%esp
  283046:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  28304a:	78 2a                	js     283076 <console_task+0x13b>
  28304c:	c7 45 c4 07 00 00 00 	movl   $0x7,-0x3c(%ebp)
  283053:	eb 21                	jmp    283076 <console_task+0x13b>
				}
				else
				{
					timer_init(timer,&task->fifo,1);
  283055:	83 ec 04             	sub    $0x4,%esp
  283058:	6a 01                	push   $0x1
  28305a:	56                   	push   %esi
  28305b:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  283061:	e8 b2 f8 ff ff       	call   282918 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  283066:	83 c4 10             	add    $0x10,%esp
  283069:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  28306d:	78 07                	js     283076 <console_task+0x13b>
  28306f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
				}
				timer_settime(timer,50);
  283076:	83 ec 08             	sub    $0x8,%esp
  283079:	6a 32                	push   $0x32
  28307b:	ff b5 b0 fd ff ff    	pushl  -0x250(%ebp)
  283081:	e8 a6 f8 ff ff       	call   28292c <timer_settime>
  283086:	83 c4 10             	add    $0x10,%esp
  283089:	e9 16 01 00 00       	jmp    2831a4 <console_task+0x269>
							
			}
			else if(i == 2) //get show cursor msg
  28308e:	83 fb 02             	cmp    $0x2,%ebx
  283091:	75 11                	jne    2830a4 <console_task+0x169>
			{
				cons.cur_c = COL8_FFFFFF;
  283093:	c7 45 c4 07 00 00 00 	movl   $0x7,-0x3c(%ebp)
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  28309a:	b8 07 00 00 00       	mov    $0x7,%eax
  28309f:	e9 07 01 00 00       	jmp    2831ab <console_task+0x270>
			}
			else if(i == 2) //get show cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide cursor msg
  2830a4:	83 fb 03             	cmp    $0x3,%ebx
  2830a7:	75 2a                	jne    2830d3 <console_task+0x198>
			{
				cons.cur_c = -1;
  2830a9:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
				boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,28,cons.cur_x+7,43);
  2830b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2830b3:	83 ec 04             	sub    $0x4,%esp
  2830b6:	6a 2b                	push   $0x2b
  2830b8:	8d 50 07             	lea    0x7(%eax),%edx
  2830bb:	52                   	push   %edx
  2830bc:	6a 1c                	push   $0x1c
  2830be:	50                   	push   %eax
  2830bf:	6a 00                	push   $0x0
  2830c1:	ff 77 04             	pushl  0x4(%edi)
  2830c4:	ff 37                	pushl  (%edi)
  2830c6:	e8 f9 db ff ff       	call   280cc4 <boxfill8>
  2830cb:	83 c4 20             	add    $0x20,%esp
  2830ce:	e9 d1 00 00 00       	jmp    2831a4 <console_task+0x269>
			}
			else if(256<=i && i<=511)
  2830d3:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  2830d9:	3d ff 00 00 00       	cmp    $0xff,%eax
  2830de:	0f 87 c0 00 00 00    	ja     2831a4 <console_task+0x269>
			{
				if(i == 8+256) //back key
  2830e4:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  2830ea:	75 26                	jne    283112 <console_task+0x1d7>
				{
					if(cons.cur_x > 16)
  2830ec:	83 7d bc 10          	cmpl   $0x10,-0x44(%ebp)
  2830f0:	0f 8e ae 00 00 00    	jle    2831a4 <console_task+0x269>
					{
						cons_putchar(&cons,' ',0);
  2830f6:	83 ec 04             	sub    $0x4,%esp
  2830f9:	6a 00                	push   $0x0
  2830fb:	6a 20                	push   $0x20
  2830fd:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283100:	50                   	push   %eax
  283101:	e8 84 04 00 00       	call   28358a <cons_putchar>
						cons.cur_x -= 8;
  283106:	83 6d bc 08          	subl   $0x8,-0x44(%ebp)
  28310a:	83 c4 10             	add    $0x10,%esp
  28310d:	e9 92 00 00 00       	jmp    2831a4 <console_task+0x269>
					}
				}
				else if(i == 10+256) //return key
  283112:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  283118:	75 59                	jne    283173 <console_task+0x238>
				{
					cons_putchar(&cons,' ',0);
  28311a:	83 ec 04             	sub    $0x4,%esp
  28311d:	6a 00                	push   $0x0
  28311f:	6a 20                	push   $0x20
  283121:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283124:	50                   	push   %eax
  283125:	e8 60 04 00 00       	call   28358a <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  28312a:	8b 55 bc             	mov    -0x44(%ebp),%edx
  28312d:	8d 42 07             	lea    0x7(%edx),%eax
  283130:	85 d2                	test   %edx,%edx
  283132:	0f 49 c2             	cmovns %edx,%eax
  283135:	c1 f8 03             	sar    $0x3,%eax
  283138:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  28313d:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283140:	89 04 24             	mov    %eax,(%esp)
  283143:	e8 77 03 00 00       	call   2834bf <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  283148:	ff 75 0c             	pushl  0xc(%ebp)
  28314b:	ff b5 ac fd ff ff    	pushl  -0x254(%ebp)
  283151:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283154:	50                   	push   %eax
  283155:	8d 45 ca             	lea    -0x36(%ebp),%eax
  283158:	50                   	push   %eax
  283159:	e8 bd 09 00 00       	call   283b1b <cons_runcmd>
					cons_putchar(&cons,'>',1);
  28315e:	83 c4 1c             	add    $0x1c,%esp
  283161:	6a 01                	push   $0x1
  283163:	6a 3e                	push   $0x3e
  283165:	8d 45 b8             	lea    -0x48(%ebp),%eax
  283168:	50                   	push   %eax
  283169:	e8 1c 04 00 00       	call   28358a <cons_putchar>
  28316e:	83 c4 10             	add    $0x10,%esp
  283171:	eb 31                	jmp    2831a4 <console_task+0x269>
				}
				else
				{
					if(cons.cur_x<240)
  283173:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283176:	3d ef 00 00 00       	cmp    $0xef,%eax
  28317b:	7f 27                	jg     2831a4 <console_task+0x269>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  28317d:	8d 50 07             	lea    0x7(%eax),%edx
  283180:	85 c0                	test   %eax,%eax
  283182:	0f 48 c2             	cmovs  %edx,%eax
  283185:	c1 f8 03             	sar    $0x3,%eax
  283188:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  28318c:	83 ec 04             	sub    $0x4,%esp
  28318f:	6a 01                	push   $0x1
  283191:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  283197:	53                   	push   %ebx
  283198:	8d 45 b8             	lea    -0x48(%ebp),%eax
  28319b:	50                   	push   %eax
  28319c:	e8 e9 03 00 00       	call   28358a <cons_putchar>
  2831a1:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2831a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  2831a7:	85 c0                	test   %eax,%eax
  2831a9:	78 24                	js     2831cf <console_task+0x294>
  2831ab:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  2831ae:	8b 55 bc             	mov    -0x44(%ebp),%edx
  2831b1:	83 ec 04             	sub    $0x4,%esp
  2831b4:	8d 59 0f             	lea    0xf(%ecx),%ebx
  2831b7:	53                   	push   %ebx
  2831b8:	8d 5a 07             	lea    0x7(%edx),%ebx
  2831bb:	53                   	push   %ebx
  2831bc:	51                   	push   %ecx
  2831bd:	52                   	push   %edx
  2831be:	0f b6 c0             	movzbl %al,%eax
  2831c1:	50                   	push   %eax
  2831c2:	ff 77 04             	pushl  0x4(%edi)
  2831c5:	ff 37                	pushl  (%edi)
  2831c7:	e8 f8 da ff ff       	call   280cc4 <boxfill8>
  2831cc:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  2831cf:	8b 55 c0             	mov    -0x40(%ebp),%edx
  2831d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2831d5:	83 ec 0c             	sub    $0xc,%esp
  2831d8:	8d 4a 10             	lea    0x10(%edx),%ecx
  2831db:	51                   	push   %ecx
  2831dc:	8d 48 08             	lea    0x8(%eax),%ecx
  2831df:	51                   	push   %ecx
  2831e0:	52                   	push   %edx
  2831e1:	50                   	push   %eax
  2831e2:	57                   	push   %edi
  2831e3:	e8 ba f4 ff ff       	call   2826a2 <sheet_refresh>
  2831e8:	83 c4 20             	add    $0x20,%esp
  2831eb:	e9 f9 fd ff ff       	jmp    282fe9 <console_task+0xae>

002831f0 <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2831f0:	55                   	push   %ebp
  2831f1:	89 e5                	mov    %esp,%ebp
  2831f3:	53                   	push   %ebx
  2831f4:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2831f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2831fe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283205:	e9 87 00 00 00       	jmp    283291 <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  28320a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28320d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283214:	8b 45 08             	mov    0x8(%ebp),%eax
  283217:	01 d0                	add    %edx,%eax
  283219:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28321c:	8b 55 0c             	mov    0xc(%ebp),%edx
  28321f:	01 ca                	add    %ecx,%edx
  283221:	0f b6 12             	movzbl (%edx),%edx
  283224:	0f b6 d2             	movzbl %dl,%edx
  283227:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28322a:	8d 59 01             	lea    0x1(%ecx),%ebx
  28322d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283230:	01 d9                	add    %ebx,%ecx
  283232:	0f b6 09             	movzbl (%ecx),%ecx
  283235:	0f b6 c9             	movzbl %cl,%ecx
  283238:	c1 e1 08             	shl    $0x8,%ecx
  28323b:	09 ca                	or     %ecx,%edx
  28323d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283243:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  283245:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283248:	83 c0 01             	add    $0x1,%eax
  28324b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283252:	8b 45 08             	mov    0x8(%ebp),%eax
  283255:	01 d0                	add    %edx,%eax
  283257:	8b 55 f4             	mov    -0xc(%ebp),%edx
  28325a:	8d 4a 01             	lea    0x1(%edx),%ecx
  28325d:	8b 55 0c             	mov    0xc(%ebp),%edx
  283260:	01 ca                	add    %ecx,%edx
  283262:	0f b6 12             	movzbl (%edx),%edx
  283265:	c0 ea 04             	shr    $0x4,%dl
  283268:	0f b6 d2             	movzbl %dl,%edx
  28326b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28326e:	8d 59 02             	lea    0x2(%ecx),%ebx
  283271:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283274:	01 d9                	add    %ebx,%ecx
  283276:	0f b6 09             	movzbl (%ecx),%ecx
  283279:	0f b6 c9             	movzbl %cl,%ecx
  28327c:	c1 e1 04             	shl    $0x4,%ecx
  28327f:	09 ca                	or     %ecx,%edx
  283281:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283287:	89 10                	mov    %edx,(%eax)
		j+=3;
  283289:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  28328d:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  283291:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283298:	0f 8e 6c ff ff ff    	jle    28320a <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  28329e:	90                   	nop
}
  28329f:	83 c4 10             	add    $0x10,%esp
  2832a2:	5b                   	pop    %ebx
  2832a3:	5d                   	pop    %ebp
  2832a4:	c3                   	ret    

002832a5 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  2832a5:	55                   	push   %ebp
  2832a6:	89 e5                	mov    %esp,%ebp
  2832a8:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  2832ab:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  2832b2:	7f 38                	jg     2832ec <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  2832b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2832bb:	eb 25                	jmp    2832e2 <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  2832bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2832c0:	8b 45 10             	mov    0x10(%ebp),%eax
  2832c3:	01 c2                	add    %eax,%edx
  2832c5:	8b 45 08             	mov    0x8(%ebp),%eax
  2832c8:	c1 e0 09             	shl    $0x9,%eax
  2832cb:	89 c1                	mov    %eax,%ecx
  2832cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2832d0:	01 c8                	add    %ecx,%eax
  2832d2:	89 c1                	mov    %eax,%ecx
  2832d4:	8b 45 18             	mov    0x18(%ebp),%eax
  2832d7:	01 c8                	add    %ecx,%eax
  2832d9:	0f b6 00             	movzbl (%eax),%eax
  2832dc:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  2832de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2832e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2832e5:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2832e8:	7c d3                	jl     2832bd <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  2832ea:	eb 5e                	jmp    28334a <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2832ec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2832f3:	eb 25                	jmp    28331a <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2832f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2832f8:	8b 45 10             	mov    0x10(%ebp),%eax
  2832fb:	01 c2                	add    %eax,%edx
  2832fd:	8b 45 08             	mov    0x8(%ebp),%eax
  283300:	c1 e0 09             	shl    $0x9,%eax
  283303:	89 c1                	mov    %eax,%ecx
  283305:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283308:	01 c8                	add    %ecx,%eax
  28330a:	89 c1                	mov    %eax,%ecx
  28330c:	8b 45 18             	mov    0x18(%ebp),%eax
  28330f:	01 c8                	add    %ecx,%eax
  283311:	0f b6 00             	movzbl (%eax),%eax
  283314:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  283316:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  28331a:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  283321:	7e d2                	jle    2832f5 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  283323:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  28332a:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  283331:	8b 45 08             	mov    0x8(%ebp),%eax
  283334:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28333b:	8b 45 14             	mov    0x14(%ebp),%eax
  28333e:	01 d0                	add    %edx,%eax
  283340:	8b 00                	mov    (%eax),%eax
  283342:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  283345:	e9 61 ff ff ff       	jmp    2832ab <file_loadfile+0x6>
	return;
}
  28334a:	c9                   	leave  
  28334b:	c3                   	ret    

0028334c <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  28334c:	55                   	push   %ebp
  28334d:	89 e5                	mov    %esp,%ebp
  28334f:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283352:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283359:	eb 0f                	jmp    28336a <file_search+0x1e>
	{
		s[j] = ' ';
  28335b:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28335e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283361:	01 d0                	add    %edx,%eax
  283363:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283366:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28336a:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28336e:	7e eb                	jle    28335b <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  283370:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283377:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28337e:	e9 83 00 00 00       	jmp    283406 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283383:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283387:	7e 0a                	jle    283393 <file_search+0x47>
  283389:	b8 00 00 00 00       	mov    $0x0,%eax
  28338e:	e9 2a 01 00 00       	jmp    2834bd <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283393:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283396:	8b 45 08             	mov    0x8(%ebp),%eax
  283399:	01 d0                	add    %edx,%eax
  28339b:	0f b6 00             	movzbl (%eax),%eax
  28339e:	3c 2e                	cmp    $0x2e,%al
  2833a0:	75 0f                	jne    2833b1 <file_search+0x65>
  2833a2:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  2833a6:	7f 09                	jg     2833b1 <file_search+0x65>
			j = 8;
  2833a8:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  2833af:	eb 51                	jmp    283402 <file_search+0xb6>
		else
		{
			s[j] = name[i];
  2833b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2833b4:	8b 45 08             	mov    0x8(%ebp),%eax
  2833b7:	01 d0                	add    %edx,%eax
  2833b9:	0f b6 00             	movzbl (%eax),%eax
  2833bc:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  2833bf:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2833c2:	01 ca                	add    %ecx,%edx
  2833c4:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  2833c6:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2833c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2833cc:	01 d0                	add    %edx,%eax
  2833ce:	0f b6 00             	movzbl (%eax),%eax
  2833d1:	3c 60                	cmp    $0x60,%al
  2833d3:	7e 29                	jle    2833fe <file_search+0xb2>
  2833d5:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2833d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2833db:	01 d0                	add    %edx,%eax
  2833dd:	0f b6 00             	movzbl (%eax),%eax
  2833e0:	3c 7a                	cmp    $0x7a,%al
  2833e2:	7f 1a                	jg     2833fe <file_search+0xb2>
				s[j] -= 0x20;
  2833e4:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2833e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2833ea:	01 d0                	add    %edx,%eax
  2833ec:	0f b6 00             	movzbl (%eax),%eax
  2833ef:	83 e8 20             	sub    $0x20,%eax
  2833f2:	89 c1                	mov    %eax,%ecx
  2833f4:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2833f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2833fa:	01 d0                	add    %edx,%eax
  2833fc:	88 08                	mov    %cl,(%eax)
			j++;
  2833fe:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  283402:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283406:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283409:	8b 45 08             	mov    0x8(%ebp),%eax
  28340c:	01 d0                	add    %edx,%eax
  28340e:	0f b6 00             	movzbl (%eax),%eax
  283411:	84 c0                	test   %al,%al
  283413:	0f 85 6a ff ff ff    	jne    283383 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  283419:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283420:	e9 84 00 00 00       	jmp    2834a9 <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  283425:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283428:	c1 e0 06             	shl    $0x6,%eax
  28342b:	89 c2                	mov    %eax,%edx
  28342d:	8b 45 0c             	mov    0xc(%ebp),%eax
  283430:	01 d0                	add    %edx,%eax
  283432:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  283436:	84 c0                	test   %al,%al
  283438:	74 7d                	je     2834b7 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  28343a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28343d:	c1 e0 06             	shl    $0x6,%eax
  283440:	89 c2                	mov    %eax,%edx
  283442:	8b 45 0c             	mov    0xc(%ebp),%eax
  283445:	01 d0                	add    %edx,%eax
  283447:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  28344b:	0f b6 c0             	movzbl %al,%eax
  28344e:	83 e0 18             	and    $0x18,%eax
  283451:	85 c0                	test   %eax,%eax
  283453:	75 50                	jne    2834a5 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  283455:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28345c:	eb 31                	jmp    28348f <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  28345e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283461:	c1 e0 06             	shl    $0x6,%eax
  283464:	89 c2                	mov    %eax,%edx
  283466:	8b 45 0c             	mov    0xc(%ebp),%eax
  283469:	01 c2                	add    %eax,%edx
  28346b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28346e:	01 d0                	add    %edx,%eax
  283470:	83 c0 20             	add    $0x20,%eax
  283473:	0f b6 00             	movzbl (%eax),%eax
  283476:	0f b6 d0             	movzbl %al,%edx
  283479:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28347c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28347f:	01 c8                	add    %ecx,%eax
  283481:	0f b6 00             	movzbl (%eax),%eax
  283484:	0f be c0             	movsbl %al,%eax
  283487:	39 c2                	cmp    %eax,%edx
  283489:	75 19                	jne    2834a4 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  28348b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28348f:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283493:	7e c9                	jle    28345e <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283495:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283498:	c1 e0 06             	shl    $0x6,%eax
  28349b:	89 c2                	mov    %eax,%edx
  28349d:	8b 45 0c             	mov    0xc(%ebp),%eax
  2834a0:	01 d0                	add    %edx,%eax
  2834a2:	eb 19                	jmp    2834bd <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  2834a4:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  2834a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2834a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2834ac:	3b 45 10             	cmp    0x10(%ebp),%eax
  2834af:	0f 8c 70 ff ff ff    	jl     283425 <file_search+0xd9>
  2834b5:	eb 01                	jmp    2834b8 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  2834b7:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  2834b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2834bd:	c9                   	leave  
  2834be:	c3                   	ret    

002834bf <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2834bf:	55                   	push   %ebp
  2834c0:	89 e5                	mov    %esp,%ebp
  2834c2:	57                   	push   %edi
  2834c3:	56                   	push   %esi
  2834c4:	53                   	push   %ebx
  2834c5:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  2834c8:	8b 45 08             	mov    0x8(%ebp),%eax
  2834cb:	8b 40 08             	mov    0x8(%eax),%eax
  2834ce:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  2834d3:	7e 0c                	jle    2834e1 <cons_newline+0x22>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  2834d5:	8b 45 08             	mov    0x8(%ebp),%eax
  2834d8:	8b 18                	mov    (%eax),%ebx
  2834da:	bf 1c 00 00 00       	mov    $0x1c,%edi
  2834df:	eb 43                	jmp    283524 <cons_newline+0x65>
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
  2834e1:	83 c0 10             	add    $0x10,%eax
  2834e4:	8b 7d 08             	mov    0x8(%ebp),%edi
  2834e7:	89 47 08             	mov    %eax,0x8(%edi)
  2834ea:	e9 89 00 00 00       	jmp    283578 <cons_newline+0xb9>
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2834ef:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2834f2:	8b 43 04             	mov    0x4(%ebx),%eax
  2834f5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2834f8:	0f af f0             	imul   %eax,%esi
  2834fb:	89 d1                	mov    %edx,%ecx
  2834fd:	03 0b                	add    (%ebx),%ecx
  2834ff:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  283503:	0f af c7             	imul   %edi,%eax
  283506:	89 f3                	mov    %esi,%ebx
  283508:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  28350b:	83 c2 01             	add    $0x1,%edx
  28350e:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  283514:	75 d9                	jne    2834ef <cons_newline+0x30>
  283516:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
  283519:	83 c7 01             	add    $0x1,%edi
  28351c:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  283522:	74 33                	je     283557 <cons_newline+0x98>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  283524:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  283529:	8d 47 10             	lea    0x10(%edi),%eax
  28352c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  28352f:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  283532:	eb bb                	jmp    2834ef <cons_newline+0x30>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283534:	89 fa                	mov    %edi,%edx
  283536:	0f af 53 04          	imul   0x4(%ebx),%edx
  28353a:	89 c1                	mov    %eax,%ecx
  28353c:	03 0b                	add    (%ebx),%ecx
  28353e:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  283542:	83 c0 01             	add    $0x1,%eax
  283545:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28354a:	75 e8                	jne    283534 <cons_newline+0x75>
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  28354c:	83 c7 01             	add    $0x1,%edi
  28354f:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283555:	74 07                	je     28355e <cons_newline+0x9f>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283557:	b8 08 00 00 00       	mov    $0x8,%eax
  28355c:	eb d6                	jmp    283534 <cons_newline+0x75>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  28355e:	83 ec 0c             	sub    $0xc,%esp
  283561:	68 9c 00 00 00       	push   $0x9c
  283566:	68 f8 00 00 00       	push   $0xf8
  28356b:	6a 1c                	push   $0x1c
  28356d:	6a 08                	push   $0x8
  28356f:	53                   	push   %ebx
  283570:	e8 2d f1 ff ff       	call   2826a2 <sheet_refresh>
  283575:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  283578:	8b 45 08             	mov    0x8(%ebp),%eax
  28357b:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283582:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283585:	5b                   	pop    %ebx
  283586:	5e                   	pop    %esi
  283587:	5f                   	pop    %edi
  283588:	5d                   	pop    %ebp
  283589:	c3                   	ret    

0028358a <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28358a:	55                   	push   %ebp
  28358b:	89 e5                	mov    %esp,%ebp
  28358d:	56                   	push   %esi
  28358e:	53                   	push   %ebx
  28358f:	83 ec 10             	sub    $0x10,%esp
  283592:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283595:	8b 45 0c             	mov    0xc(%ebp),%eax
  283598:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  28359b:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  28359e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  2835a2:	3c 09                	cmp    $0x9,%al
  2835a4:	75 46                	jne    2835ec <cons_putchar+0x62>
	{
		//tab
		for(;;)
		{
			putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  2835a6:	83 ec 04             	sub    $0x4,%esp
  2835a9:	6a 01                	push   $0x1
  2835ab:	68 43 41 28 00       	push   $0x284143
  2835b0:	6a 00                	push   $0x0
  2835b2:	6a 07                	push   $0x7
  2835b4:	ff 73 08             	pushl  0x8(%ebx)
  2835b7:	ff 73 04             	pushl  0x4(%ebx)
  2835ba:	ff 33                	pushl  (%ebx)
  2835bc:	e8 62 db ff ff       	call   281123 <putfonts8_asc_sht>
			cons->cur_x += 8;
  2835c1:	8b 43 04             	mov    0x4(%ebx),%eax
  2835c4:	83 c0 08             	add    $0x8,%eax
  2835c7:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  2835ca:	83 c4 20             	add    $0x20,%esp
  2835cd:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2835d2:	75 0c                	jne    2835e0 <cons_putchar+0x56>
				cons_newline(cons);
  2835d4:	83 ec 0c             	sub    $0xc,%esp
  2835d7:	53                   	push   %ebx
  2835d8:	e8 e2 fe ff ff       	call   2834bf <cons_newline>
  2835dd:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  2835e0:	8b 43 04             	mov    0x4(%ebx),%eax
  2835e3:	83 e8 08             	sub    $0x8,%eax
  2835e6:	a8 1f                	test   $0x1f,%al
  2835e8:	75 bc                	jne    2835a6 <cons_putchar+0x1c>
  2835ea:	eb 55                	jmp    283641 <cons_putchar+0xb7>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2835ec:	3c 0a                	cmp    $0xa,%al
  2835ee:	75 0e                	jne    2835fe <cons_putchar+0x74>
		cons_newline(cons);
  2835f0:	83 ec 0c             	sub    $0xc,%esp
  2835f3:	53                   	push   %ebx
  2835f4:	e8 c6 fe ff ff       	call   2834bf <cons_newline>
  2835f9:	83 c4 10             	add    $0x10,%esp
  2835fc:	eb 43                	jmp    283641 <cons_putchar+0xb7>
	else if(s[0] == 0x0d) 
  2835fe:	3c 0d                	cmp    $0xd,%al
  283600:	74 3f                	je     283641 <cons_putchar+0xb7>
		;//todo
	else
	{
		putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  283602:	83 ec 04             	sub    $0x4,%esp
  283605:	6a 01                	push   $0x1
  283607:	8d 45 f6             	lea    -0xa(%ebp),%eax
  28360a:	50                   	push   %eax
  28360b:	6a 00                	push   $0x0
  28360d:	6a 07                	push   $0x7
  28360f:	ff 73 08             	pushl  0x8(%ebx)
  283612:	ff 73 04             	pushl  0x4(%ebx)
  283615:	ff 33                	pushl  (%ebx)
  283617:	e8 07 db ff ff       	call   281123 <putfonts8_asc_sht>
		if(move != 0)
  28361c:	83 c4 20             	add    $0x20,%esp
  28361f:	89 f0                	mov    %esi,%eax
  283621:	84 c0                	test   %al,%al
  283623:	74 1c                	je     283641 <cons_putchar+0xb7>
		{
			cons->cur_x += 8;
  283625:	8b 43 04             	mov    0x4(%ebx),%eax
  283628:	83 c0 08             	add    $0x8,%eax
  28362b:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  28362e:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283633:	75 0c                	jne    283641 <cons_putchar+0xb7>
				cons_newline(cons);
  283635:	83 ec 0c             	sub    $0xc,%esp
  283638:	53                   	push   %ebx
  283639:	e8 81 fe ff ff       	call   2834bf <cons_newline>
  28363e:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283641:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283644:	5b                   	pop    %ebx
  283645:	5e                   	pop    %esi
  283646:	5d                   	pop    %ebp
  283647:	c3                   	ret    

00283648 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283648:	55                   	push   %ebp
  283649:	89 e5                	mov    %esp,%ebp
  28364b:	56                   	push   %esi
  28364c:	53                   	push   %ebx
  28364d:	83 ec 24             	sub    $0x24,%esp
  283650:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  283653:	8b 45 0c             	mov    0xc(%ebp),%eax
  283656:	c1 e8 14             	shr    $0x14,%eax
  283659:	50                   	push   %eax
  28365a:	68 e0 40 28 00       	push   $0x2840e0
  28365f:	8d 75 da             	lea    -0x26(%ebp),%esi
  283662:	56                   	push   %esi
  283663:	e8 75 e2 ff ff       	call   2818dd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283668:	83 c4 0c             	add    $0xc,%esp
  28366b:	6a 1e                	push   $0x1e
  28366d:	56                   	push   %esi
  28366e:	6a 00                	push   $0x0
  283670:	6a 07                	push   $0x7
  283672:	ff 73 08             	pushl  0x8(%ebx)
  283675:	6a 08                	push   $0x8
  283677:	ff 33                	pushl  (%ebx)
  283679:	e8 a5 da ff ff       	call   281123 <putfonts8_asc_sht>
	cons_newline(cons);
  28367e:	83 c4 14             	add    $0x14,%esp
  283681:	53                   	push   %ebx
  283682:	e8 38 fe ff ff       	call   2834bf <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283687:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  28368e:	e8 45 e8 ff ff       	call   281ed8 <memman_total>
  283693:	83 c4 0c             	add    $0xc,%esp
  283696:	c1 e8 0a             	shr    $0xa,%eax
  283699:	50                   	push   %eax
  28369a:	68 eb 40 28 00       	push   $0x2840eb
  28369f:	56                   	push   %esi
  2836a0:	e8 38 e2 ff ff       	call   2818dd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  2836a5:	83 c4 0c             	add    $0xc,%esp
  2836a8:	6a 1e                	push   $0x1e
  2836aa:	56                   	push   %esi
  2836ab:	6a 00                	push   $0x0
  2836ad:	6a 07                	push   $0x7
  2836af:	ff 73 08             	pushl  0x8(%ebx)
  2836b2:	6a 08                	push   $0x8
  2836b4:	ff 33                	pushl  (%ebx)
  2836b6:	e8 68 da ff ff       	call   281123 <putfonts8_asc_sht>
	cons_newline(cons);
  2836bb:	83 c4 14             	add    $0x14,%esp
  2836be:	53                   	push   %ebx
  2836bf:	e8 fb fd ff ff       	call   2834bf <cons_newline>
	cons_newline(cons);
  2836c4:	89 1c 24             	mov    %ebx,(%esp)
  2836c7:	e8 f3 fd ff ff       	call   2834bf <cons_newline>
	return;
  2836cc:	83 c4 10             	add    $0x10,%esp
}
  2836cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2836d2:	5b                   	pop    %ebx
  2836d3:	5e                   	pop    %esi
  2836d4:	5d                   	pop    %ebp
  2836d5:	c3                   	ret    

002836d6 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  2836d6:	55                   	push   %ebp
  2836d7:	89 e5                	mov    %esp,%ebp
  2836d9:	57                   	push   %edi
  2836da:	56                   	push   %esi
  2836db:	53                   	push   %ebx
  2836dc:	83 ec 0c             	sub    $0xc,%esp
  2836df:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  2836e2:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  2836e4:	be 1c 00 00 00       	mov    $0x1c,%esi
  2836e9:	eb 23                	jmp    28370e <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2836eb:	89 f1                	mov    %esi,%ecx
  2836ed:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2836f1:	89 c3                	mov    %eax,%ebx
  2836f3:	03 1a                	add    (%edx),%ebx
  2836f5:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  2836f9:	83 c0 01             	add    $0x1,%eax
  2836fc:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283701:	75 e8                	jne    2836eb <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283703:	83 c6 01             	add    $0x1,%esi
  283706:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  28370c:	74 07                	je     283715 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  28370e:	b8 08 00 00 00       	mov    $0x8,%eax
  283713:	eb d6                	jmp    2836eb <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283715:	83 ec 0c             	sub    $0xc,%esp
  283718:	68 9c 00 00 00       	push   $0x9c
  28371d:	68 f8 00 00 00       	push   $0xf8
  283722:	6a 1c                	push   $0x1c
  283724:	6a 08                	push   $0x8
  283726:	52                   	push   %edx
  283727:	e8 76 ef ff ff       	call   2826a2 <sheet_refresh>
	cons->cur_y = 28;
  28372c:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283733:	83 c4 20             	add    $0x20,%esp
}
  283736:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283739:	5b                   	pop    %ebx
  28373a:	5e                   	pop    %esi
  28373b:	5f                   	pop    %edi
  28373c:	5d                   	pop    %ebp
  28373d:	c3                   	ret    

0028373e <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  28373e:	55                   	push   %ebp
  28373f:	89 e5                	mov    %esp,%ebp
  283741:	57                   	push   %edi
  283742:	56                   	push   %esi
  283743:	53                   	push   %ebx
  283744:	83 ec 2c             	sub    $0x2c,%esp
  283747:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  28374a:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283751:	84 c0                	test   %al,%al
  283753:	0f 84 87 00 00 00    	je     2837e0 <cmd_dir+0xa2>
  283759:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  28375e:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283761:	eb 0b                	jmp    28376e <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283763:	83 c3 40             	add    $0x40,%ebx
  283766:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  28376a:	84 c0                	test   %al,%al
  28376c:	74 72                	je     2837e0 <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  28376e:	3c e5                	cmp    $0xe5,%al
  283770:	74 66                	je     2837d8 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283772:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283776:	75 60                	jne    2837d8 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283778:	83 ec 04             	sub    $0x4,%esp
  28377b:	ff 73 3c             	pushl  0x3c(%ebx)
  28377e:	68 f5 40 28 00       	push   $0x2840f5
  283783:	56                   	push   %esi
  283784:	e8 54 e1 ff ff       	call   2818dd <sprintf>
  283789:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  28378c:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283791:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283796:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283799:	83 c0 01             	add    $0x1,%eax
  28379c:	83 f8 08             	cmp    $0x8,%eax
  28379f:	75 f0                	jne    283791 <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  2837a1:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  2837a5:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  2837a8:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  2837ac:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  2837af:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  2837b3:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  2837b6:	83 ec 04             	sub    $0x4,%esp
  2837b9:	6a 1e                	push   $0x1e
  2837bb:	56                   	push   %esi
  2837bc:	6a 00                	push   $0x0
  2837be:	6a 07                	push   $0x7
  2837c0:	ff 77 08             	pushl  0x8(%edi)
  2837c3:	6a 08                	push   $0x8
  2837c5:	ff 37                	pushl  (%edi)
  2837c7:	e8 57 d9 ff ff       	call   281123 <putfonts8_asc_sht>
				cons_newline(cons);
  2837cc:	83 c4 14             	add    $0x14,%esp
  2837cf:	57                   	push   %edi
  2837d0:	e8 ea fc ff ff       	call   2834bf <cons_newline>
  2837d5:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  2837d8:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  2837de:	75 83                	jne    283763 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  2837e0:	83 ec 0c             	sub    $0xc,%esp
  2837e3:	57                   	push   %edi
  2837e4:	e8 d6 fc ff ff       	call   2834bf <cons_newline>
	return;
  2837e9:	83 c4 10             	add    $0x10,%esp
}
  2837ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2837ef:	5b                   	pop    %ebx
  2837f0:	5e                   	pop    %esi
  2837f1:	5f                   	pop    %edi
  2837f2:	5d                   	pop    %ebp
  2837f3:	c3                   	ret    

002837f4 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  2837f4:	55                   	push   %ebp
  2837f5:	89 e5                	mov    %esp,%ebp
  2837f7:	57                   	push   %edi
  2837f8:	56                   	push   %esi
  2837f9:	53                   	push   %ebx
  2837fa:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  2837fd:	68 e0 00 00 00       	push   $0xe0
  283802:	68 00 26 10 00       	push   $0x102600
  283807:	8b 45 10             	mov    0x10(%ebp),%eax
  28380a:	83 c0 05             	add    $0x5,%eax
  28380d:	50                   	push   %eax
  28380e:	e8 39 fb ff ff       	call   28334c <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283813:	83 c4 10             	add    $0x10,%esp
  283816:	85 c0                	test   %eax,%eax
  283818:	74 6e                	je     283888 <cmd_type+0x94>
  28381a:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  28381c:	83 ec 08             	sub    $0x8,%esp
  28381f:	ff 70 3c             	pushl  0x3c(%eax)
  283822:	68 00 00 3c 00       	push   $0x3c0000
  283827:	e8 21 ea ff ff       	call   28224d <memman_alloc_4k>
  28382c:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  28382e:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283835:	ff 75 0c             	pushl  0xc(%ebp)
  283838:	50                   	push   %eax
  283839:	ff 76 3c             	pushl  0x3c(%esi)
  28383c:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283840:	50                   	push   %eax
  283841:	e8 5f fa ff ff       	call   2832a5 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283846:	8b 46 3c             	mov    0x3c(%esi),%eax
  283849:	83 c4 20             	add    $0x20,%esp
  28384c:	85 c0                	test   %eax,%eax
  28384e:	74 24                	je     283874 <cmd_type+0x80>
  283850:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283855:	83 ec 04             	sub    $0x4,%esp
  283858:	6a 01                	push   $0x1
  28385a:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  28385e:	50                   	push   %eax
  28385f:	ff 75 08             	pushl  0x8(%ebp)
  283862:	e8 23 fd ff ff       	call   28358a <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283867:	83 c3 01             	add    $0x1,%ebx
  28386a:	8b 46 3c             	mov    0x3c(%esi),%eax
  28386d:	83 c4 10             	add    $0x10,%esp
  283870:	39 d8                	cmp    %ebx,%eax
  283872:	77 e1                	ja     283855 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283874:	83 ec 04             	sub    $0x4,%esp
  283877:	50                   	push   %eax
  283878:	57                   	push   %edi
  283879:	68 00 00 3c 00       	push   $0x3c0000
  28387e:	e8 f6 e9 ff ff       	call   282279 <memman_free_4k>
  283883:	83 c4 10             	add    $0x10,%esp
  283886:	eb 2b                	jmp    2838b3 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283888:	83 ec 04             	sub    $0x4,%esp
  28388b:	6a 0f                	push   $0xf
  28388d:	68 05 41 28 00       	push   $0x284105
  283892:	6a 00                	push   $0x0
  283894:	6a 07                	push   $0x7
  283896:	8b 45 08             	mov    0x8(%ebp),%eax
  283899:	ff 70 08             	pushl  0x8(%eax)
  28389c:	6a 08                	push   $0x8
  28389e:	ff 30                	pushl  (%eax)
  2838a0:	e8 7e d8 ff ff       	call   281123 <putfonts8_asc_sht>
		cons_newline(cons);
  2838a5:	83 c4 14             	add    $0x14,%esp
  2838a8:	ff 75 08             	pushl  0x8(%ebp)
  2838ab:	e8 0f fc ff ff       	call   2834bf <cons_newline>
  2838b0:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  2838b3:	83 ec 0c             	sub    $0xc,%esp
  2838b6:	ff 75 08             	pushl  0x8(%ebp)
  2838b9:	e8 01 fc ff ff       	call   2834bf <cons_newline>
	return;
  2838be:	83 c4 10             	add    $0x10,%esp
}
  2838c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2838c4:	5b                   	pop    %ebx
  2838c5:	5e                   	pop    %esi
  2838c6:	5f                   	pop    %edi
  2838c7:	5d                   	pop    %ebp
  2838c8:	c3                   	ret    

002838c9 <cons_putstr0>:
	return 0;
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
  2838c9:	55                   	push   %ebp
  2838ca:	89 e5                	mov    %esp,%ebp
  2838cc:	56                   	push   %esi
  2838cd:	53                   	push   %ebx
  2838ce:	8b 75 08             	mov    0x8(%ebp),%esi
  2838d1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  2838d4:	0f b6 03             	movzbl (%ebx),%eax
  2838d7:	84 c0                	test   %al,%al
  2838d9:	74 1c                	je     2838f7 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  2838db:	83 ec 04             	sub    $0x4,%esp
  2838de:	6a 01                	push   $0x1
  2838e0:	0f be c0             	movsbl %al,%eax
  2838e3:	50                   	push   %eax
  2838e4:	56                   	push   %esi
  2838e5:	e8 a0 fc ff ff       	call   28358a <cons_putchar>
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  2838ea:	83 c3 01             	add    $0x1,%ebx
  2838ed:	0f b6 03             	movzbl (%ebx),%eax
  2838f0:	83 c4 10             	add    $0x10,%esp
  2838f3:	84 c0                	test   %al,%al
  2838f5:	75 e4                	jne    2838db <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  2838f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2838fa:	5b                   	pop    %ebx
  2838fb:	5e                   	pop    %esi
  2838fc:	5d                   	pop    %ebp
  2838fd:	c3                   	ret    

002838fe <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  2838fe:	55                   	push   %ebp
  2838ff:	89 e5                	mov    %esp,%ebp
  283901:	57                   	push   %edi
  283902:	56                   	push   %esi
  283903:	53                   	push   %ebx
  283904:	83 ec 4c             	sub    $0x4c,%esp
  283907:	8b 5d 10             	mov    0x10(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  28390a:	e8 83 f2 ff ff       	call   282b92 <task_now>
  28390f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283912:	0f b6 03             	movzbl (%ebx),%eax
  283915:	3c 20                	cmp    $0x20,%al
  283917:	0f 8f e9 01 00 00    	jg     283b06 <cmd_app+0x208>
  28391d:	eb 16                	jmp    283935 <cmd_app+0x37>
  28391f:	0f b6 04 33          	movzbl (%ebx,%esi,1),%eax
  283923:	3c 20                	cmp    $0x20,%al
  283925:	7e 13                	jle    28393a <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283927:	88 44 35 d6          	mov    %al,-0x2a(%ebp,%esi,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  28392b:	83 c6 01             	add    $0x1,%esi
  28392e:	83 fe 0d             	cmp    $0xd,%esi
  283931:	75 ec                	jne    28391f <cmd_app+0x21>
  283933:	eb 05                	jmp    28393a <cmd_app+0x3c>
  283935:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  28393a:	c6 44 35 d6 00       	movb   $0x0,-0x2a(%ebp,%esi,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  28393f:	83 ec 04             	sub    $0x4,%esp
  283942:	68 e0 00 00 00       	push   $0xe0
  283947:	68 00 26 10 00       	push   $0x102600
  28394c:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28394f:	50                   	push   %eax
  283950:	e8 f7 f9 ff ff       	call   28334c <file_search>
  283955:	89 c3                	mov    %eax,%ebx
	if(finfo == 0 && name[i-1]!='.')
  283957:	83 c4 10             	add    $0x10,%esp
  28395a:	85 c0                	test   %eax,%eax
  28395c:	75 4c                	jne    2839aa <cmd_app+0xac>
		}
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
  28395e:	b8 00 00 00 00       	mov    $0x0,%eax
		name[i] = cmdline[i];
	}
	name[i] = 0;

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
	if(finfo == 0 && name[i-1]!='.')
  283963:	80 7c 35 d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%esi,1)
  283968:	0f 84 a5 01 00 00    	je     283b13 <cmd_app+0x215>
	{
		name[i  ] = '.';
  28396e:	c6 44 35 d6 2e       	movb   $0x2e,-0x2a(%ebp,%esi,1)
		name[i+1] = 'B';
  283973:	c6 44 35 d7 42       	movb   $0x42,-0x29(%ebp,%esi,1)
		name[i+2] = 'I';
  283978:	c6 44 35 d8 49       	movb   $0x49,-0x28(%ebp,%esi,1)
		name[i+3] = 'N';
  28397d:	c6 44 35 d9 4e       	movb   $0x4e,-0x27(%ebp,%esi,1)
		name[i+4] = 0;
  283982:	c6 44 35 da 00       	movb   $0x0,-0x26(%ebp,%esi,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283987:	83 ec 04             	sub    $0x4,%esp
  28398a:	68 e0 00 00 00       	push   $0xe0
  28398f:	68 00 26 10 00       	push   $0x102600
  283994:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283997:	50                   	push   %eax
  283998:	e8 af f9 ff ff       	call   28334c <file_search>
  28399d:	89 c3                	mov    %eax,%ebx
	}

	if(finfo != 0)
  28399f:	83 c4 10             	add    $0x10,%esp
  2839a2:	85 c0                	test   %eax,%eax
  2839a4:	0f 84 55 01 00 00    	je     283aff <cmd_app+0x201>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  2839aa:	83 ec 08             	sub    $0x8,%esp
  2839ad:	ff 73 3c             	pushl  0x3c(%ebx)
  2839b0:	68 00 00 3c 00       	push   $0x3c0000
  2839b5:	e8 93 e8 ff ff       	call   28224d <memman_alloc_4k>
  2839ba:	89 c6                	mov    %eax,%esi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  2839bc:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  2839c3:	ff 75 0c             	pushl  0xc(%ebp)
  2839c6:	50                   	push   %eax
  2839c7:	ff 73 3c             	pushl  0x3c(%ebx)
  2839ca:	0f b7 43 3a          	movzwl 0x3a(%ebx),%eax
  2839ce:	50                   	push   %eax
  2839cf:	e8 d1 f8 ff ff       	call   2832a5 <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  2839d4:	83 c4 20             	add    $0x20,%esp
  2839d7:	83 7b 3c 23          	cmpl   $0x23,0x3c(%ebx)
  2839db:	0f 86 e5 00 00 00    	jbe    283ac6 <cmd_app+0x1c8>
  2839e1:	83 ec 04             	sub    $0x4,%esp
  2839e4:	6a 04                	push   $0x4
  2839e6:	68 15 41 28 00       	push   $0x284115
  2839eb:	8d 46 04             	lea    0x4(%esi),%eax
  2839ee:	50                   	push   %eax
  2839ef:	e8 24 e0 ff ff       	call   281a18 <strncmp>
  2839f4:	83 c4 10             	add    $0x10,%esp
  2839f7:	85 c0                	test   %eax,%eax
  2839f9:	0f 85 c7 00 00 00    	jne    283ac6 <cmd_app+0x1c8>
  2839ff:	80 3e 00             	cmpb   $0x0,(%esi)
  283a02:	0f 85 be 00 00 00    	jne    283ac6 <cmd_app+0x1c8>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283a08:	8b 06                	mov    (%esi),%eax
			int esp		=	*((int *)(p+0x000c));
  283a0a:	8b 7e 0c             	mov    0xc(%esi),%edi
  283a0d:	89 7d b8             	mov    %edi,-0x48(%ebp)
			int datsiz	=	*((int *)(p+0x0010));
  283a10:	8b 7e 10             	mov    0x10(%esi),%edi
			int dathrb	=	*((int *)(p+0x0014));
  283a13:	8b 56 14             	mov    0x14(%esi),%edx
  283a16:	89 55 b4             	mov    %edx,-0x4c(%ebp)

			q = (char *)memman_alloc_4k(memman,segsiz);
  283a19:	83 ec 08             	sub    $0x8,%esp
  283a1c:	89 45 c0             	mov    %eax,-0x40(%ebp)
  283a1f:	50                   	push   %eax
  283a20:	68 00 00 3c 00       	push   $0x3c0000
  283a25:	e8 23 e8 ff ff       	call   28224d <memman_alloc_4k>
			*((int *)0xfe8) = (int) q;
  283a2a:	89 45 bc             	mov    %eax,-0x44(%ebp)
  283a2d:	a3 e8 0f 00 00       	mov    %eax,0xfe8
			set_segmdesc(gdt + 1003,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283a32:	68 fa 40 00 00       	push   $0x40fa
  283a37:	56                   	push   %esi
  283a38:	8b 4b 3c             	mov    0x3c(%ebx),%ecx
  283a3b:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283a3e:	50                   	push   %eax
  283a3f:	68 58 1f 27 00       	push   $0x271f58
  283a44:	e8 1e d9 ff ff       	call   281367 <set_segmdesc>
			set_segmdesc(gdt + 1004,segsiz - 1,(int)q,AR_DATA32_RW + 0x60);
  283a49:	83 c4 20             	add    $0x20,%esp
  283a4c:	68 f2 40 00 00       	push   $0x40f2
  283a51:	ff 75 bc             	pushl  -0x44(%ebp)
  283a54:	8b 55 c0             	mov    -0x40(%ebp),%edx
  283a57:	8d 42 ff             	lea    -0x1(%edx),%eax
  283a5a:	50                   	push   %eax
  283a5b:	68 60 1f 27 00       	push   $0x271f60
  283a60:	e8 02 d9 ff ff       	call   281367 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283a65:	83 c4 10             	add    $0x10,%esp
  283a68:	85 ff                	test   %edi,%edi
  283a6a:	7e 24                	jle    283a90 <cmd_app+0x192>
  283a6c:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283a71:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283a74:	01 f2                	add    %esi,%edx
  283a76:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  283a79:	03 4d b8             	add    -0x48(%ebp),%ecx
  283a7c:	89 5d b4             	mov    %ebx,-0x4c(%ebp)
  283a7f:	0f b6 1c 02          	movzbl (%edx,%eax,1),%ebx
  283a83:	88 1c 01             	mov    %bl,(%ecx,%eax,1)

			q = (char *)memman_alloc_4k(memman,segsiz);
			*((int *)0xfe8) = (int) q;
			set_segmdesc(gdt + 1003,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(gdt + 1004,segsiz - 1,(int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283a86:	83 c0 01             	add    $0x1,%eax
  283a89:	39 c7                	cmp    %eax,%edi
  283a8b:	75 f2                	jne    283a7f <cmd_app+0x181>
  283a8d:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,1003*8,esp,1004*8,&(task->tss.esp0));
  283a90:	83 ec 0c             	sub    $0xc,%esp
  283a93:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283a96:	83 c0 30             	add    $0x30,%eax
  283a99:	50                   	push   %eax
  283a9a:	68 60 1f 00 00       	push   $0x1f60
  283a9f:	ff 75 b8             	pushl  -0x48(%ebp)
  283aa2:	68 58 1f 00 00       	push   $0x1f58
  283aa7:	6a 1b                	push   $0x1b
  283aa9:	e8 b2 01 00 00       	call   283c60 <start_app>
			memman_free_4k(memman,(int)q,segsiz);
  283aae:	83 c4 1c             	add    $0x1c,%esp
  283ab1:	ff 75 c0             	pushl  -0x40(%ebp)
  283ab4:	ff 75 bc             	pushl  -0x44(%ebp)
  283ab7:	68 00 00 3c 00       	push   $0x3c0000
  283abc:	e8 b8 e7 ff ff       	call   282279 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283ac1:	83 c4 10             	add    $0x10,%esp
  283ac4:	eb 13                	jmp    283ad9 <cmd_app+0x1db>
			start_app(0x1b,1003*8,esp,1004*8,&(task->tss.esp0));
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283ac6:	83 ec 08             	sub    $0x8,%esp
  283ac9:	68 1a 41 28 00       	push   $0x28411a
  283ace:	ff 75 08             	pushl  0x8(%ebp)
  283ad1:	e8 f3 fd ff ff       	call   2838c9 <cons_putstr0>
  283ad6:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283ad9:	83 ec 04             	sub    $0x4,%esp
  283adc:	ff 73 3c             	pushl  0x3c(%ebx)
  283adf:	56                   	push   %esi
  283ae0:	68 00 00 3c 00       	push   $0x3c0000
  283ae5:	e8 8f e7 ff ff       	call   282279 <memman_free_4k>
		cons_newline(cons);
  283aea:	83 c4 04             	add    $0x4,%esp
  283aed:	ff 75 08             	pushl  0x8(%ebp)
  283af0:	e8 ca f9 ff ff       	call   2834bf <cons_newline>
		return 1;
  283af5:	83 c4 10             	add    $0x10,%esp
  283af8:	b8 01 00 00 00       	mov    $0x1,%eax
  283afd:	eb 14                	jmp    283b13 <cmd_app+0x215>
	}
	return 0;
  283aff:	b8 00 00 00 00       	mov    $0x0,%eax
  283b04:	eb 0d                	jmp    283b13 <cmd_app+0x215>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283b06:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283b09:	be 01 00 00 00       	mov    $0x1,%esi
  283b0e:	e9 0c fe ff ff       	jmp    28391f <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283b16:	5b                   	pop    %ebx
  283b17:	5e                   	pop    %esi
  283b18:	5f                   	pop    %edi
  283b19:	5d                   	pop    %ebp
  283b1a:	c3                   	ret    

00283b1b <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  283b1b:	55                   	push   %ebp
  283b1c:	89 e5                	mov    %esp,%ebp
  283b1e:	53                   	push   %ebx
  283b1f:	83 ec 0c             	sub    $0xc,%esp
  283b22:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  283b25:	68 33 41 28 00       	push   $0x284133
  283b2a:	53                   	push   %ebx
  283b2b:	e8 82 de ff ff       	call   2819b2 <strcmp>
  283b30:	83 c4 10             	add    $0x10,%esp
  283b33:	85 c0                	test   %eax,%eax
  283b35:	75 16                	jne    283b4d <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  283b37:	83 ec 08             	sub    $0x8,%esp
  283b3a:	ff 75 14             	pushl  0x14(%ebp)
  283b3d:	ff 75 0c             	pushl  0xc(%ebp)
  283b40:	e8 03 fb ff ff       	call   283648 <cmd_mem>
  283b45:	83 c4 10             	add    $0x10,%esp
  283b48:	e9 c9 00 00 00       	jmp    283c16 <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"cls") == 0)
  283b4d:	83 ec 08             	sub    $0x8,%esp
  283b50:	68 37 41 28 00       	push   $0x284137
  283b55:	53                   	push   %ebx
  283b56:	e8 57 de ff ff       	call   2819b2 <strcmp>
  283b5b:	83 c4 10             	add    $0x10,%esp
  283b5e:	85 c0                	test   %eax,%eax
  283b60:	75 13                	jne    283b75 <cons_runcmd+0x5a>
		cmd_cls(cons);
  283b62:	83 ec 0c             	sub    $0xc,%esp
  283b65:	ff 75 0c             	pushl  0xc(%ebp)
  283b68:	e8 69 fb ff ff       	call   2836d6 <cmd_cls>
  283b6d:	83 c4 10             	add    $0x10,%esp
  283b70:	e9 a1 00 00 00       	jmp    283c16 <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"dir") == 0)
  283b75:	83 ec 08             	sub    $0x8,%esp
  283b78:	68 3b 41 28 00       	push   $0x28413b
  283b7d:	53                   	push   %ebx
  283b7e:	e8 2f de ff ff       	call   2819b2 <strcmp>
  283b83:	83 c4 10             	add    $0x10,%esp
  283b86:	85 c0                	test   %eax,%eax
  283b88:	75 10                	jne    283b9a <cons_runcmd+0x7f>
		cmd_dir(cons);
  283b8a:	83 ec 0c             	sub    $0xc,%esp
  283b8d:	ff 75 0c             	pushl  0xc(%ebp)
  283b90:	e8 a9 fb ff ff       	call   28373e <cmd_dir>
  283b95:	83 c4 10             	add    $0x10,%esp
  283b98:	eb 7c                	jmp    283c16 <cons_runcmd+0xfb>
	else if(strncmp(cmdline,"type ",5) == 0)
  283b9a:	83 ec 04             	sub    $0x4,%esp
  283b9d:	6a 05                	push   $0x5
  283b9f:	68 3f 41 28 00       	push   $0x28413f
  283ba4:	53                   	push   %ebx
  283ba5:	e8 6e de ff ff       	call   281a18 <strncmp>
  283baa:	83 c4 10             	add    $0x10,%esp
  283bad:	85 c0                	test   %eax,%eax
  283baf:	75 14                	jne    283bc5 <cons_runcmd+0xaa>
		cmd_type(cons,fat,cmdline);
  283bb1:	83 ec 04             	sub    $0x4,%esp
  283bb4:	53                   	push   %ebx
  283bb5:	ff 75 10             	pushl  0x10(%ebp)
  283bb8:	ff 75 0c             	pushl  0xc(%ebp)
  283bbb:	e8 34 fc ff ff       	call   2837f4 <cmd_type>
  283bc0:	83 c4 10             	add    $0x10,%esp
  283bc3:	eb 51                	jmp    283c16 <cons_runcmd+0xfb>
	else if(cmdline[0] != 0)
  283bc5:	80 3b 00             	cmpb   $0x0,(%ebx)
  283bc8:	74 4c                	je     283c16 <cons_runcmd+0xfb>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  283bca:	83 ec 04             	sub    $0x4,%esp
  283bcd:	53                   	push   %ebx
  283bce:	ff 75 10             	pushl  0x10(%ebp)
  283bd1:	ff 75 0c             	pushl  0xc(%ebp)
  283bd4:	e8 25 fd ff ff       	call   2838fe <cmd_app>
  283bd9:	83 c4 10             	add    $0x10,%esp
  283bdc:	85 c0                	test   %eax,%eax
  283bde:	75 36                	jne    283c16 <cons_runcmd+0xfb>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  283be0:	83 ec 04             	sub    $0x4,%esp
  283be3:	6a 0c                	push   $0xc
  283be5:	68 45 41 28 00       	push   $0x284145
  283bea:	6a 00                	push   $0x0
  283bec:	6a 07                	push   $0x7
  283bee:	8b 45 0c             	mov    0xc(%ebp),%eax
  283bf1:	ff 70 08             	pushl  0x8(%eax)
  283bf4:	6a 08                	push   $0x8
  283bf6:	ff 30                	pushl  (%eax)
  283bf8:	e8 26 d5 ff ff       	call   281123 <putfonts8_asc_sht>
			cons_newline(cons);
  283bfd:	83 c4 14             	add    $0x14,%esp
  283c00:	ff 75 0c             	pushl  0xc(%ebp)
  283c03:	e8 b7 f8 ff ff       	call   2834bf <cons_newline>
			cons_newline(cons);
  283c08:	83 c4 04             	add    $0x4,%esp
  283c0b:	ff 75 0c             	pushl  0xc(%ebp)
  283c0e:	e8 ac f8 ff ff       	call   2834bf <cons_newline>
  283c13:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283c16:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  283c19:	c9                   	leave  
  283c1a:	c3                   	ret    

00283c1b <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  283c1b:	55                   	push   %ebp
  283c1c:	89 e5                	mov    %esp,%ebp
  283c1e:	57                   	push   %edi
  283c1f:	56                   	push   %esi
  283c20:	53                   	push   %ebx
  283c21:	83 ec 0c             	sub    $0xc,%esp
  283c24:	8b 7d 08             	mov    0x8(%ebp),%edi
  283c27:	8b 75 0c             	mov    0xc(%ebp),%esi
  283c2a:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  283c2d:	85 c0                	test   %eax,%eax
  283c2f:	7e 1d                	jle    283c4e <cons_putstr1+0x33>
  283c31:	89 f3                	mov    %esi,%ebx
  283c33:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  283c35:	83 ec 04             	sub    $0x4,%esp
  283c38:	6a 01                	push   $0x1
  283c3a:	0f be 03             	movsbl (%ebx),%eax
  283c3d:	50                   	push   %eax
  283c3e:	57                   	push   %edi
  283c3f:	e8 46 f9 ff ff       	call   28358a <cons_putchar>
  283c44:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  283c47:	83 c4 10             	add    $0x10,%esp
  283c4a:	39 f3                	cmp    %esi,%ebx
  283c4c:	75 e7                	jne    283c35 <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  283c4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283c51:	5b                   	pop    %ebx
  283c52:	5e                   	pop    %esi
  283c53:	5f                   	pop    %edi
  283c54:	5d                   	pop    %ebp
  283c55:	c3                   	ret    
  283c56:	66 90                	xchg   %ax,%ax
  283c58:	66 90                	xchg   %ax,%ax
  283c5a:	66 90                	xchg   %ax,%ax
  283c5c:	66 90                	xchg   %ax,%ax
  283c5e:	66 90                	xchg   %ax,%ax

00283c60 <start_app>:
  283c60:	60                   	pusha  
  283c61:	8b 44 24 24          	mov    0x24(%esp),%eax
  283c65:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  283c69:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  283c6d:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  283c71:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  283c75:	89 65 00             	mov    %esp,0x0(%ebp)
  283c78:	8c 55 04             	mov    %ss,0x4(%ebp)
  283c7b:	8e c3                	mov    %ebx,%es
  283c7d:	8e db                	mov    %ebx,%ds
  283c7f:	8e e3                	mov    %ebx,%fs
  283c81:	8e eb                	mov    %ebx,%gs
  283c83:	83 c9 03             	or     $0x3,%ecx
  283c86:	83 cb 03             	or     $0x3,%ebx
  283c89:	53                   	push   %ebx
  283c8a:	52                   	push   %edx
  283c8b:	51                   	push   %ecx
  283c8c:	50                   	push   %eax
  283c8d:	cb                   	lret   

00283c8e <sys_api>:
#include "console.h"
#include "task.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  283c8e:	55                   	push   %ebp
  283c8f:	89 e5                	mov    %esp,%ebp
  283c91:	57                   	push   %edi
  283c92:	56                   	push   %esi
  283c93:	53                   	push   %ebx
  283c94:	83 ec 0c             	sub    $0xc,%esp
  283c97:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
  283c9a:	8b 3d ec 0f 00 00    	mov    0xfec,%edi
	int ds_base = *((int *)0xfe8);
  283ca0:	8b 35 e8 0f 00 00    	mov    0xfe8,%esi
	struct TASK *task = task_now();
  283ca6:	e8 e7 ee ff ff       	call   282b92 <task_now>
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  283cab:	83 fb 01             	cmp    $0x1,%ebx
  283cae:	75 1a                	jne    283cca <sys_api+0x3c>
  283cb0:	83 ec 04             	sub    $0x4,%esp
  283cb3:	6a 01                	push   $0x1
  283cb5:	0f b6 45 24          	movzbl 0x24(%ebp),%eax
  283cb9:	50                   	push   %eax
  283cba:	57                   	push   %edi
  283cbb:	e8 ca f8 ff ff       	call   28358a <cons_putchar>
  283cc0:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283cc3:	b8 00 00 00 00       	mov    $0x0,%eax
  283cc8:	eb 49                	jmp    283d13 <sys_api+0x85>
{
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
	int ds_base = *((int *)0xfe8);
	struct TASK *task = task_now();
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  283cca:	83 fb 02             	cmp    $0x2,%ebx
  283ccd:	75 17                	jne    283ce6 <sys_api+0x58>
  283ccf:	83 ec 08             	sub    $0x8,%esp
  283cd2:	03 75 18             	add    0x18(%ebp),%esi
  283cd5:	56                   	push   %esi
  283cd6:	57                   	push   %edi
  283cd7:	e8 ed fb ff ff       	call   2838c9 <cons_putstr0>
  283cdc:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283cdf:	b8 00 00 00 00       	mov    $0x0,%eax
  283ce4:	eb 2d                	jmp    283d13 <sys_api+0x85>
	struct CONSOLE *cons = (struct CONSOLE *) *((int *)0x0fec);
	int ds_base = *((int *)0xfe8);
	struct TASK *task = task_now();
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  283ce6:	83 fb 03             	cmp    $0x3,%ebx
  283ce9:	75 1a                	jne    283d05 <sys_api+0x77>
  283ceb:	83 ec 04             	sub    $0x4,%esp
  283cee:	ff 75 20             	pushl  0x20(%ebp)
  283cf1:	03 75 18             	add    0x18(%ebp),%esi
  283cf4:	56                   	push   %esi
  283cf5:	57                   	push   %edi
  283cf6:	e8 20 ff ff ff       	call   283c1b <cons_putstr1>
  283cfb:	83 c4 10             	add    $0x10,%esp
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
	}
	return 0;
  283cfe:	b8 00 00 00 00       	mov    $0x0,%eax
  283d03:	eb 0e                	jmp    283d13 <sys_api+0x85>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
	else if(edx == 4)
	{
		//exit app
		return &(task->tss.esp0);
  283d05:	83 c0 30             	add    $0x30,%eax
  283d08:	83 fb 04             	cmp    $0x4,%ebx
  283d0b:	ba 00 00 00 00       	mov    $0x0,%edx
  283d10:	0f 45 c2             	cmovne %edx,%eax
	}
	return 0;
}
  283d13:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283d16:	5b                   	pop    %ebx
  283d17:	5e                   	pop    %esi
  283d18:	5f                   	pop    %edi
  283d19:	5d                   	pop    %ebp
  283d1a:	c3                   	ret    
  283d1b:	66 90                	xchg   %ax,%ax
  283d1d:	66 90                	xchg   %ax,%ax
  283d1f:	90                   	nop

00283d20 <api_putchar>:
  283d20:	ba 01 00 00 00       	mov    $0x1,%edx
  283d25:	8a 44 24 04          	mov    0x4(%esp),%al
  283d29:	cd 40                	int    $0x40
  283d2b:	c3                   	ret    

00283d2c <api_putstr>:
  283d2c:	ba 02 00 00 00       	mov    $0x2,%edx
  283d31:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  283d35:	cd 40                	int    $0x40
  283d37:	c3                   	ret    

00283d38 <api_end>:
  283d38:	ba 04 00 00 00       	mov    $0x4,%edx
  283d3d:	cd 40                	int    $0x40

00283d3f <api_test>:
  283d3f:	05 80 00 00 00       	add    $0x80,%eax
  283d44:	c3                   	ret    

00283d45 <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  283d45:	55                   	push   %ebp
  283d46:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  283d48:	8b 45 0c             	mov    0xc(%ebp),%eax
  283d4b:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  283d4f:	5d                   	pop    %ebp
  283d50:	c3                   	ret    
