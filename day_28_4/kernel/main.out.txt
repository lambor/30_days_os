
main.out.o：     文件格式 elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280013:	8d 9d fc fb ff ff    	lea    -0x404(%ebp),%ebx
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280019:	8d b5 18 fc ff ff    	lea    -0x3e8(%ebp),%esi
#include "header.h"


int bootmain()
{
  28001f:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280025:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280027:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  28002d:	6a 00                	push   $0x0
  28002f:	50                   	push   %eax
  280030:	68 80 00 00 00       	push   $0x80
  280035:	53                   	push   %ebx
  280036:	e8 3d 1b 00 00       	call   281b78 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  28003b:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  280041:	6a 00                	push   $0x0
  280043:	50                   	push   %eax
  280044:	6a 20                	push   $0x20
  280046:	56                   	push   %esi
  280047:	e8 2c 1b 00 00       	call   281b78 <fifo32_init>
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;
  280054:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int key_leds = (binfo->leds>>4)&7;

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28005a:	68 ed 00 00 00       	push   $0xed
  28005f:	56                   	push   %esi
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  280060:	c0 f8 04             	sar    $0x4,%al
  280063:	83 e0 07             	and    $0x7,%eax
  280066:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28006c:	e8 38 1b 00 00       	call   281ba9 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	59                   	pop    %ecx
  280072:	5f                   	pop    %edi
  280073:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280079:	56                   	push   %esi
  28007a:	e8 2a 1b 00 00       	call   281ba9 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  28007f:	e8 51 14 00 00       	call   2814d5 <init_gdtidt>
	init_pic();
  280084:	e8 10 16 00 00       	call   281699 <init_pic>
	io_sti();
  280089:	e8 26 0a 00 00       	call   280ab4 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  28008e:	58                   	pop    %eax
  28008f:	5a                   	pop    %edx
  280090:	68 00 01 00 00       	push   $0x100
  280095:	53                   	push   %ebx
  280096:	e8 17 1d 00 00       	call   281db2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  28009b:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800a1:	83 c4 0c             	add    $0xc,%esp
  2800a4:	50                   	push   %eax
  2800a5:	68 00 02 00 00       	push   $0x200
  2800aa:	53                   	push   %ebx
  2800ab:	e8 b4 1b 00 00       	call   281c64 <enable_mouse>

	//init timer
	init_pit();
  2800b0:	e8 1b 2a 00 00       	call   282ad0 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800b5:	59                   	pop    %ecx
  2800b6:	5f                   	pop    %edi
  2800b7:	68 f8 00 00 00       	push   $0xf8
  2800bc:	6a 21                	push   $0x21
  2800be:	e8 23 0a 00 00       	call   280ae6 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800c3:	58                   	pop    %eax
  2800c4:	5a                   	pop    %edx
  2800c5:	68 ef 00 00 00       	push   $0xef
  2800ca:	68 a1 00 00 00       	push   $0xa1
  2800cf:	e8 12 0a 00 00       	call   280ae6 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800d4:	59                   	pop    %ecx
  2800d5:	5f                   	pop    %edi
  2800d6:	68 ff ff ff bf       	push   $0xbfffffff
  2800db:	68 00 00 40 00       	push   $0x400000
  2800e0:	e8 67 1d 00 00       	call   281e4c <memtest>
	memman_init(memman);
  2800e5:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800ec:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	memman_init(memman);
  2800f2:	e8 94 1e 00 00       	call   281f8b <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  2800f7:	83 c4 0c             	add    $0xc,%esp
  2800fa:	68 00 e0 09 00       	push   $0x9e000
  2800ff:	68 00 10 00 00       	push   $0x1000
  280104:	68 00 00 3c 00       	push   $0x3c0000
  280109:	e8 cc 1f 00 00       	call   2820da <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28010e:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  280114:	83 c4 0c             	add    $0xc,%esp
  280117:	2d 00 00 40 00       	sub    $0x400000,%eax
  28011c:	50                   	push   %eax
  28011d:	68 00 00 40 00       	push   $0x400000
  280122:	68 00 00 3c 00       	push   $0x3c0000
  280127:	e8 ae 1f 00 00       	call   2820da <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
  28012c:	e8 ea 0a 00 00       	call   280c1b <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280131:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280138:	50                   	push   %eax
  280139:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280140:	50                   	push   %eax
  280141:	ff 35 f8 0f 00 00    	pushl  0xff8
  280147:	68 00 00 3c 00       	push   $0x3c0000
  28014c:	e8 37 22 00 00       	call   282388 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280151:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280154:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  28015a:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  28015f:	68 00 00 3c 00       	push   $0x3c0000
  280164:	e8 97 2e 00 00       	call   283000 <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280169:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  28016c:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%ebp)
	fifo.task = task_a;
  280172:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280178:	6a 00                	push   $0x0
  28017a:	6a 01                	push   $0x1
  28017c:	50                   	push   %eax
  28017d:	e8 eb 2d 00 00       	call   282f6d <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280182:	58                   	pop    %eax
  280183:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280189:	e8 8e 22 00 00       	call   28241c <sheet_alloc>
  28018e:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  280194:	58                   	pop    %eax
  280195:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  28019c:	5a                   	pop    %edx
  28019d:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801a4:	0f af c2             	imul   %edx,%eax
  2801a7:	50                   	push   %eax
  2801a8:	68 00 00 3c 00       	push   $0x3c0000
  2801ad:	e8 7b 21 00 00       	call   28232d <memman_alloc_4k>
  2801b2:	89 c7                	mov    %eax,%edi
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801b4:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801bb:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801c2:	50                   	push   %eax
  2801c3:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801ca:	50                   	push   %eax
  2801cb:	57                   	push   %edi
  2801cc:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2801d2:	e8 b8 22 00 00       	call   28248f <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801d7:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801de:	83 c4 1c             	add    $0x1c,%esp
  2801e1:	50                   	push   %eax
  2801e2:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801e9:	50                   	push   %eax
  2801ea:	57                   	push   %edi

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2801eb:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801f1:	e8 1b 0b 00 00       	call   280d11 <init_screen8>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2801f6:	59                   	pop    %ecx
  2801f7:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2801fd:	e8 1a 22 00 00       	call   28241c <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280202:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  280209:	6a 10                	push   $0x10
  28020b:	6a 10                	push   $0x10
  28020d:	57                   	push   %edi
  28020e:	50                   	push   %eax
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  28020f:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280215:	e8 75 22 00 00       	call   28248f <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  28021a:	83 c4 18             	add    $0x18,%esp
  28021d:	6a 63                	push   $0x63
  28021f:	57                   	push   %edi
  280220:	e8 5b 0c 00 00       	call   280e80 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280225:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  28022c:	b9 02 00 00 00       	mov    $0x2,%ecx
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280231:	5f                   	pop    %edi
	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280232:	83 e8 10             	sub    $0x10,%eax
  280235:	99                   	cltd   
  280236:	f7 f9                	idiv   %ecx
  280238:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int my = (binfo->scrny-28-16)/2;
  28023e:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280245:	83 e8 2c             	sub    $0x2c,%eax
  280248:	99                   	cltd   
  280249:	f7 f9                	idiv   %ecx
  28024b:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280251:	58                   	pop    %eax
  280252:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280258:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28025e:	e8 8f 3e 00 00       	call   2840f2 <open_console>
  280263:	89 c7                	mov    %eax,%edi
	keywin_on(key_win);
  280265:	89 04 24             	mov    %eax,(%esp)
  280268:	e8 a3 4e 00 00       	call   285110 <keywin_on>

	sheet_slide(sht_bg,0,0);
  28026d:	83 c4 0c             	add    $0xc,%esp
  280270:	6a 00                	push   $0x0
  280272:	6a 00                	push   $0x0
  280274:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28027a:	e8 74 27 00 00       	call   2829f3 <sheet_slide>
	sheet_slide(key_win,32,4);
  28027f:	83 c4 0c             	add    $0xc,%esp
  280282:	6a 04                	push   $0x4
  280284:	6a 20                	push   $0x20
  280286:	57                   	push   %edi
  280287:	e8 67 27 00 00       	call   2829f3 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  28028c:	83 c4 0c             	add    $0xc,%esp
  28028f:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280295:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28029b:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802a1:	e8 4d 27 00 00       	call   2829f3 <sheet_slide>
	sheet_updown(sht_bg,		0);
  2802a6:	58                   	pop    %eax
  2802a7:	5a                   	pop    %edx
  2802a8:	6a 00                	push   $0x0
  2802aa:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802b0:	e8 55 26 00 00       	call   28290a <sheet_updown>
	sheet_updown(key_win,1);
  2802b5:	59                   	pop    %ecx
  2802b6:	58                   	pop    %eax
  2802b7:	6a 01                	push   $0x1
  2802b9:	57                   	push   %edi
  2802ba:	e8 4b 26 00 00       	call   28290a <sheet_updown>
	sheet_updown(sht_mouse,		2);
  2802bf:	58                   	pop    %eax
  2802c0:	5a                   	pop    %edx
  2802c1:	6a 02                	push   $0x2
  2802c3:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802c9:	e8 3c 26 00 00       	call   28290a <sheet_updown>
  2802ce:	83 c4 10             	add    $0x10,%esp

	extern struct TIMERCTL timerctl;
	
	int key_shift = 0,keycmd_wait = -1;
  2802d1:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  2802d8:	ff ff ff 
  2802db:	c7 85 c8 fb ff ff 00 	movl   $0x0,-0x438(%ebp)
  2802e2:	00 00 00 
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
  2802e5:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2802ec:	00 00 00 
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;
  2802ef:	c7 85 b4 fb ff ff 00 	movl   $0x0,-0x44c(%ebp)
  2802f6:	00 00 00 
  2802f9:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280300:	ff ff 7f 
  280303:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  28030a:	00 00 00 
  28030d:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  280314:	ff ff ff 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
  280317:	c7 85 9c fb ff ff 00 	movl   $0x0,-0x464(%ebp)
  28031e:	00 00 00 
  280321:	c7 85 a8 fb ff ff ff 	movl   $0xffffffff,-0x458(%ebp)
  280328:	ff ff ff 
  28032b:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280332:	ff ff ff 
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280335:	89 b5 c4 fb ff ff    	mov    %esi,-0x43c(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  28033b:	89 9d 98 fb ff ff    	mov    %ebx,-0x468(%ebp)
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280341:	83 ec 0c             	sub    $0xc,%esp
  280344:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28034a:	e8 07 19 00 00       	call   281c56 <fifo32_status>
  28034f:	8b 8d b8 fb ff ff    	mov    -0x448(%ebp),%ecx
  280355:	83 c4 10             	add    $0x10,%esp
  280358:	c1 e9 1f             	shr    $0x1f,%ecx
  28035b:	74 2f                	je     28038c <bootmain+0x38c>
  28035d:	85 c0                	test   %eax,%eax
  28035f:	7e 2b                	jle    28038c <bootmain+0x38c>
		{
			keycmd_wait = fifo32_get(&keycmd);
  280361:	83 ec 0c             	sub    $0xc,%esp
  280364:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28036a:	e8 ac 18 00 00       	call   281c1b <fifo32_get>
  28036f:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
			wait_KBC_sendready();
  280375:	e8 1f 1a 00 00       	call   281d99 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  28037a:	58                   	pop    %eax
  28037b:	5a                   	pop    %edx
  28037c:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280382:	6a 60                	push   $0x60
  280384:	e8 5d 07 00 00       	call   280ae6 <io_out8>
  280389:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  28038c:	e8 21 07 00 00       	call   280ab2 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280391:	83 ec 0c             	sub    $0xc,%esp
  280394:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  28039a:	e8 b7 18 00 00       	call   281c56 <fifo32_status>
  28039f:	83 c4 10             	add    $0x10,%esp
  2803a2:	85 c0                	test   %eax,%eax
  2803a4:	0f 85 8b 00 00 00    	jne    280435 <bootmain+0x435>
		{	
			if(new_mx >= 0)
  2803aa:	83 bd e0 fb ff ff 00 	cmpl   $0x0,-0x420(%ebp)
  2803b1:	78 2f                	js     2803e2 <bootmain+0x3e2>
			{
				io_sti();
  2803b3:	e8 fc 06 00 00       	call   280ab4 <io_sti>
				sheet_slide(sht_mouse,new_mx,new_my);
  2803b8:	50                   	push   %eax
  2803b9:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2803bf:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2803c5:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2803cb:	e8 23 26 00 00       	call   2829f3 <sheet_slide>
  2803d0:	83 c4 10             	add    $0x10,%esp
				new_mx = -1;
  2803d3:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  2803da:	ff ff ff 
  2803dd:	e9 5f ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else if(new_wx!=0x7fffffff)
  2803e2:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2803e9:	ff ff 7f 
  2803ec:	74 2f                	je     28041d <bootmain+0x41d>
			{
				io_sti();
  2803ee:	e8 c1 06 00 00       	call   280ab4 <io_sti>
				sheet_slide(sht,new_wx,new_wy);
  2803f3:	50                   	push   %eax
  2803f4:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2803fa:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280400:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280406:	e8 e8 25 00 00       	call   2829f3 <sheet_slide>
  28040b:	83 c4 10             	add    $0x10,%esp
				new_wx = 0x7fffffff;
  28040e:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280415:	ff ff 7f 
  280418:	e9 24 ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else
			{
				task_sleep(task_a);
  28041d:	83 ec 0c             	sub    $0xc,%esp
  280420:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280426:	e8 e1 2d 00 00       	call   28320c <task_sleep>
				io_sti();
  28042b:	e8 84 06 00 00       	call   280ab4 <io_sti>
  280430:	e9 73 06 00 00       	jmp    280aa8 <bootmain+0xaa8>
			}
		}
		else
		{
			int i = fifo32_get(&fifo);
  280435:	83 ec 0c             	sub    $0xc,%esp
  280438:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  28043e:	e8 d8 17 00 00       	call   281c1b <fifo32_get>
  280443:	89 c6                	mov    %eax,%esi
			io_sti();
  280445:	e8 6a 06 00 00       	call   280ab4 <io_sti>
			if(key_win != 0 && key_win->flags == 0) //key_win already closed
  28044a:	83 c4 10             	add    $0x10,%esp
  28044d:	85 ff                	test   %edi,%edi
  28044f:	74 2c                	je     28047d <bootmain+0x47d>
  280451:	83 7f 1c 00          	cmpl   $0x0,0x1c(%edi)
  280455:	75 26                	jne    28047d <bootmain+0x47d>
			{
				if(shtctl->top == 1)
  280457:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28045d:	31 ff                	xor    %edi,%edi
  28045f:	8b 40 10             	mov    0x10(%eax),%eax
  280462:	83 f8 01             	cmp    $0x1,%eax
  280465:	74 16                	je     28047d <bootmain+0x47d>
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280467:	8b 8d d8 fb ff ff    	mov    -0x428(%ebp),%ecx
					keywin_on(key_win);
  28046d:	83 ec 0c             	sub    $0xc,%esp
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280470:	8b 7c 81 10          	mov    0x10(%ecx,%eax,4),%edi
					keywin_on(key_win);
  280474:	57                   	push   %edi
  280475:	e8 96 4c 00 00       	call   285110 <keywin_on>
  28047a:	83 c4 10             	add    $0x10,%esp
				}
			}
			if(256<=i && i<=511)
  28047d:	8d 9e 00 ff ff ff    	lea    -0x100(%esi),%ebx
  280483:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  280489:	0f 87 cc 02 00 00    	ja     28075b <bootmain+0x75b>
			{
				xtoa(i-256,s);
  28048f:	50                   	push   %eax
  280490:	50                   	push   %eax
  280491:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280497:	50                   	push   %eax
  280498:	53                   	push   %ebx
  280499:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  28049f:	e8 82 14 00 00       	call   281926 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  2804a4:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
  2804aa:	83 c4 0c             	add    $0xc,%esp
  2804ad:	6a 04                	push   $0x4
  2804af:	50                   	push   %eax
  2804b0:	6a 00                	push   $0x0
  2804b2:	6a 07                	push   $0x7
  2804b4:	6a 10                	push   $0x10
  2804b6:	6a 00                	push   $0x0
  2804b8:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2804be:	e8 3d 0c 00 00       	call   281100 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2804c3:	83 c4 18             	add    $0x18,%esp
  2804c6:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804cc:	53                   	push   %ebx
  2804cd:	e8 52 19 00 00       	call   281e24 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2804d2:	8d 50 bf             	lea    -0x41(%eax),%edx
  2804d5:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2804d8:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2804de:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2804e5:	80 fa 19             	cmp    $0x19,%dl
  2804e8:	77 26                	ja     280510 <bootmain+0x510>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2804ea:	f6 85 cc fb ff ff 04 	testb  $0x4,-0x434(%ebp)
  2804f1:	75 0b                	jne    2804fe <bootmain+0x4fe>
  2804f3:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  2804fa:	75 0b                	jne    280507 <bootmain+0x507>
  2804fc:	eb 12                	jmp    280510 <bootmain+0x510>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2804fe:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280505:	75 09                	jne    280510 <bootmain+0x510>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280507:	83 c0 20             	add    $0x20,%eax
  28050a:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0 && key_win != 0)//visible char,return key and back key
  280510:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280517:	85 ff                	test   %edi,%edi
  280519:	0f 95 c3             	setne  %bl
  28051c:	84 c0                	test   %al,%al
  28051e:	74 1b                	je     28053b <bootmain+0x53b>
  280520:	84 db                	test   %bl,%bl
  280522:	74 17                	je     28053b <bootmain+0x53b>
				{
					fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  280524:	05 00 01 00 00       	add    $0x100,%eax
  280529:	51                   	push   %ecx
  28052a:	51                   	push   %ecx
  28052b:	50                   	push   %eax
  28052c:	8b 47 24             	mov    0x24(%edi),%eax
  28052f:	83 c0 10             	add    $0x10,%eax
  280532:	50                   	push   %eax
  280533:	e8 71 16 00 00       	call   281ba9 <fifo32_put>
  280538:	83 c4 10             	add    $0x10,%esp
				}
				if(i == 256 + 0x0f && key_win != 0) //tab key
  28053b:	81 fe 0f 01 00 00    	cmp    $0x10f,%esi
  280541:	75 39                	jne    28057c <bootmain+0x57c>
  280543:	84 db                	test   %bl,%bl
  280545:	74 35                	je     28057c <bootmain+0x57c>
				{
					keywin_off(key_win);
  280547:	83 ec 0c             	sub    $0xc,%esp
  28054a:	57                   	push   %edi
  28054b:	e8 8c 4b 00 00       	call   2850dc <keywin_off>
					int j=key_win->height - 1;
  280550:	8b 47 18             	mov    0x18(%edi),%eax
					if(j==0)
  280553:	83 c4 10             	add    $0x10,%esp
  280556:	48                   	dec    %eax
  280557:	75 10                	jne    280569 <bootmain+0x569>
					{
						j = shtctl->top-1;
  280559:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28055f:	8b 40 10             	mov    0x10(%eax),%eax
  280562:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  280568:	48                   	dec    %eax
					}
					key_win = shtctl->sheets[j];
  280569:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
					keywin_on(key_win);
  28056f:	83 ec 0c             	sub    $0xc,%esp
					int j=key_win->height - 1;
					if(j==0)
					{
						j = shtctl->top-1;
					}
					key_win = shtctl->sheets[j];
  280572:	8b 7c 82 14          	mov    0x14(%edx,%eax,4),%edi
					keywin_on(key_win);
  280576:	57                   	push   %edi
  280577:	e9 a0 01 00 00       	jmp    28071c <bootmain+0x71c>
				}
				else if(i == 256 + 0x2a)  //left shift on
  28057c:	81 fe 2a 01 00 00    	cmp    $0x12a,%esi
  280582:	75 0c                	jne    280590 <bootmain+0x590>
				{
					key_shift |= 1;
  280584:	83 8d c8 fb ff ff 01 	orl    $0x1,-0x438(%ebp)
  28058b:	e9 b1 fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0x36) //right shift on
  280590:	81 fe 36 01 00 00    	cmp    $0x136,%esi
  280596:	75 0c                	jne    2805a4 <bootmain+0x5a4>
				{
					key_shift |= 2;
  280598:	83 8d c8 fb ff ff 02 	orl    $0x2,-0x438(%ebp)
  28059f:	e9 9d fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xaa)  //left shift off
  2805a4:	81 fe aa 01 00 00    	cmp    $0x1aa,%esi
  2805aa:	75 0c                	jne    2805b8 <bootmain+0x5b8>
				{
					key_shift &= ~1;
  2805ac:	83 a5 c8 fb ff ff fe 	andl   $0xfffffffe,-0x438(%ebp)
  2805b3:	e9 89 fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0xb6) //right shift off
  2805b8:	81 fe b6 01 00 00    	cmp    $0x1b6,%esi
  2805be:	75 0c                	jne    2805cc <bootmain+0x5cc>
				{
					key_shift &= ~2;
  2805c0:	83 a5 c8 fb ff ff fd 	andl   $0xfffffffd,-0x438(%ebp)
  2805c7:	e9 75 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0x3a) //CapsLock
  2805cc:	81 fe 3a 01 00 00    	cmp    $0x13a,%esi
  2805d2:	75 09                	jne    2805dd <bootmain+0x5dd>
				{
					key_leds ^= 4;
  2805d4:	83 b5 cc fb ff ff 04 	xorl   $0x4,-0x434(%ebp)
  2805db:	eb 20                	jmp    2805fd <bootmain+0x5fd>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2805dd:	81 fe 45 01 00 00    	cmp    $0x145,%esi
  2805e3:	75 09                	jne    2805ee <bootmain+0x5ee>
				{
					key_leds ^= 2;
  2805e5:	83 b5 cc fb ff ff 02 	xorl   $0x2,-0x434(%ebp)
  2805ec:	eb 0f                	jmp    2805fd <bootmain+0x5fd>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2805ee:	81 fe 46 01 00 00    	cmp    $0x146,%esi
  2805f4:	75 31                	jne    280627 <bootmain+0x627>
				{
					key_leds ^= 1;
  2805f6:	83 b5 cc fb ff ff 01 	xorl   $0x1,-0x434(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2805fd:	50                   	push   %eax
  2805fe:	50                   	push   %eax
  2805ff:	68 ed 00 00 00       	push   $0xed
  280604:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28060a:	e8 9a 15 00 00       	call   281ba9 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  28060f:	58                   	pop    %eax
  280610:	5a                   	pop    %edx
  280611:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280617:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28061d:	e8 87 15 00 00       	call   281ba9 <fifo32_put>
  280622:	e9 81 04 00 00       	jmp    280aa8 <bootmain+0xaa8>
				}
				else if(i == 256 + 0xfa)
  280627:	81 fe fa 01 00 00    	cmp    $0x1fa,%esi
  28062d:	75 0f                	jne    28063e <bootmain+0x63e>
				{
					keycmd_wait = -1;
  28062f:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  280636:	ff ff ff 
  280639:	e9 03 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xfe)
  28063e:	81 fe fe 01 00 00    	cmp    $0x1fe,%esi
  280644:	75 19                	jne    28065f <bootmain+0x65f>
				{
					wait_KBC_sendready();
  280646:	e8 4e 17 00 00       	call   281d99 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  28064b:	50                   	push   %eax
  28064c:	50                   	push   %eax
  28064d:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280653:	6a 60                	push   $0x60
  280655:	e8 8c 04 00 00       	call   280ae6 <io_out8>
  28065a:	e9 49 04 00 00       	jmp    280aa8 <bootmain+0xaa8>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && key_win != 0)	//shift + F1
  28065f:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280666:	0f 95 c0             	setne  %al
  280669:	81 fe 3b 01 00 00    	cmp    $0x13b,%esi
  28066f:	0f 94 c2             	sete   %dl
  280672:	84 c2                	test   %al,%dl
  280674:	74 54                	je     2806ca <bootmain+0x6ca>
  280676:	84 db                	test   %bl,%bl
  280678:	74 50                	je     2806ca <bootmain+0x6ca>
				{
					struct TASK *task = key_win->task;
  28067a:	8b 5f 24             	mov    0x24(%edi),%ebx
					if(task!=0 && task->tss.ss0 != 0)
  28067d:	85 db                	test   %ebx,%ebx
  28067f:	0f 84 bc fc ff ff    	je     280341 <bootmain+0x341>
  280685:	83 7b 34 00          	cmpl   $0x0,0x34(%ebx)
  280689:	0f 84 b2 fc ff ff    	je     280341 <bootmain+0x341>
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
  28068f:	50                   	push   %eax
  280690:	50                   	push   %eax
  280691:	68 60 51 28 00       	push   $0x285160
  280696:	ff b3 a4 00 00 00    	pushl  0xa4(%ebx)
  28069c:	e8 77 36 00 00       	call   283d18 <cons_putstr0>
						io_cli();
  2806a1:	e8 0c 04 00 00       	call   280ab2 <io_cli>
						task->tss.eax = (int)&(task->tss.esp0);
  2806a6:	8d 43 30             	lea    0x30(%ebx),%eax
						task->tss.eip = (int)asm_end_app - 0x280000;
  2806a9:	c7 43 4c 70 2d 00 00 	movl   $0x2d70,0x4c(%ebx)
					if(task!=0 && task->tss.ss0 != 0)
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
						io_cli();
						task->tss.eax = (int)&(task->tss.esp0);
  2806b0:	89 43 54             	mov    %eax,0x54(%ebx)
						task->tss.eip = (int)asm_end_app - 0x280000;
						io_sti();
  2806b3:	e8 fc 03 00 00       	call   280ab4 <io_sti>
						task_run(task,-1,0);
  2806b8:	83 c4 0c             	add    $0xc,%esp
  2806bb:	6a 00                	push   $0x0
  2806bd:	6a ff                	push   $0xffffffff
  2806bf:	53                   	push   %ebx
  2806c0:	e8 a8 28 00 00       	call   282f6d <task_run>
  2806c5:	e9 de 03 00 00       	jmp    280aa8 <bootmain+0xaa8>
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
  2806ca:	81 fe 3c 01 00 00    	cmp    $0x13c,%esi
  2806d0:	75 54                	jne    280726 <bootmain+0x726>
  2806d2:	84 c0                	test   %al,%al
  2806d4:	74 50                	je     280726 <bootmain+0x726>
				{
					if(key_win != 0) keywin_off(key_win);
  2806d6:	85 ff                	test   %edi,%edi
  2806d8:	74 0c                	je     2806e6 <bootmain+0x6e6>
  2806da:	83 ec 0c             	sub    $0xc,%esp
  2806dd:	57                   	push   %edi
  2806de:	e8 f9 49 00 00       	call   2850dc <keywin_off>
  2806e3:	83 c4 10             	add    $0x10,%esp
					key_win = open_console(shtctl,memtotal);
  2806e6:	51                   	push   %ecx
  2806e7:	51                   	push   %ecx
  2806e8:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  2806ee:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2806f4:	e8 f9 39 00 00       	call   2840f2 <open_console>
					sheet_slide(key_win,32,4);
  2806f9:	83 c4 0c             	add    $0xc,%esp
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
				{
					if(key_win != 0) keywin_off(key_win);
					key_win = open_console(shtctl,memtotal);
  2806fc:	89 c7                	mov    %eax,%edi
					sheet_slide(key_win,32,4);
  2806fe:	6a 04                	push   $0x4
  280700:	6a 20                	push   $0x20
  280702:	50                   	push   %eax
  280703:	e8 eb 22 00 00       	call   2829f3 <sheet_slide>
					sheet_updown(key_win,shtctl->top);
  280708:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28070e:	5b                   	pop    %ebx
  28070f:	5e                   	pop    %esi
  280710:	ff 70 10             	pushl  0x10(%eax)
  280713:	57                   	push   %edi
  280714:	e8 f1 21 00 00       	call   28290a <sheet_updown>
					keywin_on(key_win);
  280719:	89 3c 24             	mov    %edi,(%esp)
  28071c:	e8 ef 49 00 00       	call   285110 <keywin_on>
  280721:	e9 82 03 00 00       	jmp    280aa8 <bootmain+0xaa8>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  280726:	81 fe 57 01 00 00    	cmp    $0x157,%esi
  28072c:	0f 85 0f fc ff ff    	jne    280341 <bootmain+0x341>
  280732:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280738:	8b 40 10             	mov    0x10(%eax),%eax
  28073b:	83 f8 02             	cmp    $0x2,%eax
  28073e:	0f 8e fd fb ff ff    	jle    280341 <bootmain+0x341>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280744:	48                   	dec    %eax
  280745:	52                   	push   %edx
  280746:	52                   	push   %edx
  280747:	50                   	push   %eax
  280748:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28074e:	ff 70 18             	pushl  0x18(%eax)
  280751:	e8 b4 21 00 00       	call   28290a <sheet_updown>
  280756:	e9 4d 03 00 00       	jmp    280aa8 <bootmain+0xaa8>
				}

			}
			else if(512<=i && i<=767)
  28075b:	8d 86 00 fe ff ff    	lea    -0x200(%esi),%eax
  280761:	3d ff 00 00 00       	cmp    $0xff,%eax
  280766:	0f 87 e8 02 00 00    	ja     280a54 <bootmain+0xa54>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  28076c:	50                   	push   %eax
  28076d:	50                   	push   %eax
  28076e:	89 f0                	mov    %esi,%eax
  280770:	0f b6 f0             	movzbl %al,%esi
  280773:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  280779:	56                   	push   %esi
  28077a:	50                   	push   %eax
  28077b:	e8 2e 15 00 00       	call   281cae <mouse_decode>
  280780:	83 c4 10             	add    $0x10,%esp
  280783:	85 c0                	test   %eax,%eax
  280785:	0f 84 b6 fb ff ff    	je     280341 <bootmain+0x341>
  28078b:	31 c9                	xor    %ecx,%ecx
  28078d:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  280793:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  280799:	0f 48 c1             	cmovs  %ecx,%eax
  28079c:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)
  2807a2:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  2807a8:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  2807ae:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807b1:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2807b8:	3b 85 e0 fb ff ff    	cmp    -0x420(%ebp),%eax
  2807be:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807c1:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807c8:	0f 4f 95 e0 fb ff ff 	cmovg  -0x420(%ebp),%edx
  2807cf:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807d5:	8d 50 ff             	lea    -0x1(%eax),%edx
  2807d8:	39 c8                	cmp    %ecx,%eax
  2807da:	0f 4f d1             	cmovg  %ecx,%edx
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807dd:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807e4:	89 95 dc fb ff ff    	mov    %edx,-0x424(%ebp)
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807ea:	0f 84 f2 01 00 00    	je     2809e2 <bootmain+0x9e2>
					{
						if(mmx < 0) 
  2807f0:	83 bd bc fb ff ff 00 	cmpl   $0x0,-0x444(%ebp)
  2807f7:	0f 89 91 01 00 00    	jns    28098e <bootmain+0x98e>
						{
							for(int j=shtctl->top-1;j>0;j--)
  2807fd:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280803:	8b 40 10             	mov    0x10(%eax),%eax
  280806:	48                   	dec    %eax
  280807:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  28080d:	85 c0                	test   %eax,%eax
  28080f:	0f 8e 71 01 00 00    	jle    280986 <bootmain+0x986>
							{
								sht = shtctl->sheets[j];
  280815:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28081b:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280821:	8b 54 82 14          	mov    0x14(%edx,%eax,4),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280825:	2b 72 0c             	sub    0xc(%edx),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280828:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28082e:	0f 88 4c 01 00 00    	js     280980 <bootmain+0x980>
  280834:	8b 9d dc fb ff ff    	mov    -0x424(%ebp),%ebx
  28083a:	2b 5a 10             	sub    0x10(%edx),%ebx
  28083d:	8b 4a 04             	mov    0x4(%edx),%ecx
  280840:	0f 88 3a 01 00 00    	js     280980 <bootmain+0x980>
  280846:	39 ce                	cmp    %ecx,%esi
  280848:	0f 8d 32 01 00 00    	jge    280980 <bootmain+0x980>
  28084e:	3b 5a 08             	cmp    0x8(%edx),%ebx
  280851:	0f 8d 29 01 00 00    	jge    280980 <bootmain+0x980>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280857:	8b 12                	mov    (%edx),%edx
  280859:	0f af cb             	imul   %ebx,%ecx
  28085c:	01 f2                	add    %esi,%edx
  28085e:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%ebp)
  280864:	89 d1                	mov    %edx,%ecx
  280866:	8b 95 d0 fb ff ff    	mov    -0x430(%ebp),%edx
  28086c:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  280870:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280876:	3b 4a 14             	cmp    0x14(%edx),%ecx
  280879:	0f 84 01 01 00 00    	je     280980 <bootmain+0x980>
									{
										sheet_updown(sht,shtctl->top-1);
  28087f:	50                   	push   %eax
  280880:	50                   	push   %eax
  280881:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280887:	52                   	push   %edx
  280888:	e8 7d 20 00 00       	call   28290a <sheet_updown>
										if(sht!=key_win)
  28088d:	83 c4 10             	add    $0x10,%esp
  280890:	3b bd e4 fb ff ff    	cmp    -0x41c(%ebp),%edi
  280896:	74 18                	je     2808b0 <bootmain+0x8b0>
										{
											keywin_off(key_win);
  280898:	83 ec 0c             	sub    $0xc,%esp
  28089b:	57                   	push   %edi
  28089c:	e8 3b 48 00 00       	call   2850dc <keywin_off>
											key_win = sht;
											keywin_on(key_win);
  2808a1:	5f                   	pop    %edi
  2808a2:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  2808a8:	e8 63 48 00 00       	call   285110 <keywin_on>
  2808ad:	83 c4 10             	add    $0x10,%esp
  2808b0:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  2808b6:	83 fe 02             	cmp    $0x2,%esi
  2808b9:	8b 40 04             	mov    0x4(%eax),%eax
  2808bc:	7e 3f                	jle    2808fd <bootmain+0x8fd>
  2808be:	8d 50 fd             	lea    -0x3(%eax),%edx
  2808c1:	39 d6                	cmp    %edx,%esi
  2808c3:	7d 38                	jge    2808fd <bootmain+0x8fd>
  2808c5:	8d 53 fd             	lea    -0x3(%ebx),%edx
  2808c8:	83 fa 11             	cmp    $0x11,%edx
  2808cb:	77 30                	ja     2808fd <bootmain+0x8fd>
										{
											mmx = mx;
											mmy = my;
											mmx2 = sht->vx0;
  2808cd:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
  2808d3:	8b 79 0c             	mov    0xc(%ecx),%edi
  2808d6:	89 bd 9c fb ff ff    	mov    %edi,-0x464(%ebp)
											new_wy = sht->vy0;
  2808dc:	8b 79 10             	mov    0x10(%ecx),%edi
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
											mmy = my;
  2808df:	8b 8d dc fb ff ff    	mov    -0x424(%ebp),%ecx
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
  2808e5:	89 bd b4 fb ff ff    	mov    %edi,-0x44c(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808eb:	8b bd e0 fb ff ff    	mov    -0x420(%ebp),%edi
											mmy = my;
  2808f1:	89 8d a8 fb ff ff    	mov    %ecx,-0x458(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808f7:	89 bd bc fb ff ff    	mov    %edi,-0x444(%ebp)
											mmy = my;
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19) //click the close button
  2808fd:	8d 50 eb             	lea    -0x15(%eax),%edx
  280900:	39 d6                	cmp    %edx,%esi
  280902:	7c 74                	jl     280978 <bootmain+0x978>
  280904:	83 e8 05             	sub    $0x5,%eax
  280907:	39 c6                	cmp    %eax,%esi
  280909:	7d 6d                	jge    280978 <bootmain+0x978>
  28090b:	83 eb 05             	sub    $0x5,%ebx
  28090e:	83 fb 0d             	cmp    $0xd,%ebx
  280911:	77 65                	ja     280978 <bootmain+0x978>
										{
											if(sht->flags & 0x10)	//app window
  280913:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280919:	f6 40 1c 10          	testb  $0x10,0x1c(%eax)
  28091d:	8b 58 24             	mov    0x24(%eax),%ebx
  280920:	74 3c                	je     28095e <bootmain+0x95e>
											{
												if(sht->task != 0)
  280922:	85 db                	test   %ebx,%ebx
  280924:	74 52                	je     280978 <bootmain+0x978>
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  280926:	51                   	push   %ecx
  280927:	51                   	push   %ecx
  280928:	68 6e 51 28 00       	push   $0x28516e
  28092d:	ff b3 a4 00 00 00    	pushl  0xa4(%ebx)
  280933:	e8 e0 33 00 00       	call   283d18 <cons_putstr0>
													io_cli();
  280938:	e8 75 01 00 00       	call   280ab2 <io_cli>
													task->tss.eax = (int)&(task->tss.esp0);
  28093d:	8d 43 30             	lea    0x30(%ebx),%eax
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
  280940:	c7 43 4c 70 2d 00 00 	movl   $0x2d70,0x4c(%ebx)
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task->tss.eax = (int)&(task->tss.esp0);
  280947:	89 43 54             	mov    %eax,0x54(%ebx)
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
													io_sti();
  28094a:	e8 65 01 00 00       	call   280ab4 <io_sti>
													task_run(task,-1,0);
  28094f:	83 c4 0c             	add    $0xc,%esp
  280952:	6a 00                	push   $0x0
  280954:	6a ff                	push   $0xffffffff
  280956:	53                   	push   %ebx
  280957:	e8 11 26 00 00       	call   282f6d <task_run>
  28095c:	eb 17                	jmp    280975 <bootmain+0x975>
											}
											else				//console window
											{
												struct TASK *task = sht->task;
												io_cli();
												fifo32_put(&task->fifo,4);
  28095e:	83 c3 10             	add    $0x10,%ebx
												}
											}
											else				//console window
											{
												struct TASK *task = sht->task;
												io_cli();
  280961:	e8 4c 01 00 00       	call   280ab2 <io_cli>
												fifo32_put(&task->fifo,4);
  280966:	52                   	push   %edx
  280967:	52                   	push   %edx
  280968:	6a 04                	push   $0x4
  28096a:	53                   	push   %ebx
  28096b:	e8 39 12 00 00       	call   281ba9 <fifo32_put>
												io_sti();
  280970:	e8 3f 01 00 00       	call   280ab4 <io_sti>
  280975:	83 c4 10             	add    $0x10,%esp
  280978:	8b bd e4 fb ff ff    	mov    -0x41c(%ebp),%edi
  28097e:	eb 06                	jmp    280986 <bootmain+0x986>
					new_my = my;
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  280980:	48                   	dec    %eax
  280981:	e9 87 fe ff ff       	jmp    28080d <bootmain+0x80d>
  280986:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28098c:	eb 3d                	jmp    2809cb <bootmain+0x9cb>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
  28098e:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280994:	2b 85 bc fb ff ff    	sub    -0x444(%ebp),%eax
  28099a:	8b b5 9c fb ff ff    	mov    -0x464(%ebp),%esi
  2809a0:	8d 44 06 02          	lea    0x2(%esi,%eax,1),%eax
  2809a4:	83 e0 fc             	and    $0xfffffffc,%eax
  2809a7:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
							new_wy = new_wy+y;
  2809ad:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809b3:	2b 85 a8 fb ff ff    	sub    -0x458(%ebp),%eax
  2809b9:	01 85 b4 fb ff ff    	add    %eax,-0x44c(%ebp)
							//sheet_slide(sht,(mmx2+x+2)&~3,sht->vy0+y);
							mmy = my;
  2809bf:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809c5:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
							new_wy = new_wy+y;
  2809cb:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809d1:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809d7:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809dd:	e9 5f f9 ff ff       	jmp    280341 <bootmain+0x341>
						}
					}
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
  2809e2:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2809e9:	ff ff 7f 
  2809ec:	75 27                	jne    280a15 <bootmain+0xa15>
  2809ee:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809f4:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809fa:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a00:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  280a06:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280a0d:	ff ff ff 
  280a10:	e9 2c f9 ff ff       	jmp    280341 <bootmain+0x341>
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a15:	50                   	push   %eax
  280a16:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280a1c:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280a22:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280a28:	e8 c6 1f 00 00       	call   2829f3 <sheet_slide>
  280a2d:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280a33:	83 c4 10             	add    $0x10,%esp
							new_wx = 0x7fffffff;
  280a36:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280a3d:	ff ff 7f 
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a40:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a46:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a4c:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  280a52:	eb b2                	jmp    280a06 <bootmain+0xa06>
							new_wx = 0x7fffffff;
						}
					}
				}
			}
			else if(768<=i && i<=1023)
  280a54:	8d 86 00 fd ff ff    	lea    -0x300(%esi),%eax
  280a5a:	3d ff 00 00 00       	cmp    $0xff,%eax
  280a5f:	77 1b                	ja     280a7c <bootmain+0xa7c>
			{
				close_console(shtctl->sheets0 + (i-768));
  280a61:	6b f6 28             	imul   $0x28,%esi,%esi
  280a64:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280a6a:	83 ec 0c             	sub    $0xc,%esp
  280a6d:	8d 84 30 14 8c ff ff 	lea    -0x73ec(%eax,%esi,1),%eax
  280a74:	50                   	push   %eax
  280a75:	e8 51 37 00 00       	call   2841cb <close_console>
  280a7a:	eb 2c                	jmp    280aa8 <bootmain+0xaa8>
			}
			else if(1024<=i && i<=2023)
  280a7c:	8d 86 00 fc ff ff    	lea    -0x400(%esi),%eax
  280a82:	3d e7 03 00 00       	cmp    $0x3e7,%eax
  280a87:	0f 87 b4 f8 ff ff    	ja     280341 <bootmain+0x341>
			{
				extern struct TASKCTL *taskctl;
				close_constask(taskctl->tasks0 + (i-1024));
  280a8d:	69 f6 bc 00 00 00    	imul   $0xbc,%esi,%esi
  280a93:	a1 dc a5 28 00       	mov    0x28a5dc,%eax
  280a98:	83 ec 0c             	sub    $0xc,%esp
  280a9b:	8d 84 30 f8 1f fd ff 	lea    -0x2e008(%eax,%esi,1),%eax
  280aa2:	50                   	push   %eax
  280aa3:	e8 d7 36 00 00       	call   28417f <close_constask>
  280aa8:	83 c4 10             	add    $0x10,%esp
  280aab:	e9 91 f8 ff ff       	jmp    280341 <bootmain+0x341>

00280ab0 <io_hlt>:
  280ab0:	f4                   	hlt    
  280ab1:	c3                   	ret    

00280ab2 <io_cli>:
  280ab2:	fa                   	cli    
  280ab3:	c3                   	ret    

00280ab4 <io_sti>:
  280ab4:	fb                   	sti    
  280ab5:	c3                   	ret    

00280ab6 <io_stihlt>:
  280ab6:	fb                   	sti    
  280ab7:	f4                   	hlt    
  280ab8:	c3                   	ret    

00280ab9 <write_mem8>:
  280ab9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280abd:	8a 44 24 08          	mov    0x8(%esp),%al
  280ac1:	88 01                	mov    %al,(%ecx)
  280ac3:	c3                   	ret    

00280ac4 <io_in8>:
  280ac4:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ac8:	b8 00 00 00 00       	mov    $0x0,%eax
  280acd:	ec                   	in     (%dx),%al
  280ace:	c3                   	ret    

00280acf <io_in16>:
  280acf:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ad3:	b8 00 00 00 00       	mov    $0x0,%eax
  280ad8:	66 ed                	in     (%dx),%ax
  280ada:	c3                   	ret    

00280adb <io_in32>:
  280adb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280adf:	b8 00 00 00 00       	mov    $0x0,%eax
  280ae4:	ed                   	in     (%dx),%eax
  280ae5:	c3                   	ret    

00280ae6 <io_out8>:
  280ae6:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aea:	8b 44 24 08          	mov    0x8(%esp),%eax
  280aee:	ee                   	out    %al,(%dx)
  280aef:	c3                   	ret    

00280af0 <io_out16>:
  280af0:	8b 54 24 04          	mov    0x4(%esp),%edx
  280af4:	8b 44 24 08          	mov    0x8(%esp),%eax
  280af8:	66 ef                	out    %ax,(%dx)
  280afa:	c3                   	ret    

00280afb <io_out32>:
  280afb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aff:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b03:	ef                   	out    %eax,(%dx)
  280b04:	c3                   	ret    

00280b05 <io_load_eflags>:
  280b05:	9c                   	pushf  
  280b06:	58                   	pop    %eax
  280b07:	c3                   	ret    

00280b08 <io_store_eflags>:
  280b08:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b0c:	50                   	push   %eax
  280b0d:	9d                   	popf   
  280b0e:	c3                   	ret    

00280b0f <load_gdtr>:
  280b0f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b14:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b19:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280b1e:	c3                   	ret    

00280b1f <load_idtr>:
  280b1f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b24:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b29:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280b2e:	c3                   	ret    

00280b2f <load_cr0>:
  280b2f:	0f 20 c0             	mov    %cr0,%eax
  280b32:	c3                   	ret    

00280b33 <store_cr0>:
  280b33:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b37:	0f 22 c0             	mov    %eax,%cr0
  280b3a:	c3                   	ret    

00280b3b <_memtest_sub>:
  280b3b:	57                   	push   %edi
  280b3c:	56                   	push   %esi
  280b3d:	53                   	push   %ebx
  280b3e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280b43:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280b48:	8b 44 24 10          	mov    0x10(%esp),%eax

00280b4c <mts_loop>:
  280b4c:	89 c3                	mov    %eax,%ebx
  280b4e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280b54:	8b 13                	mov    (%ebx),%edx
  280b56:	89 33                	mov    %esi,(%ebx)
  280b58:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b5b:	3b 3b                	cmp    (%ebx),%edi
  280b5d:	75 18                	jne    280b77 <mts_qit>
  280b5f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b62:	3b 33                	cmp    (%ebx),%esi
  280b64:	75 11                	jne    280b77 <mts_qit>
  280b66:	89 13                	mov    %edx,(%ebx)
  280b68:	05 00 10 00 00       	add    $0x1000,%eax
  280b6d:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280b71:	76 d9                	jbe    280b4c <mts_loop>

00280b73 <mts_ret>:
  280b73:	5b                   	pop    %ebx
  280b74:	5e                   	pop    %esi
  280b75:	5f                   	pop    %edi
  280b76:	c3                   	ret    

00280b77 <mts_qit>:
  280b77:	89 13                	mov    %edx,(%ebx)
  280b79:	5b                   	pop    %ebx
  280b7a:	5e                   	pop    %esi
  280b7b:	5f                   	pop    %edi
  280b7c:	c3                   	ret    

00280b7d <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280b7d:	55                   	push   %ebp
  280b7e:	89 e5                	mov    %esp,%ebp
  280b80:	57                   	push   %edi
  280b81:	56                   	push   %esi
  280b82:	53                   	push   %ebx
  280b83:	83 ec 1c             	sub    $0x1c,%esp
  280b86:	8b 75 08             	mov    0x8(%ebp),%esi
  280b89:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280b8c:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280b8f:	e8 71 ff ff ff       	call   280b05 <io_load_eflags>
  280b94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280b97:	e8 16 ff ff ff       	call   280ab2 <io_cli>
	io_out8(0x03c8,start);
  280b9c:	83 ec 08             	sub    $0x8,%esp
  280b9f:	56                   	push   %esi
  280ba0:	68 c8 03 00 00       	push   $0x3c8
  280ba5:	e8 3c ff ff ff       	call   280ae6 <io_out8>
	for(i=start;i<=end;i++)
  280baa:	83 c4 10             	add    $0x10,%esp
  280bad:	39 fe                	cmp    %edi,%esi
  280baf:	7f 54                	jg     280c05 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280bb1:	83 ec 08             	sub    $0x8,%esp
  280bb4:	0f b6 03             	movzbl (%ebx),%eax
  280bb7:	c0 e8 02             	shr    $0x2,%al
  280bba:	0f b6 c0             	movzbl %al,%eax
  280bbd:	50                   	push   %eax
  280bbe:	68 c9 03 00 00       	push   $0x3c9
  280bc3:	e8 1e ff ff ff       	call   280ae6 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280bc8:	83 c4 08             	add    $0x8,%esp
  280bcb:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280bcf:	c0 e8 02             	shr    $0x2,%al
  280bd2:	0f b6 c0             	movzbl %al,%eax
  280bd5:	50                   	push   %eax
  280bd6:	68 c9 03 00 00       	push   $0x3c9
  280bdb:	e8 06 ff ff ff       	call   280ae6 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280be0:	83 c4 08             	add    $0x8,%esp
  280be3:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280be7:	c0 e8 02             	shr    $0x2,%al
  280bea:	0f b6 c0             	movzbl %al,%eax
  280bed:	50                   	push   %eax
  280bee:	68 c9 03 00 00       	push   $0x3c9
  280bf3:	e8 ee fe ff ff       	call   280ae6 <io_out8>
		rgb+=3;
  280bf8:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280bfb:	83 c6 01             	add    $0x1,%esi
  280bfe:	83 c4 10             	add    $0x10,%esp
  280c01:	39 f7                	cmp    %esi,%edi
  280c03:	7d ac                	jge    280bb1 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280c05:	83 ec 0c             	sub    $0xc,%esp
  280c08:	ff 75 e4             	pushl  -0x1c(%ebp)
  280c0b:	e8 f8 fe ff ff       	call   280b08 <io_store_eflags>
	return;
  280c10:	83 c4 10             	add    $0x10,%esp
}
  280c13:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c16:	5b                   	pop    %ebx
  280c17:	5e                   	pop    %esi
  280c18:	5f                   	pop    %edi
  280c19:	5d                   	pop    %ebp
  280c1a:	c3                   	ret    

00280c1b <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280c1b:	55                   	push   %ebp
  280c1c:	89 e5                	mov    %esp,%ebp
  280c1e:	57                   	push   %edi
  280c1f:	56                   	push   %esi
  280c20:	53                   	push   %ebx
  280c21:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280c27:	68 80 64 28 00       	push   $0x286480
  280c2c:	6a 0f                	push   $0xf
  280c2e:	6a 00                	push   $0x0
  280c30:	e8 48 ff ff ff       	call   280b7d <set_palette>
  280c35:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280c3b:	83 c4 10             	add    $0x10,%esp
  280c3e:	bb 00 00 00 00       	mov    $0x0,%ebx
  280c43:	eb 32                	jmp    280c77 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280c45:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280c47:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280c4a:	88 58 02             	mov    %bl,0x2(%eax)
  280c4d:	83 c2 33             	add    $0x33,%edx
  280c50:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280c53:	80 fa 32             	cmp    $0x32,%dl
  280c56:	75 ed                	jne    280c45 <init_palette+0x2a>
  280c58:	83 c6 12             	add    $0x12,%esi
  280c5b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280c5e:	80 f9 32             	cmp    $0x32,%cl
  280c61:	74 09                	je     280c6c <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280c63:	89 f0                	mov    %esi,%eax
  280c65:	ba 00 00 00 00       	mov    $0x0,%edx
  280c6a:	eb d9                	jmp    280c45 <init_palette+0x2a>
  280c6c:	83 c3 33             	add    $0x33,%ebx
  280c6f:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280c72:	80 fb 32             	cmp    $0x32,%bl
  280c75:	74 09                	je     280c80 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280c77:	89 fe                	mov    %edi,%esi
  280c79:	b9 00 00 00 00       	mov    $0x0,%ecx
  280c7e:	eb e3                	jmp    280c63 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280c80:	83 ec 04             	sub    $0x4,%esp
  280c83:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280c89:	50                   	push   %eax
  280c8a:	68 e7 00 00 00       	push   $0xe7
  280c8f:	6a 10                	push   $0x10
  280c91:	e8 e7 fe ff ff       	call   280b7d <set_palette>
	return;	
  280c96:	83 c4 10             	add    $0x10,%esp
}
  280c99:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c9c:	5b                   	pop    %ebx
  280c9d:	5e                   	pop    %esi
  280c9e:	5f                   	pop    %edi
  280c9f:	5d                   	pop    %ebp
  280ca0:	c3                   	ret    

00280ca1 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280ca1:	55                   	push   %ebp
  280ca2:	89 e5                	mov    %esp,%ebp
  280ca4:	57                   	push   %edi
  280ca5:	56                   	push   %esi
  280ca6:	53                   	push   %ebx
  280ca7:	83 ec 04             	sub    $0x4,%esp
  280caa:	8b 55 0c             	mov    0xc(%ebp),%edx
  280cad:	8b 7d 14             	mov    0x14(%ebp),%edi
  280cb0:	8b 75 18             	mov    0x18(%ebp),%esi
  280cb3:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280cb6:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280cba:	3b 75 20             	cmp    0x20(%ebp),%esi
  280cbd:	7f 28                	jg     280ce7 <boxfill8+0x46>
  280cbf:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280cc2:	0f af d6             	imul   %esi,%edx
  280cc5:	03 55 08             	add    0x8(%ebp),%edx
  280cc8:	eb 15                	jmp    280cdf <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280cca:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280ccd:	83 c0 01             	add    $0x1,%eax
  280cd0:	39 c1                	cmp    %eax,%ecx
  280cd2:	7d f6                	jge    280cca <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280cd4:	83 c6 01             	add    $0x1,%esi
  280cd7:	03 55 f0             	add    -0x10(%ebp),%edx
  280cda:	39 75 20             	cmp    %esi,0x20(%ebp)
  280cdd:	7c 08                	jl     280ce7 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280cdf:	89 f8                	mov    %edi,%eax
  280ce1:	39 cf                	cmp    %ecx,%edi
  280ce3:	7e e5                	jle    280cca <boxfill8+0x29>
  280ce5:	eb ed                	jmp    280cd4 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280ce7:	83 c4 04             	add    $0x4,%esp
  280cea:	5b                   	pop    %ebx
  280ceb:	5e                   	pop    %esi
  280cec:	5f                   	pop    %edi
  280ced:	5d                   	pop    %ebp
  280cee:	c3                   	ret    

00280cef <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280cef:	55                   	push   %ebp
  280cf0:	89 e5                	mov    %esp,%ebp
  280cf2:	53                   	push   %ebx
  280cf3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280cf6:	8b 55 10             	mov    0x10(%ebp),%edx
  280cf9:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280cfd:	85 d2                	test   %edx,%edx
  280cff:	7e 0d                	jle    280d0e <boxfill8_test+0x1f>
  280d01:	89 d8                	mov    %ebx,%eax
  280d03:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280d05:	88 08                	mov    %cl,(%eax)
  280d07:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280d0a:	39 d0                	cmp    %edx,%eax
  280d0c:	75 f7                	jne    280d05 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280d0e:	5b                   	pop    %ebx
  280d0f:	5d                   	pop    %ebp
  280d10:	c3                   	ret    

00280d11 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280d11:	55                   	push   %ebp
  280d12:	89 e5                	mov    %esp,%ebp
  280d14:	57                   	push   %edi
  280d15:	56                   	push   %esi
  280d16:	53                   	push   %ebx
  280d17:	83 ec 14             	sub    $0x14,%esp
  280d1a:	8b 7d 08             	mov    0x8(%ebp),%edi
  280d1d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280d20:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280d23:	68 be 00 00 00       	push   $0xbe
  280d28:	68 36 01 00 00       	push   $0x136
  280d2d:	6a 00                	push   $0x0
  280d2f:	6a 00                	push   $0x0
  280d31:	6a 0e                	push   $0xe
  280d33:	68 36 01 00 00       	push   $0x136
  280d38:	57                   	push   %edi
  280d39:	e8 63 ff ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280d3e:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d41:	89 c2                	mov    %eax,%edx
  280d43:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d46:	50                   	push   %eax
  280d47:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d4a:	52                   	push   %edx
  280d4b:	6a 00                	push   $0x0
  280d4d:	6a 00                	push   $0x0
  280d4f:	6a 0e                	push   $0xe
  280d51:	53                   	push   %ebx
  280d52:	57                   	push   %edi
  280d53:	e8 49 ff ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d58:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d5b:	83 c4 38             	add    $0x38,%esp
  280d5e:	50                   	push   %eax
  280d5f:	ff 75 f0             	pushl  -0x10(%ebp)
  280d62:	50                   	push   %eax
  280d63:	6a 00                	push   $0x0
  280d65:	6a 08                	push   $0x8
  280d67:	53                   	push   %ebx
  280d68:	57                   	push   %edi
  280d69:	e8 33 ff ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d6e:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d71:	50                   	push   %eax
  280d72:	ff 75 f0             	pushl  -0x10(%ebp)
  280d75:	50                   	push   %eax
  280d76:	6a 00                	push   $0x0
  280d78:	6a 07                	push   $0x7
  280d7a:	53                   	push   %ebx
  280d7b:	57                   	push   %edi
  280d7c:	e8 20 ff ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280d81:	83 c4 38             	add    $0x38,%esp
  280d84:	8d 46 ff             	lea    -0x1(%esi),%eax
  280d87:	50                   	push   %eax
  280d88:	ff 75 f0             	pushl  -0x10(%ebp)
  280d8b:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280d8e:	50                   	push   %eax
  280d8f:	6a 00                	push   $0x0
  280d91:	6a 08                	push   $0x8
  280d93:	53                   	push   %ebx
  280d94:	57                   	push   %edi
  280d95:	e8 07 ff ff ff       	call   280ca1 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280d9a:	8d 46 e8             	lea    -0x18(%esi),%eax
  280d9d:	50                   	push   %eax
  280d9e:	6a 3b                	push   $0x3b
  280da0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280da3:	50                   	push   %eax
  280da4:	6a 03                	push   $0x3
  280da6:	6a 07                	push   $0x7
  280da8:	53                   	push   %ebx
  280da9:	57                   	push   %edi
  280daa:	e8 f2 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280daf:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280db2:	83 c4 38             	add    $0x38,%esp
  280db5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280db8:	51                   	push   %ecx
  280db9:	6a 02                	push   $0x2
  280dbb:	ff 75 f0             	pushl  -0x10(%ebp)
  280dbe:	6a 02                	push   $0x2
  280dc0:	6a 07                	push   $0x7
  280dc2:	53                   	push   %ebx
  280dc3:	57                   	push   %edi
  280dc4:	e8 d8 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280dc9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280dcc:	51                   	push   %ecx
  280dcd:	6a 3b                	push   $0x3b
  280dcf:	51                   	push   %ecx
  280dd0:	6a 03                	push   $0x3
  280dd2:	6a 0f                	push   $0xf
  280dd4:	53                   	push   %ebx
  280dd5:	57                   	push   %edi
  280dd6:	e8 c6 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280ddb:	8d 56 e9             	lea    -0x17(%esi),%edx
  280dde:	83 c4 38             	add    $0x38,%esp
  280de1:	8d 46 fb             	lea    -0x5(%esi),%eax
  280de4:	50                   	push   %eax
  280de5:	6a 3b                	push   $0x3b
  280de7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280dea:	52                   	push   %edx
  280deb:	6a 3b                	push   $0x3b
  280ded:	6a 0f                	push   $0xf
  280def:	53                   	push   %ebx
  280df0:	57                   	push   %edi
  280df1:	e8 ab fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280df6:	83 ee 03             	sub    $0x3,%esi
  280df9:	56                   	push   %esi
  280dfa:	6a 3b                	push   $0x3b
  280dfc:	56                   	push   %esi
  280dfd:	6a 02                	push   $0x2
  280dff:	6a 00                	push   $0x0
  280e01:	53                   	push   %ebx
  280e02:	57                   	push   %edi
  280e03:	e8 99 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280e08:	83 c4 38             	add    $0x38,%esp
  280e0b:	56                   	push   %esi
  280e0c:	6a 3c                	push   $0x3c
  280e0e:	ff 75 f0             	pushl  -0x10(%ebp)
  280e11:	6a 3c                	push   $0x3c
  280e13:	6a 00                	push   $0x0
  280e15:	53                   	push   %ebx
  280e16:	57                   	push   %edi
  280e17:	e8 85 fe ff ff       	call   280ca1 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280e1c:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280e1f:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280e22:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280e25:	50                   	push   %eax
  280e26:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280e29:	51                   	push   %ecx
  280e2a:	50                   	push   %eax
  280e2b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280e2e:	52                   	push   %edx
  280e2f:	6a 0f                	push   $0xf
  280e31:	53                   	push   %ebx
  280e32:	57                   	push   %edi
  280e33:	e8 69 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280e38:	83 c4 38             	add    $0x38,%esp
  280e3b:	ff 75 ec             	pushl  -0x14(%ebp)
  280e3e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e41:	52                   	push   %edx
  280e42:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e45:	52                   	push   %edx
  280e46:	6a 0f                	push   $0xf
  280e48:	53                   	push   %ebx
  280e49:	57                   	push   %edi
  280e4a:	e8 52 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e4f:	56                   	push   %esi
  280e50:	ff 75 e0             	pushl  -0x20(%ebp)
  280e53:	56                   	push   %esi
  280e54:	ff 75 e8             	pushl  -0x18(%ebp)
  280e57:	6a 07                	push   $0x7
  280e59:	53                   	push   %ebx
  280e5a:	57                   	push   %edi
  280e5b:	e8 41 fe ff ff       	call   280ca1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e60:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e63:	83 c4 38             	add    $0x38,%esp
  280e66:	56                   	push   %esi
  280e67:	50                   	push   %eax
  280e68:	ff 75 f0             	pushl  -0x10(%ebp)
  280e6b:	50                   	push   %eax
  280e6c:	6a 07                	push   $0x7
  280e6e:	53                   	push   %ebx
  280e6f:	57                   	push   %edi
  280e70:	e8 2c fe ff ff       	call   280ca1 <boxfill8>
}
  280e75:	83 c4 1c             	add    $0x1c,%esp
  280e78:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e7b:	5b                   	pop    %ebx
  280e7c:	5e                   	pop    %esi
  280e7d:	5f                   	pop    %edi
  280e7e:	5d                   	pop    %ebp
  280e7f:	c3                   	ret    

00280e80 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280e80:	55                   	push   %ebp
  280e81:	89 e5                	mov    %esp,%ebp
  280e83:	57                   	push   %edi
  280e84:	56                   	push   %esi
  280e85:	53                   	push   %ebx
  280e86:	83 ec 08             	sub    $0x8,%esp
  280e89:	8b 75 08             	mov    0x8(%ebp),%esi
  280e8c:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280e90:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280e93:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280e9c:	eb 38                	jmp    280ed6 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e9e:	0f b6 94 03 60 52 28 	movzbl 0x285260(%ebx,%eax,1),%edx
  280ea5:	00 
  280ea6:	80 fa 2a             	cmp    $0x2a,%dl
  280ea9:	75 06                	jne    280eb1 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280eab:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280eaf:	eb 15                	jmp    280ec6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280eb1:	80 fa 4f             	cmp    $0x4f,%dl
  280eb4:	75 06                	jne    280ebc <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280eb6:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280eba:	eb 0a                	jmp    280ec6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280ebc:	80 fa 2e             	cmp    $0x2e,%dl
  280ebf:	75 05                	jne    280ec6 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280ec1:	89 fa                	mov    %edi,%edx
  280ec3:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280ec6:	83 c0 01             	add    $0x1,%eax
  280ec9:	83 f8 10             	cmp    $0x10,%eax
  280ecc:	75 d0                	jne    280e9e <init_mouse_cursor8+0x1e>
  280ece:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280ed1:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280ed4:	74 0c                	je     280ee2 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280ed6:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280edb:	89 f3                	mov    %esi,%ebx
  280edd:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280ee0:	eb bc                	jmp    280e9e <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280ee2:	83 c4 08             	add    $0x8,%esp
  280ee5:	5b                   	pop    %ebx
  280ee6:	5e                   	pop    %esi
  280ee7:	5f                   	pop    %edi
  280ee8:	5d                   	pop    %ebp
  280ee9:	c3                   	ret    

00280eea <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280eea:	55                   	push   %ebp
  280eeb:	89 e5                	mov    %esp,%ebp
  280eed:	57                   	push   %edi
  280eee:	56                   	push   %esi
  280eef:	53                   	push   %ebx
  280ef0:	83 ec 1c             	sub    $0x1c,%esp
  280ef3:	8b 75 08             	mov    0x8(%ebp),%esi
  280ef6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280ef9:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280efc:	80 fa 01             	cmp    $0x1,%dl
  280eff:	19 c0                	sbb    %eax,%eax
  280f01:	83 e0 03             	and    $0x3,%eax
  280f04:	83 c0 0c             	add    $0xc,%eax
  280f07:	80 fa 01             	cmp    $0x1,%dl
  280f0a:	19 ff                	sbb    %edi,%edi
  280f0c:	f7 d7                	not    %edi
  280f0e:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280f11:	6a 14                	push   $0x14
  280f13:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280f16:	52                   	push   %edx
  280f17:	6a 03                	push   $0x3
  280f19:	6a 03                	push   $0x3
  280f1b:	0f b6 c0             	movzbl %al,%eax
  280f1e:	50                   	push   %eax
  280f1f:	53                   	push   %ebx
  280f20:	56                   	push   %esi
  280f21:	e8 7b fd ff ff       	call   280ca1 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280f26:	83 c4 04             	add    $0x4,%esp
  280f29:	ff 75 10             	pushl  0x10(%ebp)
  280f2c:	89 f8                	mov    %edi,%eax
  280f2e:	0f be f8             	movsbl %al,%edi
  280f31:	57                   	push   %edi
  280f32:	6a 04                	push   $0x4
  280f34:	6a 18                	push   $0x18
  280f36:	53                   	push   %ebx
  280f37:	56                   	push   %esi
  280f38:	e8 c7 04 00 00       	call   281404 <putfonts8_asc>
  280f3d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f40:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f43:	01 fb                	add    %edi,%ebx
  280f45:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f48:	83 c4 30             	add    $0x30,%esp
  280f4b:	be 00 00 00 00       	mov    $0x0,%esi
  280f50:	eb 41                	jmp    280f93 <make_wtitle8+0xa9>
  280f52:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f54:	0f b6 9c 06 80 51 28 	movzbl 0x285180(%esi,%eax,1),%ebx
  280f5b:	00 
			if(c == '@') c=COL8_000000;
  280f5c:	ba 00 00 00 00       	mov    $0x0,%edx
  280f61:	80 fb 40             	cmp    $0x40,%bl
  280f64:	74 13                	je     280f79 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f66:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f6b:	80 fb 24             	cmp    $0x24,%bl
  280f6e:	74 09                	je     280f79 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f70:	80 fb 51             	cmp    $0x51,%bl
  280f73:	0f 94 c2             	sete   %dl
  280f76:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f79:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280f7d:	83 c0 01             	add    $0x1,%eax
  280f80:	83 f8 10             	cmp    $0x10,%eax
  280f83:	75 cd                	jne    280f52 <make_wtitle8+0x68>
  280f85:	03 7d e4             	add    -0x1c(%ebp),%edi
  280f88:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280f8b:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280f91:	74 07                	je     280f9a <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280f93:	b8 00 00 00 00       	mov    $0x0,%eax
  280f98:	eb b8                	jmp    280f52 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280f9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280f9d:	5b                   	pop    %ebx
  280f9e:	5e                   	pop    %esi
  280f9f:	5f                   	pop    %edi
  280fa0:	5d                   	pop    %ebp
  280fa1:	c3                   	ret    

00280fa2 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280fa2:	55                   	push   %ebp
  280fa3:	89 e5                	mov    %esp,%ebp
  280fa5:	57                   	push   %edi
  280fa6:	56                   	push   %esi
  280fa7:	53                   	push   %ebx
  280fa8:	83 ec 1c             	sub    $0x1c,%esp
  280fab:	8b 75 08             	mov    0x8(%ebp),%esi
  280fae:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280fb1:	8b 45 18             	mov    0x18(%ebp),%eax
  280fb4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280fb7:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280fba:	6a 00                	push   $0x0
  280fbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280fbf:	50                   	push   %eax
  280fc0:	6a 00                	push   $0x0
  280fc2:	6a 00                	push   $0x0
  280fc4:	6a 08                	push   $0x8
  280fc6:	53                   	push   %ebx
  280fc7:	56                   	push   %esi
  280fc8:	e8 d4 fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280fcd:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280fd0:	6a 01                	push   $0x1
  280fd2:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280fd5:	52                   	push   %edx
  280fd6:	6a 01                	push   $0x1
  280fd8:	6a 01                	push   $0x1
  280fda:	6a 07                	push   $0x7
  280fdc:	53                   	push   %ebx
  280fdd:	56                   	push   %esi
  280fde:	e8 be fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  280fe3:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fe6:	8d 4f ff             	lea    -0x1(%edi),%ecx
  280fe9:	83 c4 38             	add    $0x38,%esp
  280fec:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  280fef:	51                   	push   %ecx
  280ff0:	6a 00                	push   $0x0
  280ff2:	6a 00                	push   $0x0
  280ff4:	6a 00                	push   $0x0
  280ff6:	6a 08                	push   $0x8
  280ff8:	53                   	push   %ebx
  280ff9:	56                   	push   %esi
  280ffa:	e8 a2 fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  280fff:	8b 7d 10             	mov    0x10(%ebp),%edi
  281002:	83 ef 02             	sub    $0x2,%edi
  281005:	57                   	push   %edi
  281006:	6a 01                	push   $0x1
  281008:	6a 01                	push   $0x1
  28100a:	6a 01                	push   $0x1
  28100c:	6a 07                	push   $0x7
  28100e:	53                   	push   %ebx
  28100f:	56                   	push   %esi
  281010:	e8 8c fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  281015:	83 c4 38             	add    $0x38,%esp
  281018:	57                   	push   %edi
  281019:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28101c:	52                   	push   %edx
  28101d:	6a 01                	push   $0x1
  28101f:	52                   	push   %edx
  281020:	6a 0f                	push   $0xf
  281022:	53                   	push   %ebx
  281023:	56                   	push   %esi
  281024:	e8 78 fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  281029:	ff 75 dc             	pushl  -0x24(%ebp)
  28102c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28102f:	50                   	push   %eax
  281030:	6a 00                	push   $0x0
  281032:	50                   	push   %eax
  281033:	6a 00                	push   $0x0
  281035:	53                   	push   %ebx
  281036:	56                   	push   %esi
  281037:	e8 65 fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28103c:	83 c4 38             	add    $0x38,%esp
  28103f:	8b 55 10             	mov    0x10(%ebp),%edx
  281042:	8d 42 fd             	lea    -0x3(%edx),%eax
  281045:	50                   	push   %eax
  281046:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281049:	50                   	push   %eax
  28104a:	6a 02                	push   $0x2
  28104c:	6a 02                	push   $0x2
  28104e:	6a 08                	push   $0x8
  281050:	53                   	push   %ebx
  281051:	56                   	push   %esi
  281052:	e8 4a fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  281057:	57                   	push   %edi
  281058:	ff 75 e0             	pushl  -0x20(%ebp)
  28105b:	57                   	push   %edi
  28105c:	6a 01                	push   $0x1
  28105e:	6a 0f                	push   $0xf
  281060:	53                   	push   %ebx
  281061:	56                   	push   %esi
  281062:	e8 3a fc ff ff       	call   280ca1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  281067:	83 c4 38             	add    $0x38,%esp
  28106a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  28106d:	51                   	push   %ecx
  28106e:	ff 75 e4             	pushl  -0x1c(%ebp)
  281071:	51                   	push   %ecx
  281072:	6a 00                	push   $0x0
  281074:	6a 00                	push   $0x0
  281076:	53                   	push   %ebx
  281077:	56                   	push   %esi
  281078:	e8 24 fc ff ff       	call   280ca1 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  28107d:	83 c4 1c             	add    $0x1c,%esp
  281080:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  281084:	50                   	push   %eax
  281085:	ff 75 14             	pushl  0x14(%ebp)
  281088:	53                   	push   %ebx
  281089:	56                   	push   %esi
  28108a:	e8 5b fe ff ff       	call   280eea <make_wtitle8>
	return;
  28108f:	83 c4 10             	add    $0x10,%esp
}
  281092:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281095:	5b                   	pop    %ebx
  281096:	5e                   	pop    %esi
  281097:	5f                   	pop    %edi
  281098:	5d                   	pop    %ebp
  281099:	c3                   	ret    

0028109a <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  28109a:	55                   	push   %ebp
  28109b:	89 e5                	mov    %esp,%ebp
  28109d:	57                   	push   %edi
  28109e:	56                   	push   %esi
  28109f:	53                   	push   %ebx
  2810a0:	83 ec 04             	sub    $0x4,%esp
  2810a3:	8b 45 0c             	mov    0xc(%ebp),%eax
  2810a6:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  2810a9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  2810ad:	7e 49                	jle    2810f8 <putblock8_8+0x5e>
  2810af:	8b 7d 24             	mov    0x24(%ebp),%edi
  2810b2:	8b 4d 20             	mov    0x20(%ebp),%ecx
  2810b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  2810b8:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  2810bc:	03 45 18             	add    0x18(%ebp),%eax
  2810bf:	89 c2                	mov    %eax,%edx
  2810c1:	03 55 08             	add    0x8(%ebp),%edx
  2810c4:	be 00 00 00 00       	mov    $0x0,%esi
  2810c9:	eb 22                	jmp    2810ed <putblock8_8+0x53>
  2810cb:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2810ce:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2810d2:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2810d5:	83 c0 01             	add    $0x1,%eax
  2810d8:	39 45 10             	cmp    %eax,0x10(%ebp)
  2810db:	75 f1                	jne    2810ce <putblock8_8+0x34>
  2810dd:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  2810e0:	83 c6 01             	add    $0x1,%esi
  2810e3:	01 f9                	add    %edi,%ecx
  2810e5:	03 55 f0             	add    -0x10(%ebp),%edx
  2810e8:	39 75 14             	cmp    %esi,0x14(%ebp)
  2810eb:	74 0b                	je     2810f8 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  2810ed:	b8 00 00 00 00       	mov    $0x0,%eax
  2810f2:	85 db                	test   %ebx,%ebx
  2810f4:	7f d5                	jg     2810cb <putblock8_8+0x31>
  2810f6:	eb e8                	jmp    2810e0 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  2810f8:	83 c4 04             	add    $0x4,%esp
  2810fb:	5b                   	pop    %ebx
  2810fc:	5e                   	pop    %esi
  2810fd:	5f                   	pop    %edi
  2810fe:	5d                   	pop    %ebp
  2810ff:	c3                   	ret    

00281100 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  281100:	55                   	push   %ebp
  281101:	89 e5                	mov    %esp,%ebp
  281103:	57                   	push   %edi
  281104:	56                   	push   %esi
  281105:	53                   	push   %ebx
  281106:	83 ec 0c             	sub    $0xc,%esp
  281109:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28110c:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  28110f:	8b 45 20             	mov    0x20(%ebp),%eax
  281112:	8b 55 0c             	mov    0xc(%ebp),%edx
  281115:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  281118:	8d 46 0f             	lea    0xf(%esi),%eax
  28111b:	50                   	push   %eax
  28111c:	8d 47 ff             	lea    -0x1(%edi),%eax
  28111f:	50                   	push   %eax
  281120:	56                   	push   %esi
  281121:	52                   	push   %edx
  281122:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281126:	50                   	push   %eax
  281127:	ff 73 04             	pushl  0x4(%ebx)
  28112a:	ff 33                	pushl  (%ebx)
  28112c:	e8 70 fb ff ff       	call   280ca1 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281131:	83 c4 04             	add    $0x4,%esp
  281134:	ff 75 1c             	pushl  0x1c(%ebp)
  281137:	ff 75 14             	pushl  0x14(%ebp)
  28113a:	56                   	push   %esi
  28113b:	ff 75 0c             	pushl  0xc(%ebp)
  28113e:	ff 73 04             	pushl  0x4(%ebx)
  281141:	ff 33                	pushl  (%ebx)
  281143:	e8 bc 02 00 00       	call   281404 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281148:	83 c4 24             	add    $0x24,%esp
  28114b:	8d 46 10             	lea    0x10(%esi),%eax
  28114e:	50                   	push   %eax
  28114f:	57                   	push   %edi
  281150:	56                   	push   %esi
  281151:	ff 75 0c             	pushl  0xc(%ebp)
  281154:	53                   	push   %ebx
  281155:	e8 7c 17 00 00       	call   2828d6 <sheet_refresh>
}
  28115a:	83 c4 20             	add    $0x20,%esp
  28115d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281160:	5b                   	pop    %ebx
  281161:	5e                   	pop    %esi
  281162:	5f                   	pop    %edi
  281163:	5d                   	pop    %ebp
  281164:	c3                   	ret    

00281165 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281165:	55                   	push   %ebp
  281166:	89 e5                	mov    %esp,%ebp
  281168:	57                   	push   %edi
  281169:	56                   	push   %esi
  28116a:	53                   	push   %ebx
  28116b:	83 ec 18             	sub    $0x18,%esp
  28116e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281171:	8b 45 0c             	mov    0xc(%ebp),%eax
  281174:	03 45 14             	add    0x14(%ebp),%eax
  281177:	8b 55 10             	mov    0x10(%ebp),%edx
  28117a:	03 55 18             	add    0x18(%ebp),%edx
  28117d:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  28117f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  281182:	8d 48 01             	lea    0x1(%eax),%ecx
  281185:	8b 75 10             	mov    0x10(%ebp),%esi
  281188:	83 ee 03             	sub    $0x3,%esi
  28118b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28118e:	83 ea 02             	sub    $0x2,%edx
  281191:	56                   	push   %esi
  281192:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  281195:	51                   	push   %ecx
  281196:	56                   	push   %esi
  281197:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28119a:	52                   	push   %edx
  28119b:	6a 0f                	push   $0xf
  28119d:	ff 73 04             	pushl  0x4(%ebx)
  2811a0:	ff 33                	pushl  (%ebx)
  2811a2:	e8 fa fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  2811a7:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  2811aa:	8d 7f 01             	lea    0x1(%edi),%edi
  2811ad:	89 f9                	mov    %edi,%ecx
  2811af:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2811b2:	83 ef 03             	sub    $0x3,%edi
  2811b5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  2811b8:	51                   	push   %ecx
  2811b9:	57                   	push   %edi
  2811ba:	56                   	push   %esi
  2811bb:	57                   	push   %edi
  2811bc:	6a 0f                	push   $0xf
  2811be:	ff 73 04             	pushl  0x4(%ebx)
  2811c1:	ff 33                	pushl  (%ebx)
  2811c3:	e8 d9 fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2811c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2811cb:	8d 4a 02             	lea    0x2(%edx),%ecx
  2811ce:	83 c4 38             	add    $0x38,%esp
  2811d1:	51                   	push   %ecx
  2811d2:	ff 75 e0             	pushl  -0x20(%ebp)
  2811d5:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2811d8:	51                   	push   %ecx
  2811d9:	57                   	push   %edi
  2811da:	6a 07                	push   $0x7
  2811dc:	ff 73 04             	pushl  0x4(%ebx)
  2811df:	ff 33                	pushl  (%ebx)
  2811e1:	e8 bb fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  2811e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2811e9:	83 c0 02             	add    $0x2,%eax
  2811ec:	ff 75 dc             	pushl  -0x24(%ebp)
  2811ef:	50                   	push   %eax
  2811f0:	56                   	push   %esi
  2811f1:	50                   	push   %eax
  2811f2:	6a 07                	push   $0x7
  2811f4:	ff 73 04             	pushl  0x4(%ebx)
  2811f7:	ff 33                	pushl  (%ebx)
  2811f9:	e8 a3 fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  2811fe:	8b 75 10             	mov    0x10(%ebp),%esi
  281201:	8d 7e fe             	lea    -0x2(%esi),%edi
  281204:	8b 75 0c             	mov    0xc(%ebp),%esi
  281207:	83 ee 01             	sub    $0x1,%esi
  28120a:	83 c4 38             	add    $0x38,%esp
  28120d:	57                   	push   %edi
  28120e:	ff 75 e8             	pushl  -0x18(%ebp)
  281211:	57                   	push   %edi
  281212:	56                   	push   %esi
  281213:	6a 00                	push   $0x0
  281215:	ff 73 04             	pushl  0x4(%ebx)
  281218:	ff 33                	pushl  (%ebx)
  28121a:	e8 82 fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  28121f:	ff 75 e4             	pushl  -0x1c(%ebp)
  281222:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281225:	52                   	push   %edx
  281226:	57                   	push   %edi
  281227:	52                   	push   %edx
  281228:	6a 00                	push   $0x0
  28122a:	ff 73 04             	pushl  0x4(%ebx)
  28122d:	ff 33                	pushl  (%ebx)
  28122f:	e8 6d fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281234:	83 c4 38             	add    $0x38,%esp
  281237:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28123a:	50                   	push   %eax
  28123b:	ff 75 e8             	pushl  -0x18(%ebp)
  28123e:	50                   	push   %eax
  28123f:	ff 75 f0             	pushl  -0x10(%ebp)
  281242:	6a 08                	push   $0x8
  281244:	ff 73 04             	pushl  0x4(%ebx)
  281247:	ff 33                	pushl  (%ebx)
  281249:	e8 53 fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28124e:	ff 75 ec             	pushl  -0x14(%ebp)
  281251:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281254:	51                   	push   %ecx
  281255:	57                   	push   %edi
  281256:	51                   	push   %ecx
  281257:	6a 08                	push   $0x8
  281259:	ff 73 04             	pushl  0x4(%ebx)
  28125c:	ff 33                	pushl  (%ebx)
  28125e:	e8 3e fa ff ff       	call   280ca1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281263:	83 c4 38             	add    $0x38,%esp
  281266:	ff 75 e4             	pushl  -0x1c(%ebp)
  281269:	ff 75 e8             	pushl  -0x18(%ebp)
  28126c:	8b 45 10             	mov    0x10(%ebp),%eax
  28126f:	83 e8 01             	sub    $0x1,%eax
  281272:	50                   	push   %eax
  281273:	56                   	push   %esi
  281274:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  281278:	50                   	push   %eax
  281279:	ff 73 04             	pushl  0x4(%ebx)
  28127c:	ff 33                	pushl  (%ebx)
  28127e:	e8 1e fa ff ff       	call   280ca1 <boxfill8>
    return;
  281283:	83 c4 1c             	add    $0x1c,%esp
}
  281286:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281289:	5b                   	pop    %ebx
  28128a:	5e                   	pop    %esi
  28128b:	5f                   	pop    %edi
  28128c:	5d                   	pop    %ebp
  28128d:	c3                   	ret    

0028128e <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  28128e:	55                   	push   %ebp
  28128f:	89 e5                	mov    %esp,%ebp
  281291:	57                   	push   %edi
  281292:	56                   	push   %esi
  281293:	53                   	push   %ebx
  281294:	83 ec 10             	sub    $0x10,%esp
  281297:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  28129a:	8b 7d 14             	mov    0x14(%ebp),%edi
  28129d:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  2812a0:	8b 45 18             	mov    0x18(%ebp),%eax
  2812a3:	2b 45 10             	sub    0x10(%ebp),%eax
  2812a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  2812a9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2812ac:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  2812af:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2812b2:	c1 e3 0a             	shl    $0xa,%ebx
  2812b5:	89 fa                	mov    %edi,%edx
  2812b7:	c1 fa 1f             	sar    $0x1f,%edx
  2812ba:	89 d0                	mov    %edx,%eax
  2812bc:	31 fa                	xor    %edi,%edx
  2812be:	29 c2                	sub    %eax,%edx
  2812c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812c3:	c1 f8 1f             	sar    $0x1f,%eax
  2812c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2812c9:	33 45 f0             	xor    -0x10(%ebp),%eax
  2812cc:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  2812cf:	39 c2                	cmp    %eax,%edx
  2812d1:	7c 4a                	jl     28131d <drawline8_sht+0x8f>
	{
		len=dx+1;
  2812d3:	83 c2 01             	add    $0x1,%edx
  2812d6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  2812d9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2812dc:	39 7d 14             	cmp    %edi,0x14(%ebp)
  2812df:	b8 00 04 00 00       	mov    $0x400,%eax
  2812e4:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  2812e9:	89 c7                	mov    %eax,%edi
  2812eb:	0f 4c fa             	cmovl  %edx,%edi
  2812ee:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  2812f1:	8b 7d 10             	mov    0x10(%ebp),%edi
  2812f4:	39 7d 18             	cmp    %edi,0x18(%ebp)
  2812f7:	7c 12                	jl     28130b <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  2812f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812fc:	83 c0 01             	add    $0x1,%eax
  2812ff:	c1 e0 0a             	shl    $0xa,%eax
  281302:	99                   	cltd   
  281303:	f7 7d ec             	idivl  -0x14(%ebp)
  281306:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  281309:	eb 52                	jmp    28135d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  28130b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28130e:	83 e8 01             	sub    $0x1,%eax
  281311:	c1 e0 0a             	shl    $0xa,%eax
  281314:	99                   	cltd   
  281315:	f7 7d ec             	idivl  -0x14(%ebp)
  281318:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28131b:	eb 40                	jmp    28135d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  28131d:	83 c0 01             	add    $0x1,%eax
  281320:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  281323:	8b 55 10             	mov    0x10(%ebp),%edx
  281326:	39 55 18             	cmp    %edx,0x18(%ebp)
  281329:	b8 00 04 00 00       	mov    $0x400,%eax
  28132e:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281333:	0f 4c c2             	cmovl  %edx,%eax
  281336:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  281339:	8b 55 0c             	mov    0xc(%ebp),%edx
  28133c:	39 55 14             	cmp    %edx,0x14(%ebp)
  28133f:	7c 0f                	jl     281350 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281341:	8d 47 01             	lea    0x1(%edi),%eax
  281344:	c1 e0 0a             	shl    $0xa,%eax
  281347:	99                   	cltd   
  281348:	f7 7d ec             	idivl  -0x14(%ebp)
  28134b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28134e:	eb 0d                	jmp    28135d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281350:	8d 47 ff             	lea    -0x1(%edi),%eax
  281353:	c1 e0 0a             	shl    $0xa,%eax
  281356:	99                   	cltd   
  281357:	f7 7d ec             	idivl  -0x14(%ebp)
  28135a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28135d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  281361:	7e 31                	jle    281394 <drawline8_sht+0x106>
  281363:	ba 00 00 00 00       	mov    $0x0,%edx
  281368:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  28136b:	89 d8                	mov    %ebx,%eax
  28136d:	c1 f8 0a             	sar    $0xa,%eax
  281370:	0f af 46 04          	imul   0x4(%esi),%eax
  281374:	89 cf                	mov    %ecx,%edi
  281376:	c1 ff 0a             	sar    $0xa,%edi
  281379:	03 06                	add    (%esi),%eax
  28137b:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  28137f:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  281382:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  281385:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  281388:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  28138c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28138f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  281392:	75 d7                	jne    28136b <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  281394:	83 c4 10             	add    $0x10,%esp
  281397:	5b                   	pop    %ebx
  281398:	5e                   	pop    %esi
  281399:	5f                   	pop    %edi
  28139a:	5d                   	pop    %ebp
  28139b:	c3                   	ret    

0028139c <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  28139c:	55                   	push   %ebp
  28139d:	89 e5                	mov    %esp,%ebp
  28139f:	57                   	push   %edi
  2813a0:	56                   	push   %esi
  2813a1:	53                   	push   %ebx
  2813a2:	83 ec 08             	sub    $0x8,%esp
  2813a5:	8b 45 0c             	mov    0xc(%ebp),%eax
  2813a8:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  2813ab:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  2813af:	89 fb                	mov    %edi,%ebx
  2813b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2813b4:	0f af 45 14          	imul   0x14(%ebp),%eax
  2813b8:	03 45 10             	add    0x10(%ebp),%eax
  2813bb:	89 c1                	mov    %eax,%ecx
  2813bd:	03 4d 08             	add    0x8(%ebp),%ecx
  2813c0:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  2813c3:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  2813c6:	b8 07 00 00 00       	mov    $0x7,%eax
  2813cb:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2813ce:	89 f1                	mov    %esi,%ecx
  2813d0:	89 de                	mov    %ebx,%esi
  2813d2:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2813d4:	f6 c2 01             	test   $0x1,%dl
  2813d7:	74 06                	je     2813df <putfont8+0x43>
  2813d9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813dc:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2813df:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  2813e1:	83 e8 01             	sub    $0x1,%eax
  2813e4:	83 f8 ff             	cmp    $0xffffffff,%eax
  2813e7:	75 eb                	jne    2813d4 <putfont8+0x38>
  2813e9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813ec:	89 d8                	mov    %ebx,%eax
  2813ee:	89 f3                	mov    %esi,%ebx
  2813f0:	89 c6                	mov    %eax,%esi
  2813f2:	83 c3 01             	add    $0x1,%ebx
  2813f5:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  2813f8:	39 fb                	cmp    %edi,%ebx
  2813fa:	75 c7                	jne    2813c3 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  2813fc:	83 c4 08             	add    $0x8,%esp
  2813ff:	5b                   	pop    %ebx
  281400:	5e                   	pop    %esi
  281401:	5f                   	pop    %edi
  281402:	5d                   	pop    %ebp
  281403:	c3                   	ret    

00281404 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  281404:	55                   	push   %ebp
  281405:	89 e5                	mov    %esp,%ebp
  281407:	57                   	push   %edi
  281408:	56                   	push   %esi
  281409:	53                   	push   %ebx
  28140a:	8b 75 10             	mov    0x10(%ebp),%esi
  28140d:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  281410:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281414:	0f b6 03             	movzbl (%ebx),%eax
  281417:	84 c0                	test   %al,%al
  281419:	74 2f                	je     28144a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  28141b:	0f be fa             	movsbl %dl,%edi
  28141e:	0f b6 c0             	movzbl %al,%eax
  281421:	c1 e0 04             	shl    $0x4,%eax
  281424:	05 c0 64 28 00       	add    $0x2864c0,%eax
  281429:	50                   	push   %eax
  28142a:	57                   	push   %edi
  28142b:	ff 75 14             	pushl  0x14(%ebp)
  28142e:	56                   	push   %esi
  28142f:	ff 75 0c             	pushl  0xc(%ebp)
  281432:	ff 75 08             	pushl  0x8(%ebp)
  281435:	e8 62 ff ff ff       	call   28139c <putfont8>
		x+=HKK_TABLE_COL;
  28143a:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  28143d:	83 c3 01             	add    $0x1,%ebx
  281440:	0f b6 03             	movzbl (%ebx),%eax
  281443:	83 c4 18             	add    $0x18,%esp
  281446:	84 c0                	test   %al,%al
  281448:	75 d4                	jne    28141e <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28144a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28144d:	5b                   	pop    %ebx
  28144e:	5e                   	pop    %esi
  28144f:	5f                   	pop    %edi
  281450:	5d                   	pop    %ebp
  281451:	c3                   	ret    

00281452 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281452:	55                   	push   %ebp
  281453:	89 e5                	mov    %esp,%ebp
  281455:	57                   	push   %edi
  281456:	56                   	push   %esi
  281457:	53                   	push   %ebx
  281458:	8b 55 08             	mov    0x8(%ebp),%edx
  28145b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28145e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281461:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281464:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28146a:	76 09                	jbe    281475 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  28146c:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281472:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  281475:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  281478:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  28147c:	89 ce                	mov    %ecx,%esi
  28147e:	c1 fe 10             	sar    $0x10,%esi
  281481:	89 f0                	mov    %esi,%eax
  281483:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  281486:	89 f8                	mov    %edi,%eax
  281488:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  28148b:	c1 eb 10             	shr    $0x10,%ebx
  28148e:	83 e3 0f             	and    $0xf,%ebx
  281491:	89 f8                	mov    %edi,%eax
  281493:	c1 f8 08             	sar    $0x8,%eax
  281496:	83 e0 f0             	and    $0xfffffff0,%eax
  281499:	09 d8                	or     %ebx,%eax
  28149b:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  28149e:	c1 e9 18             	shr    $0x18,%ecx
  2814a1:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  2814a4:	5b                   	pop    %ebx
  2814a5:	5e                   	pop    %esi
  2814a6:	5f                   	pop    %edi
  2814a7:	5d                   	pop    %ebp
  2814a8:	c3                   	ret    

002814a9 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  2814a9:	55                   	push   %ebp
  2814aa:	89 e5                	mov    %esp,%ebp
  2814ac:	53                   	push   %ebx
  2814ad:	8b 45 08             	mov    0x8(%ebp),%eax
  2814b0:	8b 55 0c             	mov    0xc(%ebp),%edx
  2814b3:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  2814b6:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  2814b9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2814bc:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2814c0:	89 cb                	mov    %ecx,%ebx
  2814c2:	c1 fb 08             	sar    $0x8,%ebx
  2814c5:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  2814c8:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2814cb:	c1 ea 10             	shr    $0x10,%edx
  2814ce:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2814d2:	5b                   	pop    %ebx
  2814d3:	5d                   	pop    %ebp
  2814d4:	c3                   	ret    

002814d5 <init_gdtidt>:

void init_gdtidt(void)
{
  2814d5:	55                   	push   %ebp
  2814d6:	89 e5                	mov    %esp,%ebp
  2814d8:	53                   	push   %ebx
  2814d9:	83 ec 04             	sub    $0x4,%esp
  2814dc:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  2814e1:	6a 00                	push   $0x0
  2814e3:	6a 00                	push   $0x0
  2814e5:	6a 00                	push   $0x0
  2814e7:	53                   	push   %ebx
  2814e8:	e8 65 ff ff ff       	call   281452 <set_segmdesc>
  2814ed:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  2814f0:	83 c4 10             	add    $0x10,%esp
  2814f3:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  2814f9:	75 e6                	jne    2814e1 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  2814fb:	68 92 40 00 00       	push   $0x4092
  281500:	6a 00                	push   $0x0
  281502:	6a ff                	push   $0xffffffff
  281504:	68 08 00 27 00       	push   $0x270008
  281509:	e8 44 ff ff ff       	call   281452 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  28150e:	68 9a 40 00 00       	push   $0x409a
  281513:	6a 00                	push   $0x0
  281515:	68 ff ff 0f 00       	push   $0xfffff
  28151a:	68 10 00 27 00       	push   $0x270010
  28151f:	e8 2e ff ff ff       	call   281452 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281524:	83 c4 20             	add    $0x20,%esp
  281527:	68 9a 40 00 00       	push   $0x409a
  28152c:	68 00 00 28 00       	push   $0x280000
  281531:	68 ff ff 07 00       	push   $0x7ffff
  281536:	68 18 00 27 00       	push   $0x270018
  28153b:	e8 12 ff ff ff       	call   281452 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281540:	83 c4 08             	add    $0x8,%esp
  281543:	68 00 00 27 00       	push   $0x270000
  281548:	68 ff ff 00 00       	push   $0xffff
  28154d:	e8 bd f5 ff ff       	call   280b0f <load_gdtr>
  281552:	83 c4 10             	add    $0x10,%esp
  281555:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28155a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28155f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281565:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  281569:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28156d:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281573:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  281576:	3d 00 00 27 00       	cmp    $0x270000,%eax
  28157b:	75 dd                	jne    28155a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  28157d:	b8 1e 18 00 00       	mov    $0x181e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281582:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  281588:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  28158f:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281591:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  281598:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  28159f:	c1 e8 10             	shr    $0x10,%eax
  2815a2:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  2815a8:	b8 f0 17 00 00       	mov    $0x17f0,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815ad:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  2815b3:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  2815ba:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815bc:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  2815c3:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  2815ca:	c1 e8 10             	shr    $0x10,%eax
  2815cd:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2815d3:	b8 07 18 00 00       	mov    $0x1807,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815d8:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2815de:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  2815e5:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815e7:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  2815ee:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  2815f5:	c1 e8 10             	shr    $0x10,%eax
  2815f8:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  2815fe:	b8 35 18 00 00       	mov    $0x1835,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281603:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  281609:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  281610:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281612:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  281619:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281620:	c1 e8 10             	shr    $0x10,%eax
  281623:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  281629:	b8 56 18 00 00       	mov    $0x1856,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28162e:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281634:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  28163b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28163d:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281644:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28164b:	c1 e8 10             	shr    $0x10,%eax
  28164e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281654:	b8 76 18 00 00       	mov    $0x1876,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281659:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28165f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  281666:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281668:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  28166f:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  281676:	c1 e8 10             	shr    $0x10,%eax
  281679:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  28167f:	83 ec 08             	sub    $0x8,%esp
  281682:	68 00 f8 26 00       	push   $0x26f800
  281687:	68 ff 07 00 00       	push   $0x7ff
  28168c:	e8 8e f4 ff ff       	call   280b1f <load_idtr>

	return;
  281691:	83 c4 10             	add    $0x10,%esp
}
  281694:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281697:	c9                   	leave  
  281698:	c3                   	ret    

00281699 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  281699:	55                   	push   %ebp
  28169a:	89 e5                	mov    %esp,%ebp
  28169c:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  28169f:	68 ff 00 00 00       	push   $0xff
  2816a4:	6a 21                	push   $0x21
  2816a6:	e8 3b f4 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  2816ab:	83 c4 08             	add    $0x8,%esp
  2816ae:	68 ff 00 00 00       	push   $0xff
  2816b3:	68 a1 00 00 00       	push   $0xa1
  2816b8:	e8 29 f4 ff ff       	call   280ae6 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  2816bd:	83 c4 08             	add    $0x8,%esp
  2816c0:	6a 11                	push   $0x11
  2816c2:	6a 20                	push   $0x20
  2816c4:	e8 1d f4 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  2816c9:	83 c4 08             	add    $0x8,%esp
  2816cc:	6a 20                	push   $0x20
  2816ce:	6a 21                	push   $0x21
  2816d0:	e8 11 f4 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  2816d5:	83 c4 08             	add    $0x8,%esp
  2816d8:	6a 04                	push   $0x4
  2816da:	6a 21                	push   $0x21
  2816dc:	e8 05 f4 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  2816e1:	83 c4 08             	add    $0x8,%esp
  2816e4:	6a 01                	push   $0x1
  2816e6:	6a 21                	push   $0x21
  2816e8:	e8 f9 f3 ff ff       	call   280ae6 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  2816ed:	83 c4 08             	add    $0x8,%esp
  2816f0:	6a 11                	push   $0x11
  2816f2:	68 a0 00 00 00       	push   $0xa0
  2816f7:	e8 ea f3 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  2816fc:	83 c4 08             	add    $0x8,%esp
  2816ff:	6a 28                	push   $0x28
  281701:	68 a1 00 00 00       	push   $0xa1
  281706:	e8 db f3 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC1_ICW3, 2);
  28170b:	83 c4 08             	add    $0x8,%esp
  28170e:	6a 02                	push   $0x2
  281710:	68 a1 00 00 00       	push   $0xa1
  281715:	e8 cc f3 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  28171a:	83 c4 08             	add    $0x8,%esp
  28171d:	6a 01                	push   $0x1
  28171f:	68 a1 00 00 00       	push   $0xa1
  281724:	e8 bd f3 ff ff       	call   280ae6 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  281729:	83 c4 08             	add    $0x8,%esp
  28172c:	68 fb 00 00 00       	push   $0xfb
  281731:	6a 21                	push   $0x21
  281733:	e8 ae f3 ff ff       	call   280ae6 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  281738:	83 c4 08             	add    $0x8,%esp
  28173b:	68 ff 00 00 00       	push   $0xff
  281740:	68 a1 00 00 00       	push   $0xa1
  281745:	e8 9c f3 ff ff       	call   280ae6 <io_out8>
}
  28174a:	83 c4 10             	add    $0x10,%esp
  28174d:	c9                   	leave  
  28174e:	c3                   	ret    

0028174f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28174f:	55                   	push   %ebp
  281750:	89 e5                	mov    %esp,%ebp
  281752:	57                   	push   %edi
  281753:	56                   	push   %esi
  281754:	53                   	push   %ebx
  281755:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281758:	e8 1b 17 00 00       	call   282e78 <task_now>
  28175d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28175f:	8b b0 a4 00 00 00    	mov    0xa4(%eax),%esi
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  281765:	83 ec 08             	sub    $0x8,%esp
  281768:	68 60 53 28 00       	push   $0x285360
  28176d:	56                   	push   %esi
  28176e:	e8 a5 25 00 00       	call   283d18 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281773:	83 c4 0c             	add    $0xc,%esp
  281776:	8b 45 08             	mov    0x8(%ebp),%eax
  281779:	ff 70 2c             	pushl  0x2c(%eax)
  28177c:	68 88 53 28 00       	push   $0x285388
  281781:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281784:	57                   	push   %edi
  281785:	e8 33 02 00 00       	call   2819bd <sprintf>
	cons_putstr0(cons,s);
  28178a:	83 c4 08             	add    $0x8,%esp
  28178d:	57                   	push   %edi
  28178e:	56                   	push   %esi
  28178f:	e8 84 25 00 00       	call   283d18 <cons_putstr0>
	return &(task->tss.esp0);
  281794:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281797:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28179a:	5b                   	pop    %ebx
  28179b:	5e                   	pop    %esi
  28179c:	5f                   	pop    %edi
  28179d:	5d                   	pop    %ebp
  28179e:	c3                   	ret    

0028179f <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  28179f:	55                   	push   %ebp
  2817a0:	89 e5                	mov    %esp,%ebp
  2817a2:	57                   	push   %edi
  2817a3:	56                   	push   %esi
  2817a4:	53                   	push   %ebx
  2817a5:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  2817a8:	e8 cb 16 00 00       	call   282e78 <task_now>
  2817ad:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  2817af:	8b b0 a4 00 00 00    	mov    0xa4(%eax),%esi
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  2817b5:	83 ec 08             	sub    $0x8,%esp
  2817b8:	68 90 53 28 00       	push   $0x285390
  2817bd:	56                   	push   %esi
  2817be:	e8 55 25 00 00       	call   283d18 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2817c3:	83 c4 0c             	add    $0xc,%esp
  2817c6:	8b 45 08             	mov    0x8(%ebp),%eax
  2817c9:	ff 70 2c             	pushl  0x2c(%eax)
  2817cc:	68 88 53 28 00       	push   $0x285388
  2817d1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2817d4:	57                   	push   %edi
  2817d5:	e8 e3 01 00 00       	call   2819bd <sprintf>
	cons_putstr0(cons,s);
  2817da:	83 c4 08             	add    $0x8,%esp
  2817dd:	57                   	push   %edi
  2817de:	56                   	push   %esi
  2817df:	e8 34 25 00 00       	call   283d18 <cons_putstr0>
	return &(task->tss.esp0);
  2817e4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2817e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2817ea:	5b                   	pop    %ebx
  2817eb:	5e                   	pop    %esi
  2817ec:	5f                   	pop    %edi
  2817ed:	5d                   	pop    %ebp
  2817ee:	c3                   	ret    
  2817ef:	90                   	nop

002817f0 <asm_inthandler21>:
  2817f0:	06                   	push   %es
  2817f1:	1e                   	push   %ds
  2817f2:	60                   	pusha  
  2817f3:	89 e0                	mov    %esp,%eax
  2817f5:	50                   	push   %eax
  2817f6:	66 8c d0             	mov    %ss,%ax
  2817f9:	8e d8                	mov    %eax,%ds
  2817fb:	8e c0                	mov    %eax,%es
  2817fd:	e8 ed 05 00 00       	call   281def <inthandler21>
  281802:	58                   	pop    %eax
  281803:	61                   	popa   
  281804:	1f                   	pop    %ds
  281805:	07                   	pop    %es
  281806:	cf                   	iret   

00281807 <asm_inthandler2c>:
  281807:	06                   	push   %es
  281808:	1e                   	push   %ds
  281809:	60                   	pusha  
  28180a:	89 e0                	mov    %esp,%eax
  28180c:	50                   	push   %eax
  28180d:	66 8c d0             	mov    %ss,%ax
  281810:	8e d8                	mov    %eax,%ds
  281812:	8e c0                	mov    %eax,%es
  281814:	e8 3c 05 00 00       	call   281d55 <inthandler2c>
  281819:	58                   	pop    %eax
  28181a:	61                   	popa   
  28181b:	1f                   	pop    %ds
  28181c:	07                   	pop    %es
  28181d:	cf                   	iret   

0028181e <asm_inthandler20>:
  28181e:	06                   	push   %es
  28181f:	1e                   	push   %ds
  281820:	60                   	pusha  
  281821:	89 e0                	mov    %esp,%eax
  281823:	50                   	push   %eax
  281824:	66 8c d0             	mov    %ss,%ax
  281827:	8e d8                	mov    %eax,%ds
  281829:	8e c0                	mov    %eax,%es
  28182b:	e8 c1 13 00 00       	call   282bf1 <inthandler20>
  281830:	58                   	pop    %eax
  281831:	61                   	popa   
  281832:	1f                   	pop    %ds
  281833:	07                   	pop    %es
  281834:	cf                   	iret   

00281835 <asm_sys_api>:
  281835:	fb                   	sti    
  281836:	1e                   	push   %ds
  281837:	06                   	push   %es
  281838:	60                   	pusha  
  281839:	60                   	pusha  
  28183a:	66 8c d0             	mov    %ss,%ax
  28183d:	8e d8                	mov    %eax,%ds
  28183f:	8e c0                	mov    %eax,%es
  281841:	e8 38 2c 00 00       	call   28447e <sys_api>
  281846:	83 f8 00             	cmp    $0x0,%eax
  281849:	75 07                	jne    281852 <end_app>
  28184b:	83 c4 20             	add    $0x20,%esp
  28184e:	61                   	popa   
  28184f:	07                   	pop    %es
  281850:	1f                   	pop    %ds
  281851:	cf                   	iret   

00281852 <end_app>:
  281852:	8b 20                	mov    (%eax),%esp
  281854:	61                   	popa   
  281855:	c3                   	ret    

00281856 <asm_inthandler0d>:
  281856:	fb                   	sti    
  281857:	06                   	push   %es
  281858:	1e                   	push   %ds
  281859:	60                   	pusha  
  28185a:	89 e0                	mov    %esp,%eax
  28185c:	50                   	push   %eax
  28185d:	66 8c d0             	mov    %ss,%ax
  281860:	8e d8                	mov    %eax,%ds
  281862:	8e c0                	mov    %eax,%es
  281864:	e8 e6 fe ff ff       	call   28174f <inthandler0d>
  281869:	83 f8 00             	cmp    $0x0,%eax
  28186c:	75 e4                	jne    281852 <end_app>
  28186e:	58                   	pop    %eax
  28186f:	61                   	popa   
  281870:	1f                   	pop    %ds
  281871:	07                   	pop    %es
  281872:	83 c4 04             	add    $0x4,%esp
  281875:	cf                   	iret   

00281876 <asm_inthandler0c>:
  281876:	fb                   	sti    
  281877:	06                   	push   %es
  281878:	1e                   	push   %ds
  281879:	60                   	pusha  
  28187a:	89 e0                	mov    %esp,%eax
  28187c:	50                   	push   %eax
  28187d:	66 8c d0             	mov    %ss,%ax
  281880:	8e d8                	mov    %eax,%ds
  281882:	8e c0                	mov    %eax,%es
  281884:	e8 16 ff ff ff       	call   28179f <inthandler0c>
  281889:	83 f8 00             	cmp    $0x0,%eax
  28188c:	75 c4                	jne    281852 <end_app>
  28188e:	58                   	pop    %eax
  28188f:	61                   	popa   
  281890:	1f                   	pop    %ds
  281891:	07                   	pop    %es
  281892:	83 c4 04             	add    $0x4,%esp
  281895:	cf                   	iret   

00281896 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  281896:	55                   	push   %ebp
  281897:	89 e5                	mov    %esp,%ebp
  281899:	57                   	push   %edi
  28189a:	56                   	push   %esi
  28189b:	53                   	push   %ebx
  28189c:	83 ec 10             	sub    $0x10,%esp
  28189f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2818a2:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  2818a5:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  2818ac:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  2818b3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  2818b9:	85 c9                	test   %ecx,%ecx
  2818bb:	79 08                	jns    2818c5 <itoa+0x2f>
		*buf++ = '-';
  2818bd:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  2818c0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  2818c2:	8d 7f 01             	lea    0x1(%edi),%edi
  2818c5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  2818c8:	be 67 66 66 66       	mov    $0x66666667,%esi
  2818cd:	83 c3 01             	add    $0x1,%ebx
  2818d0:	89 c8                	mov    %ecx,%eax
  2818d2:	f7 ee                	imul   %esi
  2818d4:	c1 fa 02             	sar    $0x2,%edx
  2818d7:	89 c8                	mov    %ecx,%eax
  2818d9:	c1 f8 1f             	sar    $0x1f,%eax
  2818dc:	29 c2                	sub    %eax,%edx
  2818de:	8d 04 92             	lea    (%edx,%edx,4),%eax
  2818e1:	01 c0                	add    %eax,%eax
  2818e3:	29 c1                	sub    %eax,%ecx
  2818e5:	83 c1 30             	add    $0x30,%ecx
  2818e8:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  2818eb:	89 d1                	mov    %edx,%ecx
	}while(value);
  2818ed:	85 d2                	test   %edx,%edx
  2818ef:	75 dc                	jne    2818cd <itoa+0x37>
	while(tmp_buf != tbp--)
  2818f1:	8d 73 ff             	lea    -0x1(%ebx),%esi
  2818f4:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2818f7:	39 c3                	cmp    %eax,%ebx
  2818f9:	74 20                	je     28191b <itoa+0x85>
  2818fb:	89 f0                	mov    %esi,%eax
  2818fd:	89 fa                	mov    %edi,%edx
  2818ff:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  281902:	83 c2 01             	add    $0x1,%edx
  281905:	0f b6 08             	movzbl (%eax),%ecx
  281908:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  28190b:	83 e8 01             	sub    $0x1,%eax
  28190e:	39 d8                	cmp    %ebx,%eax
  281910:	75 f0                	jne    281902 <itoa+0x6c>
  281912:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281915:	29 c6                	sub    %eax,%esi
  281917:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  28191b:	c6 07 00             	movb   $0x0,(%edi)
}
  28191e:	83 c4 10             	add    $0x10,%esp
  281921:	5b                   	pop    %ebx
  281922:	5e                   	pop    %esi
  281923:	5f                   	pop    %edi
  281924:	5d                   	pop    %ebp
  281925:	c3                   	ret    

00281926 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281926:	55                   	push   %ebp
  281927:	89 e5                	mov    %esp,%ebp
  281929:	57                   	push   %edi
  28192a:	56                   	push   %esi
  28192b:	53                   	push   %ebx
  28192c:	83 ec 20             	sub    $0x20,%esp
  28192f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281932:	bb 00 00 00 00       	mov    $0x0,%ebx
  281937:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28193e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281945:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28194a:	ba 00 00 00 00       	mov    $0x0,%edx
  28194f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281953:	83 c2 04             	add    $0x4,%edx
  281956:	39 ca                	cmp    %ecx,%edx
  281958:	72 f5                	jb     28194f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28195a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28195d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281960:	83 c6 02             	add    $0x2,%esi
  281963:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281966:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28196a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28196d:	83 c3 01             	add    $0x1,%ebx
  281970:	89 c1                	mov    %eax,%ecx
  281972:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281975:	8d 79 37             	lea    0x37(%ecx),%edi
  281978:	8d 51 30             	lea    0x30(%ecx),%edx
  28197b:	83 f9 0a             	cmp    $0xa,%ecx
  28197e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281981:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  281984:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  281987:	85 c0                	test   %eax,%eax
  281989:	75 e2                	jne    28196d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  28198b:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28198e:	39 c3                	cmp    %eax,%ebx
  281990:	74 20                	je     2819b2 <xtoa+0x8c>
  281992:	89 d8                	mov    %ebx,%eax
  281994:	89 f1                	mov    %esi,%ecx
  281996:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  281999:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  28199c:	83 c1 01             	add    $0x1,%ecx
  28199f:	0f b6 10             	movzbl (%eax),%edx
  2819a2:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  2819a5:	39 f8                	cmp    %edi,%eax
  2819a7:	75 f0                	jne    281999 <xtoa+0x73>
  2819a9:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2819ac:	29 c3                	sub    %eax,%ebx
  2819ae:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  2819b2:	c6 06 00             	movb   $0x0,(%esi)
}
  2819b5:	83 c4 20             	add    $0x20,%esp
  2819b8:	5b                   	pop    %ebx
  2819b9:	5e                   	pop    %esi
  2819ba:	5f                   	pop    %edi
  2819bb:	5d                   	pop    %ebp
  2819bc:	c3                   	ret    

002819bd <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  2819bd:	55                   	push   %ebp
  2819be:	89 e5                	mov    %esp,%ebp
  2819c0:	57                   	push   %edi
  2819c1:	56                   	push   %esi
  2819c2:	53                   	push   %ebx
  2819c3:	83 ec 10             	sub    $0x10,%esp
  2819c6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  2819c9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2819cc:	e9 a8 00 00 00       	jmp    281a79 <sprintf+0xbc>
		if(*format!='%'){
  2819d1:	3c 25                	cmp    $0x25,%al
  2819d3:	74 10                	je     2819e5 <sprintf+0x28>
			*str++=*format++;
  2819d5:	83 c6 01             	add    $0x1,%esi
  2819d8:	89 75 0c             	mov    %esi,0xc(%ebp)
  2819db:	88 03                	mov    %al,(%ebx)
  2819dd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  2819e0:	e9 94 00 00 00       	jmp    281a79 <sprintf+0xbc>
		}
		else{
			format++;
  2819e5:	8d 46 01             	lea    0x1(%esi),%eax
  2819e8:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  2819eb:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  2819ef:	3c 73                	cmp    $0x73,%al
  2819f1:	74 5e                	je     281a51 <sprintf+0x94>
  2819f3:	3c 78                	cmp    $0x78,%al
  2819f5:	74 2f                	je     281a26 <sprintf+0x69>
  2819f7:	3c 64                	cmp    $0x64,%al
  2819f9:	75 75                	jne    281a70 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  2819fb:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2819fe:	50                   	push   %eax
  2819ff:	ff 37                	pushl  (%edi)
  281a01:	e8 90 fe ff ff       	call   281896 <itoa>
  281a06:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281a0a:	83 c4 08             	add    $0x8,%esp
  281a0d:	84 c0                	test   %al,%al
  281a0f:	74 5f                	je     281a70 <sprintf+0xb3>
  281a11:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281a14:	83 c3 01             	add    $0x1,%ebx
  281a17:	83 c2 01             	add    $0x1,%edx
  281a1a:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a1d:	0f b6 02             	movzbl (%edx),%eax
  281a20:	84 c0                	test   %al,%al
  281a22:	75 f0                	jne    281a14 <sprintf+0x57>
  281a24:	eb 4a                	jmp    281a70 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281a26:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281a29:	50                   	push   %eax
  281a2a:	ff 37                	pushl  (%edi)
  281a2c:	e8 f5 fe ff ff       	call   281926 <xtoa>
  281a31:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281a35:	83 c4 08             	add    $0x8,%esp
  281a38:	84 c0                	test   %al,%al
  281a3a:	74 34                	je     281a70 <sprintf+0xb3>
  281a3c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281a3f:	83 c3 01             	add    $0x1,%ebx
  281a42:	83 c2 01             	add    $0x1,%edx
  281a45:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a48:	0f b6 02             	movzbl (%edx),%eax
  281a4b:	84 c0                	test   %al,%al
  281a4d:	75 f0                	jne    281a3f <sprintf+0x82>
  281a4f:	eb 1f                	jmp    281a70 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281a51:	8b 0f                	mov    (%edi),%ecx
  281a53:	0f b6 11             	movzbl (%ecx),%edx
  281a56:	84 d2                	test   %dl,%dl
  281a58:	74 16                	je     281a70 <sprintf+0xb3>
  281a5a:	89 d8                	mov    %ebx,%eax
  281a5c:	83 c0 01             	add    $0x1,%eax
  281a5f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281a62:	89 c2                	mov    %eax,%edx
  281a64:	29 da                	sub    %ebx,%edx
  281a66:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  281a6a:	84 d2                	test   %dl,%dl
  281a6c:	75 ee                	jne    281a5c <sprintf+0x9f>
  281a6e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281a70:	83 c7 04             	add    $0x4,%edi
			format++;
  281a73:	83 c6 02             	add    $0x2,%esi
  281a76:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281a79:	8b 75 0c             	mov    0xc(%ebp),%esi
  281a7c:	0f b6 06             	movzbl (%esi),%eax
  281a7f:	84 c0                	test   %al,%al
  281a81:	0f 85 4a ff ff ff    	jne    2819d1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281a87:	c6 03 00             	movb   $0x0,(%ebx)
}
  281a8a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281a8d:	5b                   	pop    %ebx
  281a8e:	5e                   	pop    %esi
  281a8f:	5f                   	pop    %edi
  281a90:	5d                   	pop    %ebp
  281a91:	c3                   	ret    

00281a92 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281a92:	55                   	push   %ebp
  281a93:	89 e5                	mov    %esp,%ebp
  281a95:	57                   	push   %edi
  281a96:	56                   	push   %esi
  281a97:	53                   	push   %ebx
  281a98:	8b 7d 08             	mov    0x8(%ebp),%edi
  281a9b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a9e:	0f b6 17             	movzbl (%edi),%edx
  281aa1:	be 00 00 00 00       	mov    $0x0,%esi
  281aa6:	84 d2                	test   %dl,%dl
  281aa8:	74 40                	je     281aea <strcmp+0x58>
  281aaa:	eb 1d                	jmp    281ac9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  281aac:	38 ca                	cmp    %cl,%dl
  281aae:	75 0f                	jne    281abf <strcmp+0x2d>
  281ab0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281ab3:	89 c6                	mov    %eax,%esi
  281ab5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  281ab9:	84 d2                	test   %dl,%dl
  281abb:	75 1e                	jne    281adb <strcmp+0x49>
  281abd:	eb 2b                	jmp    281aea <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  281abf:	0f be c2             	movsbl %dl,%eax
  281ac2:	0f be c9             	movsbl %cl,%ecx
  281ac5:	29 c8                	sub    %ecx,%eax
  281ac7:	eb 2a                	jmp    281af3 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281ac9:	0f b6 0b             	movzbl (%ebx),%ecx
  281acc:	84 c9                	test   %cl,%cl
  281ace:	74 15                	je     281ae5 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281ad0:	b8 00 00 00 00       	mov    $0x0,%eax
  281ad5:	38 ca                	cmp    %cl,%dl
  281ad7:	74 d7                	je     281ab0 <strcmp+0x1e>
  281ad9:	eb e4                	jmp    281abf <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281adb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281adf:	84 c9                	test   %cl,%cl
  281ae1:	75 c9                	jne    281aac <strcmp+0x1a>
  281ae3:	eb 05                	jmp    281aea <strcmp+0x58>
  281ae5:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281aea:	0f be c2             	movsbl %dl,%eax
  281aed:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281af1:	29 d0                	sub    %edx,%eax
}
  281af3:	5b                   	pop    %ebx
  281af4:	5e                   	pop    %esi
  281af5:	5f                   	pop    %edi
  281af6:	5d                   	pop    %ebp
  281af7:	c3                   	ret    

00281af8 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281af8:	55                   	push   %ebp
  281af9:	89 e5                	mov    %esp,%ebp
  281afb:	57                   	push   %edi
  281afc:	56                   	push   %esi
  281afd:	53                   	push   %ebx
  281afe:	8b 75 08             	mov    0x8(%ebp),%esi
  281b01:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281b04:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281b07:	b8 00 00 00 00       	mov    $0x0,%eax
  281b0c:	85 ff                	test   %edi,%edi
  281b0e:	74 63                	je     281b73 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b10:	83 ef 01             	sub    $0x1,%edi
  281b13:	89 fa                	mov    %edi,%edx
  281b15:	74 52                	je     281b69 <strncmp+0x71>
  281b17:	eb 19                	jmp    281b32 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281b19:	38 c8                	cmp    %cl,%al
  281b1b:	75 0b                	jne    281b28 <strncmp+0x30>
  281b1d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b20:	39 fa                	cmp    %edi,%edx
  281b22:	75 27                	jne    281b4b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281b24:	89 fa                	mov    %edi,%edx
  281b26:	eb 41                	jmp    281b69 <strncmp+0x71>
		else return c1-c2;
  281b28:	0f be c0             	movsbl %al,%eax
  281b2b:	0f be c9             	movsbl %cl,%ecx
  281b2e:	29 c8                	sub    %ecx,%eax
  281b30:	eb 41                	jmp    281b73 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b32:	0f b6 06             	movzbl (%esi),%eax
  281b35:	84 c0                	test   %al,%al
  281b37:	74 24                	je     281b5d <strncmp+0x65>
  281b39:	0f b6 0b             	movzbl (%ebx),%ecx
  281b3c:	84 c9                	test   %cl,%cl
  281b3e:	74 24                	je     281b64 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281b40:	ba 00 00 00 00       	mov    $0x0,%edx
  281b45:	38 c8                	cmp    %cl,%al
  281b47:	74 d4                	je     281b1d <strncmp+0x25>
  281b49:	eb dd                	jmp    281b28 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b4b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281b4f:	84 c0                	test   %al,%al
  281b51:	74 16                	je     281b69 <strncmp+0x71>
  281b53:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281b57:	84 c9                	test   %cl,%cl
  281b59:	75 be                	jne    281b19 <strncmp+0x21>
  281b5b:	eb 0c                	jmp    281b69 <strncmp+0x71>
  281b5d:	ba 00 00 00 00       	mov    $0x0,%edx
  281b62:	eb 05                	jmp    281b69 <strncmp+0x71>
  281b64:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281b69:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281b6d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281b71:	29 d0                	sub    %edx,%eax
}
  281b73:	5b                   	pop    %ebx
  281b74:	5e                   	pop    %esi
  281b75:	5f                   	pop    %edi
  281b76:	5d                   	pop    %ebp
  281b77:	c3                   	ret    

00281b78 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281b78:	55                   	push   %ebp
  281b79:	89 e5                	mov    %esp,%ebp
  281b7b:	8b 45 08             	mov    0x8(%ebp),%eax
  281b7e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281b81:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281b84:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281b87:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281b89:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281b8c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281b93:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281b9a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281ba1:	8b 55 14             	mov    0x14(%ebp),%edx
  281ba4:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281ba7:	5d                   	pop    %ebp
  281ba8:	c3                   	ret    

00281ba9 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281ba9:	55                   	push   %ebp
  281baa:	89 e5                	mov    %esp,%ebp
  281bac:	53                   	push   %ebx
  281bad:	83 ec 04             	sub    $0x4,%esp
  281bb0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281bb3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281bb7:	75 0b                	jne    281bc4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281bb9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281bbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281bc2:	eb 52                	jmp    281c16 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281bc4:	8b 48 04             	mov    0x4(%eax),%ecx
  281bc7:	8b 10                	mov    (%eax),%edx
  281bc9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281bcc:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281bcf:	8b 48 04             	mov    0x4(%eax),%ecx
  281bd2:	8d 51 01             	lea    0x1(%ecx),%edx
  281bd5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281bd8:	3b 50 0c             	cmp    0xc(%eax),%edx
  281bdb:	75 07                	jne    281be4 <fifo32_put+0x3b>
		fifo->p = 0;
  281bdd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281be4:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281be8:	8b 50 18             	mov    0x18(%eax),%edx
  281beb:	85 d2                	test   %edx,%edx
  281bed:	74 22                	je     281c11 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281bef:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281bf4:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281bf8:	74 1c                	je     281c16 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281bfa:	83 ec 04             	sub    $0x4,%esp
  281bfd:	6a 00                	push   $0x0
  281bff:	6a ff                	push   $0xffffffff
  281c01:	52                   	push   %edx
  281c02:	e8 66 13 00 00       	call   282f6d <task_run>
  281c07:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281c0a:	b8 00 00 00 00       	mov    $0x0,%eax
  281c0f:	eb 05                	jmp    281c16 <fifo32_put+0x6d>
  281c11:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281c16:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281c19:	c9                   	leave  
  281c1a:	c3                   	ret    

00281c1b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281c1b:	55                   	push   %ebp
  281c1c:	89 e5                	mov    %esp,%ebp
  281c1e:	56                   	push   %esi
  281c1f:	53                   	push   %ebx
  281c20:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281c23:	8b 59 10             	mov    0x10(%ecx),%ebx
  281c26:	8b 71 0c             	mov    0xc(%ecx),%esi
  281c29:	39 f3                	cmp    %esi,%ebx
  281c2b:	74 20                	je     281c4d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281c2d:	8b 51 08             	mov    0x8(%ecx),%edx
  281c30:	8b 01                	mov    (%ecx),%eax
  281c32:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281c35:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281c38:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281c3a:	be 00 00 00 00       	mov    $0x0,%esi
  281c3f:	0f 44 d6             	cmove  %esi,%edx
  281c42:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281c45:	83 c3 01             	add    $0x1,%ebx
  281c48:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281c4b:	eb 05                	jmp    281c52 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281c4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281c52:	5b                   	pop    %ebx
  281c53:	5e                   	pop    %esi
  281c54:	5d                   	pop    %ebp
  281c55:	c3                   	ret    

00281c56 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281c56:	55                   	push   %ebp
  281c57:	89 e5                	mov    %esp,%ebp
  281c59:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281c5c:	8b 42 0c             	mov    0xc(%edx),%eax
  281c5f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281c62:	5d                   	pop    %ebp
  281c63:	c3                   	ret    

00281c64 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281c64:	55                   	push   %ebp
  281c65:	89 e5                	mov    %esp,%ebp
  281c67:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281c6a:	8b 45 08             	mov    0x8(%ebp),%eax
  281c6d:	a3 a4 7e 28 00       	mov    %eax,0x287ea4
	mousedata0 = data0;
  281c72:	8b 45 0c             	mov    0xc(%ebp),%eax
  281c75:	a3 a0 7e 28 00       	mov    %eax,0x287ea0

	wait_KBC_sendready();
  281c7a:	e8 1a 01 00 00       	call   281d99 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281c7f:	83 ec 08             	sub    $0x8,%esp
  281c82:	68 d4 00 00 00       	push   $0xd4
  281c87:	6a 64                	push   $0x64
  281c89:	e8 58 ee ff ff       	call   280ae6 <io_out8>
	wait_KBC_sendready();
  281c8e:	e8 06 01 00 00       	call   281d99 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281c93:	83 c4 08             	add    $0x8,%esp
  281c96:	68 f4 00 00 00       	push   $0xf4
  281c9b:	6a 60                	push   $0x60
  281c9d:	e8 44 ee ff ff       	call   280ae6 <io_out8>
	mdec->phase = 0;
  281ca2:	8b 45 10             	mov    0x10(%ebp),%eax
  281ca5:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281ca9:	83 c4 10             	add    $0x10,%esp
}
  281cac:	c9                   	leave  
  281cad:	c3                   	ret    

00281cae <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281cae:	55                   	push   %ebp
  281caf:	89 e5                	mov    %esp,%ebp
  281cb1:	56                   	push   %esi
  281cb2:	53                   	push   %ebx
  281cb3:	8b 55 08             	mov    0x8(%ebp),%edx
  281cb6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281cb9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281cbd:	84 c0                	test   %al,%al
  281cbf:	75 14                	jne    281cd5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281cc1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281cc6:	80 f9 fa             	cmp    $0xfa,%cl
  281cc9:	0f 85 82 00 00 00    	jne    281d51 <mouse_decode+0xa3>
			mdec->phase = 1;
  281ccf:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281cd3:	eb 7c                	jmp    281d51 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281cd5:	3c 01                	cmp    $0x1,%al
  281cd7:	75 17                	jne    281cf0 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281cd9:	89 cb                	mov    %ecx,%ebx
  281cdb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281cde:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281ce3:	80 fb 08             	cmp    $0x8,%bl
  281ce6:	75 69                	jne    281d51 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281ce8:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281cea:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281cee:	eb 61                	jmp    281d51 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281cf0:	3c 02                	cmp    $0x2,%al
  281cf2:	75 0e                	jne    281d02 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281cf4:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281cf7:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281cfb:	b8 00 00 00 00       	mov    $0x0,%eax
  281d00:	eb 4f                	jmp    281d51 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281d02:	3c 03                	cmp    $0x3,%al
  281d04:	75 46                	jne    281d4c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281d06:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281d09:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281d0d:	0f b6 02             	movzbl (%edx),%eax
  281d10:	89 c3                	mov    %eax,%ebx
  281d12:	83 e3 07             	and    $0x7,%ebx
  281d15:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281d18:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281d1c:	0f b6 f3             	movzbl %bl,%esi
  281d1f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281d22:	0f b6 f1             	movzbl %cl,%esi
  281d25:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281d28:	a8 10                	test   $0x10,%al
  281d2a:	74 09                	je     281d35 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281d2c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281d32:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281d35:	a8 20                	test   $0x20,%al
  281d37:	74 09                	je     281d42 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281d39:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281d3f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281d42:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281d45:	b8 01 00 00 00       	mov    $0x1,%eax
  281d4a:	eb 05                	jmp    281d51 <mouse_decode+0xa3>
	}
	return -1;
  281d4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281d51:	5b                   	pop    %ebx
  281d52:	5e                   	pop    %esi
  281d53:	5d                   	pop    %ebp
  281d54:	c3                   	ret    

00281d55 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281d55:	55                   	push   %ebp
  281d56:	89 e5                	mov    %esp,%ebp
  281d58:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281d5b:	6a 64                	push   $0x64
  281d5d:	68 a0 00 00 00       	push   $0xa0
  281d62:	e8 7f ed ff ff       	call   280ae6 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281d67:	83 c4 08             	add    $0x8,%esp
  281d6a:	6a 62                	push   $0x62
  281d6c:	6a 20                	push   $0x20
  281d6e:	e8 73 ed ff ff       	call   280ae6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d73:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d7a:	e8 45 ed ff ff       	call   280ac4 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281d7f:	83 c4 08             	add    $0x8,%esp
  281d82:	03 05 a0 7e 28 00    	add    0x287ea0,%eax
  281d88:	50                   	push   %eax
  281d89:	ff 35 a4 7e 28 00    	pushl  0x287ea4
  281d8f:	e8 15 fe ff ff       	call   281ba9 <fifo32_put>
	return;
  281d94:	83 c4 10             	add    $0x10,%esp
}
  281d97:	c9                   	leave  
  281d98:	c3                   	ret    

00281d99 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281d99:	55                   	push   %ebp
  281d9a:	89 e5                	mov    %esp,%ebp
  281d9c:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281d9f:	83 ec 0c             	sub    $0xc,%esp
  281da2:	6a 64                	push   $0x64
  281da4:	e8 1b ed ff ff       	call   280ac4 <io_in8>
  281da9:	83 c4 10             	add    $0x10,%esp
  281dac:	a8 02                	test   $0x2,%al
  281dae:	75 ef                	jne    281d9f <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281db0:	c9                   	leave  
  281db1:	c3                   	ret    

00281db2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281db2:	55                   	push   %ebp
  281db3:	89 e5                	mov    %esp,%ebp
  281db5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281db8:	8b 45 08             	mov    0x8(%ebp),%eax
  281dbb:	a3 a8 7e 28 00       	mov    %eax,0x287ea8
	keydata0 = data0;
  281dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281dc3:	a3 ac 7e 28 00       	mov    %eax,0x287eac
	wait_KBC_sendready();
  281dc8:	e8 cc ff ff ff       	call   281d99 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281dcd:	83 ec 08             	sub    $0x8,%esp
  281dd0:	6a 60                	push   $0x60
  281dd2:	6a 64                	push   $0x64
  281dd4:	e8 0d ed ff ff       	call   280ae6 <io_out8>
	wait_KBC_sendready();
  281dd9:	e8 bb ff ff ff       	call   281d99 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281dde:	83 c4 08             	add    $0x8,%esp
  281de1:	6a 47                	push   $0x47
  281de3:	6a 60                	push   $0x60
  281de5:	e8 fc ec ff ff       	call   280ae6 <io_out8>
	return;
  281dea:	83 c4 10             	add    $0x10,%esp
}
  281ded:	c9                   	leave  
  281dee:	c3                   	ret    

00281def <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281def:	55                   	push   %ebp
  281df0:	89 e5                	mov    %esp,%ebp
  281df2:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281df5:	6a 61                	push   $0x61
  281df7:	6a 20                	push   $0x20
  281df9:	e8 e8 ec ff ff       	call   280ae6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281dfe:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281e05:	e8 ba ec ff ff       	call   280ac4 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281e0a:	83 c4 08             	add    $0x8,%esp
  281e0d:	03 05 ac 7e 28 00    	add    0x287eac,%eax
  281e13:	50                   	push   %eax
  281e14:	ff 35 a8 7e 28 00    	pushl  0x287ea8
  281e1a:	e8 8a fd ff ff       	call   281ba9 <fifo32_put>
	return;
  281e1f:	83 c4 10             	add    $0x10,%esp
}
  281e22:	c9                   	leave  
  281e23:	c3                   	ret    

00281e24 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281e24:	55                   	push   %ebp
  281e25:	89 e5                	mov    %esp,%ebp
  281e27:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281e2a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281e2f:	83 fa 7f             	cmp    $0x7f,%edx
  281e32:	77 16                	ja     281e4a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281e34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281e38:	75 09                	jne    281e43 <key_char+0x1f>
  281e3a:	0f b6 82 40 54 28 00 	movzbl 0x285440(%edx),%eax
  281e41:	eb 07                	jmp    281e4a <key_char+0x26>
		else return keytable1[key];
  281e43:	0f b6 82 c0 53 28 00 	movzbl 0x2853c0(%edx),%eax
	}
	else return 0;
}
  281e4a:	5d                   	pop    %ebp
  281e4b:	c3                   	ret    

00281e4c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281e4c:	55                   	push   %ebp
  281e4d:	89 e5                	mov    %esp,%ebp
  281e4f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281e52:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281e56:	e8 aa ec ff ff       	call   280b05 <io_load_eflags>
  281e5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e61:	83 ec 0c             	sub    $0xc,%esp
  281e64:	50                   	push   %eax
  281e65:	e8 9e ec ff ff       	call   280b08 <io_store_eflags>
  281e6a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281e6d:	e8 93 ec ff ff       	call   280b05 <io_load_eflags>
  281e72:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e78:	25 00 00 04 00       	and    $0x40000,%eax
  281e7d:	85 c0                	test   %eax,%eax
  281e7f:	74 04                	je     281e85 <memtest+0x39>
		flg486 = 1;
  281e81:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281e85:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281e8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e8f:	83 ec 0c             	sub    $0xc,%esp
  281e92:	50                   	push   %eax
  281e93:	e8 70 ec ff ff       	call   280b08 <io_store_eflags>
  281e98:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281e9b:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281e9f:	74 1d                	je     281ebe <memtest+0x72>
	{
		cr0 = load_cr0;
  281ea1:	c7 45 ec 2f 0b 28 00 	movl   $0x280b2f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281ea8:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281eaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281eb2:	83 ec 0c             	sub    $0xc,%esp
  281eb5:	50                   	push   %eax
  281eb6:	e8 78 ec ff ff       	call   280b33 <store_cr0>
  281ebb:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281ebe:	83 ec 08             	sub    $0x8,%esp
  281ec1:	ff 75 0c             	pushl  0xc(%ebp)
  281ec4:	ff 75 08             	pushl  0x8(%ebp)
  281ec7:	e8 6f ec ff ff       	call   280b3b <_memtest_sub>
  281ecc:	83 c4 10             	add    $0x10,%esp
  281ecf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281ed2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281ed6:	74 1e                	je     281ef6 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281ed8:	e8 52 ec ff ff       	call   280b2f <load_cr0>
  281edd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281ee0:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281ee7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281eea:	83 ec 0c             	sub    $0xc,%esp
  281eed:	50                   	push   %eax
  281eee:	e8 40 ec ff ff       	call   280b33 <store_cr0>
  281ef3:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281ef9:	c9                   	leave  
  281efa:	c3                   	ret    

00281efb <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281efb:	55                   	push   %ebp
  281efc:	89 e5                	mov    %esp,%ebp
  281efe:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281f01:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281f08:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281f0f:	8b 45 08             	mov    0x8(%ebp),%eax
  281f12:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281f15:	eb 67                	jmp    281f7e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281f17:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281f1a:	05 fc 0f 00 00       	add    $0xffc,%eax
  281f1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281f22:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f25:	8b 00                	mov    (%eax),%eax
  281f27:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f2d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f30:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281f32:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f35:	8b 00                	mov    (%eax),%eax
  281f37:	f7 d0                	not    %eax
  281f39:	89 c2                	mov    %eax,%edx
  281f3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f3e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281f40:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f43:	8b 00                	mov    (%eax),%eax
  281f45:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281f48:	74 0d                	je     281f57 <memtest_sub+0x5c>
  281f4a:	eb 01                	jmp    281f4d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281f4c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281f4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f50:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f53:	89 10                	mov    %edx,(%eax)
			break;
  281f55:	eb 2f                	jmp    281f86 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281f57:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f5a:	8b 00                	mov    (%eax),%eax
  281f5c:	f7 d0                	not    %eax
  281f5e:	89 c2                	mov    %eax,%edx
  281f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f63:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f68:	8b 00                	mov    (%eax),%eax
  281f6a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281f6d:	75 dd                	jne    281f4c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281f6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f72:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f75:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281f77:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281f7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281f81:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f84:	76 91                	jbe    281f17 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281f89:	c9                   	leave  
  281f8a:	c3                   	ret    

00281f8b <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281f8b:	55                   	push   %ebp
  281f8c:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281f8e:	8b 45 08             	mov    0x8(%ebp),%eax
  281f91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281f97:	8b 45 08             	mov    0x8(%ebp),%eax
  281f9a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281fa1:	8b 45 08             	mov    0x8(%ebp),%eax
  281fa4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281fab:	8b 45 08             	mov    0x8(%ebp),%eax
  281fae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281fb5:	90                   	nop
}
  281fb6:	5d                   	pop    %ebp
  281fb7:	c3                   	ret    

00281fb8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281fb8:	55                   	push   %ebp
  281fb9:	89 e5                	mov    %esp,%ebp
  281fbb:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281fbe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281fc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281fcc:	eb 14                	jmp    281fe2 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281fce:	8b 45 08             	mov    0x8(%ebp),%eax
  281fd1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281fd4:	83 c2 02             	add    $0x2,%edx
  281fd7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281fdb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281fde:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281fe2:	8b 45 08             	mov    0x8(%ebp),%eax
  281fe5:	8b 00                	mov    (%eax),%eax
  281fe7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281fea:	77 e2                	ja     281fce <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281fec:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281fef:	c9                   	leave  
  281ff0:	c3                   	ret    

00281ff1 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281ff1:	55                   	push   %ebp
  281ff2:	89 e5                	mov    %esp,%ebp
  281ff4:	53                   	push   %ebx
  281ff5:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281ff8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281fff:	e9 bd 00 00 00       	jmp    2820c1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  282004:	8b 45 08             	mov    0x8(%ebp),%eax
  282007:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28200a:	83 c2 02             	add    $0x2,%edx
  28200d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282011:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282014:	0f 82 a3 00 00 00    	jb     2820bd <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  28201a:	8b 45 08             	mov    0x8(%ebp),%eax
  28201d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282020:	83 c2 02             	add    $0x2,%edx
  282023:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282026:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  282029:	8b 45 08             	mov    0x8(%ebp),%eax
  28202c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28202f:	83 c2 02             	add    $0x2,%edx
  282032:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282035:	8b 45 0c             	mov    0xc(%ebp),%eax
  282038:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28203b:	8b 45 08             	mov    0x8(%ebp),%eax
  28203e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282041:	83 c2 02             	add    $0x2,%edx
  282044:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  282047:	8b 45 08             	mov    0x8(%ebp),%eax
  28204a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28204d:	83 c2 02             	add    $0x2,%edx
  282050:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282054:	2b 45 0c             	sub    0xc(%ebp),%eax
  282057:	89 c2                	mov    %eax,%edx
  282059:	8b 45 08             	mov    0x8(%ebp),%eax
  28205c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  28205f:	83 c1 02             	add    $0x2,%ecx
  282062:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  282066:	8b 45 08             	mov    0x8(%ebp),%eax
  282069:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28206c:	83 c2 02             	add    $0x2,%edx
  28206f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282073:	85 c0                	test   %eax,%eax
  282075:	75 41                	jne    2820b8 <memman_alloc+0xc7>
			{
				man->frees--;
  282077:	8b 45 08             	mov    0x8(%ebp),%eax
  28207a:	8b 00                	mov    (%eax),%eax
  28207c:	8d 50 ff             	lea    -0x1(%eax),%edx
  28207f:	8b 45 08             	mov    0x8(%ebp),%eax
  282082:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  282084:	eb 28                	jmp    2820ae <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  282086:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282089:	8d 50 01             	lea    0x1(%eax),%edx
  28208c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28208f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282092:	8d 58 02             	lea    0x2(%eax),%ebx
  282095:	8b 45 08             	mov    0x8(%ebp),%eax
  282098:	83 c2 02             	add    $0x2,%edx
  28209b:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  28209e:	8b 02                	mov    (%edx),%eax
  2820a0:	8b 52 04             	mov    0x4(%edx),%edx
  2820a3:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2820a6:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  2820aa:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820ae:	8b 45 08             	mov    0x8(%ebp),%eax
  2820b1:	8b 00                	mov    (%eax),%eax
  2820b3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820b6:	77 ce                	ja     282086 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  2820b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2820bb:	eb 17                	jmp    2820d4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  2820bd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820c1:	8b 45 08             	mov    0x8(%ebp),%eax
  2820c4:	8b 00                	mov    (%eax),%eax
  2820c6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820c9:	0f 87 35 ff ff ff    	ja     282004 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  2820cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2820d4:	83 c4 10             	add    $0x10,%esp
  2820d7:	5b                   	pop    %ebx
  2820d8:	5d                   	pop    %ebp
  2820d9:	c3                   	ret    

002820da <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  2820da:	55                   	push   %ebp
  2820db:	89 e5                	mov    %esp,%ebp
  2820dd:	53                   	push   %ebx
  2820de:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820e1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2820e8:	eb 15                	jmp    2820ff <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  2820ea:	8b 45 08             	mov    0x8(%ebp),%eax
  2820ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820f0:	83 c2 02             	add    $0x2,%edx
  2820f3:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2820f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2820f9:	77 10                	ja     28210b <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820fb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820ff:	8b 45 08             	mov    0x8(%ebp),%eax
  282102:	8b 00                	mov    (%eax),%eax
  282104:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282107:	7f e1                	jg     2820ea <memman_free+0x10>
  282109:	eb 01                	jmp    28210c <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  28210b:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  28210c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  282110:	0f 8e f2 00 00 00    	jle    282208 <memman_free+0x12e>
  282116:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282119:	8d 50 ff             	lea    -0x1(%eax),%edx
  28211c:	8b 45 08             	mov    0x8(%ebp),%eax
  28211f:	83 c2 02             	add    $0x2,%edx
  282122:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282125:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282128:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28212b:	8b 45 08             	mov    0x8(%ebp),%eax
  28212e:	83 c1 02             	add    $0x2,%ecx
  282131:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282135:	01 d0                	add    %edx,%eax
  282137:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28213a:	0f 85 c8 00 00 00    	jne    282208 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282140:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282143:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282146:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282149:	8d 50 ff             	lea    -0x1(%eax),%edx
  28214c:	8b 45 08             	mov    0x8(%ebp),%eax
  28214f:	83 c2 02             	add    $0x2,%edx
  282152:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282156:	8b 45 10             	mov    0x10(%ebp),%eax
  282159:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28215c:	8b 45 08             	mov    0x8(%ebp),%eax
  28215f:	8d 53 02             	lea    0x2(%ebx),%edx
  282162:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282166:	8b 45 08             	mov    0x8(%ebp),%eax
  282169:	8b 00                	mov    (%eax),%eax
  28216b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28216e:	0f 8e 8a 00 00 00    	jle    2821fe <memman_free+0x124>
  282174:	8b 55 0c             	mov    0xc(%ebp),%edx
  282177:	8b 45 10             	mov    0x10(%ebp),%eax
  28217a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28217d:	8b 45 08             	mov    0x8(%ebp),%eax
  282180:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282183:	83 c2 02             	add    $0x2,%edx
  282186:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282189:	39 c1                	cmp    %eax,%ecx
  28218b:	75 71                	jne    2821fe <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  28218d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282190:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282193:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282196:	8d 50 ff             	lea    -0x1(%eax),%edx
  282199:	8b 45 08             	mov    0x8(%ebp),%eax
  28219c:	83 c2 02             	add    $0x2,%edx
  28219f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  2821a3:	8b 45 08             	mov    0x8(%ebp),%eax
  2821a6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  2821a9:	83 c1 02             	add    $0x2,%ecx
  2821ac:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2821b0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2821b3:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b6:	8d 53 02             	lea    0x2(%ebx),%edx
  2821b9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  2821bd:	eb 28                	jmp    2821e7 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  2821bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821c2:	8d 50 01             	lea    0x1(%eax),%edx
  2821c5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2821c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821cb:	8d 58 02             	lea    0x2(%eax),%ebx
  2821ce:	8b 45 08             	mov    0x8(%ebp),%eax
  2821d1:	83 c2 02             	add    $0x2,%edx
  2821d4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2821d7:	8b 02                	mov    (%edx),%eax
  2821d9:	8b 52 04             	mov    0x4(%edx),%edx
  2821dc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2821df:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  2821e3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2821e7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ea:	8b 00                	mov    (%eax),%eax
  2821ec:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821ef:	7f ce                	jg     2821bf <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  2821f1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821f4:	8b 00                	mov    (%eax),%eax
  2821f6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2821f9:	8b 45 08             	mov    0x8(%ebp),%eax
  2821fc:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  2821fe:	b8 00 00 00 00       	mov    $0x0,%eax
  282203:	e9 1f 01 00 00       	jmp    282327 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  282208:	8b 45 08             	mov    0x8(%ebp),%eax
  28220b:	8b 00                	mov    (%eax),%eax
  28220d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282210:	7e 52                	jle    282264 <memman_free+0x18a>
  282212:	8b 55 0c             	mov    0xc(%ebp),%edx
  282215:	8b 45 10             	mov    0x10(%ebp),%eax
  282218:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28221b:	8b 45 08             	mov    0x8(%ebp),%eax
  28221e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282221:	83 c2 02             	add    $0x2,%edx
  282224:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282227:	39 c1                	cmp    %eax,%ecx
  282229:	75 39                	jne    282264 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28222b:	8b 45 08             	mov    0x8(%ebp),%eax
  28222e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282231:	8d 4a 02             	lea    0x2(%edx),%ecx
  282234:	8b 55 0c             	mov    0xc(%ebp),%edx
  282237:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28223a:	8b 45 08             	mov    0x8(%ebp),%eax
  28223d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282240:	83 c2 02             	add    $0x2,%edx
  282243:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282247:	8b 45 10             	mov    0x10(%ebp),%eax
  28224a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28224d:	8b 45 08             	mov    0x8(%ebp),%eax
  282250:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282253:	83 c2 02             	add    $0x2,%edx
  282256:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28225a:	b8 00 00 00 00       	mov    $0x0,%eax
  28225f:	e9 c3 00 00 00       	jmp    282327 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282264:	8b 45 08             	mov    0x8(%ebp),%eax
  282267:	8b 00                	mov    (%eax),%eax
  282269:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28226e:	0f 8f 8a 00 00 00    	jg     2822fe <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282274:	8b 45 08             	mov    0x8(%ebp),%eax
  282277:	8b 00                	mov    (%eax),%eax
  282279:	83 e8 01             	sub    $0x1,%eax
  28227c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28227f:	eb 28                	jmp    2822a9 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  282281:	8b 45 f4             	mov    -0xc(%ebp),%eax
  282284:	83 c0 01             	add    $0x1,%eax
  282287:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28228a:	8d 58 02             	lea    0x2(%eax),%ebx
  28228d:	8b 45 08             	mov    0x8(%ebp),%eax
  282290:	8b 55 f4             	mov    -0xc(%ebp),%edx
  282293:	83 c2 02             	add    $0x2,%edx
  282296:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282299:	8b 02                	mov    (%edx),%eax
  28229b:	8b 52 04             	mov    0x4(%edx),%edx
  28229e:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2822a1:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  2822a5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  2822a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2822ac:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2822af:	7d d0                	jge    282281 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2822b1:	8b 45 08             	mov    0x8(%ebp),%eax
  2822b4:	8b 50 04             	mov    0x4(%eax),%edx
  2822b7:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ba:	8b 00                	mov    (%eax),%eax
  2822bc:	39 c2                	cmp    %eax,%edx
  2822be:	7d 0b                	jge    2822cb <memman_free+0x1f1>
  2822c0:	8b 45 08             	mov    0x8(%ebp),%eax
  2822c3:	8b 10                	mov    (%eax),%edx
  2822c5:	8b 45 08             	mov    0x8(%ebp),%eax
  2822c8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2822cb:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ce:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822d1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822d4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2822d7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2822da:	8b 45 08             	mov    0x8(%ebp),%eax
  2822dd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822e0:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822e3:	8b 55 10             	mov    0x10(%ebp),%edx
  2822e6:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  2822ea:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ed:	8b 00                	mov    (%eax),%eax
  2822ef:	8d 50 01             	lea    0x1(%eax),%edx
  2822f2:	8b 45 08             	mov    0x8(%ebp),%eax
  2822f5:	89 10                	mov    %edx,(%eax)
		return 0;
  2822f7:	b8 00 00 00 00       	mov    $0x0,%eax
  2822fc:	eb 29                	jmp    282327 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  2822fe:	8b 45 08             	mov    0x8(%ebp),%eax
  282301:	8b 40 0c             	mov    0xc(%eax),%eax
  282304:	8d 50 01             	lea    0x1(%eax),%edx
  282307:	8b 45 08             	mov    0x8(%ebp),%eax
  28230a:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  28230d:	8b 45 08             	mov    0x8(%ebp),%eax
  282310:	8b 40 08             	mov    0x8(%eax),%eax
  282313:	89 c2                	mov    %eax,%edx
  282315:	8b 45 10             	mov    0x10(%ebp),%eax
  282318:	01 d0                	add    %edx,%eax
  28231a:	89 c2                	mov    %eax,%edx
  28231c:	8b 45 08             	mov    0x8(%ebp),%eax
  28231f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282327:	83 c4 10             	add    $0x10,%esp
  28232a:	5b                   	pop    %ebx
  28232b:	5d                   	pop    %ebp
  28232c:	c3                   	ret    

0028232d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28232d:	55                   	push   %ebp
  28232e:	89 e5                	mov    %esp,%ebp
  282330:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282333:	8b 45 0c             	mov    0xc(%ebp),%eax
  282336:	05 ff 0f 00 00       	add    $0xfff,%eax
  28233b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282340:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282343:	ff 75 0c             	pushl  0xc(%ebp)
  282346:	ff 75 08             	pushl  0x8(%ebp)
  282349:	e8 a3 fc ff ff       	call   281ff1 <memman_alloc>
  28234e:	83 c4 08             	add    $0x8,%esp
  282351:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282354:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282357:	c9                   	leave  
  282358:	c3                   	ret    

00282359 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282359:	55                   	push   %ebp
  28235a:	89 e5                	mov    %esp,%ebp
  28235c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28235f:	8b 45 10             	mov    0x10(%ebp),%eax
  282362:	05 ff 0f 00 00       	add    $0xfff,%eax
  282367:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28236c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28236f:	ff 75 10             	pushl  0x10(%ebp)
  282372:	ff 75 0c             	pushl  0xc(%ebp)
  282375:	ff 75 08             	pushl  0x8(%ebp)
  282378:	e8 5d fd ff ff       	call   2820da <memman_free>
  28237d:	83 c4 0c             	add    $0xc,%esp
  282380:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  282383:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282386:	c9                   	leave  
  282387:	c3                   	ret    

00282388 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  282388:	55                   	push   %ebp
  282389:	89 e5                	mov    %esp,%ebp
  28238b:	57                   	push   %edi
  28238c:	56                   	push   %esi
  28238d:	53                   	push   %ebx
  28238e:	83 ec 14             	sub    $0x14,%esp
  282391:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  282394:	68 14 2c 00 00       	push   $0x2c14
  282399:	57                   	push   %edi
  28239a:	e8 8e ff ff ff       	call   28232d <memman_alloc_4k>
  28239f:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  2823a1:	83 c4 10             	add    $0x10,%esp
  2823a4:	85 c0                	test   %eax,%eax
  2823a6:	74 6a                	je     282412 <shtctl_init+0x8a>
  2823a8:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  2823aa:	8b 45 0c             	mov    0xc(%ebp),%eax
  2823ad:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  2823af:	83 ec 08             	sub    $0x8,%esp
  2823b2:	8b 45 10             	mov    0x10(%ebp),%eax
  2823b5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2823b9:	50                   	push   %eax
  2823ba:	57                   	push   %edi
  2823bb:	e8 6d ff ff ff       	call   28232d <memman_alloc_4k>
  2823c0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2823c3:	83 c4 10             	add    $0x10,%esp
  2823c6:	85 c0                	test   %eax,%eax
  2823c8:	75 19                	jne    2823e3 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2823ca:	83 ec 04             	sub    $0x4,%esp
  2823cd:	68 14 2c 00 00       	push   $0x2c14
  2823d2:	56                   	push   %esi
  2823d3:	57                   	push   %edi
  2823d4:	e8 80 ff ff ff       	call   282359 <memman_free_4k>
		ctl = 0;
		goto err;
  2823d9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2823dc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  2823e1:	eb 2f                	jmp    282412 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  2823e3:	8b 45 10             	mov    0x10(%ebp),%eax
  2823e6:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  2823e9:	8b 45 14             	mov    0x14(%ebp),%eax
  2823ec:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  2823ef:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  2823f6:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  2823fc:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  282402:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  282408:	89 70 04             	mov    %esi,0x4(%eax)
  28240b:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  28240e:	39 d8                	cmp    %ebx,%eax
  282410:	75 f0                	jne    282402 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
err:
	return ctl;
}
  282412:	89 f0                	mov    %esi,%eax
  282414:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282417:	5b                   	pop    %ebx
  282418:	5e                   	pop    %esi
  282419:	5f                   	pop    %edi
  28241a:	5d                   	pop    %ebp
  28241b:	c3                   	ret    

0028241c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28241c:	55                   	push   %ebp
  28241d:	89 e5                	mov    %esp,%ebp
  28241f:	56                   	push   %esi
  282420:	53                   	push   %ebx
  282421:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282424:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28242b:	74 12                	je     28243f <sheet_alloc+0x23>
  28242d:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282433:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282438:	83 3a 00             	cmpl   $0x0,(%edx)
  28243b:	75 3c                	jne    282479 <sheet_alloc+0x5d>
  28243d:	eb 05                	jmp    282444 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28243f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282444:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28244b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28244e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282451:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282458:	00 00 00 
			sht->height = -1;
  28245b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  282462:	ff ff ff 
			sht->task = 0;
  282465:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  28246c:	00 00 00 00 
			return sht;
  282470:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  282477:	eb 12                	jmp    28248b <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282479:	83 c0 01             	add    $0x1,%eax
  28247c:	83 c2 28             	add    $0x28,%edx
  28247f:	3d 00 01 00 00       	cmp    $0x100,%eax
  282484:	75 b2                	jne    282438 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  282486:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28248b:	5b                   	pop    %ebx
  28248c:	5e                   	pop    %esi
  28248d:	5d                   	pop    %ebp
  28248e:	c3                   	ret    

0028248f <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  28248f:	55                   	push   %ebp
  282490:	89 e5                	mov    %esp,%ebp
  282492:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  282495:	8b 55 0c             	mov    0xc(%ebp),%edx
  282498:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  28249a:	8b 55 10             	mov    0x10(%ebp),%edx
  28249d:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  2824a0:	8b 55 14             	mov    0x14(%ebp),%edx
  2824a3:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  2824a6:	8b 55 18             	mov    0x18(%ebp),%edx
  2824a9:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  2824ac:	5d                   	pop    %ebp
  2824ad:	c3                   	ret    

002824ae <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  2824ae:	55                   	push   %ebp
  2824af:	89 e5                	mov    %esp,%ebp
  2824b1:	57                   	push   %edi
  2824b2:	56                   	push   %esi
  2824b3:	53                   	push   %ebx
  2824b4:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  2824b7:	8b 45 08             	mov    0x8(%ebp),%eax
  2824ba:	8b 00                	mov    (%eax),%eax
  2824bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2824bf:	8b 45 08             	mov    0x8(%ebp),%eax
  2824c2:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2824c6:	0f 88 80 00 00 00    	js     28254c <sheet_refresh_ob+0x9e>
  2824cc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2824d3:	8b 45 08             	mov    0x8(%ebp),%eax
  2824d6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2824d9:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2824dd:	8b 02                	mov    (%edx),%eax
  2824df:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  2824e2:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  2824e6:	7e 55                	jle    28253d <sheet_refresh_ob+0x8f>
  2824e8:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  2824ed:	89 f8                	mov    %edi,%eax
  2824ef:	03 42 10             	add    0x10(%edx),%eax
  2824f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  2824f5:	8b 4a 04             	mov    0x4(%edx),%ecx
  2824f8:	85 c9                	test   %ecx,%ecx
  2824fa:	7e 39                	jle    282535 <sheet_refresh_ob+0x87>
  2824fc:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  282501:	0f af cf             	imul   %edi,%ecx
  282504:	8b 75 f0             	mov    -0x10(%ebp),%esi
  282507:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28250a:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  28250e:	0f b6 cb             	movzbl %bl,%ecx
  282511:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282514:	74 15                	je     28252b <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  282516:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282519:	8b 75 ec             	mov    -0x14(%ebp),%esi
  28251c:	0f af 71 08          	imul   0x8(%ecx),%esi
  282520:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282523:	01 c1                	add    %eax,%ecx
  282525:	03 4a 0c             	add    0xc(%edx),%ecx
  282528:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28252b:	83 c0 01             	add    $0x1,%eax
  28252e:	8b 4a 04             	mov    0x4(%edx),%ecx
  282531:	39 c1                	cmp    %eax,%ecx
  282533:	7f cc                	jg     282501 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282535:	83 c7 01             	add    $0x1,%edi
  282538:	39 7a 08             	cmp    %edi,0x8(%edx)
  28253b:	7f b0                	jg     2824ed <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28253d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282541:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282544:	8b 7d 08             	mov    0x8(%ebp),%edi
  282547:	39 47 10             	cmp    %eax,0x10(%edi)
  28254a:	7d 87                	jge    2824d3 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28254c:	83 c4 10             	add    $0x10,%esp
  28254f:	5b                   	pop    %ebx
  282550:	5e                   	pop    %esi
  282551:	5f                   	pop    %edi
  282552:	5d                   	pop    %ebp
  282553:	c3                   	ret    

00282554 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282554:	55                   	push   %ebp
  282555:	89 e5                	mov    %esp,%ebp
  282557:	57                   	push   %edi
  282558:	56                   	push   %esi
  282559:	53                   	push   %ebx
  28255a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28255d:	8b 45 08             	mov    0x8(%ebp),%eax
  282560:	8b 00                	mov    (%eax),%eax
  282562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282565:	8b 45 08             	mov    0x8(%ebp),%eax
  282568:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  28256c:	0f 88 a7 00 00 00    	js     282619 <sheet_refreshsub1+0xc5>
  282572:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  282579:	8b 45 08             	mov    0x8(%ebp),%eax
  28257c:	8b 7d e0             	mov    -0x20(%ebp),%edi
  28257f:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282583:	8b 01                	mov    (%ecx),%eax
  282585:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  282588:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  28258c:	7e 78                	jle    282606 <sheet_refreshsub1+0xb2>
  28258e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  282595:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  282598:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  28259b:	8b 71 04             	mov    0x4(%ecx),%esi
  28259e:	85 f6                	test   %esi,%esi
  2825a0:	7e 58                	jle    2825fa <sheet_refreshsub1+0xa6>
  2825a2:	b8 00 00 00 00       	mov    $0x0,%eax
  2825a7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  2825aa:	89 c2                	mov    %eax,%edx
  2825ac:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  2825af:	3b 55 0c             	cmp    0xc(%ebp),%edx
  2825b2:	7c 3c                	jl     2825f0 <sheet_refreshsub1+0x9c>
  2825b4:	3b 55 14             	cmp    0x14(%ebp),%edx
  2825b7:	7d 37                	jge    2825f0 <sheet_refreshsub1+0x9c>
  2825b9:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2825bc:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2825bf:	7c 2f                	jl     2825f0 <sheet_refreshsub1+0x9c>
  2825c1:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2825c4:	7d 2a                	jge    2825f0 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2825c6:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2825ca:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2825cd:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2825d0:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2825d4:	89 f3                	mov    %esi,%ebx
  2825d6:	0f b6 fb             	movzbl %bl,%edi
  2825d9:	3b 79 14             	cmp    0x14(%ecx),%edi
  2825dc:	74 12                	je     2825f0 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2825de:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2825e1:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2825e4:	0f af 7b 08          	imul   0x8(%ebx),%edi
  2825e8:	03 55 e4             	add    -0x1c(%ebp),%edx
  2825eb:	89 f3                	mov    %esi,%ebx
  2825ed:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  2825f0:	83 c0 01             	add    $0x1,%eax
  2825f3:	8b 71 04             	mov    0x4(%ecx),%esi
  2825f6:	39 c6                	cmp    %eax,%esi
  2825f8:	7f b0                	jg     2825aa <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  2825fa:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  2825fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  282601:	39 41 08             	cmp    %eax,0x8(%ecx)
  282604:	7f 8f                	jg     282595 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282606:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  28260a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  28260d:	8b 7d 08             	mov    0x8(%ebp),%edi
  282610:	39 47 10             	cmp    %eax,0x10(%edi)
  282613:	0f 8d 60 ff ff ff    	jge    282579 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  282619:	83 c4 14             	add    $0x14,%esp
  28261c:	5b                   	pop    %ebx
  28261d:	5e                   	pop    %esi
  28261e:	5f                   	pop    %edi
  28261f:	5d                   	pop    %ebp
  282620:	c3                   	ret    

00282621 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282621:	55                   	push   %ebp
  282622:	89 e5                	mov    %esp,%ebp
  282624:	57                   	push   %edi
  282625:	56                   	push   %esi
  282626:	53                   	push   %ebx
  282627:	83 ec 34             	sub    $0x34,%esp
  28262a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28262d:	8b 55 10             	mov    0x10(%ebp),%edx
  282630:	8b 75 14             	mov    0x14(%ebp),%esi
  282633:	8b 7d 18             	mov    0x18(%ebp),%edi
  282636:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  282639:	8b 45 08             	mov    0x8(%ebp),%eax
  28263c:	8b 00                	mov    (%eax),%eax
  28263e:	89 45 c0             	mov    %eax,-0x40(%ebp)
  282641:	8b 45 08             	mov    0x8(%ebp),%eax
  282644:	8b 40 04             	mov    0x4(%eax),%eax
  282647:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28264a:	b8 00 00 00 00       	mov    $0x0,%eax
  28264f:	85 c9                	test   %ecx,%ecx
  282651:	0f 48 c8             	cmovs  %eax,%ecx
  282654:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  282657:	85 d2                	test   %edx,%edx
  282659:	0f 48 d0             	cmovs  %eax,%edx
  28265c:	89 55 c8             	mov    %edx,-0x38(%ebp)
	struct SHEET *sht;

	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28265f:	8b 55 08             	mov    0x8(%ebp),%edx
  282662:	8b 52 08             	mov    0x8(%edx),%edx
  282665:	39 f2                	cmp    %esi,%edx
  282667:	0f 4e f2             	cmovle %edx,%esi
  28266a:	89 75 d0             	mov    %esi,-0x30(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  28266d:	8b 55 08             	mov    0x8(%ebp),%edx
  282670:	8b 52 0c             	mov    0xc(%edx),%edx
  282673:	39 fa                	cmp    %edi,%edx
  282675:	0f 4e fa             	cmovle %edx,%edi
  282678:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28267b:	85 db                	test   %ebx,%ebx
  28267d:	0f 49 c3             	cmovns %ebx,%eax
  282680:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282683:	8b 7d 08             	mov    0x8(%ebp),%edi
  282686:	3b 47 10             	cmp    0x10(%edi),%eax
  282689:	0f 8f 9c 01 00 00    	jg     28282b <sheet_refreshsub2+0x20a>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  28268f:	8b 45 08             	mov    0x8(%ebp),%eax
  282692:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  282695:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  282699:	8b 02                	mov    (%edx),%eax
  28269b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  28269e:	8b 72 0c             	mov    0xc(%edx),%esi
		by0 = vy0 - sht->vy0;
  2826a1:	8b 7a 10             	mov    0x10(%edx),%edi
		bx1 = vx1 - sht->vx0;
  2826a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2826a7:	29 f0                	sub    %esi,%eax
		by1 = vy1 - sht->vy0;
  2826a9:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  2826ac:	89 7d f0             	mov    %edi,-0x10(%ebp)
  2826af:	29 fb                	sub    %edi,%ebx
  2826b1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  2826b4:	29 f1                	sub    %esi,%ecx
  2826b6:	bf 00 00 00 00       	mov    $0x0,%edi
  2826bb:	0f 48 cf             	cmovs  %edi,%ecx
  2826be:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  2826c1:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2826c4:	2b 4d f0             	sub    -0x10(%ebp),%ecx
  2826c7:	0f 49 f9             	cmovns %ecx,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2826ca:	8b 4a 04             	mov    0x4(%edx),%ecx
  2826cd:	39 c8                	cmp    %ecx,%eax
  2826cf:	0f 4e c8             	cmovle %eax,%ecx
  2826d2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2826d5:	8b 42 08             	mov    0x8(%edx),%eax
  2826d8:	39 c3                	cmp    %eax,%ebx
  2826da:	0f 4e c3             	cmovle %ebx,%eax
  2826dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(sht->col_inv == -1)
  2826e0:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  2826e4:	74 0d                	je     2826f3 <sheet_refreshsub2+0xd2>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  2826e6:	39 f8                	cmp    %edi,%eax
  2826e8:	0f 8f dd 00 00 00    	jg     2827cb <sheet_refreshsub2+0x1aa>
  2826ee:	e9 25 01 00 00       	jmp    282818 <sheet_refreshsub2+0x1f7>
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
  2826f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826f6:	09 f0                	or     %esi,%eax
  2826f8:	a8 03                	test   $0x3,%al
  2826fa:	75 06                	jne    282702 <sheet_refreshsub2+0xe1>
  2826fc:	f6 45 f0 03          	testb  $0x3,-0x10(%ebp)
  282700:	74 0c                	je     28270e <sheet_refreshsub2+0xed>
  282702:	89 fe                	mov    %edi,%esi
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  282704:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  282707:	7f 71                	jg     28277a <sheet_refreshsub2+0x159>
  282709:	e9 0a 01 00 00       	jmp    282818 <sheet_refreshsub2+0x1f7>
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
  28270e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282711:	01 c6                	add    %eax,%esi
  282713:	89 75 e4             	mov    %esi,-0x1c(%ebp)
				bx1 = (bx1-bx0)/4;
  282716:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  282719:	29 c3                	sub    %eax,%ebx
  28271b:	89 d8                	mov    %ebx,%eax
  28271d:	8d 4b 03             	lea    0x3(%ebx),%ecx
  282720:	85 db                	test   %ebx,%ebx
  282722:	0f 48 c1             	cmovs  %ecx,%eax
  282725:	c1 f8 02             	sar    $0x2,%eax
  282728:	89 c6                	mov    %eax,%esi
				for(by=by0;by<by1;by++)
  28272a:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  28272d:	0f 8e e5 00 00 00    	jle    282818 <sheet_refreshsub2+0x1f7>
				{

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
  282733:	89 f9                	mov    %edi,%ecx
  282735:	03 4a 10             	add    0x10(%edx),%ecx
  282738:	8b 45 08             	mov    0x8(%ebp),%eax
  28273b:	0f af 48 08          	imul   0x8(%eax),%ecx
  28273f:	03 4d e4             	add    -0x1c(%ebp),%ecx
					int *q = (int *) &buf[by*sht->bxsize+bx0];
  282742:	89 fb                	mov    %edi,%ebx
  282744:	0f af 5a 04          	imul   0x4(%edx),%ebx
  282748:	03 5d d8             	add    -0x28(%ebp),%ebx

					for(bx=0;bx<bx1;bx++)
  28274b:	85 f6                	test   %esi,%esi
  28274d:	7e 1e                	jle    28276d <sheet_refreshsub2+0x14c>
  28274f:	b8 00 00 00 00       	mov    $0x0,%eax
					{
						p[bx]=q[bx];
  282754:	03 5d ec             	add    -0x14(%ebp),%ebx
  282757:	03 4d e8             	add    -0x18(%ebp),%ecx
  28275a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28275d:	8b 14 83             	mov    (%ebx,%eax,4),%edx
  282760:	89 14 81             	mov    %edx,(%ecx,%eax,4)

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
					int *q = (int *) &buf[by*sht->bxsize+bx0];

					for(bx=0;bx<bx1;bx++)
  282763:	83 c0 01             	add    $0x1,%eax
  282766:	39 c6                	cmp    %eax,%esi
  282768:	75 f3                	jne    28275d <sheet_refreshsub2+0x13c>
  28276a:	8b 55 f0             	mov    -0x10(%ebp),%edx
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
				bx1 = (bx1-bx0)/4;
				for(by=by0;by<by1;by++)
  28276d:	83 c7 01             	add    $0x1,%edi
  282770:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282773:	75 be                	jne    282733 <sheet_refreshsub2+0x112>
  282775:	e9 9e 00 00 00       	jmp    282818 <sheet_refreshsub2+0x1f7>
			}
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
  28277a:	89 f7                	mov    %esi,%edi
  28277c:	03 7a 10             	add    0x10(%edx),%edi
					for(bx=bx0;bx<bx1;bx++)
  28277f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282782:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282785:	7e 3a                	jle    2827c1 <sheet_refreshsub2+0x1a0>
  282787:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  28278a:	89 7d e0             	mov    %edi,-0x20(%ebp)
					{
						vx = sht->vx0+bx;
						map[vy*ctl->xsize+vx] = buf[by*sht->bxsize+bx];
  28278d:	89 f1                	mov    %esi,%ecx
  28278f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  282792:	0f af 4f 04          	imul   0x4(%edi),%ecx
  282796:	8b 55 ec             	mov    -0x14(%ebp),%edx
  282799:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  28279c:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
  2827a0:	89 da                	mov    %ebx,%edx
  2827a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2827a5:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  2827a8:	0f af 59 08          	imul   0x8(%ecx),%ebx
  2827ac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2827af:	01 c1                	add    %eax,%ecx
  2827b1:	03 4f 0c             	add    0xc(%edi),%ecx
  2827b4:	88 14 19             	mov    %dl,(%ecx,%ebx,1)
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
					for(bx=bx0;bx<bx1;bx++)
  2827b7:	83 c0 01             	add    $0x1,%eax
  2827ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  2827bd:	75 ce                	jne    28278d <sheet_refreshsub2+0x16c>
  2827bf:	89 fa                	mov    %edi,%edx
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  2827c1:	83 c6 01             	add    $0x1,%esi
  2827c4:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  2827c7:	75 b1                	jne    28277a <sheet_refreshsub2+0x159>
  2827c9:	eb 4d                	jmp    282818 <sheet_refreshsub2+0x1f7>
		}
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
  2827cb:	89 f8                	mov    %edi,%eax
  2827cd:	03 42 10             	add    0x10(%edx),%eax
  2827d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				for(bx=bx0;bx<bx1;bx++)
  2827d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2827d6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2827d9:	7e 35                	jle    282810 <sheet_refreshsub2+0x1ef>
				{
					vx = sht->vx0+bx;
					c  = buf[by*sht->bxsize+bx];
  2827db:	89 f9                	mov    %edi,%ecx
  2827dd:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2827e1:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2827e4:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2827e7:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
					if(c!=sht->col_inv)
  2827eb:	0f b6 cb             	movzbl %bl,%ecx
  2827ee:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2827f1:	74 15                	je     282808 <sheet_refreshsub2+0x1e7>
						map[vy*ctl->xsize+vx] = c;
  2827f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2827f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  2827f9:	0f af 71 08          	imul   0x8(%ecx),%esi
  2827fd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282800:	01 c1                	add    %eax,%ecx
  282802:	03 4a 0c             	add    0xc(%edx),%ecx
  282805:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
				for(bx=bx0;bx<bx1;bx++)
  282808:	83 c0 01             	add    $0x1,%eax
  28280b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  28280e:	75 cb                	jne    2827db <sheet_refreshsub2+0x1ba>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  282810:	83 c7 01             	add    $0x1,%edi
  282813:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282816:	75 b3                	jne    2827cb <sheet_refreshsub2+0x1aa>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282818:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
  28281c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28281f:	8b 7d 08             	mov    0x8(%ebp),%edi
  282822:	39 47 10             	cmp    %eax,0x10(%edi)
  282825:	0f 8d 64 fe ff ff    	jge    28268f <sheet_refreshsub2+0x6e>
				}
			}
		}

	}
	if(((vx1-vx0)&3)==0)
  28282b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  28282e:	2b 45 c4             	sub    -0x3c(%ebp),%eax
  282831:	a8 03                	test   $0x3,%al
  282833:	74 0d                	je     282842 <sheet_refreshsub2+0x221>
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  282835:	8b 7d c8             	mov    -0x38(%ebp),%edi
  282838:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  28283b:	7f 79                	jg     2828b6 <sheet_refreshsub2+0x295>
  28283d:	e9 8c 00 00 00       	jmp    2828ce <sheet_refreshsub2+0x2ad>
		}

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
  282842:	8d 50 03             	lea    0x3(%eax),%edx
  282845:	85 c0                	test   %eax,%eax
  282847:	0f 48 c2             	cmovs  %edx,%eax
  28284a:	c1 f8 02             	sar    $0x2,%eax
  28284d:	89 c3                	mov    %eax,%ebx
		for(vy=vy0;vy<vy1;vy++)
  28284f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282852:	39 45 cc             	cmp    %eax,-0x34(%ebp)
  282855:	7e 77                	jle    2828ce <sheet_refreshsub2+0x2ad>
  282857:	89 c1                	mov    %eax,%ecx
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
  282859:	8b 45 08             	mov    0x8(%ebp),%eax
  28285c:	89 ca                	mov    %ecx,%edx
  28285e:	0f af 50 08          	imul   0x8(%eax),%edx
  282862:	03 55 c4             	add    -0x3c(%ebp),%edx
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  282865:	85 db                	test   %ebx,%ebx
  282867:	7e 1b                	jle    282884 <sheet_refreshsub2+0x263>
  282869:	b8 00 00 00 00       	mov    $0x0,%eax
				d[vx] = s[vx];
  28286e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  282871:	8d 34 17             	lea    (%edi,%edx,1),%esi
  282874:	03 55 c0             	add    -0x40(%ebp),%edx
  282877:	8b 3c 86             	mov    (%esi,%eax,4),%edi
  28287a:	89 3c 82             	mov    %edi,(%edx,%eax,4)
		for(vy=vy0;vy<vy1;vy++)
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  28287d:	83 c0 01             	add    $0x1,%eax
  282880:	39 c3                	cmp    %eax,%ebx
  282882:	75 f3                	jne    282877 <sheet_refreshsub2+0x256>

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
		for(vy=vy0;vy<vy1;vy++)
  282884:	83 c1 01             	add    $0x1,%ecx
  282887:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28288a:	75 cd                	jne    282859 <sheet_refreshsub2+0x238>
  28288c:	eb 40                	jmp    2828ce <sheet_refreshsub2+0x2ad>
  28288e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  282891:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282894:	0f af 47 08          	imul   0x8(%edi),%eax
  282898:	01 d0                	add    %edx,%eax
  28289a:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  28289e:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
  2828a1:	83 c2 01             	add    $0x1,%edx
  2828a4:	3b 55 d0             	cmp    -0x30(%ebp),%edx
  2828a7:	75 e8                	jne    282891 <sheet_refreshsub2+0x270>
  2828a9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  2828ac:	83 c1 01             	add    $0x1,%ecx
  2828af:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  2828b2:	74 1a                	je     2828ce <sheet_refreshsub2+0x2ad>
  2828b4:	eb 0c                	jmp    2828c2 <sheet_refreshsub2+0x2a1>
  2828b6:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  2828b9:	8b 75 e8             	mov    -0x18(%ebp),%esi
  2828bc:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2828bf:	8b 7d 08             	mov    0x8(%ebp),%edi
			for(vx=vx0;vx<vx1;vx++)
  2828c2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  2828c5:	89 c2                	mov    %eax,%edx
  2828c7:	39 45 d0             	cmp    %eax,-0x30(%ebp)
  2828ca:	7f c2                	jg     28288e <sheet_refreshsub2+0x26d>
  2828cc:	eb de                	jmp    2828ac <sheet_refreshsub2+0x28b>
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
	}
}
  2828ce:	83 c4 34             	add    $0x34,%esp
  2828d1:	5b                   	pop    %ebx
  2828d2:	5e                   	pop    %esi
  2828d3:	5f                   	pop    %edi
  2828d4:	5d                   	pop    %ebp
  2828d5:	c3                   	ret    

002828d6 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  2828d6:	55                   	push   %ebp
  2828d7:	89 e5                	mov    %esp,%ebp
  2828d9:	53                   	push   %ebx
  2828da:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
	struct SHTCTL *ctl = sht->ctl;
	sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  2828dd:	8b 48 10             	mov    0x10(%eax),%ecx
  2828e0:	8b 50 0c             	mov    0xc(%eax),%edx
  2828e3:	ff 70 18             	pushl  0x18(%eax)
  2828e6:	89 cb                	mov    %ecx,%ebx
  2828e8:	03 5d 18             	add    0x18(%ebp),%ebx
  2828eb:	53                   	push   %ebx
  2828ec:	89 d3                	mov    %edx,%ebx
  2828ee:	03 5d 14             	add    0x14(%ebp),%ebx
  2828f1:	53                   	push   %ebx
  2828f2:	03 4d 10             	add    0x10(%ebp),%ecx
  2828f5:	51                   	push   %ecx
  2828f6:	03 55 0c             	add    0xc(%ebp),%edx
  2828f9:	52                   	push   %edx
  2828fa:	ff 70 20             	pushl  0x20(%eax)
  2828fd:	e8 1f fd ff ff       	call   282621 <sheet_refreshsub2>
	//}
	return;
  282902:	83 c4 18             	add    $0x18,%esp
}
  282905:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282908:	c9                   	leave  
  282909:	c3                   	ret    

0028290a <sheet_updown>:
}


//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  28290a:	55                   	push   %ebp
  28290b:	89 e5                	mov    %esp,%ebp
  28290d:	57                   	push   %edi
  28290e:	56                   	push   %esi
  28290f:	53                   	push   %ebx
  282910:	8b 75 08             	mov    0x8(%ebp),%esi
  282913:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  282916:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  282919:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  28291c:	8b 79 10             	mov    0x10(%ecx),%edi
  28291f:	8d 57 01             	lea    0x1(%edi),%edx
  282922:	39 da                	cmp    %ebx,%edx
  282924:	0f 4f d3             	cmovg  %ebx,%edx
  282927:	85 d2                	test   %edx,%edx
  282929:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  28292e:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282931:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282934:	39 d8                	cmp    %ebx,%eax
  282936:	7e 59                	jle    282991 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282938:	85 db                	test   %ebx,%ebx
  28293a:	79 09                	jns    282945 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28293c:	8b 59 10             	mov    0x10(%ecx),%ebx
  28293f:	39 d8                	cmp    %ebx,%eax
  282941:	7c 1c                	jl     28295f <sheet_updown+0x55>
  282943:	eb 31                	jmp    282976 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282945:	8d 50 ff             	lea    -0x1(%eax),%edx
  282948:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28294c:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282950:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282953:	89 d0                	mov    %edx,%eax
  282955:	39 d3                	cmp    %edx,%ebx
  282957:	75 ec                	jne    282945 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282959:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28295d:	eb 1d                	jmp    28297c <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28295f:	8d 50 01             	lea    0x1(%eax),%edx
  282962:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282966:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28296a:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28296d:	8b 59 10             	mov    0x10(%ecx),%ebx
  282970:	89 d0                	mov    %edx,%eax
  282972:	39 d3                	cmp    %edx,%ebx
  282974:	7f e9                	jg     28295f <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282976:	83 eb 01             	sub    $0x1,%ebx
  282979:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28297c:	ff 76 08             	pushl  0x8(%esi)
  28297f:	ff 76 04             	pushl  0x4(%esi)
  282982:	6a 00                	push   $0x0
  282984:	6a 00                	push   $0x0
  282986:	56                   	push   %esi
  282987:	e8 4a ff ff ff       	call   2828d6 <sheet_refresh>
  28298c:	83 c4 14             	add    $0x14,%esp
  28298f:	eb 5a                	jmp    2829eb <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282991:	39 d8                	cmp    %ebx,%eax
  282993:	7d 56                	jge    2829eb <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282995:	85 c0                	test   %eax,%eax
  282997:	78 1a                	js     2829b3 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282999:	8d 50 01             	lea    0x1(%eax),%edx
  28299c:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  2829a0:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  2829a4:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  2829a7:	89 d0                	mov    %edx,%eax
  2829a9:	39 d3                	cmp    %edx,%ebx
  2829ab:	75 ec                	jne    282999 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2829ad:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  2829b1:	eb 25                	jmp    2829d8 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  2829b3:	8b 41 10             	mov    0x10(%ecx),%eax
  2829b6:	8d 50 01             	lea    0x1(%eax),%edx
  2829b9:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  2829bc:	39 d3                	cmp    %edx,%ebx
  2829be:	7d 14                	jge    2829d4 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  2829c0:	8d 42 ff             	lea    -0x1(%edx),%eax
  2829c3:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  2829c7:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  2829cb:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  2829ce:	89 c2                	mov    %eax,%edx
  2829d0:	39 c3                	cmp    %eax,%ebx
  2829d2:	75 ec                	jne    2829c0 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2829d4:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  2829d8:	ff 76 08             	pushl  0x8(%esi)
  2829db:	ff 76 04             	pushl  0x4(%esi)
  2829de:	6a 00                	push   $0x0
  2829e0:	6a 00                	push   $0x0
  2829e2:	56                   	push   %esi
  2829e3:	e8 ee fe ff ff       	call   2828d6 <sheet_refresh>
  2829e8:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  2829eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2829ee:	5b                   	pop    %ebx
  2829ef:	5e                   	pop    %esi
  2829f0:	5f                   	pop    %edi
  2829f1:	5d                   	pop    %ebp
  2829f2:	c3                   	ret    

002829f3 <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  2829f3:	55                   	push   %ebp
  2829f4:	89 e5                	mov    %esp,%ebp
  2829f6:	57                   	push   %edi
  2829f7:	56                   	push   %esi
  2829f8:	53                   	push   %ebx
  2829f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2829fc:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  2829ff:	8b 43 0c             	mov    0xc(%ebx),%eax
  282a02:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  282a05:	8b 7d 0c             	mov    0xc(%ebp),%edi
  282a08:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  282a0b:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  282a0e:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a12:	78 36                	js     282a4a <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  282a14:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  282a17:	6a 00                	push   $0x0
  282a19:	89 d1                	mov    %edx,%ecx
  282a1b:	03 4b 08             	add    0x8(%ebx),%ecx
  282a1e:	51                   	push   %ecx
  282a1f:	89 c1                	mov    %eax,%ecx
  282a21:	03 4b 04             	add    0x4(%ebx),%ecx
  282a24:	51                   	push   %ecx
  282a25:	52                   	push   %edx
  282a26:	50                   	push   %eax
  282a27:	57                   	push   %edi
  282a28:	e8 f4 fb ff ff       	call   282621 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  282a2d:	ff 73 18             	pushl  0x18(%ebx)
  282a30:	89 f0                	mov    %esi,%eax
  282a32:	03 43 08             	add    0x8(%ebx),%eax
  282a35:	50                   	push   %eax
  282a36:	8b 45 0c             	mov    0xc(%ebp),%eax
  282a39:	03 43 04             	add    0x4(%ebx),%eax
  282a3c:	50                   	push   %eax
  282a3d:	56                   	push   %esi
  282a3e:	ff 75 0c             	pushl  0xc(%ebp)
  282a41:	57                   	push   %edi
  282a42:	e8 da fb ff ff       	call   282621 <sheet_refreshsub2>
  282a47:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  282a4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282a4d:	5b                   	pop    %ebx
  282a4e:	5e                   	pop    %esi
  282a4f:	5f                   	pop    %edi
  282a50:	5d                   	pop    %ebp
  282a51:	c3                   	ret    

00282a52 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282a52:	55                   	push   %ebp
  282a53:	89 e5                	mov    %esp,%ebp
  282a55:	53                   	push   %ebx
  282a56:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282a59:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a5d:	78 0b                	js     282a6a <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282a5f:	6a ff                	push   $0xffffffff
  282a61:	53                   	push   %ebx
  282a62:	e8 a3 fe ff ff       	call   28290a <sheet_updown>
  282a67:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  282a6a:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282a71:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282a74:	c9                   	leave  
  282a75:	c3                   	ret    

00282a76 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282a76:	55                   	push   %ebp
  282a77:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  282a79:	80 3d d0 7e 28 00 00 	cmpb   $0x0,0x287ed0
  282a80:	74 11                	je     282a93 <timer_alloc+0x1d>
  282a82:	ba e4 7e 28 00       	mov    $0x287ee4,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a87:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  282a8c:	80 3a 00             	cmpb   $0x0,(%edx)
  282a8f:	75 2b                	jne    282abc <timer_alloc+0x46>
  282a91:	eb 05                	jmp    282a98 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a93:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282a98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282a9f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282aa2:	8d 0c 8d c0 7e 28 00 	lea    0x287ec0(,%ecx,4),%ecx
  282aa9:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  282aad:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  282ab1:	01 d0                	add    %edx,%eax
  282ab3:	8d 04 85 c8 7e 28 00 	lea    0x287ec8(,%eax,4),%eax
  282aba:	eb 12                	jmp    282ace <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282abc:	83 c0 01             	add    $0x1,%eax
  282abf:	83 c2 14             	add    $0x14,%edx
  282ac2:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282ac7:	75 c3                	jne    282a8c <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282ac9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282ace:	5d                   	pop    %ebp
  282acf:	c3                   	ret    

00282ad0 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282ad0:	55                   	push   %ebp
  282ad1:	89 e5                	mov    %esp,%ebp
  282ad3:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282ad6:	6a 34                	push   $0x34
  282ad8:	6a 43                	push   $0x43
  282ada:	e8 07 e0 ff ff       	call   280ae6 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282adf:	83 c4 08             	add    $0x8,%esp
  282ae2:	68 9c 00 00 00       	push   $0x9c
  282ae7:	6a 40                	push   $0x40
  282ae9:	e8 f8 df ff ff       	call   280ae6 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282aee:	83 c4 08             	add    $0x8,%esp
  282af1:	6a 2e                	push   $0x2e
  282af3:	6a 40                	push   $0x40
  282af5:	e8 ec df ff ff       	call   280ae6 <io_out8>
  282afa:	b8 d0 7e 28 00       	mov    $0x287ed0,%eax
  282aff:	ba e0 a5 28 00       	mov    $0x28a5e0,%edx
  282b04:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282b07:	c6 00 00             	movb   $0x0,(%eax)
  282b0a:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282b0d:	39 d0                	cmp    %edx,%eax
  282b0f:	75 f6                	jne    282b07 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282b11:	e8 60 ff ff ff       	call   282a76 <timer_alloc>
	t->next = 0;
  282b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282b1c:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282b23:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282b27:	a3 d8 a5 28 00       	mov    %eax,0x28a5d8
	timerctl.next = 0xffffffff;
  282b2c:	c7 05 c4 7e 28 00 ff 	movl   $0xffffffff,0x287ec4
  282b33:	ff ff ff 
	return;
}
  282b36:	c9                   	leave  
  282b37:	c3                   	ret    

00282b38 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282b38:	55                   	push   %ebp
  282b39:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282b3b:	8b 45 08             	mov    0x8(%ebp),%eax
  282b3e:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282b42:	5d                   	pop    %ebp
  282b43:	c3                   	ret    

00282b44 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282b44:	55                   	push   %ebp
  282b45:	89 e5                	mov    %esp,%ebp
  282b47:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282b4a:	8b 55 0c             	mov    0xc(%ebp),%edx
  282b4d:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282b50:	8b 55 10             	mov    0x10(%ebp),%edx
  282b53:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282b56:	5d                   	pop    %ebp
  282b57:	c3                   	ret    

00282b58 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282b58:	55                   	push   %ebp
  282b59:	89 e5                	mov    %esp,%ebp
  282b5b:	57                   	push   %edi
  282b5c:	56                   	push   %esi
  282b5d:	53                   	push   %ebx
  282b5e:	83 ec 0c             	sub    $0xc,%esp
  282b61:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282b64:	a1 c0 7e 28 00       	mov    0x287ec0,%eax
  282b69:	03 45 0c             	add    0xc(%ebp),%eax
  282b6c:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282b6f:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282b73:	e8 8d df ff ff       	call   280b05 <io_load_eflags>
  282b78:	89 c6                	mov    %eax,%esi
	io_cli();
  282b7a:	e8 33 df ff ff       	call   280ab2 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282b7f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282b82:	8b 3d d8 a5 28 00    	mov    0x28a5d8,%edi
  282b88:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282b8b:	77 1e                	ja     282bab <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282b8d:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282b8f:	89 1d d8 a5 28 00    	mov    %ebx,0x28a5d8
		timerctl.next = timer->timeout;
  282b95:	8b 43 04             	mov    0x4(%ebx),%eax
  282b98:	a3 c4 7e 28 00       	mov    %eax,0x287ec4
		io_store_eflags(e);
  282b9d:	83 ec 0c             	sub    $0xc,%esp
  282ba0:	56                   	push   %esi
  282ba1:	e8 62 df ff ff       	call   280b08 <io_store_eflags>
		return;
  282ba6:	83 c4 10             	add    $0x10,%esp
  282ba9:	eb 3e                	jmp    282be9 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282bab:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282bad:	85 d2                	test   %edx,%edx
  282baf:	74 2c                	je     282bdd <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282bb1:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282bb4:	77 21                	ja     282bd7 <timer_settime+0x7f>
  282bb6:	eb 07                	jmp    282bbf <timer_settime+0x67>
  282bb8:	3b 48 04             	cmp    0x4(%eax),%ecx
  282bbb:	77 18                	ja     282bd5 <timer_settime+0x7d>
  282bbd:	eb 04                	jmp    282bc3 <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282bbf:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282bc1:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282bc3:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282bc5:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282bc7:	83 ec 0c             	sub    $0xc,%esp
  282bca:	56                   	push   %esi
  282bcb:	e8 38 df ff ff       	call   280b08 <io_store_eflags>
			return;
  282bd0:	83 c4 10             	add    $0x10,%esp
  282bd3:	eb 14                	jmp    282be9 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282bd5:	89 c2                	mov    %eax,%edx
  282bd7:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282bd9:	85 c0                	test   %eax,%eax
  282bdb:	75 db                	jne    282bb8 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282bdd:	83 ec 0c             	sub    $0xc,%esp
  282be0:	56                   	push   %esi
  282be1:	e8 22 df ff ff       	call   280b08 <io_store_eflags>
	return;
  282be6:	83 c4 10             	add    $0x10,%esp
}
  282be9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282bec:	5b                   	pop    %ebx
  282bed:	5e                   	pop    %esi
  282bee:	5f                   	pop    %edi
  282bef:	5d                   	pop    %ebp
  282bf0:	c3                   	ret    

00282bf1 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282bf1:	55                   	push   %ebp
  282bf2:	89 e5                	mov    %esp,%ebp
  282bf4:	56                   	push   %esi
  282bf5:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282bf6:	83 ec 08             	sub    $0x8,%esp
  282bf9:	6a 60                	push   $0x60
  282bfb:	6a 20                	push   $0x20
  282bfd:	e8 e4 de ff ff       	call   280ae6 <io_out8>
	timerctl.count ++;
  282c02:	a1 c0 7e 28 00       	mov    0x287ec0,%eax
  282c07:	8d 50 01             	lea    0x1(%eax),%edx
  282c0a:	89 15 c0 7e 28 00    	mov    %edx,0x287ec0
	
	if(timerctl.count >= timerctl.next)
  282c10:	83 c4 10             	add    $0x10,%esp
  282c13:	3b 15 c4 7e 28 00    	cmp    0x287ec4,%edx
  282c19:	72 69                	jb     282c84 <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282c1b:	8b 1d d8 a5 28 00    	mov    0x28a5d8,%ebx
		while(t)
  282c21:	85 db                	test   %ebx,%ebx
  282c23:	75 46                	jne    282c6b <inthandler20+0x7a>
  282c25:	eb 5d                	jmp    282c84 <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282c27:	8b 43 04             	mov    0x4(%ebx),%eax
  282c2a:	3b 05 c0 7e 28 00    	cmp    0x287ec0,%eax
  282c30:	77 2c                	ja     282c5e <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282c32:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282c36:	39 1d e0 a5 28 00    	cmp    %ebx,0x28a5e0
  282c3c:	74 13                	je     282c51 <inthandler20+0x60>
  282c3e:	83 ec 08             	sub    $0x8,%esp
  282c41:	ff 73 10             	pushl  0x10(%ebx)
  282c44:	ff 73 0c             	pushl  0xc(%ebx)
  282c47:	e8 5d ef ff ff       	call   281ba9 <fifo32_put>
  282c4c:	83 c4 10             	add    $0x10,%esp
  282c4f:	eb 05                	jmp    282c56 <inthandler20+0x65>
				else ts=1;
  282c51:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282c56:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282c58:	85 db                	test   %ebx,%ebx
  282c5a:	75 cb                	jne    282c27 <inthandler20+0x36>
  282c5c:	eb 1b                	jmp    282c79 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282c5e:	a3 c4 7e 28 00       	mov    %eax,0x287ec4
				timerctl.t0 = t;
  282c63:	89 1d d8 a5 28 00    	mov    %ebx,0x28a5d8
				break;
  282c69:	eb 0e                	jmp    282c79 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282c6b:	8b 43 04             	mov    0x4(%ebx),%eax
  282c6e:	be 00 00 00 00       	mov    $0x0,%esi
  282c73:	39 c2                	cmp    %eax,%edx
  282c75:	73 bb                	jae    282c32 <inthandler20+0x41>
  282c77:	eb e5                	jmp    282c5e <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282c79:	89 f0                	mov    %esi,%eax
  282c7b:	84 c0                	test   %al,%al
  282c7d:	74 05                	je     282c84 <inthandler20+0x93>
  282c7f:	e8 fa 04 00 00       	call   28317e <task_switch>
	return;
}
  282c84:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282c87:	5b                   	pop    %ebx
  282c88:	5e                   	pop    %esi
  282c89:	5d                   	pop    %ebp
  282c8a:	c3                   	ret    

00282c8b <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282c8b:	55                   	push   %ebp
  282c8c:	89 e5                	mov    %esp,%ebp
  282c8e:	56                   	push   %esi
  282c8f:	53                   	push   %ebx
  282c90:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282c93:	e8 6d de ff ff       	call   280b05 <io_load_eflags>
  282c98:	89 c6                	mov    %eax,%esi
	io_cli();
  282c9a:	e8 13 de ff ff       	call   280ab2 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282c9f:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282ca3:	75 3e                	jne    282ce3 <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282ca5:	8b 15 d8 a5 28 00    	mov    0x28a5d8,%edx
  282cab:	39 d3                	cmp    %edx,%ebx
  282cad:	75 13                	jne    282cc2 <timer_cancel+0x37>
		{
			t = timer->next;
  282caf:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282cb1:	a3 d8 a5 28 00       	mov    %eax,0x28a5d8
			timerctl.next = t->timeout;
  282cb6:	8b 40 04             	mov    0x4(%eax),%eax
  282cb9:	a3 c4 7e 28 00       	mov    %eax,0x287ec4
  282cbe:	eb 0c                	jmp    282ccc <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282cc0:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282cc2:	8b 02                	mov    (%edx),%eax
  282cc4:	39 c3                	cmp    %eax,%ebx
  282cc6:	75 f8                	jne    282cc0 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282cc8:	8b 03                	mov    (%ebx),%eax
  282cca:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282ccc:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282cd0:	83 ec 0c             	sub    $0xc,%esp
  282cd3:	56                   	push   %esi
  282cd4:	e8 2f de ff ff       	call   280b08 <io_store_eflags>
		return 1;
  282cd9:	83 c4 10             	add    $0x10,%esp
  282cdc:	b8 01 00 00 00       	mov    $0x1,%eax
  282ce1:	eb 11                	jmp    282cf4 <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282ce3:	83 ec 0c             	sub    $0xc,%esp
  282ce6:	56                   	push   %esi
  282ce7:	e8 1c de ff ff       	call   280b08 <io_store_eflags>
	return 0;
  282cec:	83 c4 10             	add    $0x10,%esp
  282cef:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282cf4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282cf7:	5b                   	pop    %ebx
  282cf8:	5e                   	pop    %esi
  282cf9:	5d                   	pop    %ebp
  282cfa:	c3                   	ret    

00282cfb <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282cfb:	55                   	push   %ebp
  282cfc:	89 e5                	mov    %esp,%ebp
  282cfe:	57                   	push   %edi
  282cff:	56                   	push   %esi
  282d00:	53                   	push   %ebx
  282d01:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282d04:	e8 fc dd ff ff       	call   280b05 <io_load_eflags>
  282d09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282d0c:	e8 a1 dd ff ff       	call   280ab2 <io_cli>
  282d11:	bb c8 7e 28 00       	mov    $0x287ec8,%ebx
  282d16:	bf d8 a5 28 00       	mov    $0x28a5d8,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282d1b:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282d1f:	74 1e                	je     282d3f <timer_cancelall+0x44>
  282d21:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282d25:	74 18                	je     282d3f <timer_cancelall+0x44>
  282d27:	8b 45 08             	mov    0x8(%ebp),%eax
  282d2a:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282d2d:	75 10                	jne    282d3f <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282d2f:	83 ec 0c             	sub    $0xc,%esp
  282d32:	53                   	push   %ebx
  282d33:	e8 53 ff ff ff       	call   282c8b <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282d38:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282d3c:	83 c4 10             	add    $0x10,%esp
  282d3f:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282d42:	39 fb                	cmp    %edi,%ebx
  282d44:	75 d5                	jne    282d1b <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282d46:	83 ec 0c             	sub    $0xc,%esp
  282d49:	ff 75 e4             	pushl  -0x1c(%ebp)
  282d4c:	e8 b7 dd ff ff       	call   280b08 <io_store_eflags>
	return;
  282d51:	83 c4 10             	add    $0x10,%esp
}
  282d54:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282d57:	5b                   	pop    %ebx
  282d58:	5e                   	pop    %esi
  282d59:	5f                   	pop    %edi
  282d5a:	5d                   	pop    %ebp
  282d5b:	c3                   	ret    
  282d5c:	66 90                	xchg   %ax,%ax
  282d5e:	66 90                	xchg   %ax,%ax

00282d60 <load_tr>:
  282d60:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282d65:	c3                   	ret    

00282d66 <farjmp>:
  282d66:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282d6a:	c3                   	ret    

00282d6b <farcall>:
  282d6b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282d6f:	c3                   	ret    

00282d70 <asm_end_app>:
  282d70:	8b 20                	mov    (%eax),%esp
  282d72:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282d79:	61                   	popa   
  282d7a:	c3                   	ret    

00282d7b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282d7b:	55                   	push   %ebp
  282d7c:	89 e5                	mov    %esp,%ebp
  282d7e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282d81:	e8 2a dd ff ff       	call   280ab0 <io_hlt>
  282d86:	eb f9                	jmp    282d81 <task_idle+0x6>

00282d88 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282d88:	55                   	push   %ebp
  282d89:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282d8b:	8b 0d dc a5 28 00    	mov    0x28a5dc,%ecx
  282d91:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282d98:	74 16                	je     282db0 <task_alloc+0x28>
  282d9a:	8d 91 b8 10 00 00    	lea    0x10b8(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282da0:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282da5:	83 3a 00             	cmpl   $0x0,(%edx)
  282da8:	0f 85 af 00 00 00    	jne    282e5d <task_alloc+0xd5>
  282dae:	eb 05                	jmp    282db5 <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282db0:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282db5:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
			task->flags = 1;
  282dbb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282dbe:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282dc5:	00 00 00 
			task->tss.eflags = 0x202;
  282dc8:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282dcf:	02 00 00 
			task->tss.eax = 0;
  282dd2:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282dd9:	00 00 00 
			task->tss.ecx = 0;
  282ddc:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282de3:	00 00 00 
			task->tss.edx = 0;
  282de6:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282ded:	00 00 00 
			task->tss.ebx = 0;
  282df0:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282df7:	00 00 00 
			task->tss.ebp = 0;
  282dfa:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282e01:	00 00 00 
			task->tss.esi = 0;
  282e04:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282e0b:	00 00 00 
			task->tss.edi = 0;
  282e0e:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282e15:	00 00 00 
			task->tss.es  = 0;
  282e18:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282e1f:	00 00 00 
			task->tss.ds  = 0;
  282e22:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282e29:	00 00 00 
			task->tss.fs  = 0;
  282e2c:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282e33:	00 00 00 
			task->tss.gs  = 0;
  282e36:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282e3d:	00 00 00 
			task->tss.iomap = 0x40000000;
  282e40:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282e47:	00 00 40 
			task->tss.ss0 = 0;
  282e4a:	c7 82 2c 10 00 00 00 	movl   $0x0,0x102c(%edx)
  282e51:	00 00 00 
			return task;
  282e54:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282e5b:	eb 19                	jmp    282e76 <task_alloc+0xee>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e5d:	83 c0 01             	add    $0x1,%eax
  282e60:	81 c2 bc 00 00 00    	add    $0xbc,%edx
  282e66:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282e6b:	0f 85 34 ff ff ff    	jne    282da5 <task_alloc+0x1d>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282e71:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282e76:	5d                   	pop    %ebp
  282e77:	c3                   	ret    

00282e78 <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282e78:	55                   	push   %ebp
  282e79:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282e7b:	8b 15 dc a5 28 00    	mov    0x28a5dc,%edx
  282e81:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282e83:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282e89:	6b c0 66             	imul   $0x66,%eax,%eax
  282e8c:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282e90:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282e94:	5d                   	pop    %ebp
  282e95:	c3                   	ret    

00282e96 <task_add>:

void task_add(struct TASK *task)
{
  282e96:	55                   	push   %ebp
  282e97:	89 e5                	mov    %esp,%ebp
  282e99:	56                   	push   %esi
  282e9a:	53                   	push   %ebx
  282e9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282e9e:	8b 35 dc a5 28 00    	mov    0x28a5dc,%esi
  282ea4:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282ea7:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282ead:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282eaf:	8b 50 08             	mov    0x8(%eax),%edx
  282eb2:	83 fa 64             	cmp    $0x64,%edx
  282eb5:	74 14                	je     282ecb <task_add+0x35>
	tl->tasks[tl->running] = task;
  282eb7:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282eba:	01 ca                	add    %ecx,%edx
  282ebc:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282ec0:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282ec4:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282ecb:	5b                   	pop    %ebx
  282ecc:	5e                   	pop    %esi
  282ecd:	5d                   	pop    %ebp
  282ece:	c3                   	ret    

00282ecf <task_remove>:

void task_remove(struct TASK *task)
{
  282ecf:	55                   	push   %ebp
  282ed0:	89 e5                	mov    %esp,%ebp
  282ed2:	57                   	push   %edi
  282ed3:	56                   	push   %esi
  282ed4:	53                   	push   %ebx
  282ed5:	83 ec 04             	sub    $0x4,%esp
  282ed8:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282edb:	8b 3d dc a5 28 00    	mov    0x28a5dc,%edi
  282ee1:	8b 43 08             	mov    0x8(%ebx),%eax
  282ee4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282ee7:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282eed:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282eef:	8b 4a 08             	mov    0x8(%edx),%ecx
  282ef2:	85 c9                	test   %ecx,%ecx
  282ef4:	7e 1d                	jle    282f13 <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282ef6:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282ef9:	74 1f                	je     282f1a <task_remove+0x4b>
  282efb:	b8 00 00 00 00       	mov    $0x0,%eax
  282f00:	eb 06                	jmp    282f08 <task_remove+0x39>
  282f02:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282f06:	74 17                	je     282f1f <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282f08:	83 c0 01             	add    $0x1,%eax
  282f0b:	39 c8                	cmp    %ecx,%eax
  282f0d:	75 f3                	jne    282f02 <task_remove+0x33>
  282f0f:	89 c8                	mov    %ecx,%eax
  282f11:	eb 0c                	jmp    282f1f <task_remove+0x50>
  282f13:	b8 00 00 00 00       	mov    $0x0,%eax
  282f18:	eb 05                	jmp    282f1f <task_remove+0x50>
  282f1a:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282f1f:	83 e9 01             	sub    $0x1,%ecx
  282f22:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282f25:	8b 72 0c             	mov    0xc(%edx),%esi
  282f28:	39 c6                	cmp    %eax,%esi
  282f2a:	7e 06                	jle    282f32 <task_remove+0x63>
	{
		tl->now--;
  282f2c:	83 ee 01             	sub    $0x1,%esi
  282f2f:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282f32:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282f35:	7f 07                	jg     282f3e <task_remove+0x6f>
	{
		tl->now = 0;
  282f37:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282f3e:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282f45:	39 42 08             	cmp    %eax,0x8(%edx)
  282f48:	7e 1b                	jle    282f65 <task_remove+0x96>
  282f4a:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282f4e:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282f52:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282f55:	83 c0 01             	add    $0x1,%eax
  282f58:	8b 19                	mov    (%ecx),%ebx
  282f5a:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282f5d:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282f60:	39 42 08             	cmp    %eax,0x8(%edx)
  282f63:	7f f0                	jg     282f55 <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282f65:	83 c4 04             	add    $0x4,%esp
  282f68:	5b                   	pop    %ebx
  282f69:	5e                   	pop    %esi
  282f6a:	5f                   	pop    %edi
  282f6b:	5d                   	pop    %ebp
  282f6c:	c3                   	ret    

00282f6d <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282f6d:	55                   	push   %ebp
  282f6e:	89 e5                	mov    %esp,%ebp
  282f70:	56                   	push   %esi
  282f71:	53                   	push   %ebx
  282f72:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282f75:	8b 75 0c             	mov    0xc(%ebp),%esi
  282f78:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282f7b:	85 f6                	test   %esi,%esi
  282f7d:	79 03                	jns    282f82 <task_run+0x15>
  282f7f:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282f82:	85 c0                	test   %eax,%eax
  282f84:	7e 03                	jle    282f89 <task_run+0x1c>
  282f86:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282f89:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f8d:	75 14                	jne    282fa3 <task_run+0x36>
  282f8f:	3b 73 08             	cmp    0x8(%ebx),%esi
  282f92:	74 1b                	je     282faf <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282f94:	53                   	push   %ebx
  282f95:	e8 35 ff ff ff       	call   282ecf <task_remove>
	}
	if(task->flags != 2)
  282f9a:	83 c4 04             	add    $0x4,%esp
  282f9d:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282fa1:	74 0c                	je     282faf <task_run+0x42>
	{
		task->level = level;
  282fa3:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282fa6:	53                   	push   %ebx
  282fa7:	e8 ea fe ff ff       	call   282e96 <task_add>
  282fac:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282faf:	a1 dc a5 28 00       	mov    0x28a5dc,%eax
  282fb4:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282fb8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282fbb:	5b                   	pop    %ebx
  282fbc:	5e                   	pop    %esi
  282fbd:	5d                   	pop    %ebp
  282fbe:	c3                   	ret    

00282fbf <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282fbf:	55                   	push   %ebp
  282fc0:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282fc2:	8b 0d dc a5 28 00    	mov    0x28a5dc,%ecx
  282fc8:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282fcc:	7f 20                	jg     282fee <task_switchsub+0x2f>
  282fce:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fd4:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282fd9:	83 3a 00             	cmpl   $0x0,(%edx)
  282fdc:	7f 15                	jg     282ff3 <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fde:	83 c0 01             	add    $0x1,%eax
  282fe1:	81 c2 98 01 00 00    	add    $0x198,%edx
  282fe7:	83 f8 0a             	cmp    $0xa,%eax
  282fea:	75 ed                	jne    282fd9 <task_switchsub+0x1a>
  282fec:	eb 05                	jmp    282ff3 <task_switchsub+0x34>
  282fee:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282ff3:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282ff5:	a1 dc a5 28 00       	mov    0x28a5dc,%eax
  282ffa:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282ffe:	5d                   	pop    %ebp
  282fff:	c3                   	ret    

00283000 <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  283000:	55                   	push   %ebp
  283001:	89 e5                	mov    %esp,%ebp
  283003:	57                   	push   %edi
  283004:	56                   	push   %esi
  283005:	53                   	push   %ebx
  283006:	83 ec 14             	sub    $0x14,%esp
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  283009:	68 58 ee 02 00       	push   $0x2ee58
  28300e:	ff 75 08             	pushl  0x8(%ebp)
  283011:	e8 17 f3 ff ff       	call   28232d <memman_alloc_4k>
  283016:	a3 dc a5 28 00       	mov    %eax,0x28a5dc
  28301b:	83 c4 10             	add    $0x10,%esp
  28301e:	bb 20 00 00 00       	mov    $0x20,%ebx
	for(i=0;i<MAX_TASKS;i++)
  283023:	be 00 00 00 00       	mov    $0x0,%esi
	{
		taskctl->tasks0[i].flags = 0;
  283028:	8b 15 dc a5 28 00    	mov    0x28a5dc,%edx
  28302e:	69 fe bc 00 00 00    	imul   $0xbc,%esi,%edi
  283034:	8d 04 3a             	lea    (%edx,%edi,1),%eax
  283037:	c7 80 fc 0f 00 00 00 	movl   $0x0,0xffc(%eax)
  28303e:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  283041:	89 98 f8 0f 00 00    	mov    %ebx,0xff8(%eax)
		taskctl->tasks0[i].tss.ldtr = (TASK_GDT0 + MAX_TASKS + i) * 8;
  283047:	8d 8b 40 1f 00 00    	lea    0x1f40(%ebx),%ecx
  28304d:	89 88 84 10 00 00    	mov    %ecx,0x1084(%eax)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  283053:	68 89 00 00 00       	push   $0x89
  283058:	8d 84 3a 24 10 00 00 	lea    0x1024(%edx,%edi,1),%eax
  28305f:	50                   	push   %eax
  283060:	6a 67                	push   $0x67
  283062:	8d 83 00 00 27 00    	lea    0x270000(%ebx),%eax
  283068:	50                   	push   %eax
  283069:	e8 e4 e3 ff ff       	call   281452 <set_segmdesc>
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
  28306e:	68 82 00 00 00       	push   $0x82
  283073:	a1 dc a5 28 00       	mov    0x28a5dc,%eax
  283078:	8d 84 38 8c 10 00 00 	lea    0x108c(%eax,%edi,1),%eax
  28307f:	50                   	push   %eax
  283080:	6a 0f                	push   $0xf
  283082:	8d 83 40 1f 27 00    	lea    0x271f40(%ebx),%eax
  283088:	50                   	push   %eax
  283089:	e8 c4 e3 ff ff       	call   281452 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  28308e:	83 c6 01             	add    $0x1,%esi
  283091:	83 c3 08             	add    $0x8,%ebx
  283094:	83 c4 20             	add    $0x20,%esp
  283097:	81 fe e8 03 00 00    	cmp    $0x3e8,%esi
  28309d:	75 89                	jne    283028 <task_init+0x28>
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  28309f:	8b 15 dc a5 28 00    	mov    0x28a5dc,%edx
  2830a5:	8d 42 08             	lea    0x8(%edx),%eax
  2830a8:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  2830ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  2830b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  2830bb:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].tss.ldtr = (TASK_GDT0 + MAX_TASKS + i) * 8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  2830c0:	39 d0                	cmp    %edx,%eax
  2830c2:	75 ea                	jne    2830ae <task_init+0xae>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  2830c4:	e8 bf fc ff ff       	call   282d88 <task_alloc>
  2830c9:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  2830cb:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  2830d2:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  2830d9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  2830e0:	83 ec 0c             	sub    $0xc,%esp
  2830e3:	50                   	push   %eax
  2830e4:	e8 ad fd ff ff       	call   282e96 <task_add>
	
	task_switchsub();
  2830e9:	e8 d1 fe ff ff       	call   282fbf <task_switchsub>
	load_tr(task->sel);
  2830ee:	83 c4 04             	add    $0x4,%esp
  2830f1:	ff 36                	pushl  (%esi)
  2830f3:	e8 68 fc ff ff       	call   282d60 <load_tr>
	task_timer = timer_alloc();
  2830f8:	e8 79 f9 ff ff       	call   282a76 <timer_alloc>
  2830fd:	a3 e0 a5 28 00       	mov    %eax,0x28a5e0
	timer_settime(task_timer,task->priority);
  283102:	83 c4 08             	add    $0x8,%esp
  283105:	ff 76 0c             	pushl  0xc(%esi)
  283108:	50                   	push   %eax
  283109:	e8 4a fa ff ff       	call   282b58 <timer_settime>

	struct TASK *idle = task_alloc();
  28310e:	e8 75 fc ff ff       	call   282d88 <task_alloc>
  283113:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  283115:	83 c4 08             	add    $0x8,%esp
  283118:	68 00 00 01 00       	push   $0x10000
  28311d:	ff 75 08             	pushl  0x8(%ebp)
  283120:	e8 cc ee ff ff       	call   281ff1 <memman_alloc>
  283125:	05 00 00 01 00       	add    $0x10000,%eax
  28312a:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  28312d:	c7 43 4c 7b 2d 00 00 	movl   $0x2d7b,0x4c(%ebx)
	idle->tss.es = 1*8;
  283134:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  28313b:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  283142:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  283149:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283150:	00 00 00 
	idle->tss.fs = 1*8;
  283153:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28315a:	00 00 00 
	idle->tss.gs = 1*8;
  28315d:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283164:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  283167:	83 c4 0c             	add    $0xc,%esp
  28316a:	6a 01                	push   $0x1
  28316c:	6a 09                	push   $0x9
  28316e:	53                   	push   %ebx
  28316f:	e8 f9 fd ff ff       	call   282f6d <task_run>
	return task;
}
  283174:	89 f0                	mov    %esi,%eax
  283176:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283179:	5b                   	pop    %ebx
  28317a:	5e                   	pop    %esi
  28317b:	5f                   	pop    %edi
  28317c:	5d                   	pop    %ebp
  28317d:	c3                   	ret    

0028317e <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  28317e:	55                   	push   %ebp
  28317f:	89 e5                	mov    %esp,%ebp
  283181:	56                   	push   %esi
  283182:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  283183:	8b 0d dc a5 28 00    	mov    0x28a5dc,%ecx
  283189:	8b 31                	mov    (%ecx),%esi
  28318b:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  283191:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  283193:	8b 50 0c             	mov    0xc(%eax),%edx
  283196:	6b de 66             	imul   $0x66,%esi,%ebx
  283199:	01 d3                	add    %edx,%ebx
  28319b:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  28319f:	83 c2 01             	add    $0x1,%edx
  2831a2:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  2831a5:	3b 50 08             	cmp    0x8(%eax),%edx
  2831a8:	75 07                	jne    2831b1 <task_switch+0x33>
	{
		tl->now = 0;
  2831aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  2831b1:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  2831b5:	75 0c                	jne    2831c3 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  2831b7:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  2831bd:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  2831c1:	eb 14                	jmp    2831d7 <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  2831c3:	e8 f7 fd ff ff       	call   282fbf <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  2831c8:	a1 dc a5 28 00       	mov    0x28a5dc,%eax
  2831cd:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  2831d3:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  2831d7:	8b 50 04             	mov    0x4(%eax),%edx
  2831da:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  2831de:	83 ec 08             	sub    $0x8,%esp
  2831e1:	ff 76 0c             	pushl  0xc(%esi)
  2831e4:	ff 35 e0 a5 28 00    	pushl  0x28a5e0
  2831ea:	e8 69 f9 ff ff       	call   282b58 <timer_settime>
	if(new_task != now_task)
  2831ef:	83 c4 10             	add    $0x10,%esp
  2831f2:	39 f3                	cmp    %esi,%ebx
  2831f4:	74 0f                	je     283205 <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  2831f6:	83 ec 08             	sub    $0x8,%esp
  2831f9:	ff 36                	pushl  (%esi)
  2831fb:	6a 00                	push   $0x0
  2831fd:	e8 64 fb ff ff       	call   282d66 <farjmp>
  283202:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  283205:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283208:	5b                   	pop    %ebx
  283209:	5e                   	pop    %esi
  28320a:	5d                   	pop    %ebp
  28320b:	c3                   	ret    

0028320c <task_sleep>:

void task_sleep(struct TASK *task)
{
  28320c:	55                   	push   %ebp
  28320d:	89 e5                	mov    %esp,%ebp
  28320f:	56                   	push   %esi
  283210:	53                   	push   %ebx
  283211:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  283214:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  283218:	75 2d                	jne    283247 <task_sleep+0x3b>
	{
		now_task = task_now();
  28321a:	e8 59 fc ff ff       	call   282e78 <task_now>
  28321f:	89 c6                	mov    %eax,%esi
		task_remove(task);
  283221:	53                   	push   %ebx
  283222:	e8 a8 fc ff ff       	call   282ecf <task_remove>
		if(task == now_task)
  283227:	83 c4 04             	add    $0x4,%esp
  28322a:	39 f3                	cmp    %esi,%ebx
  28322c:	75 19                	jne    283247 <task_sleep+0x3b>
		{
			task_switchsub();
  28322e:	e8 8c fd ff ff       	call   282fbf <task_switchsub>
			now_task = task_now();
  283233:	e8 40 fc ff ff       	call   282e78 <task_now>
			farjmp(0,now_task->sel);
  283238:	83 ec 08             	sub    $0x8,%esp
  28323b:	ff 30                	pushl  (%eax)
  28323d:	6a 00                	push   $0x0
  28323f:	e8 22 fb ff ff       	call   282d66 <farjmp>
  283244:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283247:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28324a:	5b                   	pop    %ebx
  28324b:	5e                   	pop    %esi
  28324c:	5d                   	pop    %ebp
  28324d:	c3                   	ret    

0028324e <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  28324e:	55                   	push   %ebp
  28324f:	89 e5                	mov    %esp,%ebp
  283251:	57                   	push   %edi
  283252:	56                   	push   %esi
  283253:	53                   	push   %ebx
  283254:	81 ec bc 00 00 00    	sub    $0xbc,%esp
  28325a:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  28325d:	e8 16 fc ff ff       	call   282e78 <task_now>
  283262:	89 c6                	mov    %eax,%esi
  283264:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  28326a:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  28326d:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  283274:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  28327b:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	//*((int *)0x0fec) = (int)&cons; //for api
	task->cons = &cons;
  283282:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283285:	89 86 a4 00 00 00    	mov    %eax,0xa4(%esi)
	task->cmdline = cmdline;
  28328b:	8d 45 ca             	lea    -0x36(%ebp),%eax
  28328e:	89 86 b8 00 00 00    	mov    %eax,0xb8(%esi)

	int i;
	cons.timer = timer_alloc();
  283294:	e8 dd f7 ff ff       	call   282a76 <timer_alloc>
  283299:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  28329c:	83 c6 10             	add    $0x10,%esi
  28329f:	83 ec 04             	sub    $0x4,%esp
  2832a2:	6a 01                	push   $0x1
  2832a4:	56                   	push   %esi
  2832a5:	50                   	push   %eax
  2832a6:	e8 99 f8 ff ff       	call   282b44 <timer_init>
	timer_settime(cons.timer,50);
  2832ab:	83 c4 08             	add    $0x8,%esp
  2832ae:	6a 32                	push   $0x32
  2832b0:	ff 75 c4             	pushl  -0x3c(%ebp)
  2832b3:	e8 a0 f8 ff ff       	call   282b58 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  2832b8:	83 c4 08             	add    $0x8,%esp
  2832bb:	68 00 2d 00 00       	push   $0x2d00
  2832c0:	68 00 00 3c 00       	push   $0x3c0000
  2832c5:	e8 63 f0 ff ff       	call   28232d <memman_alloc_4k>
  2832ca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  2832d0:	83 c4 08             	add    $0x8,%esp
  2832d3:	68 00 02 10 00       	push   $0x100200
  2832d8:	50                   	push   %eax
  2832d9:	e8 9f 02 00 00       	call   28357d <file_readfat>
  2832de:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
  2832e4:	8d 55 b4             	lea    -0x4c(%ebp),%edx
  2832e7:	83 c4 10             	add    $0x10,%esp

	struct FILEHANDLE fhandle[8];
	for(i=0;i<8;i++)
	{
		fhandle[i].buf = 0;
  2832ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  2832f0:	83 c0 0c             	add    $0xc,%eax
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));

	struct FILEHANDLE fhandle[8];
	for(i=0;i<8;i++)
  2832f3:	39 d0                	cmp    %edx,%eax
  2832f5:	75 f3                	jne    2832ea <console_task+0x9c>
	{
		fhandle[i].buf = 0;
	}
	task->fhandle = fhandle;
  2832f7:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
  2832fd:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
  283303:	89 82 b0 00 00 00    	mov    %eax,0xb0(%edx)
	task->fat = fat;
  283309:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
  28330f:	89 82 b4 00 00 00    	mov    %eax,0xb4(%edx)

	//draw prompt char
	cons_putchar(&cons,'>',1);
  283315:	83 ec 04             	sub    $0x4,%esp
  283318:	6a 01                	push   $0x1
  28331a:	6a 3e                	push   $0x3e
  28331c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28331f:	50                   	push   %eax
  283320:	e8 f9 05 00 00       	call   28391e <cons_putchar>
  283325:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  283328:	e8 85 d7 ff ff       	call   280ab2 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  28332d:	83 ec 0c             	sub    $0xc,%esp
  283330:	56                   	push   %esi
  283331:	e8 20 e9 ff ff       	call   281c56 <fifo32_status>
  283336:	83 c4 10             	add    $0x10,%esp
  283339:	85 c0                	test   %eax,%eax
  28333b:	75 18                	jne    283355 <console_task+0x107>
		{
			task_sleep(task);
  28333d:	83 ec 0c             	sub    $0xc,%esp
  283340:	ff b5 44 ff ff ff    	pushl  -0xbc(%ebp)
  283346:	e8 c1 fe ff ff       	call   28320c <task_sleep>
			io_sti();
  28334b:	e8 64 d7 ff ff       	call   280ab4 <io_sti>
  283350:	83 c4 10             	add    $0x10,%esp
  283353:	eb d3                	jmp    283328 <console_task+0xda>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  283355:	83 ec 0c             	sub    $0xc,%esp
  283358:	56                   	push   %esi
  283359:	e8 bd e8 ff ff       	call   281c1b <fifo32_get>
  28335e:	89 c3                	mov    %eax,%ebx
			io_sti();
  283360:	e8 4f d7 ff ff       	call   280ab4 <io_sti>
			if(i<=1) //for cursor
  283365:	83 c4 10             	add    $0x10,%esp
  283368:	83 fb 01             	cmp    $0x1,%ebx
  28336b:	7f 57                	jg     2833c4 <console_task+0x176>
			{
				if(i!=0)
  28336d:	85 db                	test   %ebx,%ebx
  28336f:	74 20                	je     283391 <console_task+0x143>
				{
					timer_init(cons.timer,&task->fifo,0);
  283371:	83 ec 04             	sub    $0x4,%esp
  283374:	6a 00                	push   $0x0
  283376:	56                   	push   %esi
  283377:	ff 75 c4             	pushl  -0x3c(%ebp)
  28337a:	e8 c5 f7 ff ff       	call   282b44 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  28337f:	83 c4 10             	add    $0x10,%esp
  283382:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  283386:	78 27                	js     2833af <console_task+0x161>
  283388:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  28338f:	eb 1e                	jmp    2833af <console_task+0x161>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  283391:	83 ec 04             	sub    $0x4,%esp
  283394:	6a 01                	push   $0x1
  283396:	56                   	push   %esi
  283397:	ff 75 c4             	pushl  -0x3c(%ebp)
  28339a:	e8 a5 f7 ff ff       	call   282b44 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  28339f:	83 c4 10             	add    $0x10,%esp
  2833a2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  2833a6:	78 07                	js     2833af <console_task+0x161>
  2833a8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  2833af:	83 ec 08             	sub    $0x8,%esp
  2833b2:	6a 32                	push   $0x32
  2833b4:	ff 75 c4             	pushl  -0x3c(%ebp)
  2833b7:	e8 9c f7 ff ff       	call   282b58 <timer_settime>
  2833bc:	83 c4 10             	add    $0x10,%esp
  2833bf:	e9 65 01 00 00       	jmp    283529 <console_task+0x2db>
							
			}
			else if(i == 2) //get show_cursor msg
  2833c4:	83 fb 02             	cmp    $0x2,%ebx
  2833c7:	75 19                	jne    2833e2 <console_task+0x194>
			{
				cons.cur_c = COL8_FFFFFF;
  2833c9:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
					}
				}
			}
			if(sheet != 0)
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2833d0:	b8 07 00 00 00       	mov    $0x7,%eax
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(sheet != 0)
  2833d5:	85 ff                	test   %edi,%edi
  2833d7:	0f 85 5b 01 00 00    	jne    283538 <console_task+0x2ea>
  2833dd:	e9 46 ff ff ff       	jmp    283328 <console_task+0xda>
			}
			else if(i == 2) //get show_cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide_cursor msg
  2833e2:	83 fb 03             	cmp    $0x3,%ebx
  2833e5:	75 36                	jne    28341d <console_task+0x1cf>
			{
				cons.cur_c = -1;
  2833e7:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				if(sheet != 0)boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2833ee:	85 ff                	test   %edi,%edi
  2833f0:	0f 84 32 ff ff ff    	je     283328 <console_task+0xda>
  2833f6:	8b 55 bc             	mov    -0x44(%ebp),%edx
  2833f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
  2833fc:	83 ec 04             	sub    $0x4,%esp
  2833ff:	8d 4a 0f             	lea    0xf(%edx),%ecx
  283402:	51                   	push   %ecx
  283403:	8d 48 07             	lea    0x7(%eax),%ecx
  283406:	51                   	push   %ecx
  283407:	52                   	push   %edx
  283408:	50                   	push   %eax
  283409:	6a 00                	push   $0x0
  28340b:	ff 77 04             	pushl  0x4(%edi)
  28340e:	ff 37                	pushl  (%edi)
  283410:	e8 8c d8 ff ff       	call   280ca1 <boxfill8>
  283415:	83 c4 20             	add    $0x20,%esp
  283418:	e9 14 01 00 00       	jmp    283531 <console_task+0x2e3>
			}
			else if(i == 4) //close button clicked
  28341d:	83 fb 04             	cmp    $0x4,%ebx
  283420:	75 1a                	jne    28343c <console_task+0x1ee>
			{
				cmd_exit(&cons,fat);
  283422:	83 ec 08             	sub    $0x8,%esp
  283425:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  28342b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28342e:	50                   	push   %eax
  28342f:	e8 33 08 00 00       	call   283c67 <cmd_exit>
  283434:	83 c4 10             	add    $0x10,%esp
  283437:	e9 ed 00 00 00       	jmp    283529 <console_task+0x2db>
			}
			else if(256<=i && i<=511)
  28343c:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  283442:	3d ff 00 00 00       	cmp    $0xff,%eax
  283447:	0f 87 dc 00 00 00    	ja     283529 <console_task+0x2db>
			{
				if(i == 8+256) //back key
  28344d:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  283453:	75 26                	jne    28347b <console_task+0x22d>
				{
					if(cons.cur_x > 16)
  283455:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  283459:	0f 8e ca 00 00 00    	jle    283529 <console_task+0x2db>
					{
						cons_putchar(&cons,' ',0);
  28345f:	83 ec 04             	sub    $0x4,%esp
  283462:	6a 00                	push   $0x0
  283464:	6a 20                	push   $0x20
  283466:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283469:	50                   	push   %eax
  28346a:	e8 af 04 00 00       	call   28391e <cons_putchar>
						cons.cur_x -= 8;
  28346f:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  283473:	83 c4 10             	add    $0x10,%esp
  283476:	e9 ae 00 00 00       	jmp    283529 <console_task+0x2db>
					}
				}
				else if(i == 10+256) //return key
  28347b:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  283481:	75 75                	jne    2834f8 <console_task+0x2aa>
				{
					cons_putchar(&cons,' ',0);
  283483:	83 ec 04             	sub    $0x4,%esp
  283486:	6a 00                	push   $0x0
  283488:	6a 20                	push   $0x20
  28348a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28348d:	50                   	push   %eax
  28348e:	e8 8b 04 00 00       	call   28391e <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  283493:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283496:	8d 42 07             	lea    0x7(%edx),%eax
  283499:	85 d2                	test   %edx,%edx
  28349b:	0f 49 c2             	cmovns %edx,%eax
  28349e:	c1 f8 03             	sar    $0x3,%eax
  2834a1:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  2834a6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834a9:	89 04 24             	mov    %eax,(%esp)
  2834ac:	e8 9b 03 00 00       	call   28384c <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  2834b1:	ff 75 0c             	pushl  0xc(%ebp)
  2834b4:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  2834ba:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834bd:	50                   	push   %eax
  2834be:	8d 45 ca             	lea    -0x36(%ebp),%eax
  2834c1:	50                   	push   %eax
  2834c2:	e8 38 0e 00 00       	call   2842ff <cons_runcmd>
					if(sheet == 0)
  2834c7:	83 c4 20             	add    $0x20,%esp
  2834ca:	85 ff                	test   %edi,%edi
  2834cc:	75 15                	jne    2834e3 <console_task+0x295>
						cmd_exit(&cons,fat);
  2834ce:	83 ec 08             	sub    $0x8,%esp
  2834d1:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  2834d7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834da:	50                   	push   %eax
  2834db:	e8 87 07 00 00       	call   283c67 <cmd_exit>
  2834e0:	83 c4 10             	add    $0x10,%esp
					cons_putchar(&cons,'>',1);
  2834e3:	83 ec 04             	sub    $0x4,%esp
  2834e6:	6a 01                	push   $0x1
  2834e8:	6a 3e                	push   $0x3e
  2834ea:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834ed:	50                   	push   %eax
  2834ee:	e8 2b 04 00 00       	call   28391e <cons_putchar>
  2834f3:	83 c4 10             	add    $0x10,%esp
  2834f6:	eb 31                	jmp    283529 <console_task+0x2db>
				}
				else
				{
					if(cons.cur_x<240)
  2834f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
  2834fb:	3d ef 00 00 00       	cmp    $0xef,%eax
  283500:	7f 27                	jg     283529 <console_task+0x2db>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  283502:	8d 50 07             	lea    0x7(%eax),%edx
  283505:	85 c0                	test   %eax,%eax
  283507:	0f 48 c2             	cmovs  %edx,%eax
  28350a:	c1 f8 03             	sar    $0x3,%eax
  28350d:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  283511:	83 ec 04             	sub    $0x4,%esp
  283514:	6a 01                	push   $0x1
  283516:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  28351c:	53                   	push   %ebx
  28351d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283520:	50                   	push   %eax
  283521:	e8 f8 03 00 00       	call   28391e <cons_putchar>
  283526:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(sheet != 0)
  283529:	85 ff                	test   %edi,%edi
  28352b:	0f 84 f7 fd ff ff    	je     283328 <console_task+0xda>
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283531:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283534:	85 c0                	test   %eax,%eax
  283536:	78 24                	js     28355c <console_task+0x30e>
  283538:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  28353b:	8b 55 b8             	mov    -0x48(%ebp),%edx
  28353e:	83 ec 04             	sub    $0x4,%esp
  283541:	8d 59 0f             	lea    0xf(%ecx),%ebx
  283544:	53                   	push   %ebx
  283545:	8d 5a 07             	lea    0x7(%edx),%ebx
  283548:	53                   	push   %ebx
  283549:	51                   	push   %ecx
  28354a:	52                   	push   %edx
  28354b:	0f b6 c0             	movzbl %al,%eax
  28354e:	50                   	push   %eax
  28354f:	ff 77 04             	pushl  0x4(%edi)
  283552:	ff 37                	pushl  (%edi)
  283554:	e8 48 d7 ff ff       	call   280ca1 <boxfill8>
  283559:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  28355c:	8b 55 bc             	mov    -0x44(%ebp),%edx
  28355f:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283562:	83 ec 0c             	sub    $0xc,%esp
  283565:	8d 4a 10             	lea    0x10(%edx),%ecx
  283568:	51                   	push   %ecx
  283569:	8d 48 08             	lea    0x8(%eax),%ecx
  28356c:	51                   	push   %ecx
  28356d:	52                   	push   %edx
  28356e:	50                   	push   %eax
  28356f:	57                   	push   %edi
  283570:	e8 61 f3 ff ff       	call   2828d6 <sheet_refresh>
  283575:	83 c4 20             	add    $0x20,%esp
  283578:	e9 ab fd ff ff       	jmp    283328 <console_task+0xda>

0028357d <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  28357d:	55                   	push   %ebp
  28357e:	89 e5                	mov    %esp,%ebp
  283580:	53                   	push   %ebx
  283581:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  283584:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  28358b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283592:	e9 87 00 00 00       	jmp    28361e <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  283597:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28359a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835a1:	8b 45 08             	mov    0x8(%ebp),%eax
  2835a4:	01 d0                	add    %edx,%eax
  2835a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835a9:	8b 55 0c             	mov    0xc(%ebp),%edx
  2835ac:	01 ca                	add    %ecx,%edx
  2835ae:	0f b6 12             	movzbl (%edx),%edx
  2835b1:	0f b6 d2             	movzbl %dl,%edx
  2835b4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835b7:	8d 59 01             	lea    0x1(%ecx),%ebx
  2835ba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2835bd:	01 d9                	add    %ebx,%ecx
  2835bf:	0f b6 09             	movzbl (%ecx),%ecx
  2835c2:	0f b6 c9             	movzbl %cl,%ecx
  2835c5:	c1 e1 08             	shl    $0x8,%ecx
  2835c8:	09 ca                	or     %ecx,%edx
  2835ca:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  2835d0:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  2835d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835d5:	83 c0 01             	add    $0x1,%eax
  2835d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835df:	8b 45 08             	mov    0x8(%ebp),%eax
  2835e2:	01 d0                	add    %edx,%eax
  2835e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2835e7:	8d 4a 01             	lea    0x1(%edx),%ecx
  2835ea:	8b 55 0c             	mov    0xc(%ebp),%edx
  2835ed:	01 ca                	add    %ecx,%edx
  2835ef:	0f b6 12             	movzbl (%edx),%edx
  2835f2:	c0 ea 04             	shr    $0x4,%dl
  2835f5:	0f b6 d2             	movzbl %dl,%edx
  2835f8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835fb:	8d 59 02             	lea    0x2(%ecx),%ebx
  2835fe:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283601:	01 d9                	add    %ebx,%ecx
  283603:	0f b6 09             	movzbl (%ecx),%ecx
  283606:	0f b6 c9             	movzbl %cl,%ecx
  283609:	c1 e1 04             	shl    $0x4,%ecx
  28360c:	09 ca                	or     %ecx,%edx
  28360e:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283614:	89 10                	mov    %edx,(%eax)
		j+=3;
  283616:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  28361a:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  28361e:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283625:	0f 8e 6c ff ff ff    	jle    283597 <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  28362b:	90                   	nop
}
  28362c:	83 c4 10             	add    $0x10,%esp
  28362f:	5b                   	pop    %ebx
  283630:	5d                   	pop    %ebp
  283631:	c3                   	ret    

00283632 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  283632:	55                   	push   %ebp
  283633:	89 e5                	mov    %esp,%ebp
  283635:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  283638:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  28363f:	7f 38                	jg     283679 <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  283641:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283648:	eb 25                	jmp    28366f <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  28364a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28364d:	8b 45 10             	mov    0x10(%ebp),%eax
  283650:	01 c2                	add    %eax,%edx
  283652:	8b 45 08             	mov    0x8(%ebp),%eax
  283655:	c1 e0 09             	shl    $0x9,%eax
  283658:	89 c1                	mov    %eax,%ecx
  28365a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28365d:	01 c8                	add    %ecx,%eax
  28365f:	89 c1                	mov    %eax,%ecx
  283661:	8b 45 18             	mov    0x18(%ebp),%eax
  283664:	01 c8                	add    %ecx,%eax
  283666:	0f b6 00             	movzbl (%eax),%eax
  283669:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  28366b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  28366f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283672:	3b 45 0c             	cmp    0xc(%ebp),%eax
  283675:	7c d3                	jl     28364a <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  283677:	eb 5e                	jmp    2836d7 <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  283679:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283680:	eb 25                	jmp    2836a7 <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  283682:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283685:	8b 45 10             	mov    0x10(%ebp),%eax
  283688:	01 c2                	add    %eax,%edx
  28368a:	8b 45 08             	mov    0x8(%ebp),%eax
  28368d:	c1 e0 09             	shl    $0x9,%eax
  283690:	89 c1                	mov    %eax,%ecx
  283692:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283695:	01 c8                	add    %ecx,%eax
  283697:	89 c1                	mov    %eax,%ecx
  283699:	8b 45 18             	mov    0x18(%ebp),%eax
  28369c:	01 c8                	add    %ecx,%eax
  28369e:	0f b6 00             	movzbl (%eax),%eax
  2836a1:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  2836a3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2836a7:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  2836ae:	7e d2                	jle    283682 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  2836b0:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  2836b7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  2836be:	8b 45 08             	mov    0x8(%ebp),%eax
  2836c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2836c8:	8b 45 14             	mov    0x14(%ebp),%eax
  2836cb:	01 d0                	add    %edx,%eax
  2836cd:	8b 00                	mov    (%eax),%eax
  2836cf:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  2836d2:	e9 61 ff ff ff       	jmp    283638 <file_loadfile+0x6>
	return;
}
  2836d7:	c9                   	leave  
  2836d8:	c3                   	ret    

002836d9 <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  2836d9:	55                   	push   %ebp
  2836da:	89 e5                	mov    %esp,%ebp
  2836dc:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  2836df:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2836e6:	eb 0f                	jmp    2836f7 <file_search+0x1e>
	{
		s[j] = ' ';
  2836e8:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2836eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2836ee:	01 d0                	add    %edx,%eax
  2836f0:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  2836f3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2836f7:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  2836fb:	7e eb                	jle    2836e8 <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  2836fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283704:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28370b:	e9 83 00 00 00       	jmp    283793 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283710:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283714:	7e 0a                	jle    283720 <file_search+0x47>
  283716:	b8 00 00 00 00       	mov    $0x0,%eax
  28371b:	e9 2a 01 00 00       	jmp    28384a <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283720:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283723:	8b 45 08             	mov    0x8(%ebp),%eax
  283726:	01 d0                	add    %edx,%eax
  283728:	0f b6 00             	movzbl (%eax),%eax
  28372b:	3c 2e                	cmp    $0x2e,%al
  28372d:	75 0f                	jne    28373e <file_search+0x65>
  28372f:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  283733:	7f 09                	jg     28373e <file_search+0x65>
			j = 8;
  283735:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  28373c:	eb 51                	jmp    28378f <file_search+0xb6>
		else
		{
			s[j] = name[i];
  28373e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283741:	8b 45 08             	mov    0x8(%ebp),%eax
  283744:	01 d0                	add    %edx,%eax
  283746:	0f b6 00             	movzbl (%eax),%eax
  283749:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28374c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28374f:	01 ca                	add    %ecx,%edx
  283751:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  283753:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283756:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283759:	01 d0                	add    %edx,%eax
  28375b:	0f b6 00             	movzbl (%eax),%eax
  28375e:	3c 60                	cmp    $0x60,%al
  283760:	7e 29                	jle    28378b <file_search+0xb2>
  283762:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283765:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283768:	01 d0                	add    %edx,%eax
  28376a:	0f b6 00             	movzbl (%eax),%eax
  28376d:	3c 7a                	cmp    $0x7a,%al
  28376f:	7f 1a                	jg     28378b <file_search+0xb2>
				s[j] -= 0x20;
  283771:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283774:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283777:	01 d0                	add    %edx,%eax
  283779:	0f b6 00             	movzbl (%eax),%eax
  28377c:	83 e8 20             	sub    $0x20,%eax
  28377f:	89 c1                	mov    %eax,%ecx
  283781:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283784:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283787:	01 d0                	add    %edx,%eax
  283789:	88 08                	mov    %cl,(%eax)
			j++;
  28378b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  28378f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283793:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283796:	8b 45 08             	mov    0x8(%ebp),%eax
  283799:	01 d0                	add    %edx,%eax
  28379b:	0f b6 00             	movzbl (%eax),%eax
  28379e:	84 c0                	test   %al,%al
  2837a0:	0f 85 6a ff ff ff    	jne    283710 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2837a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2837ad:	e9 84 00 00 00       	jmp    283836 <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  2837b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837b5:	c1 e0 06             	shl    $0x6,%eax
  2837b8:	89 c2                	mov    %eax,%edx
  2837ba:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837bd:	01 d0                	add    %edx,%eax
  2837bf:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  2837c3:	84 c0                	test   %al,%al
  2837c5:	74 7d                	je     283844 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  2837c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837ca:	c1 e0 06             	shl    $0x6,%eax
  2837cd:	89 c2                	mov    %eax,%edx
  2837cf:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837d2:	01 d0                	add    %edx,%eax
  2837d4:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  2837d8:	0f b6 c0             	movzbl %al,%eax
  2837db:	83 e0 18             	and    $0x18,%eax
  2837de:	85 c0                	test   %eax,%eax
  2837e0:	75 50                	jne    283832 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  2837e2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2837e9:	eb 31                	jmp    28381c <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  2837eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837ee:	c1 e0 06             	shl    $0x6,%eax
  2837f1:	89 c2                	mov    %eax,%edx
  2837f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837f6:	01 c2                	add    %eax,%edx
  2837f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2837fb:	01 d0                	add    %edx,%eax
  2837fd:	83 c0 20             	add    $0x20,%eax
  283800:	0f b6 00             	movzbl (%eax),%eax
  283803:	0f b6 d0             	movzbl %al,%edx
  283806:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283809:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28380c:	01 c8                	add    %ecx,%eax
  28380e:	0f b6 00             	movzbl (%eax),%eax
  283811:	0f be c0             	movsbl %al,%eax
  283814:	39 c2                	cmp    %eax,%edx
  283816:	75 19                	jne    283831 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  283818:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28381c:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283820:	7e c9                	jle    2837eb <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283822:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283825:	c1 e0 06             	shl    $0x6,%eax
  283828:	89 c2                	mov    %eax,%edx
  28382a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28382d:	01 d0                	add    %edx,%eax
  28382f:	eb 19                	jmp    28384a <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  283831:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  283832:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  283836:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283839:	3b 45 10             	cmp    0x10(%ebp),%eax
  28383c:	0f 8c 70 ff ff ff    	jl     2837b2 <file_search+0xd9>
  283842:	eb 01                	jmp    283845 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  283844:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  283845:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28384a:	c9                   	leave  
  28384b:	c3                   	ret    

0028384c <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  28384c:	55                   	push   %ebp
  28384d:	89 e5                	mov    %esp,%ebp
  28384f:	57                   	push   %edi
  283850:	56                   	push   %esi
  283851:	53                   	push   %ebx
  283852:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  283855:	8b 45 08             	mov    0x8(%ebp),%eax
  283858:	8b 40 08             	mov    0x8(%eax),%eax
  28385b:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  283860:	7f 0e                	jg     283870 <cons_newline+0x24>
	{
		cons->cur_y += 16;
  283862:	83 c0 10             	add    $0x10,%eax
  283865:	8b 7d 08             	mov    0x8(%ebp),%edi
  283868:	89 47 08             	mov    %eax,0x8(%edi)
  28386b:	e9 9c 00 00 00       	jmp    28390c <cons_newline+0xc0>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283870:	8b 45 08             	mov    0x8(%ebp),%eax
  283873:	8b 18                	mov    (%eax),%ebx
  283875:	bf 1c 00 00 00       	mov    $0x1c,%edi
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
  28387a:	85 db                	test   %ebx,%ebx
  28387c:	75 3a                	jne    2838b8 <cons_newline+0x6c>
  28387e:	e9 89 00 00 00       	jmp    28390c <cons_newline+0xc0>
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  283883:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  283886:	8b 43 04             	mov    0x4(%ebx),%eax
  283889:	8b 75 e0             	mov    -0x20(%ebp),%esi
  28388c:	0f af f0             	imul   %eax,%esi
  28388f:	89 d1                	mov    %edx,%ecx
  283891:	03 0b                	add    (%ebx),%ecx
  283893:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  283897:	0f af c7             	imul   %edi,%eax
  28389a:	89 f3                	mov    %esi,%ebx
  28389c:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  28389f:	83 c2 01             	add    $0x1,%edx
  2838a2:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  2838a8:	75 d9                	jne    283883 <cons_newline+0x37>
  2838aa:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
  2838ad:	83 c7 01             	add    $0x1,%edi
  2838b0:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  2838b6:	74 33                	je     2838eb <cons_newline+0x9f>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2838b8:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2838bd:	8d 47 10             	lea    0x10(%edi),%eax
  2838c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
  2838c3:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  2838c6:	eb bb                	jmp    283883 <cons_newline+0x37>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2838c8:	89 fa                	mov    %edi,%edx
  2838ca:	0f af 53 04          	imul   0x4(%ebx),%edx
  2838ce:	89 c1                	mov    %eax,%ecx
  2838d0:	03 0b                	add    (%ebx),%ecx
  2838d2:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  2838d6:	83 c0 01             	add    $0x1,%eax
  2838d9:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2838de:	75 e8                	jne    2838c8 <cons_newline+0x7c>
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  2838e0:	83 c7 01             	add    $0x1,%edi
  2838e3:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  2838e9:	74 07                	je     2838f2 <cons_newline+0xa6>
  2838eb:	b8 08 00 00 00       	mov    $0x8,%eax
  2838f0:	eb d6                	jmp    2838c8 <cons_newline+0x7c>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  2838f2:	83 ec 0c             	sub    $0xc,%esp
  2838f5:	68 9c 00 00 00       	push   $0x9c
  2838fa:	68 f8 00 00 00       	push   $0xf8
  2838ff:	6a 1c                	push   $0x1c
  283901:	6a 08                	push   $0x8
  283903:	53                   	push   %ebx
  283904:	e8 cd ef ff ff       	call   2828d6 <sheet_refresh>
  283909:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  28390c:	8b 45 08             	mov    0x8(%ebp),%eax
  28390f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283916:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283919:	5b                   	pop    %ebx
  28391a:	5e                   	pop    %esi
  28391b:	5f                   	pop    %edi
  28391c:	5d                   	pop    %ebp
  28391d:	c3                   	ret    

0028391e <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28391e:	55                   	push   %ebp
  28391f:	89 e5                	mov    %esp,%ebp
  283921:	56                   	push   %esi
  283922:	53                   	push   %ebx
  283923:	83 ec 10             	sub    $0x10,%esp
  283926:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283929:	8b 45 0c             	mov    0xc(%ebp),%eax
  28392c:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  28392f:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  283932:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  283936:	3c 09                	cmp    $0x9,%al
  283938:	75 4b                	jne    283985 <cons_putchar+0x67>
	{
		//tab
		for(;;)
		{
			if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  28393a:	8b 03                	mov    (%ebx),%eax
  28393c:	85 c0                	test   %eax,%eax
  28393e:	74 1d                	je     28395d <cons_putchar+0x3f>
  283940:	83 ec 04             	sub    $0x4,%esp
  283943:	6a 01                	push   $0x1
  283945:	68 31 55 28 00       	push   $0x285531
  28394a:	6a 00                	push   $0x0
  28394c:	6a 07                	push   $0x7
  28394e:	ff 73 08             	pushl  0x8(%ebx)
  283951:	ff 73 04             	pushl  0x4(%ebx)
  283954:	50                   	push   %eax
  283955:	e8 a6 d7 ff ff       	call   281100 <putfonts8_asc_sht>
  28395a:	83 c4 20             	add    $0x20,%esp
			cons->cur_x += 8;
  28395d:	8b 43 04             	mov    0x4(%ebx),%eax
  283960:	83 c0 08             	add    $0x8,%eax
  283963:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  283966:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28396b:	75 0c                	jne    283979 <cons_putchar+0x5b>
				cons_newline(cons);
  28396d:	83 ec 0c             	sub    $0xc,%esp
  283970:	53                   	push   %ebx
  283971:	e8 d6 fe ff ff       	call   28384c <cons_newline>
  283976:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  283979:	8b 43 04             	mov    0x4(%ebx),%eax
  28397c:	83 e8 08             	sub    $0x8,%eax
  28397f:	a8 1f                	test   $0x1f,%al
  283981:	75 b7                	jne    28393a <cons_putchar+0x1c>
  283983:	eb 5a                	jmp    2839df <cons_putchar+0xc1>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  283985:	3c 0a                	cmp    $0xa,%al
  283987:	75 0e                	jne    283997 <cons_putchar+0x79>
		cons_newline(cons);
  283989:	83 ec 0c             	sub    $0xc,%esp
  28398c:	53                   	push   %ebx
  28398d:	e8 ba fe ff ff       	call   28384c <cons_newline>
  283992:	83 c4 10             	add    $0x10,%esp
  283995:	eb 48                	jmp    2839df <cons_putchar+0xc1>
	else if(s[0] == 0x0d) 
  283997:	3c 0d                	cmp    $0xd,%al
  283999:	74 44                	je     2839df <cons_putchar+0xc1>
		;//todo
	else
	{
		if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  28399b:	8b 03                	mov    (%ebx),%eax
  28399d:	85 c0                	test   %eax,%eax
  28399f:	74 1c                	je     2839bd <cons_putchar+0x9f>
  2839a1:	83 ec 04             	sub    $0x4,%esp
  2839a4:	6a 01                	push   $0x1
  2839a6:	8d 55 f6             	lea    -0xa(%ebp),%edx
  2839a9:	52                   	push   %edx
  2839aa:	6a 00                	push   $0x0
  2839ac:	6a 07                	push   $0x7
  2839ae:	ff 73 08             	pushl  0x8(%ebx)
  2839b1:	ff 73 04             	pushl  0x4(%ebx)
  2839b4:	50                   	push   %eax
  2839b5:	e8 46 d7 ff ff       	call   281100 <putfonts8_asc_sht>
  2839ba:	83 c4 20             	add    $0x20,%esp
		if(move != 0)
  2839bd:	89 f0                	mov    %esi,%eax
  2839bf:	84 c0                	test   %al,%al
  2839c1:	74 1c                	je     2839df <cons_putchar+0xc1>
		{
			cons->cur_x += 8;
  2839c3:	8b 43 04             	mov    0x4(%ebx),%eax
  2839c6:	83 c0 08             	add    $0x8,%eax
  2839c9:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  2839cc:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2839d1:	75 0c                	jne    2839df <cons_putchar+0xc1>
				cons_newline(cons);
  2839d3:	83 ec 0c             	sub    $0xc,%esp
  2839d6:	53                   	push   %ebx
  2839d7:	e8 70 fe ff ff       	call   28384c <cons_newline>
  2839dc:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2839df:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2839e2:	5b                   	pop    %ebx
  2839e3:	5e                   	pop    %esi
  2839e4:	5d                   	pop    %ebp
  2839e5:	c3                   	ret    

002839e6 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  2839e6:	55                   	push   %ebp
  2839e7:	89 e5                	mov    %esp,%ebp
  2839e9:	56                   	push   %esi
  2839ea:	53                   	push   %ebx
  2839eb:	83 ec 24             	sub    $0x24,%esp
  2839ee:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  2839f1:	8b 45 0c             	mov    0xc(%ebp),%eax
  2839f4:	c1 e8 14             	shr    $0x14,%eax
  2839f7:	50                   	push   %eax
  2839f8:	68 c0 54 28 00       	push   $0x2854c0
  2839fd:	8d 75 da             	lea    -0x26(%ebp),%esi
  283a00:	56                   	push   %esi
  283a01:	e8 b7 df ff ff       	call   2819bd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a06:	83 c4 0c             	add    $0xc,%esp
  283a09:	6a 1e                	push   $0x1e
  283a0b:	56                   	push   %esi
  283a0c:	6a 00                	push   $0x0
  283a0e:	6a 07                	push   $0x7
  283a10:	ff 73 08             	pushl  0x8(%ebx)
  283a13:	6a 08                	push   $0x8
  283a15:	ff 33                	pushl  (%ebx)
  283a17:	e8 e4 d6 ff ff       	call   281100 <putfonts8_asc_sht>
	cons_newline(cons);
  283a1c:	83 c4 14             	add    $0x14,%esp
  283a1f:	53                   	push   %ebx
  283a20:	e8 27 fe ff ff       	call   28384c <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283a25:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  283a2c:	e8 87 e5 ff ff       	call   281fb8 <memman_total>
  283a31:	83 c4 0c             	add    $0xc,%esp
  283a34:	c1 e8 0a             	shr    $0xa,%eax
  283a37:	50                   	push   %eax
  283a38:	68 cb 54 28 00       	push   $0x2854cb
  283a3d:	56                   	push   %esi
  283a3e:	e8 7a df ff ff       	call   2819bd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a43:	83 c4 0c             	add    $0xc,%esp
  283a46:	6a 1e                	push   $0x1e
  283a48:	56                   	push   %esi
  283a49:	6a 00                	push   $0x0
  283a4b:	6a 07                	push   $0x7
  283a4d:	ff 73 08             	pushl  0x8(%ebx)
  283a50:	6a 08                	push   $0x8
  283a52:	ff 33                	pushl  (%ebx)
  283a54:	e8 a7 d6 ff ff       	call   281100 <putfonts8_asc_sht>
	cons_newline(cons);
  283a59:	83 c4 14             	add    $0x14,%esp
  283a5c:	53                   	push   %ebx
  283a5d:	e8 ea fd ff ff       	call   28384c <cons_newline>
	cons_newline(cons);
  283a62:	89 1c 24             	mov    %ebx,(%esp)
  283a65:	e8 e2 fd ff ff       	call   28384c <cons_newline>
	return;
  283a6a:	83 c4 10             	add    $0x10,%esp
}
  283a6d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a70:	5b                   	pop    %ebx
  283a71:	5e                   	pop    %esi
  283a72:	5d                   	pop    %ebp
  283a73:	c3                   	ret    

00283a74 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  283a74:	55                   	push   %ebp
  283a75:	89 e5                	mov    %esp,%ebp
  283a77:	57                   	push   %edi
  283a78:	56                   	push   %esi
  283a79:	53                   	push   %ebx
  283a7a:	83 ec 0c             	sub    $0xc,%esp
  283a7d:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  283a80:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  283a82:	be 1c 00 00 00       	mov    $0x1c,%esi
  283a87:	eb 23                	jmp    283aac <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283a89:	89 f1                	mov    %esi,%ecx
  283a8b:	0f af 4a 04          	imul   0x4(%edx),%ecx
  283a8f:	89 c3                	mov    %eax,%ebx
  283a91:	03 1a                	add    (%edx),%ebx
  283a93:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  283a97:	83 c0 01             	add    $0x1,%eax
  283a9a:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283a9f:	75 e8                	jne    283a89 <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283aa1:	83 c6 01             	add    $0x1,%esi
  283aa4:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  283aaa:	74 07                	je     283ab3 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  283aac:	b8 08 00 00 00       	mov    $0x8,%eax
  283ab1:	eb d6                	jmp    283a89 <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283ab3:	83 ec 0c             	sub    $0xc,%esp
  283ab6:	68 9c 00 00 00       	push   $0x9c
  283abb:	68 f8 00 00 00       	push   $0xf8
  283ac0:	6a 1c                	push   $0x1c
  283ac2:	6a 08                	push   $0x8
  283ac4:	52                   	push   %edx
  283ac5:	e8 0c ee ff ff       	call   2828d6 <sheet_refresh>
	cons->cur_y = 28;
  283aca:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283ad1:	83 c4 20             	add    $0x20,%esp
}
  283ad4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283ad7:	5b                   	pop    %ebx
  283ad8:	5e                   	pop    %esi
  283ad9:	5f                   	pop    %edi
  283ada:	5d                   	pop    %ebp
  283adb:	c3                   	ret    

00283adc <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  283adc:	55                   	push   %ebp
  283add:	89 e5                	mov    %esp,%ebp
  283adf:	57                   	push   %edi
  283ae0:	56                   	push   %esi
  283ae1:	53                   	push   %ebx
  283ae2:	83 ec 2c             	sub    $0x2c,%esp
  283ae5:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283ae8:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283aef:	84 c0                	test   %al,%al
  283af1:	0f 84 87 00 00 00    	je     283b7e <cmd_dir+0xa2>
  283af7:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283afc:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283aff:	eb 0b                	jmp    283b0c <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283b01:	83 c3 40             	add    $0x40,%ebx
  283b04:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283b08:	84 c0                	test   %al,%al
  283b0a:	74 72                	je     283b7e <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283b0c:	3c e5                	cmp    $0xe5,%al
  283b0e:	74 66                	je     283b76 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283b10:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283b14:	75 60                	jne    283b76 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283b16:	83 ec 04             	sub    $0x4,%esp
  283b19:	ff 73 3c             	pushl  0x3c(%ebx)
  283b1c:	68 d5 54 28 00       	push   $0x2854d5
  283b21:	56                   	push   %esi
  283b22:	e8 96 de ff ff       	call   2819bd <sprintf>
  283b27:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283b2a:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283b2f:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283b34:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283b37:	83 c0 01             	add    $0x1,%eax
  283b3a:	83 f8 08             	cmp    $0x8,%eax
  283b3d:	75 f0                	jne    283b2f <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  283b3f:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283b43:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283b46:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283b4a:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  283b4d:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  283b51:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283b54:	83 ec 04             	sub    $0x4,%esp
  283b57:	6a 1e                	push   $0x1e
  283b59:	56                   	push   %esi
  283b5a:	6a 00                	push   $0x0
  283b5c:	6a 07                	push   $0x7
  283b5e:	ff 77 08             	pushl  0x8(%edi)
  283b61:	6a 08                	push   $0x8
  283b63:	ff 37                	pushl  (%edi)
  283b65:	e8 96 d5 ff ff       	call   281100 <putfonts8_asc_sht>
				cons_newline(cons);
  283b6a:	83 c4 14             	add    $0x14,%esp
  283b6d:	57                   	push   %edi
  283b6e:	e8 d9 fc ff ff       	call   28384c <cons_newline>
  283b73:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283b76:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283b7c:	75 83                	jne    283b01 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  283b7e:	83 ec 0c             	sub    $0xc,%esp
  283b81:	57                   	push   %edi
  283b82:	e8 c5 fc ff ff       	call   28384c <cons_newline>
	return;
  283b87:	83 c4 10             	add    $0x10,%esp
}
  283b8a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283b8d:	5b                   	pop    %ebx
  283b8e:	5e                   	pop    %esi
  283b8f:	5f                   	pop    %edi
  283b90:	5d                   	pop    %ebp
  283b91:	c3                   	ret    

00283b92 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283b92:	55                   	push   %ebp
  283b93:	89 e5                	mov    %esp,%ebp
  283b95:	57                   	push   %edi
  283b96:	56                   	push   %esi
  283b97:	53                   	push   %ebx
  283b98:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  283b9b:	68 e0 00 00 00       	push   $0xe0
  283ba0:	68 00 26 10 00       	push   $0x102600
  283ba5:	8b 45 10             	mov    0x10(%ebp),%eax
  283ba8:	83 c0 05             	add    $0x5,%eax
  283bab:	50                   	push   %eax
  283bac:	e8 28 fb ff ff       	call   2836d9 <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283bb1:	83 c4 10             	add    $0x10,%esp
  283bb4:	85 c0                	test   %eax,%eax
  283bb6:	74 6e                	je     283c26 <cmd_type+0x94>
  283bb8:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283bba:	83 ec 08             	sub    $0x8,%esp
  283bbd:	ff 70 3c             	pushl  0x3c(%eax)
  283bc0:	68 00 00 3c 00       	push   $0x3c0000
  283bc5:	e8 63 e7 ff ff       	call   28232d <memman_alloc_4k>
  283bca:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283bcc:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283bd3:	ff 75 0c             	pushl  0xc(%ebp)
  283bd6:	50                   	push   %eax
  283bd7:	ff 76 3c             	pushl  0x3c(%esi)
  283bda:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283bde:	50                   	push   %eax
  283bdf:	e8 4e fa ff ff       	call   283632 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283be4:	8b 46 3c             	mov    0x3c(%esi),%eax
  283be7:	83 c4 20             	add    $0x20,%esp
  283bea:	85 c0                	test   %eax,%eax
  283bec:	74 24                	je     283c12 <cmd_type+0x80>
  283bee:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283bf3:	83 ec 04             	sub    $0x4,%esp
  283bf6:	6a 01                	push   $0x1
  283bf8:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283bfc:	50                   	push   %eax
  283bfd:	ff 75 08             	pushl  0x8(%ebp)
  283c00:	e8 19 fd ff ff       	call   28391e <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283c05:	83 c3 01             	add    $0x1,%ebx
  283c08:	8b 46 3c             	mov    0x3c(%esi),%eax
  283c0b:	83 c4 10             	add    $0x10,%esp
  283c0e:	39 d8                	cmp    %ebx,%eax
  283c10:	77 e1                	ja     283bf3 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283c12:	83 ec 04             	sub    $0x4,%esp
  283c15:	50                   	push   %eax
  283c16:	57                   	push   %edi
  283c17:	68 00 00 3c 00       	push   $0x3c0000
  283c1c:	e8 38 e7 ff ff       	call   282359 <memman_free_4k>
  283c21:	83 c4 10             	add    $0x10,%esp
  283c24:	eb 2b                	jmp    283c51 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283c26:	83 ec 04             	sub    $0x4,%esp
  283c29:	6a 0f                	push   $0xf
  283c2b:	68 e5 54 28 00       	push   $0x2854e5
  283c30:	6a 00                	push   $0x0
  283c32:	6a 07                	push   $0x7
  283c34:	8b 45 08             	mov    0x8(%ebp),%eax
  283c37:	ff 70 08             	pushl  0x8(%eax)
  283c3a:	6a 08                	push   $0x8
  283c3c:	ff 30                	pushl  (%eax)
  283c3e:	e8 bd d4 ff ff       	call   281100 <putfonts8_asc_sht>
		cons_newline(cons);
  283c43:	83 c4 14             	add    $0x14,%esp
  283c46:	ff 75 08             	pushl  0x8(%ebp)
  283c49:	e8 fe fb ff ff       	call   28384c <cons_newline>
  283c4e:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283c51:	83 ec 0c             	sub    $0xc,%esp
  283c54:	ff 75 08             	pushl  0x8(%ebp)
  283c57:	e8 f0 fb ff ff       	call   28384c <cons_newline>
	return;
  283c5c:	83 c4 10             	add    $0x10,%esp
}
  283c5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283c62:	5b                   	pop    %ebx
  283c63:	5e                   	pop    %esi
  283c64:	5f                   	pop    %edi
  283c65:	5d                   	pop    %ebp
  283c66:	c3                   	ret    

00283c67 <cmd_exit>:
	}
	return 0;
}

void cmd_exit(struct CONSOLE *cons,int *fat)
{
  283c67:	55                   	push   %ebp
  283c68:	89 e5                	mov    %esp,%ebp
  283c6a:	57                   	push   %edi
  283c6b:	56                   	push   %esi
  283c6c:	53                   	push   %ebx
  283c6d:	83 ec 0c             	sub    $0xc,%esp
	extern struct TASKCTL *taskctl;
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_now();
  283c70:	e8 03 f2 ff ff       	call   282e78 <task_now>
  283c75:	89 c3                	mov    %eax,%ebx
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283c77:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct FIFO32 *fifo = (struct FIFO32 *) *((int *)0x0fec);
  283c7d:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	timer_cancel(cons->timer);
  283c83:	83 ec 0c             	sub    $0xc,%esp
  283c86:	8b 45 08             	mov    0x8(%ebp),%eax
  283c89:	ff 70 10             	pushl  0x10(%eax)
  283c8c:	e8 fa ef ff ff       	call   282c8b <timer_cancel>
	memman_free_4k(memman,(int)fat,4*2880);
  283c91:	83 c4 0c             	add    $0xc,%esp
  283c94:	68 00 2d 00 00       	push   $0x2d00
  283c99:	ff 75 0c             	pushl  0xc(%ebp)
  283c9c:	68 00 00 3c 00       	push   $0x3c0000
  283ca1:	e8 b3 e6 ff ff       	call   282359 <memman_free_4k>
	io_cli();
  283ca6:	e8 07 ce ff ff       	call   280ab2 <io_cli>
	if(cons->sht != 0)
  283cab:	8b 45 08             	mov    0x8(%ebp),%eax
  283cae:	8b 00                	mov    (%eax),%eax
  283cb0:	83 c4 10             	add    $0x10,%esp
  283cb3:	85 c0                	test   %eax,%eax
  283cb5:	74 25                	je     283cdc <cmd_exit+0x75>
		fifo32_put(fifo,cons->sht - shtctl->sheets0 + 768);
  283cb7:	83 ec 08             	sub    $0x8,%esp
  283cba:	81 c7 14 04 00 00    	add    $0x414,%edi
  283cc0:	29 f8                	sub    %edi,%eax
  283cc2:	c1 f8 03             	sar    $0x3,%eax
  283cc5:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  283ccb:	05 00 03 00 00       	add    $0x300,%eax
  283cd0:	50                   	push   %eax
  283cd1:	56                   	push   %esi
  283cd2:	e8 d2 de ff ff       	call   281ba9 <fifo32_put>
  283cd7:	83 c4 10             	add    $0x10,%esp
  283cda:	eb 29                	jmp    283d05 <cmd_exit+0x9e>
	else
		fifo32_put(fifo,task - taskctl->tasks0 + 1024 );
  283cdc:	83 ec 08             	sub    $0x8,%esp
  283cdf:	89 d8                	mov    %ebx,%eax
  283ce1:	2b 05 dc a5 28 00    	sub    0x28a5dc,%eax
  283ce7:	8d 80 08 f0 ff ff    	lea    -0xff8(%eax),%eax
  283ced:	c1 f8 02             	sar    $0x2,%eax
  283cf0:	69 c0 cf 46 7d 67    	imul   $0x677d46cf,%eax,%eax
  283cf6:	05 00 04 00 00       	add    $0x400,%eax
  283cfb:	50                   	push   %eax
  283cfc:	56                   	push   %esi
  283cfd:	e8 a7 de ff ff       	call   281ba9 <fifo32_put>
  283d02:	83 c4 10             	add    $0x10,%esp
	io_sti();
  283d05:	e8 aa cd ff ff       	call   280ab4 <io_sti>
	for(;;)
	{
		task_sleep(task);
  283d0a:	83 ec 0c             	sub    $0xc,%esp
  283d0d:	53                   	push   %ebx
  283d0e:	e8 f9 f4 ff ff       	call   28320c <task_sleep>
  283d13:	83 c4 10             	add    $0x10,%esp
  283d16:	eb f2                	jmp    283d0a <cmd_exit+0xa3>

00283d18 <cons_putstr0>:
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283d18:	55                   	push   %ebp
  283d19:	89 e5                	mov    %esp,%ebp
  283d1b:	56                   	push   %esi
  283d1c:	53                   	push   %ebx
  283d1d:	8b 75 08             	mov    0x8(%ebp),%esi
  283d20:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283d23:	0f b6 03             	movzbl (%ebx),%eax
  283d26:	84 c0                	test   %al,%al
  283d28:	74 1c                	je     283d46 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283d2a:	83 ec 04             	sub    $0x4,%esp
  283d2d:	6a 01                	push   $0x1
  283d2f:	0f be c0             	movsbl %al,%eax
  283d32:	50                   	push   %eax
  283d33:	56                   	push   %esi
  283d34:	e8 e5 fb ff ff       	call   28391e <cons_putchar>
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283d39:	83 c3 01             	add    $0x1,%ebx
  283d3c:	0f b6 03             	movzbl (%ebx),%eax
  283d3f:	83 c4 10             	add    $0x10,%esp
  283d42:	84 c0                	test   %al,%al
  283d44:	75 e4                	jne    283d2a <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283d46:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283d49:	5b                   	pop    %ebx
  283d4a:	5e                   	pop    %esi
  283d4b:	5d                   	pop    %ebp
  283d4c:	c3                   	ret    

00283d4d <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283d4d:	55                   	push   %ebp
  283d4e:	89 e5                	mov    %esp,%ebp
  283d50:	57                   	push   %edi
  283d51:	56                   	push   %esi
  283d52:	53                   	push   %ebx
  283d53:	83 ec 4c             	sub    $0x4c,%esp
  283d56:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283d59:	e8 1a f1 ff ff       	call   282e78 <task_now>
  283d5e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283d61:	0f b6 06             	movzbl (%esi),%eax
  283d64:	3c 20                	cmp    $0x20,%al
  283d66:	0f 8f 85 02 00 00    	jg     283ff1 <cmd_app+0x2a4>
  283d6c:	eb 16                	jmp    283d84 <cmd_app+0x37>
  283d6e:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283d72:	3c 20                	cmp    $0x20,%al
  283d74:	7e 13                	jle    283d89 <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283d76:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283d7a:	83 c3 01             	add    $0x1,%ebx
  283d7d:	83 fb 0d             	cmp    $0xd,%ebx
  283d80:	75 ec                	jne    283d6e <cmd_app+0x21>
  283d82:	eb 05                	jmp    283d89 <cmd_app+0x3c>
  283d84:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283d89:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283d8e:	83 ec 04             	sub    $0x4,%esp
  283d91:	68 e0 00 00 00       	push   $0xe0
  283d96:	68 00 26 10 00       	push   $0x102600
  283d9b:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283d9e:	50                   	push   %eax
  283d9f:	e8 35 f9 ff ff       	call   2836d9 <file_search>
  283da4:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283da7:	83 c4 10             	add    $0x10,%esp
  283daa:	85 c0                	test   %eax,%eax
  283dac:	75 48                	jne    283df6 <cmd_app+0xa9>
  283dae:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283db3:	0f 84 45 02 00 00    	je     283ffe <cmd_app+0x2b1>
	{
		name[i  ] = '.';
  283db9:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283dbe:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283dc3:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283dc8:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283dcd:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283dd2:	83 ec 04             	sub    $0x4,%esp
  283dd5:	68 e0 00 00 00       	push   $0xe0
  283dda:	68 00 26 10 00       	push   $0x102600
  283ddf:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283de2:	50                   	push   %eax
  283de3:	e8 f1 f8 ff ff       	call   2836d9 <file_search>
  283de8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283deb:	83 c4 10             	add    $0x10,%esp
  283dee:	85 c0                	test   %eax,%eax
  283df0:	0f 84 f4 01 00 00    	je     283fea <cmd_app+0x29d>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283df6:	83 ec 08             	sub    $0x8,%esp
  283df9:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283dfc:	ff 77 3c             	pushl  0x3c(%edi)
  283dff:	68 00 00 3c 00       	push   $0x3c0000
  283e04:	e8 24 e5 ff ff       	call   28232d <memman_alloc_4k>
  283e09:	89 c6                	mov    %eax,%esi
  283e0b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283e0e:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283e15:	ff 75 0c             	pushl  0xc(%ebp)
  283e18:	50                   	push   %eax
  283e19:	ff 77 3c             	pushl  0x3c(%edi)
  283e1c:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283e20:	50                   	push   %eax
  283e21:	e8 0c f8 ff ff       	call   283632 <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283e26:	83 c4 20             	add    $0x20,%esp
  283e29:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283e2d:	0f 86 79 01 00 00    	jbe    283fac <cmd_app+0x25f>
  283e33:	83 ec 04             	sub    $0x4,%esp
  283e36:	6a 04                	push   $0x4
  283e38:	68 f5 54 28 00       	push   $0x2854f5
  283e3d:	89 f0                	mov    %esi,%eax
  283e3f:	83 c0 04             	add    $0x4,%eax
  283e42:	50                   	push   %eax
  283e43:	e8 b0 dc ff ff       	call   281af8 <strncmp>
  283e48:	83 c4 10             	add    $0x10,%esp
  283e4b:	85 c0                	test   %eax,%eax
  283e4d:	0f 85 59 01 00 00    	jne    283fac <cmd_app+0x25f>
  283e53:	80 3e 00             	cmpb   $0x0,(%esi)
  283e56:	0f 85 50 01 00 00    	jne    283fac <cmd_app+0x25f>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283e5c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283e5f:	8b 08                	mov    (%eax),%ecx
			int esp		=	*((int *)(p+0x000c));
  283e61:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283e64:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283e67:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283e6a:	83 ec 08             	sub    $0x8,%esp
  283e6d:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  283e70:	51                   	push   %ecx
  283e71:	68 00 00 3c 00       	push   $0x3c0000
  283e76:	e8 b2 e4 ff ff       	call   28232d <memman_alloc_4k>
  283e7b:	89 c2                	mov    %eax,%edx
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
  283e7d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  283e80:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  283e83:	89 91 a8 00 00 00    	mov    %edx,0xa8(%ecx)
			set_segmdesc(task->ldt+0,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283e89:	68 fa 40 00 00       	push   $0x40fa
  283e8e:	ff 75 bc             	pushl  -0x44(%ebp)
  283e91:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283e94:	8b 40 3c             	mov    0x3c(%eax),%eax
  283e97:	83 e8 01             	sub    $0x1,%eax
  283e9a:	50                   	push   %eax
  283e9b:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  283e9e:	89 c8                	mov    %ecx,%eax
  283ea0:	05 94 00 00 00       	add    $0x94,%eax
  283ea5:	50                   	push   %eax
  283ea6:	e8 a7 d5 ff ff       	call   281452 <set_segmdesc>
			set_segmdesc(task->ldt+1,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
  283eab:	83 c4 20             	add    $0x20,%esp
  283eae:	68 f2 40 00 00       	push   $0x40f2
  283eb3:	ff 75 b4             	pushl  -0x4c(%ebp)
  283eb6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  283eb9:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283ebc:	50                   	push   %eax
  283ebd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283ec0:	05 9c 00 00 00       	add    $0x9c,%eax
  283ec5:	50                   	push   %eax
  283ec6:	e8 87 d5 ff ff       	call   281452 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283ecb:	83 c4 10             	add    $0x10,%esp
  283ece:	85 db                	test   %ebx,%ebx
  283ed0:	7e 1b                	jle    283eed <cmd_app+0x1a0>
  283ed2:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283ed7:	03 7d bc             	add    -0x44(%ebp),%edi
  283eda:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283edd:	01 f2                	add    %esi,%edx
  283edf:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283ee3:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			q = (char *)memman_alloc_4k(memman,segsiz);
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
			set_segmdesc(task->ldt+0,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(task->ldt+1,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283ee6:	83 c0 01             	add    $0x1,%eax
  283ee9:	39 c3                	cmp    %eax,%ebx
  283eeb:	75 f2                	jne    283edf <cmd_app+0x192>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,0*8+4,esp,1*8+4,&(task->tss.esp0));
  283eed:	83 ec 0c             	sub    $0xc,%esp
  283ef0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283ef3:	83 c0 30             	add    $0x30,%eax
  283ef6:	50                   	push   %eax
  283ef7:	6a 0c                	push   $0xc
  283ef9:	56                   	push   %esi
  283efa:	6a 04                	push   $0x4
  283efc:	6a 1b                	push   $0x1b
  283efe:	e8 4d 05 00 00       	call   284450 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283f03:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283f09:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283f0f:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283f15:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283f1b:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283f1e:	8b 03                	mov    (%ebx),%eax
  283f20:	83 e0 11             	and    $0x11,%eax
  283f23:	83 f8 11             	cmp    $0x11,%eax
  283f26:	75 14                	jne    283f3c <cmd_app+0x1ef>
  283f28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283f2b:	3b 43 08             	cmp    0x8(%ebx),%eax
  283f2e:	75 0c                	jne    283f3c <cmd_app+0x1ef>
					sheet_free(sht);
  283f30:	83 ec 0c             	sub    $0xc,%esp
  283f33:	56                   	push   %esi
  283f34:	e8 19 eb ff ff       	call   282a52 <sheet_free>
  283f39:	83 c4 10             	add    $0x10,%esp
  283f3c:	83 c3 28             	add    $0x28,%ebx
  283f3f:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,0*8+4,esp,1*8+4,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283f42:	39 fe                	cmp    %edi,%esi
  283f44:	75 d8                	jne    283f1e <cmd_app+0x1d1>
  283f46:	bb 00 00 00 00       	mov    $0x0,%ebx
  283f4b:	8b 75 c4             	mov    -0x3c(%ebp),%esi
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			for(int i=0;i<8;i++)
			{
				if(task->fhandle[i].buf != 0)
  283f4e:	89 da                	mov    %ebx,%edx
  283f50:	03 96 b0 00 00 00    	add    0xb0(%esi),%edx
  283f56:	8b 02                	mov    (%edx),%eax
  283f58:	85 c0                	test   %eax,%eax
  283f5a:	74 21                	je     283f7d <cmd_app+0x230>
				{
					memman_free_4k(memman,(int)task->fhandle[i].buf,task->fhandle[i].size);
  283f5c:	83 ec 04             	sub    $0x4,%esp
  283f5f:	ff 72 04             	pushl  0x4(%edx)
  283f62:	50                   	push   %eax
  283f63:	68 00 00 3c 00       	push   $0x3c0000
  283f68:	e8 ec e3 ff ff       	call   282359 <memman_free_4k>
					task->fhandle[i].buf = 0;
  283f6d:	8b 86 b0 00 00 00    	mov    0xb0(%esi),%eax
  283f73:	c7 04 18 00 00 00 00 	movl   $0x0,(%eax,%ebx,1)
  283f7a:	83 c4 10             	add    $0x10,%esp
  283f7d:	83 c3 0c             	add    $0xc,%ebx
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			for(int i=0;i<8;i++)
  283f80:	83 fb 60             	cmp    $0x60,%ebx
  283f83:	75 c9                	jne    283f4e <cmd_app+0x201>
				{
					memman_free_4k(memman,(int)task->fhandle[i].buf,task->fhandle[i].size);
					task->fhandle[i].buf = 0;
				}
			}
			timer_cancelall(&task->fifo);
  283f85:	83 ec 0c             	sub    $0xc,%esp
  283f88:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283f8b:	83 c0 10             	add    $0x10,%eax
  283f8e:	50                   	push   %eax
  283f8f:	e8 67 ed ff ff       	call   282cfb <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283f94:	83 c4 0c             	add    $0xc,%esp
  283f97:	ff 75 b8             	pushl  -0x48(%ebp)
  283f9a:	ff 75 b4             	pushl  -0x4c(%ebp)
  283f9d:	68 00 00 3c 00       	push   $0x3c0000
  283fa2:	e8 b2 e3 ff ff       	call   282359 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283fa7:	83 c4 10             	add    $0x10,%esp
  283faa:	eb 13                	jmp    283fbf <cmd_app+0x272>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283fac:	83 ec 08             	sub    $0x8,%esp
  283faf:	68 fa 54 28 00       	push   $0x2854fa
  283fb4:	ff 75 08             	pushl  0x8(%ebp)
  283fb7:	e8 5c fd ff ff       	call   283d18 <cons_putstr0>
  283fbc:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283fbf:	83 ec 04             	sub    $0x4,%esp
  283fc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283fc5:	ff 70 3c             	pushl  0x3c(%eax)
  283fc8:	ff 75 bc             	pushl  -0x44(%ebp)
  283fcb:	68 00 00 3c 00       	push   $0x3c0000
  283fd0:	e8 84 e3 ff ff       	call   282359 <memman_free_4k>
		cons_newline(cons);
  283fd5:	83 c4 04             	add    $0x4,%esp
  283fd8:	ff 75 08             	pushl  0x8(%ebp)
  283fdb:	e8 6c f8 ff ff       	call   28384c <cons_newline>
		return 1;
  283fe0:	83 c4 10             	add    $0x10,%esp
  283fe3:	b8 01 00 00 00       	mov    $0x1,%eax
  283fe8:	eb 14                	jmp    283ffe <cmd_app+0x2b1>
	}
	return 0;
  283fea:	b8 00 00 00 00       	mov    $0x0,%eax
  283fef:	eb 0d                	jmp    283ffe <cmd_app+0x2b1>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283ff1:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283ff4:	bb 01 00 00 00       	mov    $0x1,%ebx
  283ff9:	e9 70 fd ff ff       	jmp    283d6e <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283ffe:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284001:	5b                   	pop    %ebx
  284002:	5e                   	pop    %esi
  284003:	5f                   	pop    %edi
  284004:	5d                   	pop    %ebp
  284005:	c3                   	ret    

00284006 <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  284006:	55                   	push   %ebp
  284007:	89 e5                	mov    %esp,%ebp
  284009:	57                   	push   %edi
  28400a:	56                   	push   %esi
  28400b:	53                   	push   %ebx
  28400c:	83 ec 0c             	sub    $0xc,%esp
  28400f:	8b 7d 08             	mov    0x8(%ebp),%edi
  284012:	8b 75 0c             	mov    0xc(%ebp),%esi
  284015:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  284018:	85 c0                	test   %eax,%eax
  28401a:	7e 1d                	jle    284039 <cons_putstr1+0x33>
  28401c:	89 f3                	mov    %esi,%ebx
  28401e:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  284020:	83 ec 04             	sub    $0x4,%esp
  284023:	6a 01                	push   $0x1
  284025:	0f be 03             	movsbl (%ebx),%eax
  284028:	50                   	push   %eax
  284029:	57                   	push   %edi
  28402a:	e8 ef f8 ff ff       	call   28391e <cons_putchar>
  28402f:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  284032:	83 c4 10             	add    $0x10,%esp
  284035:	39 f3                	cmp    %esi,%ebx
  284037:	75 e7                	jne    284020 <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  284039:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28403c:	5b                   	pop    %ebx
  28403d:	5e                   	pop    %esi
  28403e:	5f                   	pop    %edi
  28403f:	5d                   	pop    %ebp
  284040:	c3                   	ret    

00284041 <open_constask>:

struct TASK *open_constask(struct SHEET *sht,unsigned int memtotal)
{
  284041:	55                   	push   %ebp
  284042:	89 e5                	mov    %esp,%ebp
  284044:	53                   	push   %ebx
  284045:	83 ec 04             	sub    $0x4,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_alloc();
  284048:	e8 3b ed ff ff       	call   282d88 <task_alloc>
  28404d:	89 c3                	mov    %eax,%ebx
	task->cons_stack = memman_alloc_4k(memman,64*1024);
  28404f:	83 ec 08             	sub    $0x8,%esp
  284052:	68 00 00 01 00       	push   $0x10000
  284057:	68 00 00 3c 00       	push   $0x3c0000
  28405c:	e8 cc e2 ff ff       	call   28232d <memman_alloc_4k>
  284061:	89 83 ac 00 00 00    	mov    %eax,0xac(%ebx)
	task->tss.esp = task->cons_stack+64*1024-12;
  284067:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
  28406d:	89 53 64             	mov    %edx,0x64(%ebx)
	task->tss.eip = (int)&console_task - 0x280000;
  284070:	c7 43 4c 4e 32 00 00 	movl   $0x324e,0x4c(%ebx)
	task->tss.es = 1*8;
  284077:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	task->tss.cs = 3*8;
  28407e:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	task->tss.ss = 1*8;
  284085:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	task->tss.ds = 1*8;
  28408c:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  284093:	00 00 00 
	task->tss.fs = 1*8;
  284096:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28409d:	00 00 00 
	task->tss.gs = 1*8;
  2840a0:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  2840a7:	00 00 00 
	*((int *)(task->tss.esp + 4)) = sht;
  2840aa:	8b 55 08             	mov    0x8(%ebp),%edx
  2840ad:	89 90 f8 ff 00 00    	mov    %edx,0xfff8(%eax)
	*((int *)(task->tss.esp + 8)) = memtotal;
  2840b3:	8b 43 64             	mov    0x64(%ebx),%eax
  2840b6:	8b 55 0c             	mov    0xc(%ebp),%edx
  2840b9:	89 50 08             	mov    %edx,0x8(%eax)
	task_run(task,2,2);
  2840bc:	83 c4 0c             	add    $0xc,%esp
  2840bf:	6a 02                	push   $0x2
  2840c1:	6a 02                	push   $0x2
  2840c3:	53                   	push   %ebx
  2840c4:	e8 a4 ee ff ff       	call   282f6d <task_run>
	int *cons_fifo = memman_alloc_4k(memman,128*4);
  2840c9:	83 c4 08             	add    $0x8,%esp
  2840cc:	68 00 02 00 00       	push   $0x200
  2840d1:	68 00 00 3c 00       	push   $0x3c0000
  2840d6:	e8 52 e2 ff ff       	call   28232d <memman_alloc_4k>
	fifo32_init(&task->fifo,128,cons_fifo,task);
  2840db:	53                   	push   %ebx
  2840dc:	50                   	push   %eax
  2840dd:	68 80 00 00 00       	push   $0x80
  2840e2:	8d 43 10             	lea    0x10(%ebx),%eax
  2840e5:	50                   	push   %eax
  2840e6:	e8 8d da ff ff       	call   281b78 <fifo32_init>
	return task;
}
  2840eb:	89 d8                	mov    %ebx,%eax
  2840ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2840f0:	c9                   	leave  
  2840f1:	c3                   	ret    

002840f2 <open_console>:

struct SHEET *open_console(struct SHTCTL *shtctl,unsigned int memtotal)
{
  2840f2:	55                   	push   %ebp
  2840f3:	89 e5                	mov    %esp,%ebp
  2840f5:	56                   	push   %esi
  2840f6:	53                   	push   %ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct SHEET *sht = sheet_alloc(shtctl);
  2840f7:	83 ec 0c             	sub    $0xc,%esp
  2840fa:	ff 75 08             	pushl  0x8(%ebp)
  2840fd:	e8 1a e3 ff ff       	call   28241c <sheet_alloc>
  284102:	89 c3                	mov    %eax,%ebx
	unsigned char *buf = (unsigned char *)memman_alloc_4k(memman,256*165);
  284104:	83 c4 08             	add    $0x8,%esp
  284107:	68 00 a5 00 00       	push   $0xa500
  28410c:	68 00 00 3c 00       	push   $0x3c0000
  284111:	e8 17 e2 ff ff       	call   28232d <memman_alloc_4k>
  284116:	89 c6                	mov    %eax,%esi
	sheet_setbuf(sht,buf,256,165,-1);
  284118:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  28411f:	68 a5 00 00 00       	push   $0xa5
  284124:	68 00 01 00 00       	push   $0x100
  284129:	50                   	push   %eax
  28412a:	53                   	push   %ebx
  28412b:	e8 5f e3 ff ff       	call   28248f <sheet_setbuf>
	make_window8(buf,256,165,"console",0);
  284130:	83 c4 14             	add    $0x14,%esp
  284133:	6a 00                	push   $0x0
  284135:	68 13 55 28 00       	push   $0x285513
  28413a:	68 a5 00 00 00       	push   $0xa5
  28413f:	68 00 01 00 00       	push   $0x100
  284144:	56                   	push   %esi
  284145:	e8 58 ce ff ff       	call   280fa2 <make_window8>
	make_textbox8(sht,8,28,240,128,COL8_000000);
  28414a:	83 c4 18             	add    $0x18,%esp
  28414d:	6a 00                	push   $0x0
  28414f:	68 80 00 00 00       	push   $0x80
  284154:	68 f0 00 00 00       	push   $0xf0
  284159:	6a 1c                	push   $0x1c
  28415b:	6a 08                	push   $0x8
  28415d:	53                   	push   %ebx
  28415e:	e8 02 d0 ff ff       	call   281165 <make_textbox8>
	sht->task = open_constask(sht,memtotal);
  284163:	83 c4 18             	add    $0x18,%esp
  284166:	ff 75 0c             	pushl  0xc(%ebp)
  284169:	53                   	push   %ebx
  28416a:	e8 d2 fe ff ff       	call   284041 <open_constask>
  28416f:	89 43 24             	mov    %eax,0x24(%ebx)
	sht->flags |= 0x20;
  284172:	83 4b 1c 20          	orl    $0x20,0x1c(%ebx)
	return sht;
}
  284176:	89 d8                	mov    %ebx,%eax
  284178:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28417b:	5b                   	pop    %ebx
  28417c:	5e                   	pop    %esi
  28417d:	5d                   	pop    %ebp
  28417e:	c3                   	ret    

0028417f <close_constask>:

void close_constask(struct TASK *task)
{
  28417f:	55                   	push   %ebp
  284180:	89 e5                	mov    %esp,%ebp
  284182:	53                   	push   %ebx
  284183:	83 ec 10             	sub    $0x10,%esp
  284186:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	task_sleep(task);
  284189:	53                   	push   %ebx
  28418a:	e8 7d f0 ff ff       	call   28320c <task_sleep>
	memman_free_4k(memman,task->cons_stack,64 * 1024);
  28418f:	83 c4 0c             	add    $0xc,%esp
  284192:	68 00 00 01 00       	push   $0x10000
  284197:	ff b3 ac 00 00 00    	pushl  0xac(%ebx)
  28419d:	68 00 00 3c 00       	push   $0x3c0000
  2841a2:	e8 b2 e1 ff ff       	call   282359 <memman_free_4k>
	memman_free_4k(memman,(int)task->fifo.buf,128*4);
  2841a7:	83 c4 0c             	add    $0xc,%esp
  2841aa:	68 00 02 00 00       	push   $0x200
  2841af:	ff 73 10             	pushl  0x10(%ebx)
  2841b2:	68 00 00 3c 00       	push   $0x3c0000
  2841b7:	e8 9d e1 ff ff       	call   282359 <memman_free_4k>
	task->flags = 0;
  2841bc:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
	return;
  2841c3:	83 c4 10             	add    $0x10,%esp
}
  2841c6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2841c9:	c9                   	leave  
  2841ca:	c3                   	ret    

002841cb <close_console>:

void close_console(struct SHEET *sht)
{
  2841cb:	55                   	push   %ebp
  2841cc:	89 e5                	mov    %esp,%ebp
  2841ce:	56                   	push   %esi
  2841cf:	53                   	push   %ebx
  2841d0:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = sht->task;
  2841d3:	8b 73 24             	mov    0x24(%ebx),%esi
	memman_free_4k(memman,(int)sht->buf,256*165);
  2841d6:	83 ec 04             	sub    $0x4,%esp
  2841d9:	68 00 a5 00 00       	push   $0xa500
  2841de:	ff 33                	pushl  (%ebx)
  2841e0:	68 00 00 3c 00       	push   $0x3c0000
  2841e5:	e8 6f e1 ff ff       	call   282359 <memman_free_4k>
	sheet_free(sht);
  2841ea:	89 1c 24             	mov    %ebx,(%esp)
  2841ed:	e8 60 e8 ff ff       	call   282a52 <sheet_free>
	close_constask(task);
  2841f2:	89 34 24             	mov    %esi,(%esp)
  2841f5:	e8 85 ff ff ff       	call   28417f <close_constask>
	return;
  2841fa:	83 c4 10             	add    $0x10,%esp
}
  2841fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
  284200:	5b                   	pop    %ebx
  284201:	5e                   	pop    %esi
  284202:	5d                   	pop    %ebp
  284203:	c3                   	ret    

00284204 <cmd_start>:

void cmd_start(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  284204:	55                   	push   %ebp
  284205:	89 e5                	mov    %esp,%ebp
  284207:	57                   	push   %edi
  284208:	56                   	push   %esi
  284209:	53                   	push   %ebx
  28420a:	83 ec 14             	sub    $0x14,%esp
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
  28420d:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct SHEET *sht = open_console(shtctl,memtotal);
  284213:	ff 75 10             	pushl  0x10(%ebp)
  284216:	57                   	push   %edi
  284217:	e8 d6 fe ff ff       	call   2840f2 <open_console>
  28421c:	89 c6                	mov    %eax,%esi
	struct FIFO32 *fifo = &sht->task->fifo;
  28421e:	8b 40 24             	mov    0x24(%eax),%eax
  284221:	8d 58 10             	lea    0x10(%eax),%ebx
	int i;
	sheet_slide(sht,32,4);
  284224:	83 c4 0c             	add    $0xc,%esp
  284227:	6a 04                	push   $0x4
  284229:	6a 20                	push   $0x20
  28422b:	56                   	push   %esi
  28422c:	e8 c2 e7 ff ff       	call   2829f3 <sheet_slide>
	sheet_updown(sht,shtctl->top);
  284231:	83 c4 08             	add    $0x8,%esp
  284234:	ff 77 10             	pushl  0x10(%edi)
  284237:	56                   	push   %esi
  284238:	e8 cd e6 ff ff       	call   28290a <sheet_updown>
	for(i = 6;cmdline[i]!=0;i++)
  28423d:	8b 45 0c             	mov    0xc(%ebp),%eax
  284240:	0f b6 40 06          	movzbl 0x6(%eax),%eax
  284244:	83 c4 10             	add    $0x10,%esp
  284247:	84 c0                	test   %al,%al
  284249:	74 26                	je     284271 <cmd_start+0x6d>
  28424b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28424e:	8d 72 07             	lea    0x7(%edx),%esi
	{
		fifo32_put(fifo,cmdline[i] + 256);
  284251:	83 ec 08             	sub    $0x8,%esp
  284254:	0f be c0             	movsbl %al,%eax
  284257:	05 00 01 00 00       	add    $0x100,%eax
  28425c:	50                   	push   %eax
  28425d:	53                   	push   %ebx
  28425e:	e8 46 d9 ff ff       	call   281ba9 <fifo32_put>
  284263:	83 c6 01             	add    $0x1,%esi
	struct SHEET *sht = open_console(shtctl,memtotal);
	struct FIFO32 *fifo = &sht->task->fifo;
	int i;
	sheet_slide(sht,32,4);
	sheet_updown(sht,shtctl->top);
	for(i = 6;cmdline[i]!=0;i++)
  284266:	0f b6 46 ff          	movzbl -0x1(%esi),%eax
  28426a:	83 c4 10             	add    $0x10,%esp
  28426d:	84 c0                	test   %al,%al
  28426f:	75 e0                	jne    284251 <cmd_start+0x4d>
	{
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  284271:	83 ec 08             	sub    $0x8,%esp
  284274:	68 0a 01 00 00       	push   $0x10a
  284279:	53                   	push   %ebx
  28427a:	e8 2a d9 ff ff       	call   281ba9 <fifo32_put>
	cons_newline(cons);
  28427f:	83 c4 04             	add    $0x4,%esp
  284282:	ff 75 08             	pushl  0x8(%ebp)
  284285:	e8 c2 f5 ff ff       	call   28384c <cons_newline>
	return;
  28428a:	83 c4 10             	add    $0x10,%esp
}
  28428d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284290:	5b                   	pop    %ebx
  284291:	5e                   	pop    %esi
  284292:	5f                   	pop    %edi
  284293:	5d                   	pop    %ebp
  284294:	c3                   	ret    

00284295 <cmd_ncst>:

void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  284295:	55                   	push   %ebp
  284296:	89 e5                	mov    %esp,%ebp
  284298:	56                   	push   %esi
  284299:	53                   	push   %ebx
  28429a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct TASK *task = open_constask(0,memtotal);
  28429d:	83 ec 08             	sub    $0x8,%esp
  2842a0:	ff 75 10             	pushl  0x10(%ebp)
  2842a3:	6a 00                	push   $0x0
  2842a5:	e8 97 fd ff ff       	call   284041 <open_constask>
	struct FIFO32 *fifo = &task->fifo;
  2842aa:	8d 70 10             	lea    0x10(%eax),%esi
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  2842ad:	0f b6 53 05          	movzbl 0x5(%ebx),%edx
  2842b1:	83 c4 10             	add    $0x10,%esp
  2842b4:	84 d2                	test   %dl,%dl
  2842b6:	74 24                	je     2842dc <cmd_ncst+0x47>
  2842b8:	83 c3 06             	add    $0x6,%ebx
		fifo32_put(fifo,cmdline[i] + 256);
  2842bb:	83 ec 08             	sub    $0x8,%esp
  2842be:	0f be d2             	movsbl %dl,%edx
  2842c1:	81 c2 00 01 00 00    	add    $0x100,%edx
  2842c7:	52                   	push   %edx
  2842c8:	56                   	push   %esi
  2842c9:	e8 db d8 ff ff       	call   281ba9 <fifo32_put>
  2842ce:	83 c3 01             	add    $0x1,%ebx
void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
	struct TASK *task = open_constask(0,memtotal);
	struct FIFO32 *fifo = &task->fifo;
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  2842d1:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
  2842d5:	83 c4 10             	add    $0x10,%esp
  2842d8:	84 d2                	test   %dl,%dl
  2842da:	75 df                	jne    2842bb <cmd_ncst+0x26>
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  2842dc:	83 ec 08             	sub    $0x8,%esp
  2842df:	68 0a 01 00 00       	push   $0x10a
  2842e4:	56                   	push   %esi
  2842e5:	e8 bf d8 ff ff       	call   281ba9 <fifo32_put>
	cons_newline(cons);
  2842ea:	83 c4 04             	add    $0x4,%esp
  2842ed:	ff 75 08             	pushl  0x8(%ebp)
  2842f0:	e8 57 f5 ff ff       	call   28384c <cons_newline>
	return;
  2842f5:	83 c4 10             	add    $0x10,%esp
}
  2842f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2842fb:	5b                   	pop    %ebx
  2842fc:	5e                   	pop    %esi
  2842fd:	5d                   	pop    %ebp
  2842fe:	c3                   	ret    

002842ff <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  2842ff:	55                   	push   %ebp
  284300:	89 e5                	mov    %esp,%ebp
  284302:	53                   	push   %ebx
  284303:	83 ec 0c             	sub    $0xc,%esp
  284306:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  284309:	68 1b 55 28 00       	push   $0x28551b
  28430e:	53                   	push   %ebx
  28430f:	e8 7e d7 ff ff       	call   281a92 <strcmp>
  284314:	83 c4 10             	add    $0x10,%esp
  284317:	85 c0                	test   %eax,%eax
  284319:	75 16                	jne    284331 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  28431b:	83 ec 08             	sub    $0x8,%esp
  28431e:	ff 75 14             	pushl  0x14(%ebp)
  284321:	ff 75 0c             	pushl  0xc(%ebp)
  284324:	e8 bd f6 ff ff       	call   2839e6 <cmd_mem>
  284329:	83 c4 10             	add    $0x10,%esp
  28432c:	e9 1a 01 00 00       	jmp    28444b <cons_runcmd+0x14c>
	else if(strcmp(cmdline,"cls") == 0)
  284331:	83 ec 08             	sub    $0x8,%esp
  284334:	68 1f 55 28 00       	push   $0x28551f
  284339:	53                   	push   %ebx
  28433a:	e8 53 d7 ff ff       	call   281a92 <strcmp>
  28433f:	83 c4 10             	add    $0x10,%esp
  284342:	85 c0                	test   %eax,%eax
  284344:	75 13                	jne    284359 <cons_runcmd+0x5a>
		cmd_cls(cons);
  284346:	83 ec 0c             	sub    $0xc,%esp
  284349:	ff 75 0c             	pushl  0xc(%ebp)
  28434c:	e8 23 f7 ff ff       	call   283a74 <cmd_cls>
  284351:	83 c4 10             	add    $0x10,%esp
  284354:	e9 f2 00 00 00       	jmp    28444b <cons_runcmd+0x14c>
	else if(strcmp(cmdline,"dir") == 0)
  284359:	83 ec 08             	sub    $0x8,%esp
  28435c:	68 23 55 28 00       	push   $0x285523
  284361:	53                   	push   %ebx
  284362:	e8 2b d7 ff ff       	call   281a92 <strcmp>
  284367:	83 c4 10             	add    $0x10,%esp
  28436a:	85 c0                	test   %eax,%eax
  28436c:	75 13                	jne    284381 <cons_runcmd+0x82>
		cmd_dir(cons);
  28436e:	83 ec 0c             	sub    $0xc,%esp
  284371:	ff 75 0c             	pushl  0xc(%ebp)
  284374:	e8 63 f7 ff ff       	call   283adc <cmd_dir>
  284379:	83 c4 10             	add    $0x10,%esp
  28437c:	e9 ca 00 00 00       	jmp    28444b <cons_runcmd+0x14c>
	//else if(strncmp(cmdline,"type ",5) == 0)
	//	cmd_type(cons,fat,cmdline);
	else if(strcmp(cmdline,"exit") == 0)
  284381:	83 ec 08             	sub    $0x8,%esp
  284384:	68 27 55 28 00       	push   $0x285527
  284389:	53                   	push   %ebx
  28438a:	e8 03 d7 ff ff       	call   281a92 <strcmp>
  28438f:	83 c4 10             	add    $0x10,%esp
  284392:	85 c0                	test   %eax,%eax
  284394:	75 0e                	jne    2843a4 <cons_runcmd+0xa5>
		cmd_exit(cons,fat);
  284396:	83 ec 08             	sub    $0x8,%esp
  284399:	ff 75 10             	pushl  0x10(%ebp)
  28439c:	ff 75 0c             	pushl  0xc(%ebp)
  28439f:	e8 c3 f8 ff ff       	call   283c67 <cmd_exit>
	else if(strncmp(cmdline,"start ",6) == 0)
  2843a4:	83 ec 04             	sub    $0x4,%esp
  2843a7:	6a 06                	push   $0x6
  2843a9:	68 2c 55 28 00       	push   $0x28552c
  2843ae:	53                   	push   %ebx
  2843af:	e8 44 d7 ff ff       	call   281af8 <strncmp>
  2843b4:	83 c4 10             	add    $0x10,%esp
  2843b7:	85 c0                	test   %eax,%eax
  2843b9:	75 14                	jne    2843cf <cons_runcmd+0xd0>
		cmd_start(cons,cmdline,memtotal);
  2843bb:	83 ec 04             	sub    $0x4,%esp
  2843be:	ff 75 14             	pushl  0x14(%ebp)
  2843c1:	53                   	push   %ebx
  2843c2:	ff 75 0c             	pushl  0xc(%ebp)
  2843c5:	e8 3a fe ff ff       	call   284204 <cmd_start>
  2843ca:	83 c4 10             	add    $0x10,%esp
  2843cd:	eb 7c                	jmp    28444b <cons_runcmd+0x14c>
	else if(strncmp(cmdline,"ncst ",5) == 0)
  2843cf:	83 ec 04             	sub    $0x4,%esp
  2843d2:	6a 05                	push   $0x5
  2843d4:	68 33 55 28 00       	push   $0x285533
  2843d9:	53                   	push   %ebx
  2843da:	e8 19 d7 ff ff       	call   281af8 <strncmp>
  2843df:	83 c4 10             	add    $0x10,%esp
  2843e2:	85 c0                	test   %eax,%eax
  2843e4:	75 14                	jne    2843fa <cons_runcmd+0xfb>
		cmd_ncst(cons,cmdline,memtotal);
  2843e6:	83 ec 04             	sub    $0x4,%esp
  2843e9:	ff 75 14             	pushl  0x14(%ebp)
  2843ec:	53                   	push   %ebx
  2843ed:	ff 75 0c             	pushl  0xc(%ebp)
  2843f0:	e8 a0 fe ff ff       	call   284295 <cmd_ncst>
  2843f5:	83 c4 10             	add    $0x10,%esp
  2843f8:	eb 51                	jmp    28444b <cons_runcmd+0x14c>
	else if(cmdline[0] != 0)
  2843fa:	80 3b 00             	cmpb   $0x0,(%ebx)
  2843fd:	74 4c                	je     28444b <cons_runcmd+0x14c>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  2843ff:	83 ec 04             	sub    $0x4,%esp
  284402:	53                   	push   %ebx
  284403:	ff 75 10             	pushl  0x10(%ebp)
  284406:	ff 75 0c             	pushl  0xc(%ebp)
  284409:	e8 3f f9 ff ff       	call   283d4d <cmd_app>
  28440e:	83 c4 10             	add    $0x10,%esp
  284411:	85 c0                	test   %eax,%eax
  284413:	75 36                	jne    28444b <cons_runcmd+0x14c>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  284415:	83 ec 04             	sub    $0x4,%esp
  284418:	6a 0c                	push   $0xc
  28441a:	68 39 55 28 00       	push   $0x285539
  28441f:	6a 00                	push   $0x0
  284421:	6a 07                	push   $0x7
  284423:	8b 45 0c             	mov    0xc(%ebp),%eax
  284426:	ff 70 08             	pushl  0x8(%eax)
  284429:	6a 08                	push   $0x8
  28442b:	ff 30                	pushl  (%eax)
  28442d:	e8 ce cc ff ff       	call   281100 <putfonts8_asc_sht>
			cons_newline(cons);
  284432:	83 c4 14             	add    $0x14,%esp
  284435:	ff 75 0c             	pushl  0xc(%ebp)
  284438:	e8 0f f4 ff ff       	call   28384c <cons_newline>
			cons_newline(cons);
  28443d:	83 c4 04             	add    $0x4,%esp
  284440:	ff 75 0c             	pushl  0xc(%ebp)
  284443:	e8 04 f4 ff ff       	call   28384c <cons_newline>
  284448:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  28444b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28444e:	c9                   	leave  
  28444f:	c3                   	ret    

00284450 <start_app>:
  284450:	60                   	pusha  
  284451:	8b 44 24 24          	mov    0x24(%esp),%eax
  284455:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  284459:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  28445d:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  284461:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  284465:	89 65 00             	mov    %esp,0x0(%ebp)
  284468:	8c 55 04             	mov    %ss,0x4(%ebp)
  28446b:	8e c3                	mov    %ebx,%es
  28446d:	8e db                	mov    %ebx,%ds
  28446f:	8e e3                	mov    %ebx,%fs
  284471:	8e eb                	mov    %ebx,%gs
  284473:	83 c9 03             	or     $0x3,%ecx
  284476:	83 cb 03             	or     $0x3,%ebx
  284479:	53                   	push   %ebx
  28447a:	52                   	push   %edx
  28447b:	51                   	push   %ecx
  28447c:	50                   	push   %eax
  28447d:	cb                   	lret   

0028447e <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  28447e:	55                   	push   %ebp
  28447f:	89 e5                	mov    %esp,%ebp
  284481:	53                   	push   %ebx
  284482:	83 ec 44             	sub    $0x44,%esp
	struct TASK *task = task_now();
  284485:	e8 ee e9 ff ff       	call   282e78 <task_now>
  28448a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct CONSOLE *cons = task->cons;
  28448d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284490:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
  284496:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int ds_base = task->ds_base;
  284499:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28449c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
  2844a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  2844a5:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  2844aa:	8b 00                	mov    (%eax),%eax
  2844ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  2844af:	8d 45 24             	lea    0x24(%ebp),%eax
  2844b2:	83 c0 04             	add    $0x4,%eax
  2844b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	   */
	struct FILEINFO *finfo;
	struct FILEHANDLE *fh;
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
  2844b8:	c7 45 d4 00 00 3c 00 	movl   $0x3c0000,-0x2c(%ebp)
	
	
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  2844bf:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  2844c3:	75 1c                	jne    2844e1 <sys_api+0x63>
  2844c5:	8b 45 24             	mov    0x24(%ebp),%eax
  2844c8:	0f b6 c0             	movzbl %al,%eax
  2844cb:	83 ec 04             	sub    $0x4,%esp
  2844ce:	6a 01                	push   $0x1
  2844d0:	50                   	push   %eax
  2844d1:	ff 75 e4             	pushl  -0x1c(%ebp)
  2844d4:	e8 45 f4 ff ff       	call   28391e <cons_putchar>
  2844d9:	83 c4 10             	add    $0x10,%esp
  2844dc:	e9 0b 09 00 00       	jmp    284dec <sys_api+0x96e>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  2844e1:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  2844e5:	75 1c                	jne    284503 <sys_api+0x85>
  2844e7:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2844ea:	8b 45 18             	mov    0x18(%ebp),%eax
  2844ed:	01 d0                	add    %edx,%eax
  2844ef:	83 ec 08             	sub    $0x8,%esp
  2844f2:	50                   	push   %eax
  2844f3:	ff 75 e4             	pushl  -0x1c(%ebp)
  2844f6:	e8 1d f8 ff ff       	call   283d18 <cons_putstr0>
  2844fb:	83 c4 10             	add    $0x10,%esp
  2844fe:	e9 e9 08 00 00       	jmp    284dec <sys_api+0x96e>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  284503:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  284507:	75 1f                	jne    284528 <sys_api+0xaa>
  284509:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28450c:	8b 45 18             	mov    0x18(%ebp),%eax
  28450f:	01 d0                	add    %edx,%eax
  284511:	83 ec 04             	sub    $0x4,%esp
  284514:	ff 75 20             	pushl  0x20(%ebp)
  284517:	50                   	push   %eax
  284518:	ff 75 e4             	pushl  -0x1c(%ebp)
  28451b:	e8 e6 fa ff ff       	call   284006 <cons_putstr1>
  284520:	83 c4 10             	add    $0x10,%esp
  284523:	e9 c4 08 00 00       	jmp    284dec <sys_api+0x96e>
	else if(edx == 4)
  284528:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  28452c:	75 0b                	jne    284539 <sys_api+0xbb>
	{
		//exit app
		return &(task->tss.esp0);
  28452e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284531:	83 c0 30             	add    $0x30,%eax
  284534:	e9 b8 08 00 00       	jmp    284df1 <sys_api+0x973>
	}
	else if(edx == 5)
  284539:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  28453d:	0f 85 d1 00 00 00    	jne    284614 <sys_api+0x196>
	{
		sht = sheet_alloc(shtctl);
  284543:	83 ec 0c             	sub    $0xc,%esp
  284546:	ff 75 dc             	pushl  -0x24(%ebp)
  284549:	e8 ce de ff ff       	call   28241c <sheet_alloc>
  28454e:	83 c4 10             	add    $0x10,%esp
  284551:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sht->task = task;
  284554:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284557:	8b 55 e8             	mov    -0x18(%ebp),%edx
  28455a:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  28455d:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284560:	8b 40 1c             	mov    0x1c(%eax),%eax
  284563:	83 c8 11             	or     $0x11,%eax
  284566:	89 c2                	mov    %eax,%edx
  284568:	8b 45 bc             	mov    -0x44(%ebp),%eax
  28456b:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  28456e:	8b 45 24             	mov    0x24(%ebp),%eax
  284571:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  284574:	8b 55 18             	mov    0x18(%ebp),%edx
  284577:	01 ca                	add    %ecx,%edx
  284579:	83 ec 0c             	sub    $0xc,%esp
  28457c:	50                   	push   %eax
  28457d:	ff 75 08             	pushl  0x8(%ebp)
  284580:	ff 75 0c             	pushl  0xc(%ebp)
  284583:	52                   	push   %edx
  284584:	ff 75 bc             	pushl  -0x44(%ebp)
  284587:	e8 03 df ff ff       	call   28248f <sheet_setbuf>
  28458c:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  28458f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284592:	8b 45 20             	mov    0x20(%ebp),%eax
  284595:	01 d0                	add    %edx,%eax
  284597:	89 c1                	mov    %eax,%ecx
  284599:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28459c:	8b 45 18             	mov    0x18(%ebp),%eax
  28459f:	01 d0                	add    %edx,%eax
  2845a1:	83 ec 0c             	sub    $0xc,%esp
  2845a4:	6a 00                	push   $0x0
  2845a6:	51                   	push   %ecx
  2845a7:	ff 75 08             	pushl  0x8(%ebp)
  2845aa:	ff 75 0c             	pushl  0xc(%ebp)
  2845ad:	50                   	push   %eax
  2845ae:	e8 ef c9 ff ff       	call   280fa2 <make_window8>
  2845b3:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,((shtctl->xsize - esi)/2)&~3,(shtctl->ysize - edi)/2);
  2845b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2845b9:	8b 40 0c             	mov    0xc(%eax),%eax
  2845bc:	2b 45 08             	sub    0x8(%ebp),%eax
  2845bf:	89 c2                	mov    %eax,%edx
  2845c1:	c1 ea 1f             	shr    $0x1f,%edx
  2845c4:	01 d0                	add    %edx,%eax
  2845c6:	d1 f8                	sar    %eax
  2845c8:	89 c1                	mov    %eax,%ecx
  2845ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2845cd:	8b 40 08             	mov    0x8(%eax),%eax
  2845d0:	2b 45 0c             	sub    0xc(%ebp),%eax
  2845d3:	89 c2                	mov    %eax,%edx
  2845d5:	c1 ea 1f             	shr    $0x1f,%edx
  2845d8:	01 d0                	add    %edx,%eax
  2845da:	d1 f8                	sar    %eax
  2845dc:	83 e0 fc             	and    $0xfffffffc,%eax
  2845df:	83 ec 04             	sub    $0x4,%esp
  2845e2:	51                   	push   %ecx
  2845e3:	50                   	push   %eax
  2845e4:	ff 75 bc             	pushl  -0x44(%ebp)
  2845e7:	e8 07 e4 ff ff       	call   2829f3 <sheet_slide>
  2845ec:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  2845ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2845f2:	8b 40 10             	mov    0x10(%eax),%eax
  2845f5:	83 ec 08             	sub    $0x8,%esp
  2845f8:	50                   	push   %eax
  2845f9:	ff 75 bc             	pushl  -0x44(%ebp)
  2845fc:	e8 09 e3 ff ff       	call   28290a <sheet_updown>
  284601:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  284604:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284607:	8d 50 1c             	lea    0x1c(%eax),%edx
  28460a:	8b 45 bc             	mov    -0x44(%ebp),%eax
  28460d:	89 02                	mov    %eax,(%edx)
  28460f:	e9 d8 07 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 6)
  284614:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  284618:	75 74                	jne    28468e <sys_api+0x210>
	{
		sht = (struct SHEET *)ebx;
  28461a:	8b 45 18             	mov    0x18(%ebp),%eax
  28461d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  284620:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284623:	8b 45 10             	mov    0x10(%ebp),%eax
  284626:	01 d0                	add    %edx,%eax
  284628:	89 c3                	mov    %eax,%ebx
  28462a:	8b 45 24             	mov    0x24(%ebp),%eax
  28462d:	0f be c8             	movsbl %al,%ecx
  284630:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284633:	8b 50 04             	mov    0x4(%eax),%edx
  284636:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284639:	8b 00                	mov    (%eax),%eax
  28463b:	83 ec 08             	sub    $0x8,%esp
  28463e:	53                   	push   %ebx
  28463f:	51                   	push   %ecx
  284640:	ff 75 08             	pushl  0x8(%ebp)
  284643:	ff 75 0c             	pushl  0xc(%ebp)
  284646:	52                   	push   %edx
  284647:	50                   	push   %eax
  284648:	e8 b7 cd ff ff       	call   281404 <putfonts8_asc>
  28464d:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284650:	8b 45 18             	mov    0x18(%ebp),%eax
  284653:	83 e0 01             	and    $0x1,%eax
  284656:	85 c0                	test   %eax,%eax
  284658:	0f 85 8e 07 00 00    	jne    284dec <sys_api+0x96e>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  28465e:	8b 45 08             	mov    0x8(%ebp),%eax
  284661:	8d 50 10             	lea    0x10(%eax),%edx
  284664:	8b 45 20             	mov    0x20(%ebp),%eax
  284667:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  28466e:	8b 45 0c             	mov    0xc(%ebp),%eax
  284671:	01 c8                	add    %ecx,%eax
  284673:	83 ec 0c             	sub    $0xc,%esp
  284676:	52                   	push   %edx
  284677:	50                   	push   %eax
  284678:	ff 75 08             	pushl  0x8(%ebp)
  28467b:	ff 75 0c             	pushl  0xc(%ebp)
  28467e:	ff 75 bc             	pushl  -0x44(%ebp)
  284681:	e8 50 e2 ff ff       	call   2828d6 <sheet_refresh>
  284686:	83 c4 20             	add    $0x20,%esp
  284689:	e9 5e 07 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 7)
  28468e:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  284692:	75 68                	jne    2846fc <sys_api+0x27e>
	{
		sht = (struct SHEET *)ebx;
  284694:	8b 45 18             	mov    0x18(%ebp),%eax
  284697:	89 45 bc             	mov    %eax,-0x44(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  28469a:	8b 5d 24             	mov    0x24(%ebp),%ebx
  28469d:	8b 45 10             	mov    0x10(%ebp),%eax
  2846a0:	0f b6 c8             	movzbl %al,%ecx
  2846a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2846a6:	8b 50 04             	mov    0x4(%eax),%edx
  2846a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2846ac:	8b 00                	mov    (%eax),%eax
  2846ae:	83 ec 04             	sub    $0x4,%esp
  2846b1:	ff 75 08             	pushl  0x8(%ebp)
  2846b4:	ff 75 0c             	pushl  0xc(%ebp)
  2846b7:	ff 75 20             	pushl  0x20(%ebp)
  2846ba:	53                   	push   %ebx
  2846bb:	51                   	push   %ecx
  2846bc:	52                   	push   %edx
  2846bd:	50                   	push   %eax
  2846be:	e8 de c5 ff ff       	call   280ca1 <boxfill8>
  2846c3:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2846c6:	8b 45 18             	mov    0x18(%ebp),%eax
  2846c9:	83 e0 01             	and    $0x1,%eax
  2846cc:	85 c0                	test   %eax,%eax
  2846ce:	0f 85 18 07 00 00    	jne    284dec <sys_api+0x96e>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  2846d4:	8b 45 08             	mov    0x8(%ebp),%eax
  2846d7:	8d 48 01             	lea    0x1(%eax),%ecx
  2846da:	8b 45 0c             	mov    0xc(%ebp),%eax
  2846dd:	8d 50 01             	lea    0x1(%eax),%edx
  2846e0:	8b 45 24             	mov    0x24(%ebp),%eax
  2846e3:	83 ec 0c             	sub    $0xc,%esp
  2846e6:	51                   	push   %ecx
  2846e7:	52                   	push   %edx
  2846e8:	ff 75 20             	pushl  0x20(%ebp)
  2846eb:	50                   	push   %eax
  2846ec:	ff 75 bc             	pushl  -0x44(%ebp)
  2846ef:	e8 e2 e1 ff ff       	call   2828d6 <sheet_refresh>
  2846f4:	83 c4 20             	add    $0x20,%esp
  2846f7:	e9 f0 06 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 8)
  2846fc:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284700:	75 3b                	jne    28473d <sys_api+0x2bf>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  284702:	8b 55 18             	mov    0x18(%ebp),%edx
  284705:	8b 45 e0             	mov    -0x20(%ebp),%eax
  284708:	01 d0                	add    %edx,%eax
  28470a:	83 ec 0c             	sub    $0xc,%esp
  28470d:	50                   	push   %eax
  28470e:	e8 78 d8 ff ff       	call   281f8b <memman_init>
  284713:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  284716:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  28471a:	8b 45 20             	mov    0x20(%ebp),%eax
  28471d:	8b 55 24             	mov    0x24(%ebp),%edx
  284720:	89 d3                	mov    %edx,%ebx
  284722:	8b 4d 18             	mov    0x18(%ebp),%ecx
  284725:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284728:	01 ca                	add    %ecx,%edx
  28472a:	83 ec 04             	sub    $0x4,%esp
  28472d:	50                   	push   %eax
  28472e:	53                   	push   %ebx
  28472f:	52                   	push   %edx
  284730:	e8 a5 d9 ff ff       	call   2820da <memman_free>
  284735:	83 c4 10             	add    $0x10,%esp
  284738:	e9 af 06 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 9)
  28473d:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  284741:	75 31                	jne    284774 <sys_api+0x2f6>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  284743:	8b 45 20             	mov    0x20(%ebp),%eax
  284746:	83 c0 0f             	add    $0xf,%eax
  284749:	83 e0 f0             	and    $0xfffffff0,%eax
  28474c:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  28474f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284752:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284755:	8b 45 20             	mov    0x20(%ebp),%eax
  284758:	8b 4d 18             	mov    0x18(%ebp),%ecx
  28475b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28475e:	01 ca                	add    %ecx,%edx
  284760:	83 ec 08             	sub    $0x8,%esp
  284763:	50                   	push   %eax
  284764:	52                   	push   %edx
  284765:	e8 87 d8 ff ff       	call   281ff1 <memman_alloc>
  28476a:	83 c4 10             	add    $0x10,%esp
  28476d:	89 03                	mov    %eax,(%ebx)
  28476f:	e9 78 06 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 10)
  284774:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  284778:	75 2f                	jne    2847a9 <sys_api+0x32b>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  28477a:	8b 45 20             	mov    0x20(%ebp),%eax
  28477d:	83 c0 0f             	add    $0xf,%eax
  284780:	83 e0 f0             	and    $0xfffffff0,%eax
  284783:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  284786:	8b 45 20             	mov    0x20(%ebp),%eax
  284789:	8b 55 24             	mov    0x24(%ebp),%edx
  28478c:	89 d3                	mov    %edx,%ebx
  28478e:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  284791:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284794:	01 ca                	add    %ecx,%edx
  284796:	83 ec 04             	sub    $0x4,%esp
  284799:	50                   	push   %eax
  28479a:	53                   	push   %ebx
  28479b:	52                   	push   %edx
  28479c:	e8 39 d9 ff ff       	call   2820da <memman_free>
  2847a1:	83 c4 10             	add    $0x10,%esp
  2847a4:	e9 43 06 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 11)
  2847a9:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  2847ad:	75 58                	jne    284807 <sys_api+0x389>
	{
		sht = (struct SHEET *)ebx;
  2847af:	8b 45 18             	mov    0x18(%ebp),%eax
  2847b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  2847b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2847b8:	8b 10                	mov    (%eax),%edx
  2847ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2847bd:	8b 40 04             	mov    0x4(%eax),%eax
  2847c0:	0f af 45 08          	imul   0x8(%ebp),%eax
  2847c4:	89 c1                	mov    %eax,%ecx
  2847c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2847c9:	01 c8                	add    %ecx,%eax
  2847cb:	01 d0                	add    %edx,%eax
  2847cd:	8b 55 24             	mov    0x24(%ebp),%edx
  2847d0:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  2847d2:	8b 45 18             	mov    0x18(%ebp),%eax
  2847d5:	83 e0 01             	and    $0x1,%eax
  2847d8:	85 c0                	test   %eax,%eax
  2847da:	0f 85 0c 06 00 00    	jne    284dec <sys_api+0x96e>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  2847e0:	8b 45 08             	mov    0x8(%ebp),%eax
  2847e3:	8d 50 01             	lea    0x1(%eax),%edx
  2847e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2847e9:	83 c0 01             	add    $0x1,%eax
  2847ec:	83 ec 0c             	sub    $0xc,%esp
  2847ef:	52                   	push   %edx
  2847f0:	50                   	push   %eax
  2847f1:	ff 75 08             	pushl  0x8(%ebp)
  2847f4:	ff 75 0c             	pushl  0xc(%ebp)
  2847f7:	ff 75 bc             	pushl  -0x44(%ebp)
  2847fa:	e8 d7 e0 ff ff       	call   2828d6 <sheet_refresh>
  2847ff:	83 c4 20             	add    $0x20,%esp
  284802:	e9 e5 05 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 12)
  284807:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  28480b:	75 26                	jne    284833 <sys_api+0x3b5>
	{
		sht = (struct SHEET *)ebx;
  28480d:	8b 45 18             	mov    0x18(%ebp),%eax
  284810:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  284813:	8b 45 24             	mov    0x24(%ebp),%eax
  284816:	83 ec 0c             	sub    $0xc,%esp
  284819:	ff 75 08             	pushl  0x8(%ebp)
  28481c:	ff 75 0c             	pushl  0xc(%ebp)
  28481f:	ff 75 20             	pushl  0x20(%ebp)
  284822:	50                   	push   %eax
  284823:	ff 75 bc             	pushl  -0x44(%ebp)
  284826:	e8 ab e0 ff ff       	call   2828d6 <sheet_refresh>
  28482b:	83 c4 20             	add    $0x20,%esp
  28482e:	e9 b9 05 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 13)
  284833:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  284837:	75 5d                	jne    284896 <sys_api+0x418>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  284839:	8b 45 18             	mov    0x18(%ebp),%eax
  28483c:	83 e0 fe             	and    $0xfffffffe,%eax
  28483f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  284842:	8b 45 24             	mov    0x24(%ebp),%eax
  284845:	83 ec 08             	sub    $0x8,%esp
  284848:	ff 75 10             	pushl  0x10(%ebp)
  28484b:	ff 75 08             	pushl  0x8(%ebp)
  28484e:	ff 75 0c             	pushl  0xc(%ebp)
  284851:	ff 75 20             	pushl  0x20(%ebp)
  284854:	50                   	push   %eax
  284855:	ff 75 bc             	pushl  -0x44(%ebp)
  284858:	e8 31 ca ff ff       	call   28128e <drawline8_sht>
  28485d:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284860:	8b 45 18             	mov    0x18(%ebp),%eax
  284863:	83 e0 01             	and    $0x1,%eax
  284866:	85 c0                	test   %eax,%eax
  284868:	0f 85 7e 05 00 00    	jne    284dec <sys_api+0x96e>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  28486e:	8b 45 08             	mov    0x8(%ebp),%eax
  284871:	8d 48 01             	lea    0x1(%eax),%ecx
  284874:	8b 45 0c             	mov    0xc(%ebp),%eax
  284877:	8d 50 01             	lea    0x1(%eax),%edx
  28487a:	8b 45 24             	mov    0x24(%ebp),%eax
  28487d:	83 ec 0c             	sub    $0xc,%esp
  284880:	51                   	push   %ecx
  284881:	52                   	push   %edx
  284882:	ff 75 20             	pushl  0x20(%ebp)
  284885:	50                   	push   %eax
  284886:	ff 75 bc             	pushl  -0x44(%ebp)
  284889:	e8 48 e0 ff ff       	call   2828d6 <sheet_refresh>
  28488e:	83 c4 20             	add    $0x20,%esp
  284891:	e9 56 05 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 14)
  284896:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  28489a:	75 14                	jne    2848b0 <sys_api+0x432>
	{
		sheet_free((struct SHEET *)ebx);
  28489c:	8b 45 18             	mov    0x18(%ebp),%eax
  28489f:	83 ec 0c             	sub    $0xc,%esp
  2848a2:	50                   	push   %eax
  2848a3:	e8 aa e1 ff ff       	call   282a52 <sheet_free>
  2848a8:	83 c4 10             	add    $0x10,%esp
  2848ab:	e9 3c 05 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 15)
  2848b0:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  2848b4:	0f 85 f3 00 00 00    	jne    2849ad <sys_api+0x52f>
	{
		for(;;)
		{
			io_cli();
  2848ba:	e8 f3 c1 ff ff       	call   280ab2 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  2848bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2848c2:	83 c0 10             	add    $0x10,%eax
  2848c5:	83 ec 0c             	sub    $0xc,%esp
  2848c8:	50                   	push   %eax
  2848c9:	e8 88 d3 ff ff       	call   281c56 <fifo32_status>
  2848ce:	83 c4 10             	add    $0x10,%esp
  2848d1:	85 c0                	test   %eax,%eax
  2848d3:	75 32                	jne    284907 <sys_api+0x489>
			{
				if(eax != 0)
  2848d5:	8b 45 24             	mov    0x24(%ebp),%eax
  2848d8:	85 c0                	test   %eax,%eax
  2848da:	74 10                	je     2848ec <sys_api+0x46e>
					task_sleep(task);
  2848dc:	83 ec 0c             	sub    $0xc,%esp
  2848df:	ff 75 e8             	pushl  -0x18(%ebp)
  2848e2:	e8 25 e9 ff ff       	call   28320c <task_sleep>
  2848e7:	83 c4 10             	add    $0x10,%esp
  2848ea:	eb 1b                	jmp    284907 <sys_api+0x489>
				else
				{
					io_sti();
  2848ec:	e8 c3 c1 ff ff       	call   280ab4 <io_sti>
					reg[7] = -1;
  2848f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2848f4:	83 c0 1c             	add    $0x1c,%eax
  2848f7:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  2848fd:	b8 00 00 00 00       	mov    $0x0,%eax
  284902:	e9 ea 04 00 00       	jmp    284df1 <sys_api+0x973>
				}
			}
			int i = fifo32_get(&task->fifo);
  284907:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28490a:	83 c0 10             	add    $0x10,%eax
  28490d:	83 ec 0c             	sub    $0xc,%esp
  284910:	50                   	push   %eax
  284911:	e8 05 d3 ff ff       	call   281c1b <fifo32_get>
  284916:	83 c4 10             	add    $0x10,%esp
  284919:	89 45 d0             	mov    %eax,-0x30(%ebp)
			io_sti();
  28491c:	e8 93 c1 ff ff       	call   280ab4 <io_sti>
			if(i <= 1)
  284921:	83 7d d0 01          	cmpl   $0x1,-0x30(%ebp)
  284925:	7f 34                	jg     28495b <sys_api+0x4dd>
			{
				timer_init(cons->timer,&task->fifo,1);
  284927:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28492a:	8d 50 10             	lea    0x10(%eax),%edx
  28492d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284930:	8b 40 10             	mov    0x10(%eax),%eax
  284933:	83 ec 04             	sub    $0x4,%esp
  284936:	6a 01                	push   $0x1
  284938:	52                   	push   %edx
  284939:	50                   	push   %eax
  28493a:	e8 05 e2 ff ff       	call   282b44 <timer_init>
  28493f:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  284942:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284945:	8b 40 10             	mov    0x10(%eax),%eax
  284948:	83 ec 08             	sub    $0x8,%esp
  28494b:	6a 32                	push   $0x32
  28494d:	50                   	push   %eax
  28494e:	e8 05 e2 ff ff       	call   282b58 <timer_settime>
  284953:	83 c4 10             	add    $0x10,%esp
  284956:	e9 5f ff ff ff       	jmp    2848ba <sys_api+0x43c>
			}
			else if(i == 2)
  28495b:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  28495f:	75 0f                	jne    284970 <sys_api+0x4f2>
			{
				cons->cur_c = COL8_FFFFFF;
  284961:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284964:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  28496b:	e9 4a ff ff ff       	jmp    2848ba <sys_api+0x43c>
			}
			else if(i == 3)
  284970:	83 7d d0 03          	cmpl   $0x3,-0x30(%ebp)
  284974:	75 0f                	jne    284985 <sys_api+0x507>
			{
				cons->cur_c = -1;
  284976:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284979:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  284980:	e9 35 ff ff ff       	jmp    2848ba <sys_api+0x43c>
			}
			else if(i>=256)
  284985:	81 7d d0 ff 00 00 00 	cmpl   $0xff,-0x30(%ebp)
  28498c:	0f 8e 28 ff ff ff    	jle    2848ba <sys_api+0x43c>
			{
				reg[7] = i-256;
  284992:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284995:	83 c0 1c             	add    $0x1c,%eax
  284998:	8b 55 d0             	mov    -0x30(%ebp),%edx
  28499b:	81 ea 00 01 00 00    	sub    $0x100,%edx
  2849a1:	89 10                	mov    %edx,(%eax)
				return 0;
  2849a3:	b8 00 00 00 00       	mov    $0x0,%eax
  2849a8:	e9 44 04 00 00       	jmp    284df1 <sys_api+0x973>
			}
		}
	}
	else if(edx == 16)
  2849ad:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  2849b1:	75 1e                	jne    2849d1 <sys_api+0x553>
	{
		reg[7] = (int)timer_alloc();
  2849b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2849b6:	8d 58 1c             	lea    0x1c(%eax),%ebx
  2849b9:	e8 b8 e0 ff ff       	call   282a76 <timer_alloc>
  2849be:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  2849c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2849c3:	83 c0 1c             	add    $0x1c,%eax
  2849c6:	8b 00                	mov    (%eax),%eax
  2849c8:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  2849cc:	e9 1b 04 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 17)
  2849d1:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  2849d5:	75 25                	jne    2849fc <sys_api+0x57e>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  2849d7:	8b 45 24             	mov    0x24(%ebp),%eax
  2849da:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  2849e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2849e3:	8d 50 10             	lea    0x10(%eax),%edx
  2849e6:	8b 45 18             	mov    0x18(%ebp),%eax
  2849e9:	83 ec 04             	sub    $0x4,%esp
  2849ec:	51                   	push   %ecx
  2849ed:	52                   	push   %edx
  2849ee:	50                   	push   %eax
  2849ef:	e8 50 e1 ff ff       	call   282b44 <timer_init>
  2849f4:	83 c4 10             	add    $0x10,%esp
  2849f7:	e9 f0 03 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 18)
  2849fc:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284a00:	75 1a                	jne    284a1c <sys_api+0x59e>
	{
		timer_settime((struct TIMER *)ebx,eax);
  284a02:	8b 45 24             	mov    0x24(%ebp),%eax
  284a05:	89 c2                	mov    %eax,%edx
  284a07:	8b 45 18             	mov    0x18(%ebp),%eax
  284a0a:	83 ec 08             	sub    $0x8,%esp
  284a0d:	52                   	push   %edx
  284a0e:	50                   	push   %eax
  284a0f:	e8 44 e1 ff ff       	call   282b58 <timer_settime>
  284a14:	83 c4 10             	add    $0x10,%esp
  284a17:	e9 d0 03 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 19)
  284a1c:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  284a20:	75 14                	jne    284a36 <sys_api+0x5b8>
	{
		timer_free((struct TIMER *)ebx);
  284a22:	8b 45 18             	mov    0x18(%ebp),%eax
  284a25:	83 ec 0c             	sub    $0xc,%esp
  284a28:	50                   	push   %eax
  284a29:	e8 0a e1 ff ff       	call   282b38 <timer_free>
  284a2e:	83 c4 10             	add    $0x10,%esp
  284a31:	e9 b6 03 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 20)
  284a36:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  284a3a:	0f 85 a4 00 00 00    	jne    284ae4 <sys_api+0x666>
	{
		if(eax == 0)
  284a40:	8b 45 24             	mov    0x24(%ebp),%eax
  284a43:	85 c0                	test   %eax,%eax
  284a45:	75 29                	jne    284a70 <sys_api+0x5f2>
		{
			int i = io_in8(0x61);
  284a47:	83 ec 0c             	sub    $0xc,%esp
  284a4a:	6a 61                	push   $0x61
  284a4c:	e8 73 c0 ff ff       	call   280ac4 <io_in8>
  284a51:	83 c4 10             	add    $0x10,%esp
  284a54:	89 45 cc             	mov    %eax,-0x34(%ebp)
			io_out8(0x61,i&0x0d);
  284a57:	8b 45 cc             	mov    -0x34(%ebp),%eax
  284a5a:	83 e0 0d             	and    $0xd,%eax
  284a5d:	83 ec 08             	sub    $0x8,%esp
  284a60:	50                   	push   %eax
  284a61:	6a 61                	push   $0x61
  284a63:	e8 7e c0 ff ff       	call   280ae6 <io_out8>
  284a68:	83 c4 10             	add    $0x10,%esp
  284a6b:	e9 7c 03 00 00       	jmp    284dec <sys_api+0x96e>
		}
		else
		{
			int i = 1193180000/eax;
  284a70:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284a73:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  284a78:	99                   	cltd   
  284a79:	f7 fb                	idiv   %ebx
  284a7b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			io_out8(0x43,0xb6);
  284a7e:	83 ec 08             	sub    $0x8,%esp
  284a81:	68 b6 00 00 00       	push   $0xb6
  284a86:	6a 43                	push   $0x43
  284a88:	e8 59 c0 ff ff       	call   280ae6 <io_out8>
  284a8d:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  284a90:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284a93:	0f b6 c0             	movzbl %al,%eax
  284a96:	83 ec 08             	sub    $0x8,%esp
  284a99:	50                   	push   %eax
  284a9a:	6a 42                	push   $0x42
  284a9c:	e8 45 c0 ff ff       	call   280ae6 <io_out8>
  284aa1:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  284aa4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284aa7:	c1 f8 08             	sar    $0x8,%eax
  284aaa:	83 ec 08             	sub    $0x8,%esp
  284aad:	50                   	push   %eax
  284aae:	6a 42                	push   $0x42
  284ab0:	e8 31 c0 ff ff       	call   280ae6 <io_out8>
  284ab5:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  284ab8:	83 ec 0c             	sub    $0xc,%esp
  284abb:	6a 61                	push   $0x61
  284abd:	e8 02 c0 ff ff       	call   280ac4 <io_in8>
  284ac2:	83 c4 10             	add    $0x10,%esp
  284ac5:	89 45 c8             	mov    %eax,-0x38(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  284ac8:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284acb:	83 e0 0c             	and    $0xc,%eax
  284ace:	83 c8 03             	or     $0x3,%eax
  284ad1:	83 ec 08             	sub    $0x8,%esp
  284ad4:	50                   	push   %eax
  284ad5:	6a 61                	push   $0x61
  284ad7:	e8 0a c0 ff ff       	call   280ae6 <io_out8>
  284adc:	83 c4 10             	add    $0x10,%esp
  284adf:	e9 08 03 00 00       	jmp    284dec <sys_api+0x96e>
		}
	}
	else if(edx == 21)
  284ae4:	83 7d 1c 15          	cmpl   $0x15,0x1c(%ebp)
  284ae8:	0f 85 06 01 00 00    	jne    284bf4 <sys_api+0x776>
	{

		int i = 0;
  284aee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for(;i<8;i++)
  284af5:	eb 21                	jmp    284b18 <sys_api+0x69a>
		{
			if(task->fhandle[i].buf == 0)
  284af7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284afa:	8b 88 b0 00 00 00    	mov    0xb0(%eax),%ecx
  284b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
  284b03:	89 d0                	mov    %edx,%eax
  284b05:	01 c0                	add    %eax,%eax
  284b07:	01 d0                	add    %edx,%eax
  284b09:	c1 e0 02             	shl    $0x2,%eax
  284b0c:	01 c8                	add    %ecx,%eax
  284b0e:	8b 00                	mov    (%eax),%eax
  284b10:	85 c0                	test   %eax,%eax
  284b12:	74 0c                	je     284b20 <sys_api+0x6a2>
	}
	else if(edx == 21)
	{

		int i = 0;
		for(;i<8;i++)
  284b14:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  284b18:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
  284b1c:	7e d9                	jle    284af7 <sys_api+0x679>
  284b1e:	eb 01                	jmp    284b21 <sys_api+0x6a3>
		{
			if(task->fhandle[i].buf == 0)
				break;
  284b20:	90                   	nop
		}
		fh = &task->fhandle[i];
  284b21:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284b24:	8b 88 b0 00 00 00    	mov    0xb0(%eax),%ecx
  284b2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  284b2d:	89 d0                	mov    %edx,%eax
  284b2f:	01 c0                	add    %eax,%eax
  284b31:	01 d0                	add    %edx,%eax
  284b33:	c1 e0 02             	shl    $0x2,%eax
  284b36:	01 c8                	add    %ecx,%eax
  284b38:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		reg[7] = 0;
  284b3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284b3e:	83 c0 1c             	add    $0x1c,%eax
  284b41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(i<8) 
  284b47:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
  284b4b:	0f 8f 9b 02 00 00    	jg     284dec <sys_api+0x96e>
		{
			finfo = file_search((char *)ebx + ds_base,(struct FILEINFO *)(ADR_DISKIMG+0x002600),224);
  284b51:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284b54:	8b 45 18             	mov    0x18(%ebp),%eax
  284b57:	01 d0                	add    %edx,%eax
  284b59:	83 ec 04             	sub    $0x4,%esp
  284b5c:	68 e0 00 00 00       	push   $0xe0
  284b61:	68 00 26 10 00       	push   $0x102600
  284b66:	50                   	push   %eax
  284b67:	e8 6d eb ff ff       	call   2836d9 <file_search>
  284b6c:	83 c4 10             	add    $0x10,%esp
  284b6f:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if(finfo != 0 )
  284b72:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  284b76:	0f 84 70 02 00 00    	je     284dec <sys_api+0x96e>
			{
				reg[7] = (int)fh;
  284b7c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284b7f:	8d 50 1c             	lea    0x1c(%eax),%edx
  284b82:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284b85:	89 02                	mov    %eax,(%edx)
				fh->buf = (char *)memman_alloc_4k(memman,finfo->size);
  284b87:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284b8a:	8b 40 3c             	mov    0x3c(%eax),%eax
  284b8d:	83 ec 08             	sub    $0x8,%esp
  284b90:	50                   	push   %eax
  284b91:	ff 75 d4             	pushl  -0x2c(%ebp)
  284b94:	e8 94 d7 ff ff       	call   28232d <memman_alloc_4k>
  284b99:	83 c4 10             	add    $0x10,%esp
  284b9c:	89 c2                	mov    %eax,%edx
  284b9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ba1:	89 10                	mov    %edx,(%eax)
				fh->size= finfo->size;
  284ba3:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284ba6:	8b 40 3c             	mov    0x3c(%eax),%eax
  284ba9:	89 c2                	mov    %eax,%edx
  284bab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bae:	89 50 04             	mov    %edx,0x4(%eax)
				fh->pos = 0;
  284bb1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bb4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				file_loadfile(finfo->clustno,finfo->size,fh->buf,task->fat,(char *)(ADR_DISKIMG + 0x003e00));
  284bbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284bbe:	8b 88 b4 00 00 00    	mov    0xb4(%eax),%ecx
  284bc4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bc7:	8b 10                	mov    (%eax),%edx
  284bc9:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284bcc:	8b 40 3c             	mov    0x3c(%eax),%eax
  284bcf:	89 c3                	mov    %eax,%ebx
  284bd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284bd4:	0f b7 40 3a          	movzwl 0x3a(%eax),%eax
  284bd8:	0f b7 c0             	movzwl %ax,%eax
  284bdb:	83 ec 0c             	sub    $0xc,%esp
  284bde:	68 00 3e 10 00       	push   $0x103e00
  284be3:	51                   	push   %ecx
  284be4:	52                   	push   %edx
  284be5:	53                   	push   %ebx
  284be6:	50                   	push   %eax
  284be7:	e8 46 ea ff ff       	call   283632 <file_loadfile>
  284bec:	83 c4 20             	add    $0x20,%esp
  284bef:	e9 f8 01 00 00       	jmp    284dec <sys_api+0x96e>
			}
		}
	}
	else if(edx == 22)
  284bf4:	83 7d 1c 16          	cmpl   $0x16,0x1c(%ebp)
  284bf8:	75 31                	jne    284c2b <sys_api+0x7ad>
	{
		fh = (struct FILEHANDLE *)eax;
  284bfa:	8b 45 24             	mov    0x24(%ebp),%eax
  284bfd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		memman_free_4k(memman,(int)fh->buf,fh->size);
  284c00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c03:	8b 40 04             	mov    0x4(%eax),%eax
  284c06:	89 c2                	mov    %eax,%edx
  284c08:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c0b:	8b 00                	mov    (%eax),%eax
  284c0d:	83 ec 04             	sub    $0x4,%esp
  284c10:	52                   	push   %edx
  284c11:	50                   	push   %eax
  284c12:	ff 75 d4             	pushl  -0x2c(%ebp)
  284c15:	e8 3f d7 ff ff       	call   282359 <memman_free_4k>
  284c1a:	83 c4 10             	add    $0x10,%esp
		fh->buf = 0;
  284c1d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  284c26:	e9 c1 01 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 23)
  284c2b:	83 7d 1c 17          	cmpl   $0x17,0x1c(%ebp)
  284c2f:	0f 85 80 00 00 00    	jne    284cb5 <sys_api+0x837>
	{
		fh = (struct FILEHANDLE *)eax;
  284c35:	8b 45 24             	mov    0x24(%ebp),%eax
  284c38:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if(ecx == 0)
  284c3b:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
  284c3f:	75 0b                	jne    284c4c <sys_api+0x7ce>
		{
			fh->pos = ebx;
  284c41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c44:	8b 55 18             	mov    0x18(%ebp),%edx
  284c47:	89 50 08             	mov    %edx,0x8(%eax)
  284c4a:	eb 30                	jmp    284c7c <sys_api+0x7fe>
		}
		else if(ecx == 1)
  284c4c:	83 7d 20 01          	cmpl   $0x1,0x20(%ebp)
  284c50:	75 13                	jne    284c65 <sys_api+0x7e7>
		{
			fh->pos += ebx;
  284c52:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c55:	8b 50 08             	mov    0x8(%eax),%edx
  284c58:	8b 45 18             	mov    0x18(%ebp),%eax
  284c5b:	01 c2                	add    %eax,%edx
  284c5d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c60:	89 50 08             	mov    %edx,0x8(%eax)
  284c63:	eb 17                	jmp    284c7c <sys_api+0x7fe>
		}
		else if(ecx == 2)
  284c65:	83 7d 20 02          	cmpl   $0x2,0x20(%ebp)
  284c69:	75 11                	jne    284c7c <sys_api+0x7fe>
		{
			fh->pos = fh->size+ebx;
  284c6b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c6e:	8b 50 04             	mov    0x4(%eax),%edx
  284c71:	8b 45 18             	mov    0x18(%ebp),%eax
  284c74:	01 c2                	add    %eax,%edx
  284c76:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c79:	89 50 08             	mov    %edx,0x8(%eax)
		}

		if(fh->pos < 0)
  284c7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c7f:	8b 40 08             	mov    0x8(%eax),%eax
  284c82:	85 c0                	test   %eax,%eax
  284c84:	79 0a                	jns    284c90 <sys_api+0x812>
			fh->pos = 0;
  284c86:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c89:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		if(fh->pos > fh->size)
  284c90:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c93:	8b 50 08             	mov    0x8(%eax),%edx
  284c96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c99:	8b 40 04             	mov    0x4(%eax),%eax
  284c9c:	39 c2                	cmp    %eax,%edx
  284c9e:	0f 8e 48 01 00 00    	jle    284dec <sys_api+0x96e>
			fh->pos = fh->size;
  284ca4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ca7:	8b 50 04             	mov    0x4(%eax),%edx
  284caa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cad:	89 50 08             	mov    %edx,0x8(%eax)
  284cb0:	e9 37 01 00 00       	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 24)
  284cb5:	83 7d 1c 18          	cmpl   $0x18,0x1c(%ebp)
  284cb9:	75 5f                	jne    284d1a <sys_api+0x89c>
	{
		fh = (struct FILEHANDLE *)eax;
  284cbb:	8b 45 24             	mov    0x24(%ebp),%eax
  284cbe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if(ecx == 0)
  284cc1:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
  284cc5:	75 13                	jne    284cda <sys_api+0x85c>
		{
			reg[7] = fh->size;
  284cc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284cca:	8d 50 1c             	lea    0x1c(%eax),%edx
  284ccd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cd0:	8b 40 04             	mov    0x4(%eax),%eax
  284cd3:	89 02                	mov    %eax,(%edx)
  284cd5:	e9 12 01 00 00       	jmp    284dec <sys_api+0x96e>
		}
		else if(ecx == 1)
  284cda:	83 7d 20 01          	cmpl   $0x1,0x20(%ebp)
  284cde:	75 13                	jne    284cf3 <sys_api+0x875>
		{
			reg[7] = fh->pos;
  284ce0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284ce3:	8d 50 1c             	lea    0x1c(%eax),%edx
  284ce6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ce9:	8b 40 08             	mov    0x8(%eax),%eax
  284cec:	89 02                	mov    %eax,(%edx)
  284cee:	e9 f9 00 00 00       	jmp    284dec <sys_api+0x96e>
		}
		else if(ecx == 2)
  284cf3:	83 7d 20 02          	cmpl   $0x2,0x20(%ebp)
  284cf7:	0f 85 ef 00 00 00    	jne    284dec <sys_api+0x96e>
		{
			reg[7] = fh->pos - fh->size;
  284cfd:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284d00:	8d 50 1c             	lea    0x1c(%eax),%edx
  284d03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d06:	8b 48 08             	mov    0x8(%eax),%ecx
  284d09:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d0c:	8b 40 04             	mov    0x4(%eax),%eax
  284d0f:	29 c1                	sub    %eax,%ecx
  284d11:	89 c8                	mov    %ecx,%eax
  284d13:	89 02                	mov    %eax,(%edx)
  284d15:	e9 d2 00 00 00       	jmp    284dec <sys_api+0x96e>
		}
	}
	else if(edx == 25)
  284d1a:	83 7d 1c 19          	cmpl   $0x19,0x1c(%ebp)
  284d1e:	75 6b                	jne    284d8b <sys_api+0x90d>
	{
		fh = (struct FILEHANDLE *)eax;
  284d20:	8b 45 24             	mov    0x24(%ebp),%eax
  284d23:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		int i=0;
  284d26:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(;i<ecx;i++)
  284d2d:	eb 44                	jmp    284d73 <sys_api+0x8f5>
		{
			if(fh->pos == fh->size)
  284d2f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d32:	8b 50 08             	mov    0x8(%eax),%edx
  284d35:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d38:	8b 40 04             	mov    0x4(%eax),%eax
  284d3b:	39 c2                	cmp    %eax,%edx
  284d3d:	74 3e                	je     284d7d <sys_api+0x8ff>
			{
				break;
			}
			*((char *)ebx+ds_base+i) = fh->buf[fh->pos];
  284d3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284d42:	8b 45 18             	mov    0x18(%ebp),%eax
  284d45:	01 c2                	add    %eax,%edx
  284d47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284d4a:	01 d0                	add    %edx,%eax
  284d4c:	89 c1                	mov    %eax,%ecx
  284d4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d51:	8b 10                	mov    (%eax),%edx
  284d53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d56:	8b 40 08             	mov    0x8(%eax),%eax
  284d59:	01 d0                	add    %edx,%eax
  284d5b:	0f b6 00             	movzbl (%eax),%eax
  284d5e:	88 01                	mov    %al,(%ecx)
			fh->pos++;
  284d60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d63:	8b 40 08             	mov    0x8(%eax),%eax
  284d66:	8d 50 01             	lea    0x1(%eax),%edx
  284d69:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d6c:	89 50 08             	mov    %edx,0x8(%eax)
	}
	else if(edx == 25)
	{
		fh = (struct FILEHANDLE *)eax;
		int i=0;
		for(;i<ecx;i++)
  284d6f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  284d73:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284d76:	3b 45 20             	cmp    0x20(%ebp),%eax
  284d79:	7c b4                	jl     284d2f <sys_api+0x8b1>
  284d7b:	eb 01                	jmp    284d7e <sys_api+0x900>
		{
			if(fh->pos == fh->size)
			{
				break;
  284d7d:	90                   	nop
			}
			*((char *)ebx+ds_base+i) = fh->buf[fh->pos];
			fh->pos++;
		}
		reg[7] = i;
  284d7e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284d81:	8d 50 1c             	lea    0x1c(%eax),%edx
  284d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284d87:	89 02                	mov    %eax,(%edx)
  284d89:	eb 61                	jmp    284dec <sys_api+0x96e>
	}
	else if(edx == 26)
  284d8b:	83 7d 1c 1a          	cmpl   $0x1a,0x1c(%ebp)
  284d8f:	75 5b                	jne    284dec <sys_api+0x96e>
	{
		int i=0;
  284d91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		for(;;)
		{
			*((char *)ebx + ds_base +i) = task->cmdline[i];
  284d98:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284d9b:	8b 45 18             	mov    0x18(%ebp),%eax
  284d9e:	01 c2                	add    %eax,%edx
  284da0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284da3:	01 d0                	add    %edx,%eax
  284da5:	89 c1                	mov    %eax,%ecx
  284da7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284daa:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
  284db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284db3:	01 d0                	add    %edx,%eax
  284db5:	0f b6 00             	movzbl (%eax),%eax
  284db8:	88 01                	mov    %al,(%ecx)
			if(task->cmdline[i] == 0)
  284dba:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284dbd:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
  284dc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284dc6:	01 d0                	add    %edx,%eax
  284dc8:	0f b6 00             	movzbl (%eax),%eax
  284dcb:	84 c0                	test   %al,%al
  284dcd:	74 0e                	je     284ddd <sys_api+0x95f>
				break;
			if(i >= ecx)
  284dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284dd2:	3b 45 20             	cmp    0x20(%ebp),%eax
  284dd5:	7d 09                	jge    284de0 <sys_api+0x962>
				break;
			i++;
  284dd7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
		}
  284ddb:	eb bb                	jmp    284d98 <sys_api+0x91a>
		int i=0;
		for(;;)
		{
			*((char *)ebx + ds_base +i) = task->cmdline[i];
			if(task->cmdline[i] == 0)
				break;
  284ddd:	90                   	nop
  284dde:	eb 01                	jmp    284de1 <sys_api+0x963>
			if(i >= ecx)
				break;
  284de0:	90                   	nop
			i++;
		}
		reg[7] = i;
  284de1:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284de4:	8d 50 1c             	lea    0x1c(%eax),%edx
  284de7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284dea:	89 02                	mov    %eax,(%edx)
	}
	return 0;
  284dec:	b8 00 00 00 00       	mov    $0x0,%eax
}
  284df1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284df4:	c9                   	leave  
  284df5:	c3                   	ret    
  284df6:	66 90                	xchg   %ax,%ax
  284df8:	66 90                	xchg   %ax,%ax
  284dfa:	66 90                	xchg   %ax,%ax
  284dfc:	66 90                	xchg   %ax,%ax
  284dfe:	66 90                	xchg   %ax,%ax

00284e00 <api_putchar>:
  284e00:	ba 01 00 00 00       	mov    $0x1,%edx
  284e05:	8a 44 24 04          	mov    0x4(%esp),%al
  284e09:	cd 40                	int    $0x40
  284e0b:	c3                   	ret    

00284e0c <api_putstr>:
  284e0c:	ba 02 00 00 00       	mov    $0x2,%edx
  284e11:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284e15:	cd 40                	int    $0x40
  284e17:	c3                   	ret    

00284e18 <api_end>:
  284e18:	ba 04 00 00 00       	mov    $0x4,%edx
  284e1d:	cd 40                	int    $0x40

00284e1f <api_test>:
  284e1f:	05 80 00 00 00       	add    $0x80,%eax
  284e24:	c3                   	ret    

00284e25 <api_openwin>:
  284e25:	57                   	push   %edi
  284e26:	56                   	push   %esi
  284e27:	53                   	push   %ebx
  284e28:	ba 05 00 00 00       	mov    $0x5,%edx
  284e2d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284e31:	8b 74 24 14          	mov    0x14(%esp),%esi
  284e35:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284e39:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284e3d:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  284e41:	cd 40                	int    $0x40
  284e43:	5b                   	pop    %ebx
  284e44:	5e                   	pop    %esi
  284e45:	5f                   	pop    %edi
  284e46:	c3                   	ret    

00284e47 <api_putstrwin>:
  284e47:	57                   	push   %edi
  284e48:	56                   	push   %esi
  284e49:	55                   	push   %ebp
  284e4a:	53                   	push   %ebx
  284e4b:	ba 06 00 00 00       	mov    $0x6,%edx
  284e50:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284e54:	8b 74 24 18          	mov    0x18(%esp),%esi
  284e58:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  284e5c:	8b 44 24 20          	mov    0x20(%esp),%eax
  284e60:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  284e64:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284e68:	cd 40                	int    $0x40
  284e6a:	5b                   	pop    %ebx
  284e6b:	5d                   	pop    %ebp
  284e6c:	5e                   	pop    %esi
  284e6d:	5f                   	pop    %edi
  284e6e:	c3                   	ret    

00284e6f <api_boxfilwin>:
  284e6f:	57                   	push   %edi
  284e70:	56                   	push   %esi
  284e71:	55                   	push   %ebp
  284e72:	53                   	push   %ebx
  284e73:	ba 07 00 00 00       	mov    $0x7,%edx
  284e78:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284e7c:	8b 44 24 18          	mov    0x18(%esp),%eax
  284e80:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284e84:	8b 74 24 20          	mov    0x20(%esp),%esi
  284e88:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284e8c:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284e90:	cd 40                	int    $0x40
  284e92:	5b                   	pop    %ebx
  284e93:	5d                   	pop    %ebp
  284e94:	5e                   	pop    %esi
  284e95:	5f                   	pop    %edi
  284e96:	c3                   	ret    

00284e97 <api_initmalloc>:
  284e97:	53                   	push   %ebx
  284e98:	ba 08 00 00 00       	mov    $0x8,%edx
  284e9d:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284ea4:	89 d8                	mov    %ebx,%eax
  284ea6:	05 00 80 00 00       	add    $0x8000,%eax
  284eab:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  284eb2:	29 c1                	sub    %eax,%ecx
  284eb4:	cd 40                	int    $0x40
  284eb6:	5b                   	pop    %ebx
  284eb7:	c3                   	ret    

00284eb8 <api_malloc>:
  284eb8:	53                   	push   %ebx
  284eb9:	ba 09 00 00 00       	mov    $0x9,%edx
  284ebe:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284ec5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  284ec9:	cd 40                	int    $0x40
  284ecb:	5b                   	pop    %ebx
  284ecc:	c3                   	ret    

00284ecd <api_free>:
  284ecd:	53                   	push   %ebx
  284ece:	ba 0a 00 00 00       	mov    $0xa,%edx
  284ed3:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284eda:	8b 44 24 08          	mov    0x8(%esp),%eax
  284ede:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284ee2:	cd 40                	int    $0x40
  284ee4:	5b                   	pop    %ebx
  284ee5:	c3                   	ret    

00284ee6 <api_pointwin>:
  284ee6:	57                   	push   %edi
  284ee7:	56                   	push   %esi
  284ee8:	53                   	push   %ebx
  284ee9:	ba 0b 00 00 00       	mov    $0xb,%edx
  284eee:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284ef2:	8b 74 24 14          	mov    0x14(%esp),%esi
  284ef6:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284efa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284efe:	cd 40                	int    $0x40
  284f00:	5b                   	pop    %ebx
  284f01:	5e                   	pop    %esi
  284f02:	5f                   	pop    %edi
  284f03:	c3                   	ret    

00284f04 <api_refreshwin>:
  284f04:	57                   	push   %edi
  284f05:	56                   	push   %esi
  284f06:	53                   	push   %ebx
  284f07:	ba 0c 00 00 00       	mov    $0xc,%edx
  284f0c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284f10:	8b 44 24 14          	mov    0x14(%esp),%eax
  284f14:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284f18:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  284f1c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284f20:	cd 40                	int    $0x40
  284f22:	5b                   	pop    %ebx
  284f23:	5e                   	pop    %esi
  284f24:	5f                   	pop    %edi
  284f25:	c3                   	ret    

00284f26 <api_linewin>:
  284f26:	57                   	push   %edi
  284f27:	56                   	push   %esi
  284f28:	55                   	push   %ebp
  284f29:	53                   	push   %ebx
  284f2a:	ba 0d 00 00 00       	mov    $0xd,%edx
  284f2f:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284f33:	8b 44 24 18          	mov    0x18(%esp),%eax
  284f37:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284f3b:	8b 74 24 20          	mov    0x20(%esp),%esi
  284f3f:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284f43:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284f47:	cd 40                	int    $0x40
  284f49:	5b                   	pop    %ebx
  284f4a:	5d                   	pop    %ebp
  284f4b:	5e                   	pop    %esi
  284f4c:	5f                   	pop    %edi
  284f4d:	c3                   	ret    

00284f4e <api_closewin>:
  284f4e:	53                   	push   %ebx
  284f4f:	ba 0e 00 00 00       	mov    $0xe,%edx
  284f54:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f58:	cd 40                	int    $0x40
  284f5a:	5b                   	pop    %ebx
  284f5b:	c3                   	ret    

00284f5c <api_getkey>:
  284f5c:	ba 0f 00 00 00       	mov    $0xf,%edx
  284f61:	8b 44 24 04          	mov    0x4(%esp),%eax
  284f65:	cd 40                	int    $0x40
  284f67:	c3                   	ret    

00284f68 <api_alloctimer>:
  284f68:	ba 10 00 00 00       	mov    $0x10,%edx
  284f6d:	cd 40                	int    $0x40
  284f6f:	c3                   	ret    

00284f70 <api_inittimer>:
  284f70:	53                   	push   %ebx
  284f71:	ba 11 00 00 00       	mov    $0x11,%edx
  284f76:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f7a:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284f7e:	cd 40                	int    $0x40
  284f80:	5b                   	pop    %ebx
  284f81:	c3                   	ret    

00284f82 <api_settimer>:
  284f82:	53                   	push   %ebx
  284f83:	ba 12 00 00 00       	mov    $0x12,%edx
  284f88:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f8c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284f90:	cd 40                	int    $0x40
  284f92:	5b                   	pop    %ebx
  284f93:	c3                   	ret    

00284f94 <api_freetimer>:
  284f94:	53                   	push   %ebx
  284f95:	ba 13 00 00 00       	mov    $0x13,%edx
  284f9a:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f9e:	cd 40                	int    $0x40
  284fa0:	5b                   	pop    %ebx
  284fa1:	c3                   	ret    

00284fa2 <api_beep>:
  284fa2:	ba 14 00 00 00       	mov    $0x14,%edx
  284fa7:	8b 44 24 04          	mov    0x4(%esp),%eax
  284fab:	cd 40                	int    $0x40
  284fad:	c3                   	ret    

00284fae <api_fopen>:
  284fae:	53                   	push   %ebx
  284faf:	ba 15 00 00 00       	mov    $0x15,%edx
  284fb4:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284fb8:	cd 40                	int    $0x40
  284fba:	5b                   	pop    %ebx
  284fbb:	c3                   	ret    

00284fbc <api_fclose>:
  284fbc:	ba 16 00 00 00       	mov    $0x16,%edx
  284fc1:	8b 44 24 04          	mov    0x4(%esp),%eax
  284fc5:	cd 40                	int    $0x40
  284fc7:	c3                   	ret    

00284fc8 <api_seek>:
  284fc8:	53                   	push   %ebx
  284fc9:	ba 17 00 00 00       	mov    $0x17,%edx
  284fce:	8b 44 24 08          	mov    0x8(%esp),%eax
  284fd2:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  284fd6:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
  284fda:	cd 40                	int    $0x40
  284fdc:	5b                   	pop    %ebx
  284fdd:	c3                   	ret    

00284fde <api_fsize>:
  284fde:	ba 18 00 00 00       	mov    $0x18,%edx
  284fe3:	8b 44 24 04          	mov    0x4(%esp),%eax
  284fe7:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  284feb:	cd 40                	int    $0x40
  284fed:	c3                   	ret    

00284fee <api_fread>:
  284fee:	53                   	push   %ebx
  284fef:	ba 19 00 00 00       	mov    $0x19,%edx
  284ff4:	8b 44 24 10          	mov    0x10(%esp),%eax
  284ff8:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284ffc:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  285000:	cd 40                	int    $0x40
  285002:	5b                   	pop    %ebx
  285003:	c3                   	ret    

00285004 <api_cmdline>:
  285004:	53                   	push   %ebx
  285005:	ba 1a 00 00 00       	mov    $0x1a,%edx
  28500a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  28500e:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  285012:	cd 40                	int    $0x40
  285014:	5b                   	pop    %ebx
  285015:	c3                   	ret    

00285016 <change_wtitle8>:
	}
	return;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  285016:	55                   	push   %ebp
  285017:	89 e5                	mov    %esp,%ebp
  285019:	57                   	push   %edi
  28501a:	56                   	push   %esi
  28501b:	53                   	push   %ebx
  28501c:	83 ec 2c             	sub    $0x2c,%esp
  28501f:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  285022:	8b 7d 08             	mov    0x8(%ebp),%edi
  285025:	8b 7f 04             	mov    0x4(%edi),%edi
  285028:	89 fe                	mov    %edi,%esi
  28502a:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  28502d:	3c 01                	cmp    $0x1,%al
  28502f:	19 ff                	sbb    %edi,%edi
  285031:	89 fb                	mov    %edi,%ebx
  285033:	83 e3 fd             	and    $0xfffffffd,%ebx
  285036:	83 c3 0f             	add    $0xf,%ebx
  285039:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  28503c:	89 fb                	mov    %edi,%ebx
  28503e:	83 c3 08             	add    $0x8,%ebx
  285041:	88 5d e7             	mov    %bl,-0x19(%ebp)
  285044:	83 e7 03             	and    $0x3,%edi
  285047:	83 c7 0c             	add    $0xc,%edi
  28504a:	3c 01                	cmp    $0x1,%al
  28504c:	19 c0                	sbb    %eax,%eax
  28504e:	f7 d0                	not    %eax
  285050:	83 c0 08             	add    $0x8,%eax
  285053:	88 45 e5             	mov    %al,-0x1b(%ebp)
  285056:	89 f0                	mov    %esi,%eax
  285058:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  28505b:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  28505e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  285061:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  285063:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  28506a:	8d 5e fc             	lea    -0x4(%esi),%ebx
  28506d:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  285070:	83 e8 03             	sub    $0x3,%eax
  285073:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  285076:	8d 46 ea             	lea    -0x16(%esi),%eax
  285079:	89 45 dc             	mov    %eax,-0x24(%ebp)
  28507c:	eb 32                	jmp    2850b0 <change_wtitle8+0x9a>
  28507e:	89 ce                	mov    %ecx,%esi
  285080:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  285082:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  285086:	38 45 e7             	cmp    %al,-0x19(%ebp)
  285089:	75 05                	jne    285090 <change_wtitle8+0x7a>
  28508b:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  28508e:	7d 08                	jge    285098 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  285090:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  285093:	0f 44 c7             	cmove  %edi,%eax
  285096:	eb 04                	jmp    28509c <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  285098:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  28509c:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  28509f:	83 c2 01             	add    $0x1,%edx
  2850a2:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  2850a5:	75 d7                	jne    28507e <change_wtitle8+0x68>
  2850a7:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  2850aa:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  2850ae:	74 0d                	je     2850bd <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  2850b0:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  2850b4:	7e f1                	jle    2850a7 <change_wtitle8+0x91>
  2850b6:	ba 03 00 00 00       	mov    $0x3,%edx
  2850bb:	eb c1                	jmp    28507e <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  2850bd:	83 ec 0c             	sub    $0xc,%esp
  2850c0:	6a 15                	push   $0x15
  2850c2:	ff 75 cc             	pushl  -0x34(%ebp)
  2850c5:	6a 03                	push   $0x3
  2850c7:	6a 03                	push   $0x3
  2850c9:	ff 75 08             	pushl  0x8(%ebp)
  2850cc:	e8 05 d8 ff ff       	call   2828d6 <sheet_refresh>
	return;
  2850d1:	83 c4 20             	add    $0x20,%esp
}
  2850d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2850d7:	5b                   	pop    %ebx
  2850d8:	5e                   	pop    %esi
  2850d9:	5f                   	pop    %edi
  2850da:	5d                   	pop    %ebp
  2850db:	c3                   	ret    

002850dc <keywin_off>:
#include "common.h"
#include "graphics.h"
#include "memory.h"
#include "task_console.h"
void keywin_off(struct SHEET *key_win)
{
  2850dc:	55                   	push   %ebp
  2850dd:	89 e5                	mov    %esp,%ebp
  2850df:	53                   	push   %ebx
  2850e0:	83 ec 0c             	sub    $0xc,%esp
  2850e3:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  2850e6:	6a 00                	push   $0x0
  2850e8:	53                   	push   %ebx
  2850e9:	e8 28 ff ff ff       	call   285016 <change_wtitle8>
	if((key_win->flags & 0x20))
  2850ee:	83 c4 10             	add    $0x10,%esp
  2850f1:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  2850f5:	74 14                	je     28510b <keywin_off+0x2f>
	{
		fifo32_put(&key_win->task->fifo,3);
  2850f7:	83 ec 08             	sub    $0x8,%esp
  2850fa:	6a 03                	push   $0x3
  2850fc:	8b 43 24             	mov    0x24(%ebx),%eax
  2850ff:	83 c0 10             	add    $0x10,%eax
  285102:	50                   	push   %eax
  285103:	e8 a1 ca ff ff       	call   281ba9 <fifo32_put>
  285108:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  28510b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28510e:	c9                   	leave  
  28510f:	c3                   	ret    

00285110 <keywin_on>:

void keywin_on(struct SHEET *key_win)
{
  285110:	55                   	push   %ebp
  285111:	89 e5                	mov    %esp,%ebp
  285113:	53                   	push   %ebx
  285114:	83 ec 0c             	sub    $0xc,%esp
  285117:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  28511a:	6a 01                	push   $0x1
  28511c:	53                   	push   %ebx
  28511d:	e8 f4 fe ff ff       	call   285016 <change_wtitle8>
	if((key_win->flags & 0x20))
  285122:	83 c4 10             	add    $0x10,%esp
  285125:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  285129:	74 14                	je     28513f <keywin_on+0x2f>
	{
		fifo32_put(&key_win->task->fifo,2);
  28512b:	83 ec 08             	sub    $0x8,%esp
  28512e:	6a 02                	push   $0x2
  285130:	8b 43 24             	mov    0x24(%ebx),%eax
  285133:	83 c0 10             	add    $0x10,%eax
  285136:	50                   	push   %eax
  285137:	e8 6d ca ff ff       	call   281ba9 <fifo32_put>
  28513c:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  28513f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  285142:	c9                   	leave  
  285143:	c3                   	ret    

00285144 <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  285144:	55                   	push   %ebp
  285145:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  285147:	8b 45 0c             	mov    0xc(%ebp),%eax
  28514a:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  28514e:	5d                   	pop    %ebp
  28514f:	c3                   	ret    
