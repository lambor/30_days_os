
main.out.o：     文件格式 elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280013:	8d 9d fc fb ff ff    	lea    -0x404(%ebp),%ebx
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280019:	8d b5 18 fc ff ff    	lea    -0x3e8(%ebp),%esi
#include "header.h"


int bootmain()
{
  28001f:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280025:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280027:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  28002d:	6a 00                	push   $0x0
  28002f:	50                   	push   %eax
  280030:	68 80 00 00 00       	push   $0x80
  280035:	53                   	push   %ebx
  280036:	e8 5d 1b 00 00       	call   281b98 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  28003b:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  280041:	6a 00                	push   $0x0
  280043:	50                   	push   %eax
  280044:	6a 20                	push   $0x20
  280046:	56                   	push   %esi
  280047:	e8 4c 1b 00 00       	call   281b98 <fifo32_init>
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;
  280054:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int key_leds = (binfo->leds>>4)&7;

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28005a:	68 ed 00 00 00       	push   $0xed
  28005f:	56                   	push   %esi
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  280060:	c0 f8 04             	sar    $0x4,%al
  280063:	83 e0 07             	and    $0x7,%eax
  280066:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28006c:	e8 58 1b 00 00       	call   281bc9 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	59                   	pop    %ecx
  280072:	5f                   	pop    %edi
  280073:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280079:	56                   	push   %esi
  28007a:	e8 4a 1b 00 00       	call   281bc9 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  28007f:	e8 71 14 00 00       	call   2814f5 <init_gdtidt>
	init_pic();
  280084:	e8 30 16 00 00       	call   2816b9 <init_pic>
	io_sti();
  280089:	e8 46 0a 00 00       	call   280ad4 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  28008e:	58                   	pop    %eax
  28008f:	5a                   	pop    %edx
  280090:	68 00 01 00 00       	push   $0x100
  280095:	53                   	push   %ebx
  280096:	e8 37 1d 00 00       	call   281dd2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  28009b:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800a1:	83 c4 0c             	add    $0xc,%esp
  2800a4:	50                   	push   %eax
  2800a5:	68 00 02 00 00       	push   $0x200
  2800aa:	53                   	push   %ebx
  2800ab:	e8 d4 1b 00 00       	call   281c84 <enable_mouse>

	//init timer
	init_pit();
  2800b0:	e8 3b 2a 00 00       	call   282af0 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800b5:	59                   	pop    %ecx
  2800b6:	5f                   	pop    %edi
  2800b7:	68 f8 00 00 00       	push   $0xf8
  2800bc:	6a 21                	push   $0x21
  2800be:	e8 43 0a 00 00       	call   280b06 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800c3:	58                   	pop    %eax
  2800c4:	5a                   	pop    %edx
  2800c5:	68 ef 00 00 00       	push   $0xef
  2800ca:	68 a1 00 00 00       	push   $0xa1
  2800cf:	e8 32 0a 00 00       	call   280b06 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800d4:	59                   	pop    %ecx
  2800d5:	5f                   	pop    %edi
  2800d6:	68 ff ff ff bf       	push   $0xbfffffff
  2800db:	68 00 00 40 00       	push   $0x400000
  2800e0:	e8 87 1d 00 00       	call   281e6c <memtest>
	memman_init(memman);
  2800e5:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800ec:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	memman_init(memman);
  2800f2:	e8 b4 1e 00 00       	call   281fab <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  2800f7:	83 c4 0c             	add    $0xc,%esp
  2800fa:	68 00 e0 09 00       	push   $0x9e000
  2800ff:	68 00 10 00 00       	push   $0x1000
  280104:	68 00 00 3c 00       	push   $0x3c0000
  280109:	e8 ec 1f 00 00       	call   2820fa <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28010e:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  280114:	83 c4 0c             	add    $0xc,%esp
  280117:	2d 00 00 40 00       	sub    $0x400000,%eax
  28011c:	50                   	push   %eax
  28011d:	68 00 00 40 00       	push   $0x400000
  280122:	68 00 00 3c 00       	push   $0x3c0000
  280127:	e8 ce 1f 00 00       	call   2820fa <memman_free>

	memman_alloc_4k(memman,16*256+32*94*55);
  28012c:	58                   	pop    %eax
  28012d:	5a                   	pop    %edx
  28012e:	68 40 96 02 00       	push   $0x29640
  280133:	68 00 00 3c 00       	push   $0x3c0000
  280138:	e8 10 22 00 00       	call   28234d <memman_alloc_4k>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
  28013d:	e8 f9 0a 00 00       	call   280c3b <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280142:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280149:	50                   	push   %eax
  28014a:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280151:	50                   	push   %eax
  280152:	ff 35 f8 0f 00 00    	pushl  0xff8
  280158:	68 00 00 3c 00       	push   $0x3c0000
  28015d:	e8 46 22 00 00       	call   2823a8 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280162:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280165:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  28016b:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  280170:	68 00 00 3c 00       	push   $0x3c0000
  280175:	e8 a6 2e 00 00       	call   283020 <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  28017a:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  28017d:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%ebp)
	fifo.task = task_a;
  280183:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280189:	6a 00                	push   $0x0
  28018b:	6a 01                	push   $0x1
  28018d:	50                   	push   %eax
  28018e:	e8 fa 2d 00 00       	call   282f8d <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280193:	59                   	pop    %ecx
  280194:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28019a:	e8 9d 22 00 00       	call   28243c <sheet_alloc>
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  28019f:	5f                   	pop    %edi
  2801a0:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
	task_a = task_init(memman); //main task
	fifo.task = task_a;
	task_run(task_a,1,0);

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  2801a7:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  2801ad:	58                   	pop    %eax
  2801ae:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801b5:	0f af c2             	imul   %edx,%eax
  2801b8:	50                   	push   %eax
  2801b9:	68 00 00 3c 00       	push   $0x3c0000
  2801be:	e8 8a 21 00 00       	call   28234d <memman_alloc_4k>
  2801c3:	89 c7                	mov    %eax,%edi
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801c5:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801cc:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801d3:	50                   	push   %eax
  2801d4:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801db:	50                   	push   %eax
  2801dc:	57                   	push   %edi
  2801dd:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2801e3:	e8 c7 22 00 00       	call   2824af <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801e8:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801ef:	83 c4 1c             	add    $0x1c,%esp
  2801f2:	50                   	push   %eax
  2801f3:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801fa:	50                   	push   %eax
  2801fb:	57                   	push   %edi

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2801fc:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  280202:	e8 2a 0b 00 00       	call   280d31 <init_screen8>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280207:	58                   	pop    %eax
  280208:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28020e:	e8 29 22 00 00       	call   28243c <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280213:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  28021a:	6a 10                	push   $0x10
  28021c:	6a 10                	push   $0x10
  28021e:	57                   	push   %edi
  28021f:	50                   	push   %eax
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280220:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280226:	e8 84 22 00 00       	call   2824af <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  28022b:	83 c4 18             	add    $0x18,%esp
  28022e:	6a 63                	push   $0x63
  280230:	57                   	push   %edi
  280231:	e8 6a 0c 00 00       	call   280ea0 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280236:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  28023d:	b9 02 00 00 00       	mov    $0x2,%ecx
  280242:	83 e8 10             	sub    $0x10,%eax
  280245:	99                   	cltd   
  280246:	f7 f9                	idiv   %ecx
  280248:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int my = (binfo->scrny-28-16)/2;
  28024e:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280255:	83 e8 2c             	sub    $0x2c,%eax
  280258:	99                   	cltd   
  280259:	f7 f9                	idiv   %ecx
  28025b:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280261:	58                   	pop    %eax
  280262:	5a                   	pop    %edx
  280263:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280269:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28026f:	e8 9e 3e 00 00       	call   284112 <open_console>
  280274:	89 c7                	mov    %eax,%edi
	keywin_on(key_win);
  280276:	89 04 24             	mov    %eax,(%esp)
  280279:	e8 b2 4e 00 00       	call   285130 <keywin_on>

	sheet_slide(sht_bg,0,0);
  28027e:	83 c4 0c             	add    $0xc,%esp
  280281:	6a 00                	push   $0x0
  280283:	6a 00                	push   $0x0
  280285:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28028b:	e8 83 27 00 00       	call   282a13 <sheet_slide>
	sheet_slide(key_win,32,4);
  280290:	83 c4 0c             	add    $0xc,%esp
  280293:	6a 04                	push   $0x4
  280295:	6a 20                	push   $0x20
  280297:	57                   	push   %edi
  280298:	e8 76 27 00 00       	call   282a13 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  28029d:	83 c4 0c             	add    $0xc,%esp
  2802a0:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  2802a6:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  2802ac:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802b2:	e8 5c 27 00 00       	call   282a13 <sheet_slide>
	sheet_updown(sht_bg,		0);
  2802b7:	59                   	pop    %ecx
  2802b8:	58                   	pop    %eax
  2802b9:	6a 00                	push   $0x0
  2802bb:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802c1:	e8 64 26 00 00       	call   28292a <sheet_updown>
	sheet_updown(key_win,1);
  2802c6:	58                   	pop    %eax
  2802c7:	5a                   	pop    %edx
  2802c8:	6a 01                	push   $0x1
  2802ca:	57                   	push   %edi
  2802cb:	e8 5a 26 00 00       	call   28292a <sheet_updown>
	sheet_updown(sht_mouse,		2);
  2802d0:	59                   	pop    %ecx
  2802d1:	58                   	pop    %eax
  2802d2:	6a 02                	push   $0x2
  2802d4:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802da:	e8 4b 26 00 00       	call   28292a <sheet_updown>
  2802df:	83 c4 10             	add    $0x10,%esp

	extern struct TIMERCTL timerctl;
	
	int key_shift = 0,keycmd_wait = -1;
  2802e2:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  2802e9:	ff ff ff 
  2802ec:	c7 85 c8 fb ff ff 00 	movl   $0x0,-0x438(%ebp)
  2802f3:	00 00 00 
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
  2802f6:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2802fd:	00 00 00 
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;
  280300:	c7 85 b4 fb ff ff 00 	movl   $0x0,-0x44c(%ebp)
  280307:	00 00 00 
  28030a:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280311:	ff ff 7f 
  280314:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  28031b:	00 00 00 
  28031e:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  280325:	ff ff ff 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
  280328:	c7 85 9c fb ff ff 00 	movl   $0x0,-0x464(%ebp)
  28032f:	00 00 00 
  280332:	c7 85 a8 fb ff ff ff 	movl   $0xffffffff,-0x458(%ebp)
  280339:	ff ff ff 
  28033c:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280343:	ff ff ff 
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280346:	89 b5 c4 fb ff ff    	mov    %esi,-0x43c(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  28034c:	89 9d 98 fb ff ff    	mov    %ebx,-0x468(%ebp)
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280352:	83 ec 0c             	sub    $0xc,%esp
  280355:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28035b:	e8 16 19 00 00       	call   281c76 <fifo32_status>
  280360:	8b 8d b8 fb ff ff    	mov    -0x448(%ebp),%ecx
  280366:	83 c4 10             	add    $0x10,%esp
  280369:	c1 e9 1f             	shr    $0x1f,%ecx
  28036c:	74 2f                	je     28039d <bootmain+0x39d>
  28036e:	85 c0                	test   %eax,%eax
  280370:	7e 2b                	jle    28039d <bootmain+0x39d>
		{
			keycmd_wait = fifo32_get(&keycmd);
  280372:	83 ec 0c             	sub    $0xc,%esp
  280375:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28037b:	e8 bb 18 00 00       	call   281c3b <fifo32_get>
  280380:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
			wait_KBC_sendready();
  280386:	e8 2e 1a 00 00       	call   281db9 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  28038b:	58                   	pop    %eax
  28038c:	5a                   	pop    %edx
  28038d:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280393:	6a 60                	push   $0x60
  280395:	e8 6c 07 00 00       	call   280b06 <io_out8>
  28039a:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  28039d:	e8 30 07 00 00       	call   280ad2 <io_cli>
		if(fifo32_status(&fifo) == 0)
  2803a2:	83 ec 0c             	sub    $0xc,%esp
  2803a5:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  2803ab:	e8 c6 18 00 00       	call   281c76 <fifo32_status>
  2803b0:	83 c4 10             	add    $0x10,%esp
  2803b3:	85 c0                	test   %eax,%eax
  2803b5:	0f 85 8b 00 00 00    	jne    280446 <bootmain+0x446>
		{	
			if(new_mx >= 0)
  2803bb:	83 bd e0 fb ff ff 00 	cmpl   $0x0,-0x420(%ebp)
  2803c2:	78 2f                	js     2803f3 <bootmain+0x3f3>
			{
				io_sti();
  2803c4:	e8 0b 07 00 00       	call   280ad4 <io_sti>
				sheet_slide(sht_mouse,new_mx,new_my);
  2803c9:	50                   	push   %eax
  2803ca:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2803d0:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2803d6:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2803dc:	e8 32 26 00 00       	call   282a13 <sheet_slide>
  2803e1:	83 c4 10             	add    $0x10,%esp
				new_mx = -1;
  2803e4:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  2803eb:	ff ff ff 
  2803ee:	e9 5f ff ff ff       	jmp    280352 <bootmain+0x352>
			}
			else if(new_wx!=0x7fffffff)
  2803f3:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2803fa:	ff ff 7f 
  2803fd:	74 2f                	je     28042e <bootmain+0x42e>
			{
				io_sti();
  2803ff:	e8 d0 06 00 00       	call   280ad4 <io_sti>
				sheet_slide(sht,new_wx,new_wy);
  280404:	50                   	push   %eax
  280405:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  28040b:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280411:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280417:	e8 f7 25 00 00       	call   282a13 <sheet_slide>
  28041c:	83 c4 10             	add    $0x10,%esp
				new_wx = 0x7fffffff;
  28041f:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280426:	ff ff 7f 
  280429:	e9 24 ff ff ff       	jmp    280352 <bootmain+0x352>
			}
			else
			{
				task_sleep(task_a);
  28042e:	83 ec 0c             	sub    $0xc,%esp
  280431:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280437:	e8 f0 2d 00 00       	call   28322c <task_sleep>
				io_sti();
  28043c:	e8 93 06 00 00       	call   280ad4 <io_sti>
  280441:	e9 73 06 00 00       	jmp    280ab9 <bootmain+0xab9>
			}
		}
		else
		{
			int i = fifo32_get(&fifo);
  280446:	83 ec 0c             	sub    $0xc,%esp
  280449:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  28044f:	e8 e7 17 00 00       	call   281c3b <fifo32_get>
  280454:	89 c6                	mov    %eax,%esi
			io_sti();
  280456:	e8 79 06 00 00       	call   280ad4 <io_sti>
			if(key_win != 0 && key_win->flags == 0) //key_win already closed
  28045b:	83 c4 10             	add    $0x10,%esp
  28045e:	85 ff                	test   %edi,%edi
  280460:	74 2c                	je     28048e <bootmain+0x48e>
  280462:	83 7f 1c 00          	cmpl   $0x0,0x1c(%edi)
  280466:	75 26                	jne    28048e <bootmain+0x48e>
			{
				if(shtctl->top == 1)
  280468:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28046e:	31 ff                	xor    %edi,%edi
  280470:	8b 40 10             	mov    0x10(%eax),%eax
  280473:	83 f8 01             	cmp    $0x1,%eax
  280476:	74 16                	je     28048e <bootmain+0x48e>
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280478:	8b 8d d8 fb ff ff    	mov    -0x428(%ebp),%ecx
					keywin_on(key_win);
  28047e:	83 ec 0c             	sub    $0xc,%esp
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280481:	8b 7c 81 10          	mov    0x10(%ecx,%eax,4),%edi
					keywin_on(key_win);
  280485:	57                   	push   %edi
  280486:	e8 a5 4c 00 00       	call   285130 <keywin_on>
  28048b:	83 c4 10             	add    $0x10,%esp
				}
			}
			if(256<=i && i<=511)
  28048e:	8d 9e 00 ff ff ff    	lea    -0x100(%esi),%ebx
  280494:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  28049a:	0f 87 cc 02 00 00    	ja     28076c <bootmain+0x76c>
			{
				xtoa(i-256,s);
  2804a0:	50                   	push   %eax
  2804a1:	50                   	push   %eax
  2804a2:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  2804a8:	50                   	push   %eax
  2804a9:	53                   	push   %ebx
  2804aa:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  2804b0:	e8 91 14 00 00       	call   281946 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  2804b5:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
  2804bb:	83 c4 0c             	add    $0xc,%esp
  2804be:	6a 04                	push   $0x4
  2804c0:	50                   	push   %eax
  2804c1:	6a 00                	push   $0x0
  2804c3:	6a 07                	push   $0x7
  2804c5:	6a 10                	push   $0x10
  2804c7:	6a 00                	push   $0x0
  2804c9:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2804cf:	e8 4c 0c 00 00       	call   281120 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2804d4:	83 c4 18             	add    $0x18,%esp
  2804d7:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804dd:	53                   	push   %ebx
  2804de:	e8 61 19 00 00       	call   281e44 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2804e3:	8d 50 bf             	lea    -0x41(%eax),%edx
  2804e6:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2804e9:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2804ef:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2804f6:	80 fa 19             	cmp    $0x19,%dl
  2804f9:	77 26                	ja     280521 <bootmain+0x521>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2804fb:	f6 85 cc fb ff ff 04 	testb  $0x4,-0x434(%ebp)
  280502:	75 0b                	jne    28050f <bootmain+0x50f>
  280504:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  28050b:	75 0b                	jne    280518 <bootmain+0x518>
  28050d:	eb 12                	jmp    280521 <bootmain+0x521>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  28050f:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280516:	75 09                	jne    280521 <bootmain+0x521>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280518:	83 c0 20             	add    $0x20,%eax
  28051b:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0 && key_win != 0)//visible char,return key and back key
  280521:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280528:	85 ff                	test   %edi,%edi
  28052a:	0f 95 c3             	setne  %bl
  28052d:	84 c0                	test   %al,%al
  28052f:	74 1b                	je     28054c <bootmain+0x54c>
  280531:	84 db                	test   %bl,%bl
  280533:	74 17                	je     28054c <bootmain+0x54c>
				{
					fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  280535:	05 00 01 00 00       	add    $0x100,%eax
  28053a:	51                   	push   %ecx
  28053b:	51                   	push   %ecx
  28053c:	50                   	push   %eax
  28053d:	8b 47 24             	mov    0x24(%edi),%eax
  280540:	83 c0 10             	add    $0x10,%eax
  280543:	50                   	push   %eax
  280544:	e8 80 16 00 00       	call   281bc9 <fifo32_put>
  280549:	83 c4 10             	add    $0x10,%esp
				}
				if(i == 256 + 0x0f && key_win != 0) //tab key
  28054c:	81 fe 0f 01 00 00    	cmp    $0x10f,%esi
  280552:	75 39                	jne    28058d <bootmain+0x58d>
  280554:	84 db                	test   %bl,%bl
  280556:	74 35                	je     28058d <bootmain+0x58d>
				{
					keywin_off(key_win);
  280558:	83 ec 0c             	sub    $0xc,%esp
  28055b:	57                   	push   %edi
  28055c:	e8 9b 4b 00 00       	call   2850fc <keywin_off>
					int j=key_win->height - 1;
  280561:	8b 47 18             	mov    0x18(%edi),%eax
					if(j==0)
  280564:	83 c4 10             	add    $0x10,%esp
  280567:	48                   	dec    %eax
  280568:	75 10                	jne    28057a <bootmain+0x57a>
					{
						j = shtctl->top-1;
  28056a:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280570:	8b 40 10             	mov    0x10(%eax),%eax
  280573:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  280579:	48                   	dec    %eax
					}
					key_win = shtctl->sheets[j];
  28057a:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
					keywin_on(key_win);
  280580:	83 ec 0c             	sub    $0xc,%esp
					int j=key_win->height - 1;
					if(j==0)
					{
						j = shtctl->top-1;
					}
					key_win = shtctl->sheets[j];
  280583:	8b 7c 82 14          	mov    0x14(%edx,%eax,4),%edi
					keywin_on(key_win);
  280587:	57                   	push   %edi
  280588:	e9 a0 01 00 00       	jmp    28072d <bootmain+0x72d>
				}
				else if(i == 256 + 0x2a)  //left shift on
  28058d:	81 fe 2a 01 00 00    	cmp    $0x12a,%esi
  280593:	75 0c                	jne    2805a1 <bootmain+0x5a1>
				{
					key_shift |= 1;
  280595:	83 8d c8 fb ff ff 01 	orl    $0x1,-0x438(%ebp)
  28059c:	e9 b1 fd ff ff       	jmp    280352 <bootmain+0x352>
				} 
				else if(i == 256 + 0x36) //right shift on
  2805a1:	81 fe 36 01 00 00    	cmp    $0x136,%esi
  2805a7:	75 0c                	jne    2805b5 <bootmain+0x5b5>
				{
					key_shift |= 2;
  2805a9:	83 8d c8 fb ff ff 02 	orl    $0x2,-0x438(%ebp)
  2805b0:	e9 9d fd ff ff       	jmp    280352 <bootmain+0x352>
				}
				else if(i == 256 + 0xaa)  //left shift off
  2805b5:	81 fe aa 01 00 00    	cmp    $0x1aa,%esi
  2805bb:	75 0c                	jne    2805c9 <bootmain+0x5c9>
				{
					key_shift &= ~1;
  2805bd:	83 a5 c8 fb ff ff fe 	andl   $0xfffffffe,-0x438(%ebp)
  2805c4:	e9 89 fd ff ff       	jmp    280352 <bootmain+0x352>
				} 
				else if(i == 256 + 0xb6) //right shift off
  2805c9:	81 fe b6 01 00 00    	cmp    $0x1b6,%esi
  2805cf:	75 0c                	jne    2805dd <bootmain+0x5dd>
				{
					key_shift &= ~2;
  2805d1:	83 a5 c8 fb ff ff fd 	andl   $0xfffffffd,-0x438(%ebp)
  2805d8:	e9 75 fd ff ff       	jmp    280352 <bootmain+0x352>
				}
				else if(i == 256 + 0x3a) //CapsLock
  2805dd:	81 fe 3a 01 00 00    	cmp    $0x13a,%esi
  2805e3:	75 09                	jne    2805ee <bootmain+0x5ee>
				{
					key_leds ^= 4;
  2805e5:	83 b5 cc fb ff ff 04 	xorl   $0x4,-0x434(%ebp)
  2805ec:	eb 20                	jmp    28060e <bootmain+0x60e>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2805ee:	81 fe 45 01 00 00    	cmp    $0x145,%esi
  2805f4:	75 09                	jne    2805ff <bootmain+0x5ff>
				{
					key_leds ^= 2;
  2805f6:	83 b5 cc fb ff ff 02 	xorl   $0x2,-0x434(%ebp)
  2805fd:	eb 0f                	jmp    28060e <bootmain+0x60e>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2805ff:	81 fe 46 01 00 00    	cmp    $0x146,%esi
  280605:	75 31                	jne    280638 <bootmain+0x638>
				{
					key_leds ^= 1;
  280607:	83 b5 cc fb ff ff 01 	xorl   $0x1,-0x434(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  28060e:	50                   	push   %eax
  28060f:	50                   	push   %eax
  280610:	68 ed 00 00 00       	push   $0xed
  280615:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28061b:	e8 a9 15 00 00       	call   281bc9 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  280620:	58                   	pop    %eax
  280621:	5a                   	pop    %edx
  280622:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280628:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28062e:	e8 96 15 00 00       	call   281bc9 <fifo32_put>
  280633:	e9 81 04 00 00       	jmp    280ab9 <bootmain+0xab9>
				}
				else if(i == 256 + 0xfa)
  280638:	81 fe fa 01 00 00    	cmp    $0x1fa,%esi
  28063e:	75 0f                	jne    28064f <bootmain+0x64f>
				{
					keycmd_wait = -1;
  280640:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  280647:	ff ff ff 
  28064a:	e9 03 fd ff ff       	jmp    280352 <bootmain+0x352>
				}
				else if(i == 256 + 0xfe)
  28064f:	81 fe fe 01 00 00    	cmp    $0x1fe,%esi
  280655:	75 19                	jne    280670 <bootmain+0x670>
				{
					wait_KBC_sendready();
  280657:	e8 5d 17 00 00       	call   281db9 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  28065c:	50                   	push   %eax
  28065d:	50                   	push   %eax
  28065e:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280664:	6a 60                	push   $0x60
  280666:	e8 9b 04 00 00       	call   280b06 <io_out8>
  28066b:	e9 49 04 00 00       	jmp    280ab9 <bootmain+0xab9>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && key_win != 0)	//shift + F1
  280670:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280677:	0f 95 c0             	setne  %al
  28067a:	81 fe 3b 01 00 00    	cmp    $0x13b,%esi
  280680:	0f 94 c2             	sete   %dl
  280683:	84 c2                	test   %al,%dl
  280685:	74 54                	je     2806db <bootmain+0x6db>
  280687:	84 db                	test   %bl,%bl
  280689:	74 50                	je     2806db <bootmain+0x6db>
				{
					struct TASK *task = key_win->task;
  28068b:	8b 5f 24             	mov    0x24(%edi),%ebx
					if(task!=0 && task->tss.ss0 != 0)
  28068e:	85 db                	test   %ebx,%ebx
  280690:	0f 84 bc fc ff ff    	je     280352 <bootmain+0x352>
  280696:	83 7b 34 00          	cmpl   $0x0,0x34(%ebx)
  28069a:	0f 84 b2 fc ff ff    	je     280352 <bootmain+0x352>
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
  2806a0:	50                   	push   %eax
  2806a1:	50                   	push   %eax
  2806a2:	68 80 51 28 00       	push   $0x285180
  2806a7:	ff b3 a4 00 00 00    	pushl  0xa4(%ebx)
  2806ad:	e8 86 36 00 00       	call   283d38 <cons_putstr0>
						io_cli();
  2806b2:	e8 1b 04 00 00       	call   280ad2 <io_cli>
						task->tss.eax = (int)&(task->tss.esp0);
  2806b7:	8d 43 30             	lea    0x30(%ebx),%eax
						task->tss.eip = (int)asm_end_app - 0x280000;
  2806ba:	c7 43 4c 90 2d 00 00 	movl   $0x2d90,0x4c(%ebx)
					if(task!=0 && task->tss.ss0 != 0)
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
						io_cli();
						task->tss.eax = (int)&(task->tss.esp0);
  2806c1:	89 43 54             	mov    %eax,0x54(%ebx)
						task->tss.eip = (int)asm_end_app - 0x280000;
						io_sti();
  2806c4:	e8 0b 04 00 00       	call   280ad4 <io_sti>
						task_run(task,-1,0);
  2806c9:	83 c4 0c             	add    $0xc,%esp
  2806cc:	6a 00                	push   $0x0
  2806ce:	6a ff                	push   $0xffffffff
  2806d0:	53                   	push   %ebx
  2806d1:	e8 b7 28 00 00       	call   282f8d <task_run>
  2806d6:	e9 de 03 00 00       	jmp    280ab9 <bootmain+0xab9>
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
  2806db:	81 fe 3c 01 00 00    	cmp    $0x13c,%esi
  2806e1:	75 54                	jne    280737 <bootmain+0x737>
  2806e3:	84 c0                	test   %al,%al
  2806e5:	74 50                	je     280737 <bootmain+0x737>
				{
					if(key_win != 0) keywin_off(key_win);
  2806e7:	85 ff                	test   %edi,%edi
  2806e9:	74 0c                	je     2806f7 <bootmain+0x6f7>
  2806eb:	83 ec 0c             	sub    $0xc,%esp
  2806ee:	57                   	push   %edi
  2806ef:	e8 08 4a 00 00       	call   2850fc <keywin_off>
  2806f4:	83 c4 10             	add    $0x10,%esp
					key_win = open_console(shtctl,memtotal);
  2806f7:	51                   	push   %ecx
  2806f8:	51                   	push   %ecx
  2806f9:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  2806ff:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280705:	e8 08 3a 00 00       	call   284112 <open_console>
					sheet_slide(key_win,32,4);
  28070a:	83 c4 0c             	add    $0xc,%esp
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
				{
					if(key_win != 0) keywin_off(key_win);
					key_win = open_console(shtctl,memtotal);
  28070d:	89 c7                	mov    %eax,%edi
					sheet_slide(key_win,32,4);
  28070f:	6a 04                	push   $0x4
  280711:	6a 20                	push   $0x20
  280713:	50                   	push   %eax
  280714:	e8 fa 22 00 00       	call   282a13 <sheet_slide>
					sheet_updown(key_win,shtctl->top);
  280719:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28071f:	5b                   	pop    %ebx
  280720:	5e                   	pop    %esi
  280721:	ff 70 10             	pushl  0x10(%eax)
  280724:	57                   	push   %edi
  280725:	e8 00 22 00 00       	call   28292a <sheet_updown>
					keywin_on(key_win);
  28072a:	89 3c 24             	mov    %edi,(%esp)
  28072d:	e8 fe 49 00 00       	call   285130 <keywin_on>
  280732:	e9 82 03 00 00       	jmp    280ab9 <bootmain+0xab9>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  280737:	81 fe 57 01 00 00    	cmp    $0x157,%esi
  28073d:	0f 85 0f fc ff ff    	jne    280352 <bootmain+0x352>
  280743:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280749:	8b 40 10             	mov    0x10(%eax),%eax
  28074c:	83 f8 02             	cmp    $0x2,%eax
  28074f:	0f 8e fd fb ff ff    	jle    280352 <bootmain+0x352>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280755:	48                   	dec    %eax
  280756:	52                   	push   %edx
  280757:	52                   	push   %edx
  280758:	50                   	push   %eax
  280759:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28075f:	ff 70 18             	pushl  0x18(%eax)
  280762:	e8 c3 21 00 00       	call   28292a <sheet_updown>
  280767:	e9 4d 03 00 00       	jmp    280ab9 <bootmain+0xab9>
				}

			}
			else if(512<=i && i<=767)
  28076c:	8d 86 00 fe ff ff    	lea    -0x200(%esi),%eax
  280772:	3d ff 00 00 00       	cmp    $0xff,%eax
  280777:	0f 87 e8 02 00 00    	ja     280a65 <bootmain+0xa65>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  28077d:	50                   	push   %eax
  28077e:	50                   	push   %eax
  28077f:	89 f0                	mov    %esi,%eax
  280781:	0f b6 f0             	movzbl %al,%esi
  280784:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  28078a:	56                   	push   %esi
  28078b:	50                   	push   %eax
  28078c:	e8 3d 15 00 00       	call   281cce <mouse_decode>
  280791:	83 c4 10             	add    $0x10,%esp
  280794:	85 c0                	test   %eax,%eax
  280796:	0f 84 b6 fb ff ff    	je     280352 <bootmain+0x352>
  28079c:	31 c9                	xor    %ecx,%ecx
  28079e:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  2807a4:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  2807aa:	0f 48 c1             	cmovs  %ecx,%eax
  2807ad:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)
  2807b3:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  2807b9:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  2807bf:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807c2:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2807c9:	3b 85 e0 fb ff ff    	cmp    -0x420(%ebp),%eax
  2807cf:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807d2:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807d9:	0f 4f 95 e0 fb ff ff 	cmovg  -0x420(%ebp),%edx
  2807e0:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807e6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2807e9:	39 c8                	cmp    %ecx,%eax
  2807eb:	0f 4f d1             	cmovg  %ecx,%edx
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807ee:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807f5:	89 95 dc fb ff ff    	mov    %edx,-0x424(%ebp)
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807fb:	0f 84 f2 01 00 00    	je     2809f3 <bootmain+0x9f3>
					{
						if(mmx < 0) 
  280801:	83 bd bc fb ff ff 00 	cmpl   $0x0,-0x444(%ebp)
  280808:	0f 89 91 01 00 00    	jns    28099f <bootmain+0x99f>
						{
							for(int j=shtctl->top-1;j>0;j--)
  28080e:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280814:	8b 40 10             	mov    0x10(%eax),%eax
  280817:	48                   	dec    %eax
  280818:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  28081e:	85 c0                	test   %eax,%eax
  280820:	0f 8e 71 01 00 00    	jle    280997 <bootmain+0x997>
							{
								sht = shtctl->sheets[j];
  280826:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28082c:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280832:	8b 54 82 14          	mov    0x14(%edx,%eax,4),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280836:	2b 72 0c             	sub    0xc(%edx),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280839:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28083f:	0f 88 4c 01 00 00    	js     280991 <bootmain+0x991>
  280845:	8b 9d dc fb ff ff    	mov    -0x424(%ebp),%ebx
  28084b:	2b 5a 10             	sub    0x10(%edx),%ebx
  28084e:	8b 4a 04             	mov    0x4(%edx),%ecx
  280851:	0f 88 3a 01 00 00    	js     280991 <bootmain+0x991>
  280857:	39 ce                	cmp    %ecx,%esi
  280859:	0f 8d 32 01 00 00    	jge    280991 <bootmain+0x991>
  28085f:	3b 5a 08             	cmp    0x8(%edx),%ebx
  280862:	0f 8d 29 01 00 00    	jge    280991 <bootmain+0x991>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280868:	8b 12                	mov    (%edx),%edx
  28086a:	0f af cb             	imul   %ebx,%ecx
  28086d:	01 f2                	add    %esi,%edx
  28086f:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%ebp)
  280875:	89 d1                	mov    %edx,%ecx
  280877:	8b 95 d0 fb ff ff    	mov    -0x430(%ebp),%edx
  28087d:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  280881:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280887:	3b 4a 14             	cmp    0x14(%edx),%ecx
  28088a:	0f 84 01 01 00 00    	je     280991 <bootmain+0x991>
									{
										sheet_updown(sht,shtctl->top-1);
  280890:	50                   	push   %eax
  280891:	50                   	push   %eax
  280892:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280898:	52                   	push   %edx
  280899:	e8 8c 20 00 00       	call   28292a <sheet_updown>
										if(sht!=key_win)
  28089e:	83 c4 10             	add    $0x10,%esp
  2808a1:	3b bd e4 fb ff ff    	cmp    -0x41c(%ebp),%edi
  2808a7:	74 18                	je     2808c1 <bootmain+0x8c1>
										{
											keywin_off(key_win);
  2808a9:	83 ec 0c             	sub    $0xc,%esp
  2808ac:	57                   	push   %edi
  2808ad:	e8 4a 48 00 00       	call   2850fc <keywin_off>
											key_win = sht;
											keywin_on(key_win);
  2808b2:	5f                   	pop    %edi
  2808b3:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  2808b9:	e8 72 48 00 00       	call   285130 <keywin_on>
  2808be:	83 c4 10             	add    $0x10,%esp
  2808c1:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  2808c7:	83 fe 02             	cmp    $0x2,%esi
  2808ca:	8b 40 04             	mov    0x4(%eax),%eax
  2808cd:	7e 3f                	jle    28090e <bootmain+0x90e>
  2808cf:	8d 50 fd             	lea    -0x3(%eax),%edx
  2808d2:	39 d6                	cmp    %edx,%esi
  2808d4:	7d 38                	jge    28090e <bootmain+0x90e>
  2808d6:	8d 53 fd             	lea    -0x3(%ebx),%edx
  2808d9:	83 fa 11             	cmp    $0x11,%edx
  2808dc:	77 30                	ja     28090e <bootmain+0x90e>
										{
											mmx = mx;
											mmy = my;
											mmx2 = sht->vx0;
  2808de:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
  2808e4:	8b 79 0c             	mov    0xc(%ecx),%edi
  2808e7:	89 bd 9c fb ff ff    	mov    %edi,-0x464(%ebp)
											new_wy = sht->vy0;
  2808ed:	8b 79 10             	mov    0x10(%ecx),%edi
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
											mmy = my;
  2808f0:	8b 8d dc fb ff ff    	mov    -0x424(%ebp),%ecx
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
  2808f6:	89 bd b4 fb ff ff    	mov    %edi,-0x44c(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808fc:	8b bd e0 fb ff ff    	mov    -0x420(%ebp),%edi
											mmy = my;
  280902:	89 8d a8 fb ff ff    	mov    %ecx,-0x458(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  280908:	89 bd bc fb ff ff    	mov    %edi,-0x444(%ebp)
											mmy = my;
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19) //click the close button
  28090e:	8d 50 eb             	lea    -0x15(%eax),%edx
  280911:	39 d6                	cmp    %edx,%esi
  280913:	7c 74                	jl     280989 <bootmain+0x989>
  280915:	83 e8 05             	sub    $0x5,%eax
  280918:	39 c6                	cmp    %eax,%esi
  28091a:	7d 6d                	jge    280989 <bootmain+0x989>
  28091c:	83 eb 05             	sub    $0x5,%ebx
  28091f:	83 fb 0d             	cmp    $0xd,%ebx
  280922:	77 65                	ja     280989 <bootmain+0x989>
										{
											if(sht->flags & 0x10)	//app window
  280924:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  28092a:	f6 40 1c 10          	testb  $0x10,0x1c(%eax)
  28092e:	8b 58 24             	mov    0x24(%eax),%ebx
  280931:	74 3c                	je     28096f <bootmain+0x96f>
											{
												if(sht->task != 0)
  280933:	85 db                	test   %ebx,%ebx
  280935:	74 52                	je     280989 <bootmain+0x989>
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  280937:	51                   	push   %ecx
  280938:	51                   	push   %ecx
  280939:	68 8e 51 28 00       	push   $0x28518e
  28093e:	ff b3 a4 00 00 00    	pushl  0xa4(%ebx)
  280944:	e8 ef 33 00 00       	call   283d38 <cons_putstr0>
													io_cli();
  280949:	e8 84 01 00 00       	call   280ad2 <io_cli>
													task->tss.eax = (int)&(task->tss.esp0);
  28094e:	8d 43 30             	lea    0x30(%ebx),%eax
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
  280951:	c7 43 4c 90 2d 00 00 	movl   $0x2d90,0x4c(%ebx)
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task->tss.eax = (int)&(task->tss.esp0);
  280958:	89 43 54             	mov    %eax,0x54(%ebx)
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
													io_sti();
  28095b:	e8 74 01 00 00       	call   280ad4 <io_sti>
													task_run(task,-1,0);
  280960:	83 c4 0c             	add    $0xc,%esp
  280963:	6a 00                	push   $0x0
  280965:	6a ff                	push   $0xffffffff
  280967:	53                   	push   %ebx
  280968:	e8 20 26 00 00       	call   282f8d <task_run>
  28096d:	eb 17                	jmp    280986 <bootmain+0x986>
											}
											else				//console window
											{
												struct TASK *task = sht->task;
												io_cli();
												fifo32_put(&task->fifo,4);
  28096f:	83 c3 10             	add    $0x10,%ebx
												}
											}
											else				//console window
											{
												struct TASK *task = sht->task;
												io_cli();
  280972:	e8 5b 01 00 00       	call   280ad2 <io_cli>
												fifo32_put(&task->fifo,4);
  280977:	52                   	push   %edx
  280978:	52                   	push   %edx
  280979:	6a 04                	push   $0x4
  28097b:	53                   	push   %ebx
  28097c:	e8 48 12 00 00       	call   281bc9 <fifo32_put>
												io_sti();
  280981:	e8 4e 01 00 00       	call   280ad4 <io_sti>
  280986:	83 c4 10             	add    $0x10,%esp
  280989:	8b bd e4 fb ff ff    	mov    -0x41c(%ebp),%edi
  28098f:	eb 06                	jmp    280997 <bootmain+0x997>
					new_my = my;
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  280991:	48                   	dec    %eax
  280992:	e9 87 fe ff ff       	jmp    28081e <bootmain+0x81e>
  280997:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28099d:	eb 3d                	jmp    2809dc <bootmain+0x9dc>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
  28099f:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809a5:	2b 85 bc fb ff ff    	sub    -0x444(%ebp),%eax
  2809ab:	8b b5 9c fb ff ff    	mov    -0x464(%ebp),%esi
  2809b1:	8d 44 06 02          	lea    0x2(%esi,%eax,1),%eax
  2809b5:	83 e0 fc             	and    $0xfffffffc,%eax
  2809b8:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
							new_wy = new_wy+y;
  2809be:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809c4:	2b 85 a8 fb ff ff    	sub    -0x458(%ebp),%eax
  2809ca:	01 85 b4 fb ff ff    	add    %eax,-0x44c(%ebp)
							//sheet_slide(sht,(mmx2+x+2)&~3,sht->vy0+y);
							mmy = my;
  2809d0:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809d6:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
							new_wy = new_wy+y;
  2809dc:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809e2:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809e8:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809ee:	e9 5f f9 ff ff       	jmp    280352 <bootmain+0x352>
						}
					}
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
  2809f3:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2809fa:	ff ff 7f 
  2809fd:	75 27                	jne    280a26 <bootmain+0xa26>
  2809ff:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280a05:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a0b:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a11:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  280a17:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280a1e:	ff ff ff 
  280a21:	e9 2c f9 ff ff       	jmp    280352 <bootmain+0x352>
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a26:	50                   	push   %eax
  280a27:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280a2d:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280a33:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280a39:	e8 d5 1f 00 00       	call   282a13 <sheet_slide>
  280a3e:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280a44:	83 c4 10             	add    $0x10,%esp
							new_wx = 0x7fffffff;
  280a47:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280a4e:	ff ff 7f 
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a51:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a57:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a5d:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  280a63:	eb b2                	jmp    280a17 <bootmain+0xa17>
							new_wx = 0x7fffffff;
						}
					}
				}
			}
			else if(768<=i && i<=1023)
  280a65:	8d 86 00 fd ff ff    	lea    -0x300(%esi),%eax
  280a6b:	3d ff 00 00 00       	cmp    $0xff,%eax
  280a70:	77 1b                	ja     280a8d <bootmain+0xa8d>
			{
				close_console(shtctl->sheets0 + (i-768));
  280a72:	6b f6 28             	imul   $0x28,%esi,%esi
  280a75:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280a7b:	83 ec 0c             	sub    $0xc,%esp
  280a7e:	8d 84 30 14 8c ff ff 	lea    -0x73ec(%eax,%esi,1),%eax
  280a85:	50                   	push   %eax
  280a86:	e8 60 37 00 00       	call   2841eb <close_console>
  280a8b:	eb 2c                	jmp    280ab9 <bootmain+0xab9>
			}
			else if(1024<=i && i<=2023)
  280a8d:	8d 86 00 fc ff ff    	lea    -0x400(%esi),%eax
  280a93:	3d e7 03 00 00       	cmp    $0x3e7,%eax
  280a98:	0f 87 b4 f8 ff ff    	ja     280352 <bootmain+0x352>
			{
				extern struct TASKCTL *taskctl;
				close_constask(taskctl->tasks0 + (i-1024));
  280a9e:	69 f6 bc 00 00 00    	imul   $0xbc,%esi,%esi
  280aa4:	a1 fc a5 28 00       	mov    0x28a5fc,%eax
  280aa9:	83 ec 0c             	sub    $0xc,%esp
  280aac:	8d 84 30 f8 1f fd ff 	lea    -0x2e008(%eax,%esi,1),%eax
  280ab3:	50                   	push   %eax
  280ab4:	e8 e6 36 00 00       	call   28419f <close_constask>
  280ab9:	83 c4 10             	add    $0x10,%esp
  280abc:	e9 91 f8 ff ff       	jmp    280352 <bootmain+0x352>
  280ac1:	66 90                	xchg   %ax,%ax
  280ac3:	66 90                	xchg   %ax,%ax
  280ac5:	66 90                	xchg   %ax,%ax
  280ac7:	66 90                	xchg   %ax,%ax
  280ac9:	66 90                	xchg   %ax,%ax
  280acb:	66 90                	xchg   %ax,%ax
  280acd:	66 90                	xchg   %ax,%ax
  280acf:	90                   	nop

00280ad0 <io_hlt>:
  280ad0:	f4                   	hlt    
  280ad1:	c3                   	ret    

00280ad2 <io_cli>:
  280ad2:	fa                   	cli    
  280ad3:	c3                   	ret    

00280ad4 <io_sti>:
  280ad4:	fb                   	sti    
  280ad5:	c3                   	ret    

00280ad6 <io_stihlt>:
  280ad6:	fb                   	sti    
  280ad7:	f4                   	hlt    
  280ad8:	c3                   	ret    

00280ad9 <write_mem8>:
  280ad9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280add:	8a 44 24 08          	mov    0x8(%esp),%al
  280ae1:	88 01                	mov    %al,(%ecx)
  280ae3:	c3                   	ret    

00280ae4 <io_in8>:
  280ae4:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ae8:	b8 00 00 00 00       	mov    $0x0,%eax
  280aed:	ec                   	in     (%dx),%al
  280aee:	c3                   	ret    

00280aef <io_in16>:
  280aef:	8b 54 24 04          	mov    0x4(%esp),%edx
  280af3:	b8 00 00 00 00       	mov    $0x0,%eax
  280af8:	66 ed                	in     (%dx),%ax
  280afa:	c3                   	ret    

00280afb <io_in32>:
  280afb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aff:	b8 00 00 00 00       	mov    $0x0,%eax
  280b04:	ed                   	in     (%dx),%eax
  280b05:	c3                   	ret    

00280b06 <io_out8>:
  280b06:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b0a:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b0e:	ee                   	out    %al,(%dx)
  280b0f:	c3                   	ret    

00280b10 <io_out16>:
  280b10:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b14:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b18:	66 ef                	out    %ax,(%dx)
  280b1a:	c3                   	ret    

00280b1b <io_out32>:
  280b1b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280b1f:	8b 44 24 08          	mov    0x8(%esp),%eax
  280b23:	ef                   	out    %eax,(%dx)
  280b24:	c3                   	ret    

00280b25 <io_load_eflags>:
  280b25:	9c                   	pushf  
  280b26:	58                   	pop    %eax
  280b27:	c3                   	ret    

00280b28 <io_store_eflags>:
  280b28:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b2c:	50                   	push   %eax
  280b2d:	9d                   	popf   
  280b2e:	c3                   	ret    

00280b2f <load_gdtr>:
  280b2f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b34:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b39:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280b3e:	c3                   	ret    

00280b3f <load_idtr>:
  280b3f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b44:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b49:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280b4e:	c3                   	ret    

00280b4f <load_cr0>:
  280b4f:	0f 20 c0             	mov    %cr0,%eax
  280b52:	c3                   	ret    

00280b53 <store_cr0>:
  280b53:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b57:	0f 22 c0             	mov    %eax,%cr0
  280b5a:	c3                   	ret    

00280b5b <_memtest_sub>:
  280b5b:	57                   	push   %edi
  280b5c:	56                   	push   %esi
  280b5d:	53                   	push   %ebx
  280b5e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280b63:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280b68:	8b 44 24 10          	mov    0x10(%esp),%eax

00280b6c <mts_loop>:
  280b6c:	89 c3                	mov    %eax,%ebx
  280b6e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280b74:	8b 13                	mov    (%ebx),%edx
  280b76:	89 33                	mov    %esi,(%ebx)
  280b78:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b7b:	3b 3b                	cmp    (%ebx),%edi
  280b7d:	75 18                	jne    280b97 <mts_qit>
  280b7f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b82:	3b 33                	cmp    (%ebx),%esi
  280b84:	75 11                	jne    280b97 <mts_qit>
  280b86:	89 13                	mov    %edx,(%ebx)
  280b88:	05 00 10 00 00       	add    $0x1000,%eax
  280b8d:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280b91:	76 d9                	jbe    280b6c <mts_loop>

00280b93 <mts_ret>:
  280b93:	5b                   	pop    %ebx
  280b94:	5e                   	pop    %esi
  280b95:	5f                   	pop    %edi
  280b96:	c3                   	ret    

00280b97 <mts_qit>:
  280b97:	89 13                	mov    %edx,(%ebx)
  280b99:	5b                   	pop    %ebx
  280b9a:	5e                   	pop    %esi
  280b9b:	5f                   	pop    %edi
  280b9c:	c3                   	ret    

00280b9d <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280b9d:	55                   	push   %ebp
  280b9e:	89 e5                	mov    %esp,%ebp
  280ba0:	57                   	push   %edi
  280ba1:	56                   	push   %esi
  280ba2:	53                   	push   %ebx
  280ba3:	83 ec 1c             	sub    $0x1c,%esp
  280ba6:	8b 75 08             	mov    0x8(%ebp),%esi
  280ba9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280bac:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280baf:	e8 71 ff ff ff       	call   280b25 <io_load_eflags>
  280bb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280bb7:	e8 16 ff ff ff       	call   280ad2 <io_cli>
	io_out8(0x03c8,start);
  280bbc:	83 ec 08             	sub    $0x8,%esp
  280bbf:	56                   	push   %esi
  280bc0:	68 c8 03 00 00       	push   $0x3c8
  280bc5:	e8 3c ff ff ff       	call   280b06 <io_out8>
	for(i=start;i<=end;i++)
  280bca:	83 c4 10             	add    $0x10,%esp
  280bcd:	39 fe                	cmp    %edi,%esi
  280bcf:	7f 54                	jg     280c25 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280bd1:	83 ec 08             	sub    $0x8,%esp
  280bd4:	0f b6 03             	movzbl (%ebx),%eax
  280bd7:	c0 e8 02             	shr    $0x2,%al
  280bda:	0f b6 c0             	movzbl %al,%eax
  280bdd:	50                   	push   %eax
  280bde:	68 c9 03 00 00       	push   $0x3c9
  280be3:	e8 1e ff ff ff       	call   280b06 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280be8:	83 c4 08             	add    $0x8,%esp
  280beb:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280bef:	c0 e8 02             	shr    $0x2,%al
  280bf2:	0f b6 c0             	movzbl %al,%eax
  280bf5:	50                   	push   %eax
  280bf6:	68 c9 03 00 00       	push   $0x3c9
  280bfb:	e8 06 ff ff ff       	call   280b06 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280c00:	83 c4 08             	add    $0x8,%esp
  280c03:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280c07:	c0 e8 02             	shr    $0x2,%al
  280c0a:	0f b6 c0             	movzbl %al,%eax
  280c0d:	50                   	push   %eax
  280c0e:	68 c9 03 00 00       	push   $0x3c9
  280c13:	e8 ee fe ff ff       	call   280b06 <io_out8>
		rgb+=3;
  280c18:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280c1b:	83 c6 01             	add    $0x1,%esi
  280c1e:	83 c4 10             	add    $0x10,%esp
  280c21:	39 f7                	cmp    %esi,%edi
  280c23:	7d ac                	jge    280bd1 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280c25:	83 ec 0c             	sub    $0xc,%esp
  280c28:	ff 75 e4             	pushl  -0x1c(%ebp)
  280c2b:	e8 f8 fe ff ff       	call   280b28 <io_store_eflags>
	return;
  280c30:	83 c4 10             	add    $0x10,%esp
}
  280c33:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c36:	5b                   	pop    %ebx
  280c37:	5e                   	pop    %esi
  280c38:	5f                   	pop    %edi
  280c39:	5d                   	pop    %ebp
  280c3a:	c3                   	ret    

00280c3b <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280c3b:	55                   	push   %ebp
  280c3c:	89 e5                	mov    %esp,%ebp
  280c3e:	57                   	push   %edi
  280c3f:	56                   	push   %esi
  280c40:	53                   	push   %ebx
  280c41:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280c47:	68 a0 64 28 00       	push   $0x2864a0
  280c4c:	6a 0f                	push   $0xf
  280c4e:	6a 00                	push   $0x0
  280c50:	e8 48 ff ff ff       	call   280b9d <set_palette>
  280c55:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280c5b:	83 c4 10             	add    $0x10,%esp
  280c5e:	bb 00 00 00 00       	mov    $0x0,%ebx
  280c63:	eb 32                	jmp    280c97 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280c65:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280c67:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280c6a:	88 58 02             	mov    %bl,0x2(%eax)
  280c6d:	83 c2 33             	add    $0x33,%edx
  280c70:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280c73:	80 fa 32             	cmp    $0x32,%dl
  280c76:	75 ed                	jne    280c65 <init_palette+0x2a>
  280c78:	83 c6 12             	add    $0x12,%esi
  280c7b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280c7e:	80 f9 32             	cmp    $0x32,%cl
  280c81:	74 09                	je     280c8c <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280c83:	89 f0                	mov    %esi,%eax
  280c85:	ba 00 00 00 00       	mov    $0x0,%edx
  280c8a:	eb d9                	jmp    280c65 <init_palette+0x2a>
  280c8c:	83 c3 33             	add    $0x33,%ebx
  280c8f:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280c92:	80 fb 32             	cmp    $0x32,%bl
  280c95:	74 09                	je     280ca0 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280c97:	89 fe                	mov    %edi,%esi
  280c99:	b9 00 00 00 00       	mov    $0x0,%ecx
  280c9e:	eb e3                	jmp    280c83 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280ca0:	83 ec 04             	sub    $0x4,%esp
  280ca3:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280ca9:	50                   	push   %eax
  280caa:	68 e7 00 00 00       	push   $0xe7
  280caf:	6a 10                	push   $0x10
  280cb1:	e8 e7 fe ff ff       	call   280b9d <set_palette>
	return;	
  280cb6:	83 c4 10             	add    $0x10,%esp
}
  280cb9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280cbc:	5b                   	pop    %ebx
  280cbd:	5e                   	pop    %esi
  280cbe:	5f                   	pop    %edi
  280cbf:	5d                   	pop    %ebp
  280cc0:	c3                   	ret    

00280cc1 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280cc1:	55                   	push   %ebp
  280cc2:	89 e5                	mov    %esp,%ebp
  280cc4:	57                   	push   %edi
  280cc5:	56                   	push   %esi
  280cc6:	53                   	push   %ebx
  280cc7:	83 ec 04             	sub    $0x4,%esp
  280cca:	8b 55 0c             	mov    0xc(%ebp),%edx
  280ccd:	8b 7d 14             	mov    0x14(%ebp),%edi
  280cd0:	8b 75 18             	mov    0x18(%ebp),%esi
  280cd3:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280cd6:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280cda:	3b 75 20             	cmp    0x20(%ebp),%esi
  280cdd:	7f 28                	jg     280d07 <boxfill8+0x46>
  280cdf:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280ce2:	0f af d6             	imul   %esi,%edx
  280ce5:	03 55 08             	add    0x8(%ebp),%edx
  280ce8:	eb 15                	jmp    280cff <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280cea:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280ced:	83 c0 01             	add    $0x1,%eax
  280cf0:	39 c1                	cmp    %eax,%ecx
  280cf2:	7d f6                	jge    280cea <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280cf4:	83 c6 01             	add    $0x1,%esi
  280cf7:	03 55 f0             	add    -0x10(%ebp),%edx
  280cfa:	39 75 20             	cmp    %esi,0x20(%ebp)
  280cfd:	7c 08                	jl     280d07 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280cff:	89 f8                	mov    %edi,%eax
  280d01:	39 cf                	cmp    %ecx,%edi
  280d03:	7e e5                	jle    280cea <boxfill8+0x29>
  280d05:	eb ed                	jmp    280cf4 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280d07:	83 c4 04             	add    $0x4,%esp
  280d0a:	5b                   	pop    %ebx
  280d0b:	5e                   	pop    %esi
  280d0c:	5f                   	pop    %edi
  280d0d:	5d                   	pop    %ebp
  280d0e:	c3                   	ret    

00280d0f <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280d0f:	55                   	push   %ebp
  280d10:	89 e5                	mov    %esp,%ebp
  280d12:	53                   	push   %ebx
  280d13:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280d16:	8b 55 10             	mov    0x10(%ebp),%edx
  280d19:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280d1d:	85 d2                	test   %edx,%edx
  280d1f:	7e 0d                	jle    280d2e <boxfill8_test+0x1f>
  280d21:	89 d8                	mov    %ebx,%eax
  280d23:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280d25:	88 08                	mov    %cl,(%eax)
  280d27:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280d2a:	39 d0                	cmp    %edx,%eax
  280d2c:	75 f7                	jne    280d25 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280d2e:	5b                   	pop    %ebx
  280d2f:	5d                   	pop    %ebp
  280d30:	c3                   	ret    

00280d31 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280d31:	55                   	push   %ebp
  280d32:	89 e5                	mov    %esp,%ebp
  280d34:	57                   	push   %edi
  280d35:	56                   	push   %esi
  280d36:	53                   	push   %ebx
  280d37:	83 ec 14             	sub    $0x14,%esp
  280d3a:	8b 7d 08             	mov    0x8(%ebp),%edi
  280d3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280d40:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280d43:	68 be 00 00 00       	push   $0xbe
  280d48:	68 36 01 00 00       	push   $0x136
  280d4d:	6a 00                	push   $0x0
  280d4f:	6a 00                	push   $0x0
  280d51:	6a 0e                	push   $0xe
  280d53:	68 36 01 00 00       	push   $0x136
  280d58:	57                   	push   %edi
  280d59:	e8 63 ff ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280d5e:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d61:	89 c2                	mov    %eax,%edx
  280d63:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d66:	50                   	push   %eax
  280d67:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d6a:	52                   	push   %edx
  280d6b:	6a 00                	push   $0x0
  280d6d:	6a 00                	push   $0x0
  280d6f:	6a 0e                	push   $0xe
  280d71:	53                   	push   %ebx
  280d72:	57                   	push   %edi
  280d73:	e8 49 ff ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d78:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d7b:	83 c4 38             	add    $0x38,%esp
  280d7e:	50                   	push   %eax
  280d7f:	ff 75 f0             	pushl  -0x10(%ebp)
  280d82:	50                   	push   %eax
  280d83:	6a 00                	push   $0x0
  280d85:	6a 08                	push   $0x8
  280d87:	53                   	push   %ebx
  280d88:	57                   	push   %edi
  280d89:	e8 33 ff ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d8e:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d91:	50                   	push   %eax
  280d92:	ff 75 f0             	pushl  -0x10(%ebp)
  280d95:	50                   	push   %eax
  280d96:	6a 00                	push   $0x0
  280d98:	6a 07                	push   $0x7
  280d9a:	53                   	push   %ebx
  280d9b:	57                   	push   %edi
  280d9c:	e8 20 ff ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280da1:	83 c4 38             	add    $0x38,%esp
  280da4:	8d 46 ff             	lea    -0x1(%esi),%eax
  280da7:	50                   	push   %eax
  280da8:	ff 75 f0             	pushl  -0x10(%ebp)
  280dab:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280dae:	50                   	push   %eax
  280daf:	6a 00                	push   $0x0
  280db1:	6a 08                	push   $0x8
  280db3:	53                   	push   %ebx
  280db4:	57                   	push   %edi
  280db5:	e8 07 ff ff ff       	call   280cc1 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280dba:	8d 46 e8             	lea    -0x18(%esi),%eax
  280dbd:	50                   	push   %eax
  280dbe:	6a 3b                	push   $0x3b
  280dc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280dc3:	50                   	push   %eax
  280dc4:	6a 03                	push   $0x3
  280dc6:	6a 07                	push   $0x7
  280dc8:	53                   	push   %ebx
  280dc9:	57                   	push   %edi
  280dca:	e8 f2 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280dcf:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280dd2:	83 c4 38             	add    $0x38,%esp
  280dd5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280dd8:	51                   	push   %ecx
  280dd9:	6a 02                	push   $0x2
  280ddb:	ff 75 f0             	pushl  -0x10(%ebp)
  280dde:	6a 02                	push   $0x2
  280de0:	6a 07                	push   $0x7
  280de2:	53                   	push   %ebx
  280de3:	57                   	push   %edi
  280de4:	e8 d8 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280de9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280dec:	51                   	push   %ecx
  280ded:	6a 3b                	push   $0x3b
  280def:	51                   	push   %ecx
  280df0:	6a 03                	push   $0x3
  280df2:	6a 0f                	push   $0xf
  280df4:	53                   	push   %ebx
  280df5:	57                   	push   %edi
  280df6:	e8 c6 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280dfb:	8d 56 e9             	lea    -0x17(%esi),%edx
  280dfe:	83 c4 38             	add    $0x38,%esp
  280e01:	8d 46 fb             	lea    -0x5(%esi),%eax
  280e04:	50                   	push   %eax
  280e05:	6a 3b                	push   $0x3b
  280e07:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280e0a:	52                   	push   %edx
  280e0b:	6a 3b                	push   $0x3b
  280e0d:	6a 0f                	push   $0xf
  280e0f:	53                   	push   %ebx
  280e10:	57                   	push   %edi
  280e11:	e8 ab fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280e16:	83 ee 03             	sub    $0x3,%esi
  280e19:	56                   	push   %esi
  280e1a:	6a 3b                	push   $0x3b
  280e1c:	56                   	push   %esi
  280e1d:	6a 02                	push   $0x2
  280e1f:	6a 00                	push   $0x0
  280e21:	53                   	push   %ebx
  280e22:	57                   	push   %edi
  280e23:	e8 99 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280e28:	83 c4 38             	add    $0x38,%esp
  280e2b:	56                   	push   %esi
  280e2c:	6a 3c                	push   $0x3c
  280e2e:	ff 75 f0             	pushl  -0x10(%ebp)
  280e31:	6a 3c                	push   $0x3c
  280e33:	6a 00                	push   $0x0
  280e35:	53                   	push   %ebx
  280e36:	57                   	push   %edi
  280e37:	e8 85 fe ff ff       	call   280cc1 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280e3c:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280e3f:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280e42:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280e45:	50                   	push   %eax
  280e46:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280e49:	51                   	push   %ecx
  280e4a:	50                   	push   %eax
  280e4b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280e4e:	52                   	push   %edx
  280e4f:	6a 0f                	push   $0xf
  280e51:	53                   	push   %ebx
  280e52:	57                   	push   %edi
  280e53:	e8 69 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280e58:	83 c4 38             	add    $0x38,%esp
  280e5b:	ff 75 ec             	pushl  -0x14(%ebp)
  280e5e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e61:	52                   	push   %edx
  280e62:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e65:	52                   	push   %edx
  280e66:	6a 0f                	push   $0xf
  280e68:	53                   	push   %ebx
  280e69:	57                   	push   %edi
  280e6a:	e8 52 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e6f:	56                   	push   %esi
  280e70:	ff 75 e0             	pushl  -0x20(%ebp)
  280e73:	56                   	push   %esi
  280e74:	ff 75 e8             	pushl  -0x18(%ebp)
  280e77:	6a 07                	push   $0x7
  280e79:	53                   	push   %ebx
  280e7a:	57                   	push   %edi
  280e7b:	e8 41 fe ff ff       	call   280cc1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e80:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e83:	83 c4 38             	add    $0x38,%esp
  280e86:	56                   	push   %esi
  280e87:	50                   	push   %eax
  280e88:	ff 75 f0             	pushl  -0x10(%ebp)
  280e8b:	50                   	push   %eax
  280e8c:	6a 07                	push   $0x7
  280e8e:	53                   	push   %ebx
  280e8f:	57                   	push   %edi
  280e90:	e8 2c fe ff ff       	call   280cc1 <boxfill8>
}
  280e95:	83 c4 1c             	add    $0x1c,%esp
  280e98:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e9b:	5b                   	pop    %ebx
  280e9c:	5e                   	pop    %esi
  280e9d:	5f                   	pop    %edi
  280e9e:	5d                   	pop    %ebp
  280e9f:	c3                   	ret    

00280ea0 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280ea0:	55                   	push   %ebp
  280ea1:	89 e5                	mov    %esp,%ebp
  280ea3:	57                   	push   %edi
  280ea4:	56                   	push   %esi
  280ea5:	53                   	push   %ebx
  280ea6:	83 ec 08             	sub    $0x8,%esp
  280ea9:	8b 75 08             	mov    0x8(%ebp),%esi
  280eac:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280eb0:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280eb3:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280eb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280ebc:	eb 38                	jmp    280ef6 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280ebe:	0f b6 94 03 80 52 28 	movzbl 0x285280(%ebx,%eax,1),%edx
  280ec5:	00 
  280ec6:	80 fa 2a             	cmp    $0x2a,%dl
  280ec9:	75 06                	jne    280ed1 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280ecb:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280ecf:	eb 15                	jmp    280ee6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280ed1:	80 fa 4f             	cmp    $0x4f,%dl
  280ed4:	75 06                	jne    280edc <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280ed6:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280eda:	eb 0a                	jmp    280ee6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280edc:	80 fa 2e             	cmp    $0x2e,%dl
  280edf:	75 05                	jne    280ee6 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280ee1:	89 fa                	mov    %edi,%edx
  280ee3:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280ee6:	83 c0 01             	add    $0x1,%eax
  280ee9:	83 f8 10             	cmp    $0x10,%eax
  280eec:	75 d0                	jne    280ebe <init_mouse_cursor8+0x1e>
  280eee:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280ef1:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280ef4:	74 0c                	je     280f02 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280ef6:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280efb:	89 f3                	mov    %esi,%ebx
  280efd:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280f00:	eb bc                	jmp    280ebe <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280f02:	83 c4 08             	add    $0x8,%esp
  280f05:	5b                   	pop    %ebx
  280f06:	5e                   	pop    %esi
  280f07:	5f                   	pop    %edi
  280f08:	5d                   	pop    %ebp
  280f09:	c3                   	ret    

00280f0a <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280f0a:	55                   	push   %ebp
  280f0b:	89 e5                	mov    %esp,%ebp
  280f0d:	57                   	push   %edi
  280f0e:	56                   	push   %esi
  280f0f:	53                   	push   %ebx
  280f10:	83 ec 1c             	sub    $0x1c,%esp
  280f13:	8b 75 08             	mov    0x8(%ebp),%esi
  280f16:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f19:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280f1c:	80 fa 01             	cmp    $0x1,%dl
  280f1f:	19 c0                	sbb    %eax,%eax
  280f21:	83 e0 03             	and    $0x3,%eax
  280f24:	83 c0 0c             	add    $0xc,%eax
  280f27:	80 fa 01             	cmp    $0x1,%dl
  280f2a:	19 ff                	sbb    %edi,%edi
  280f2c:	f7 d7                	not    %edi
  280f2e:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280f31:	6a 14                	push   $0x14
  280f33:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280f36:	52                   	push   %edx
  280f37:	6a 03                	push   $0x3
  280f39:	6a 03                	push   $0x3
  280f3b:	0f b6 c0             	movzbl %al,%eax
  280f3e:	50                   	push   %eax
  280f3f:	53                   	push   %ebx
  280f40:	56                   	push   %esi
  280f41:	e8 7b fd ff ff       	call   280cc1 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280f46:	83 c4 04             	add    $0x4,%esp
  280f49:	ff 75 10             	pushl  0x10(%ebp)
  280f4c:	89 f8                	mov    %edi,%eax
  280f4e:	0f be f8             	movsbl %al,%edi
  280f51:	57                   	push   %edi
  280f52:	6a 04                	push   $0x4
  280f54:	6a 18                	push   $0x18
  280f56:	53                   	push   %ebx
  280f57:	56                   	push   %esi
  280f58:	e8 c7 04 00 00       	call   281424 <putfonts8_asc>
  280f5d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f60:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f63:	01 fb                	add    %edi,%ebx
  280f65:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f68:	83 c4 30             	add    $0x30,%esp
  280f6b:	be 00 00 00 00       	mov    $0x0,%esi
  280f70:	eb 41                	jmp    280fb3 <make_wtitle8+0xa9>
  280f72:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f74:	0f b6 9c 06 a0 51 28 	movzbl 0x2851a0(%esi,%eax,1),%ebx
  280f7b:	00 
			if(c == '@') c=COL8_000000;
  280f7c:	ba 00 00 00 00       	mov    $0x0,%edx
  280f81:	80 fb 40             	cmp    $0x40,%bl
  280f84:	74 13                	je     280f99 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f86:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f8b:	80 fb 24             	cmp    $0x24,%bl
  280f8e:	74 09                	je     280f99 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f90:	80 fb 51             	cmp    $0x51,%bl
  280f93:	0f 94 c2             	sete   %dl
  280f96:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f99:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280f9d:	83 c0 01             	add    $0x1,%eax
  280fa0:	83 f8 10             	cmp    $0x10,%eax
  280fa3:	75 cd                	jne    280f72 <make_wtitle8+0x68>
  280fa5:	03 7d e4             	add    -0x1c(%ebp),%edi
  280fa8:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280fab:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280fb1:	74 07                	je     280fba <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280fb3:	b8 00 00 00 00       	mov    $0x0,%eax
  280fb8:	eb b8                	jmp    280f72 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280fba:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280fbd:	5b                   	pop    %ebx
  280fbe:	5e                   	pop    %esi
  280fbf:	5f                   	pop    %edi
  280fc0:	5d                   	pop    %ebp
  280fc1:	c3                   	ret    

00280fc2 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280fc2:	55                   	push   %ebp
  280fc3:	89 e5                	mov    %esp,%ebp
  280fc5:	57                   	push   %edi
  280fc6:	56                   	push   %esi
  280fc7:	53                   	push   %ebx
  280fc8:	83 ec 1c             	sub    $0x1c,%esp
  280fcb:	8b 75 08             	mov    0x8(%ebp),%esi
  280fce:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280fd1:	8b 45 18             	mov    0x18(%ebp),%eax
  280fd4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280fd7:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280fda:	6a 00                	push   $0x0
  280fdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280fdf:	50                   	push   %eax
  280fe0:	6a 00                	push   $0x0
  280fe2:	6a 00                	push   $0x0
  280fe4:	6a 08                	push   $0x8
  280fe6:	53                   	push   %ebx
  280fe7:	56                   	push   %esi
  280fe8:	e8 d4 fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280fed:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280ff0:	6a 01                	push   $0x1
  280ff2:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280ff5:	52                   	push   %edx
  280ff6:	6a 01                	push   $0x1
  280ff8:	6a 01                	push   $0x1
  280ffa:	6a 07                	push   $0x7
  280ffc:	53                   	push   %ebx
  280ffd:	56                   	push   %esi
  280ffe:	e8 be fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  281003:	8b 7d 10             	mov    0x10(%ebp),%edi
  281006:	8d 4f ff             	lea    -0x1(%edi),%ecx
  281009:	83 c4 38             	add    $0x38,%esp
  28100c:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  28100f:	51                   	push   %ecx
  281010:	6a 00                	push   $0x0
  281012:	6a 00                	push   $0x0
  281014:	6a 00                	push   $0x0
  281016:	6a 08                	push   $0x8
  281018:	53                   	push   %ebx
  281019:	56                   	push   %esi
  28101a:	e8 a2 fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  28101f:	8b 7d 10             	mov    0x10(%ebp),%edi
  281022:	83 ef 02             	sub    $0x2,%edi
  281025:	57                   	push   %edi
  281026:	6a 01                	push   $0x1
  281028:	6a 01                	push   $0x1
  28102a:	6a 01                	push   $0x1
  28102c:	6a 07                	push   $0x7
  28102e:	53                   	push   %ebx
  28102f:	56                   	push   %esi
  281030:	e8 8c fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  281035:	83 c4 38             	add    $0x38,%esp
  281038:	57                   	push   %edi
  281039:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28103c:	52                   	push   %edx
  28103d:	6a 01                	push   $0x1
  28103f:	52                   	push   %edx
  281040:	6a 0f                	push   $0xf
  281042:	53                   	push   %ebx
  281043:	56                   	push   %esi
  281044:	e8 78 fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  281049:	ff 75 dc             	pushl  -0x24(%ebp)
  28104c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28104f:	50                   	push   %eax
  281050:	6a 00                	push   $0x0
  281052:	50                   	push   %eax
  281053:	6a 00                	push   $0x0
  281055:	53                   	push   %ebx
  281056:	56                   	push   %esi
  281057:	e8 65 fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28105c:	83 c4 38             	add    $0x38,%esp
  28105f:	8b 55 10             	mov    0x10(%ebp),%edx
  281062:	8d 42 fd             	lea    -0x3(%edx),%eax
  281065:	50                   	push   %eax
  281066:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281069:	50                   	push   %eax
  28106a:	6a 02                	push   $0x2
  28106c:	6a 02                	push   $0x2
  28106e:	6a 08                	push   $0x8
  281070:	53                   	push   %ebx
  281071:	56                   	push   %esi
  281072:	e8 4a fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  281077:	57                   	push   %edi
  281078:	ff 75 e0             	pushl  -0x20(%ebp)
  28107b:	57                   	push   %edi
  28107c:	6a 01                	push   $0x1
  28107e:	6a 0f                	push   $0xf
  281080:	53                   	push   %ebx
  281081:	56                   	push   %esi
  281082:	e8 3a fc ff ff       	call   280cc1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  281087:	83 c4 38             	add    $0x38,%esp
  28108a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  28108d:	51                   	push   %ecx
  28108e:	ff 75 e4             	pushl  -0x1c(%ebp)
  281091:	51                   	push   %ecx
  281092:	6a 00                	push   $0x0
  281094:	6a 00                	push   $0x0
  281096:	53                   	push   %ebx
  281097:	56                   	push   %esi
  281098:	e8 24 fc ff ff       	call   280cc1 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  28109d:	83 c4 1c             	add    $0x1c,%esp
  2810a0:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  2810a4:	50                   	push   %eax
  2810a5:	ff 75 14             	pushl  0x14(%ebp)
  2810a8:	53                   	push   %ebx
  2810a9:	56                   	push   %esi
  2810aa:	e8 5b fe ff ff       	call   280f0a <make_wtitle8>
	return;
  2810af:	83 c4 10             	add    $0x10,%esp
}
  2810b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2810b5:	5b                   	pop    %ebx
  2810b6:	5e                   	pop    %esi
  2810b7:	5f                   	pop    %edi
  2810b8:	5d                   	pop    %ebp
  2810b9:	c3                   	ret    

002810ba <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  2810ba:	55                   	push   %ebp
  2810bb:	89 e5                	mov    %esp,%ebp
  2810bd:	57                   	push   %edi
  2810be:	56                   	push   %esi
  2810bf:	53                   	push   %ebx
  2810c0:	83 ec 04             	sub    $0x4,%esp
  2810c3:	8b 45 0c             	mov    0xc(%ebp),%eax
  2810c6:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  2810c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  2810cd:	7e 49                	jle    281118 <putblock8_8+0x5e>
  2810cf:	8b 7d 24             	mov    0x24(%ebp),%edi
  2810d2:	8b 4d 20             	mov    0x20(%ebp),%ecx
  2810d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  2810d8:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  2810dc:	03 45 18             	add    0x18(%ebp),%eax
  2810df:	89 c2                	mov    %eax,%edx
  2810e1:	03 55 08             	add    0x8(%ebp),%edx
  2810e4:	be 00 00 00 00       	mov    $0x0,%esi
  2810e9:	eb 22                	jmp    28110d <putblock8_8+0x53>
  2810eb:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2810ee:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2810f2:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2810f5:	83 c0 01             	add    $0x1,%eax
  2810f8:	39 45 10             	cmp    %eax,0x10(%ebp)
  2810fb:	75 f1                	jne    2810ee <putblock8_8+0x34>
  2810fd:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  281100:	83 c6 01             	add    $0x1,%esi
  281103:	01 f9                	add    %edi,%ecx
  281105:	03 55 f0             	add    -0x10(%ebp),%edx
  281108:	39 75 14             	cmp    %esi,0x14(%ebp)
  28110b:	74 0b                	je     281118 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  28110d:	b8 00 00 00 00       	mov    $0x0,%eax
  281112:	85 db                	test   %ebx,%ebx
  281114:	7f d5                	jg     2810eb <putblock8_8+0x31>
  281116:	eb e8                	jmp    281100 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  281118:	83 c4 04             	add    $0x4,%esp
  28111b:	5b                   	pop    %ebx
  28111c:	5e                   	pop    %esi
  28111d:	5f                   	pop    %edi
  28111e:	5d                   	pop    %ebp
  28111f:	c3                   	ret    

00281120 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  281120:	55                   	push   %ebp
  281121:	89 e5                	mov    %esp,%ebp
  281123:	57                   	push   %edi
  281124:	56                   	push   %esi
  281125:	53                   	push   %ebx
  281126:	83 ec 0c             	sub    $0xc,%esp
  281129:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28112c:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  28112f:	8b 45 20             	mov    0x20(%ebp),%eax
  281132:	8b 55 0c             	mov    0xc(%ebp),%edx
  281135:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  281138:	8d 46 0f             	lea    0xf(%esi),%eax
  28113b:	50                   	push   %eax
  28113c:	8d 47 ff             	lea    -0x1(%edi),%eax
  28113f:	50                   	push   %eax
  281140:	56                   	push   %esi
  281141:	52                   	push   %edx
  281142:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281146:	50                   	push   %eax
  281147:	ff 73 04             	pushl  0x4(%ebx)
  28114a:	ff 33                	pushl  (%ebx)
  28114c:	e8 70 fb ff ff       	call   280cc1 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281151:	83 c4 04             	add    $0x4,%esp
  281154:	ff 75 1c             	pushl  0x1c(%ebp)
  281157:	ff 75 14             	pushl  0x14(%ebp)
  28115a:	56                   	push   %esi
  28115b:	ff 75 0c             	pushl  0xc(%ebp)
  28115e:	ff 73 04             	pushl  0x4(%ebx)
  281161:	ff 33                	pushl  (%ebx)
  281163:	e8 bc 02 00 00       	call   281424 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281168:	83 c4 24             	add    $0x24,%esp
  28116b:	8d 46 10             	lea    0x10(%esi),%eax
  28116e:	50                   	push   %eax
  28116f:	57                   	push   %edi
  281170:	56                   	push   %esi
  281171:	ff 75 0c             	pushl  0xc(%ebp)
  281174:	53                   	push   %ebx
  281175:	e8 7c 17 00 00       	call   2828f6 <sheet_refresh>
}
  28117a:	83 c4 20             	add    $0x20,%esp
  28117d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281180:	5b                   	pop    %ebx
  281181:	5e                   	pop    %esi
  281182:	5f                   	pop    %edi
  281183:	5d                   	pop    %ebp
  281184:	c3                   	ret    

00281185 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281185:	55                   	push   %ebp
  281186:	89 e5                	mov    %esp,%ebp
  281188:	57                   	push   %edi
  281189:	56                   	push   %esi
  28118a:	53                   	push   %ebx
  28118b:	83 ec 18             	sub    $0x18,%esp
  28118e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281191:	8b 45 0c             	mov    0xc(%ebp),%eax
  281194:	03 45 14             	add    0x14(%ebp),%eax
  281197:	8b 55 10             	mov    0x10(%ebp),%edx
  28119a:	03 55 18             	add    0x18(%ebp),%edx
  28119d:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  28119f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  2811a2:	8d 48 01             	lea    0x1(%eax),%ecx
  2811a5:	8b 75 10             	mov    0x10(%ebp),%esi
  2811a8:	83 ee 03             	sub    $0x3,%esi
  2811ab:	8b 55 0c             	mov    0xc(%ebp),%edx
  2811ae:	83 ea 02             	sub    $0x2,%edx
  2811b1:	56                   	push   %esi
  2811b2:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  2811b5:	51                   	push   %ecx
  2811b6:	56                   	push   %esi
  2811b7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  2811ba:	52                   	push   %edx
  2811bb:	6a 0f                	push   $0xf
  2811bd:	ff 73 04             	pushl  0x4(%ebx)
  2811c0:	ff 33                	pushl  (%ebx)
  2811c2:	e8 fa fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  2811c7:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  2811ca:	8d 7f 01             	lea    0x1(%edi),%edi
  2811cd:	89 f9                	mov    %edi,%ecx
  2811cf:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2811d2:	83 ef 03             	sub    $0x3,%edi
  2811d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  2811d8:	51                   	push   %ecx
  2811d9:	57                   	push   %edi
  2811da:	56                   	push   %esi
  2811db:	57                   	push   %edi
  2811dc:	6a 0f                	push   $0xf
  2811de:	ff 73 04             	pushl  0x4(%ebx)
  2811e1:	ff 33                	pushl  (%ebx)
  2811e3:	e8 d9 fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2811e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2811eb:	8d 4a 02             	lea    0x2(%edx),%ecx
  2811ee:	83 c4 38             	add    $0x38,%esp
  2811f1:	51                   	push   %ecx
  2811f2:	ff 75 e0             	pushl  -0x20(%ebp)
  2811f5:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2811f8:	51                   	push   %ecx
  2811f9:	57                   	push   %edi
  2811fa:	6a 07                	push   $0x7
  2811fc:	ff 73 04             	pushl  0x4(%ebx)
  2811ff:	ff 33                	pushl  (%ebx)
  281201:	e8 bb fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  281206:	8b 45 e8             	mov    -0x18(%ebp),%eax
  281209:	83 c0 02             	add    $0x2,%eax
  28120c:	ff 75 dc             	pushl  -0x24(%ebp)
  28120f:	50                   	push   %eax
  281210:	56                   	push   %esi
  281211:	50                   	push   %eax
  281212:	6a 07                	push   $0x7
  281214:	ff 73 04             	pushl  0x4(%ebx)
  281217:	ff 33                	pushl  (%ebx)
  281219:	e8 a3 fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  28121e:	8b 75 10             	mov    0x10(%ebp),%esi
  281221:	8d 7e fe             	lea    -0x2(%esi),%edi
  281224:	8b 75 0c             	mov    0xc(%ebp),%esi
  281227:	83 ee 01             	sub    $0x1,%esi
  28122a:	83 c4 38             	add    $0x38,%esp
  28122d:	57                   	push   %edi
  28122e:	ff 75 e8             	pushl  -0x18(%ebp)
  281231:	57                   	push   %edi
  281232:	56                   	push   %esi
  281233:	6a 00                	push   $0x0
  281235:	ff 73 04             	pushl  0x4(%ebx)
  281238:	ff 33                	pushl  (%ebx)
  28123a:	e8 82 fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  28123f:	ff 75 e4             	pushl  -0x1c(%ebp)
  281242:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281245:	52                   	push   %edx
  281246:	57                   	push   %edi
  281247:	52                   	push   %edx
  281248:	6a 00                	push   $0x0
  28124a:	ff 73 04             	pushl  0x4(%ebx)
  28124d:	ff 33                	pushl  (%ebx)
  28124f:	e8 6d fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281254:	83 c4 38             	add    $0x38,%esp
  281257:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28125a:	50                   	push   %eax
  28125b:	ff 75 e8             	pushl  -0x18(%ebp)
  28125e:	50                   	push   %eax
  28125f:	ff 75 f0             	pushl  -0x10(%ebp)
  281262:	6a 08                	push   $0x8
  281264:	ff 73 04             	pushl  0x4(%ebx)
  281267:	ff 33                	pushl  (%ebx)
  281269:	e8 53 fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28126e:	ff 75 ec             	pushl  -0x14(%ebp)
  281271:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281274:	51                   	push   %ecx
  281275:	57                   	push   %edi
  281276:	51                   	push   %ecx
  281277:	6a 08                	push   $0x8
  281279:	ff 73 04             	pushl  0x4(%ebx)
  28127c:	ff 33                	pushl  (%ebx)
  28127e:	e8 3e fa ff ff       	call   280cc1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281283:	83 c4 38             	add    $0x38,%esp
  281286:	ff 75 e4             	pushl  -0x1c(%ebp)
  281289:	ff 75 e8             	pushl  -0x18(%ebp)
  28128c:	8b 45 10             	mov    0x10(%ebp),%eax
  28128f:	83 e8 01             	sub    $0x1,%eax
  281292:	50                   	push   %eax
  281293:	56                   	push   %esi
  281294:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  281298:	50                   	push   %eax
  281299:	ff 73 04             	pushl  0x4(%ebx)
  28129c:	ff 33                	pushl  (%ebx)
  28129e:	e8 1e fa ff ff       	call   280cc1 <boxfill8>
    return;
  2812a3:	83 c4 1c             	add    $0x1c,%esp
}
  2812a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2812a9:	5b                   	pop    %ebx
  2812aa:	5e                   	pop    %esi
  2812ab:	5f                   	pop    %edi
  2812ac:	5d                   	pop    %ebp
  2812ad:	c3                   	ret    

002812ae <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  2812ae:	55                   	push   %ebp
  2812af:	89 e5                	mov    %esp,%ebp
  2812b1:	57                   	push   %edi
  2812b2:	56                   	push   %esi
  2812b3:	53                   	push   %ebx
  2812b4:	83 ec 10             	sub    $0x10,%esp
  2812b7:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  2812ba:	8b 7d 14             	mov    0x14(%ebp),%edi
  2812bd:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  2812c0:	8b 45 18             	mov    0x18(%ebp),%eax
  2812c3:	2b 45 10             	sub    0x10(%ebp),%eax
  2812c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  2812c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2812cc:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  2812cf:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2812d2:	c1 e3 0a             	shl    $0xa,%ebx
  2812d5:	89 fa                	mov    %edi,%edx
  2812d7:	c1 fa 1f             	sar    $0x1f,%edx
  2812da:	89 d0                	mov    %edx,%eax
  2812dc:	31 fa                	xor    %edi,%edx
  2812de:	29 c2                	sub    %eax,%edx
  2812e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812e3:	c1 f8 1f             	sar    $0x1f,%eax
  2812e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2812e9:	33 45 f0             	xor    -0x10(%ebp),%eax
  2812ec:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  2812ef:	39 c2                	cmp    %eax,%edx
  2812f1:	7c 4a                	jl     28133d <drawline8_sht+0x8f>
	{
		len=dx+1;
  2812f3:	83 c2 01             	add    $0x1,%edx
  2812f6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  2812f9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2812fc:	39 7d 14             	cmp    %edi,0x14(%ebp)
  2812ff:	b8 00 04 00 00       	mov    $0x400,%eax
  281304:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281309:	89 c7                	mov    %eax,%edi
  28130b:	0f 4c fa             	cmovl  %edx,%edi
  28130e:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  281311:	8b 7d 10             	mov    0x10(%ebp),%edi
  281314:	39 7d 18             	cmp    %edi,0x18(%ebp)
  281317:	7c 12                	jl     28132b <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  281319:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28131c:	83 c0 01             	add    $0x1,%eax
  28131f:	c1 e0 0a             	shl    $0xa,%eax
  281322:	99                   	cltd   
  281323:	f7 7d ec             	idivl  -0x14(%ebp)
  281326:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  281329:	eb 52                	jmp    28137d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  28132b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28132e:	83 e8 01             	sub    $0x1,%eax
  281331:	c1 e0 0a             	shl    $0xa,%eax
  281334:	99                   	cltd   
  281335:	f7 7d ec             	idivl  -0x14(%ebp)
  281338:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28133b:	eb 40                	jmp    28137d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  28133d:	83 c0 01             	add    $0x1,%eax
  281340:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  281343:	8b 55 10             	mov    0x10(%ebp),%edx
  281346:	39 55 18             	cmp    %edx,0x18(%ebp)
  281349:	b8 00 04 00 00       	mov    $0x400,%eax
  28134e:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281353:	0f 4c c2             	cmovl  %edx,%eax
  281356:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  281359:	8b 55 0c             	mov    0xc(%ebp),%edx
  28135c:	39 55 14             	cmp    %edx,0x14(%ebp)
  28135f:	7c 0f                	jl     281370 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281361:	8d 47 01             	lea    0x1(%edi),%eax
  281364:	c1 e0 0a             	shl    $0xa,%eax
  281367:	99                   	cltd   
  281368:	f7 7d ec             	idivl  -0x14(%ebp)
  28136b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28136e:	eb 0d                	jmp    28137d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281370:	8d 47 ff             	lea    -0x1(%edi),%eax
  281373:	c1 e0 0a             	shl    $0xa,%eax
  281376:	99                   	cltd   
  281377:	f7 7d ec             	idivl  -0x14(%ebp)
  28137a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28137d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  281381:	7e 31                	jle    2813b4 <drawline8_sht+0x106>
  281383:	ba 00 00 00 00       	mov    $0x0,%edx
  281388:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  28138b:	89 d8                	mov    %ebx,%eax
  28138d:	c1 f8 0a             	sar    $0xa,%eax
  281390:	0f af 46 04          	imul   0x4(%esi),%eax
  281394:	89 cf                	mov    %ecx,%edi
  281396:	c1 ff 0a             	sar    $0xa,%edi
  281399:	03 06                	add    (%esi),%eax
  28139b:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  28139f:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  2813a2:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  2813a5:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  2813a8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  2813ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2813af:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  2813b2:	75 d7                	jne    28138b <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  2813b4:	83 c4 10             	add    $0x10,%esp
  2813b7:	5b                   	pop    %ebx
  2813b8:	5e                   	pop    %esi
  2813b9:	5f                   	pop    %edi
  2813ba:	5d                   	pop    %ebp
  2813bb:	c3                   	ret    

002813bc <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  2813bc:	55                   	push   %ebp
  2813bd:	89 e5                	mov    %esp,%ebp
  2813bf:	57                   	push   %edi
  2813c0:	56                   	push   %esi
  2813c1:	53                   	push   %ebx
  2813c2:	83 ec 08             	sub    $0x8,%esp
  2813c5:	8b 45 0c             	mov    0xc(%ebp),%eax
  2813c8:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  2813cb:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  2813cf:	89 fb                	mov    %edi,%ebx
  2813d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2813d4:	0f af 45 14          	imul   0x14(%ebp),%eax
  2813d8:	03 45 10             	add    0x10(%ebp),%eax
  2813db:	89 c1                	mov    %eax,%ecx
  2813dd:	03 4d 08             	add    0x8(%ebp),%ecx
  2813e0:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  2813e3:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  2813e6:	b8 07 00 00 00       	mov    $0x7,%eax
  2813eb:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2813ee:	89 f1                	mov    %esi,%ecx
  2813f0:	89 de                	mov    %ebx,%esi
  2813f2:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2813f4:	f6 c2 01             	test   $0x1,%dl
  2813f7:	74 06                	je     2813ff <putfont8+0x43>
  2813f9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813fc:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2813ff:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  281401:	83 e8 01             	sub    $0x1,%eax
  281404:	83 f8 ff             	cmp    $0xffffffff,%eax
  281407:	75 eb                	jne    2813f4 <putfont8+0x38>
  281409:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  28140c:	89 d8                	mov    %ebx,%eax
  28140e:	89 f3                	mov    %esi,%ebx
  281410:	89 c6                	mov    %eax,%esi
  281412:	83 c3 01             	add    $0x1,%ebx
  281415:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  281418:	39 fb                	cmp    %edi,%ebx
  28141a:	75 c7                	jne    2813e3 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  28141c:	83 c4 08             	add    $0x8,%esp
  28141f:	5b                   	pop    %ebx
  281420:	5e                   	pop    %esi
  281421:	5f                   	pop    %edi
  281422:	5d                   	pop    %ebp
  281423:	c3                   	ret    

00281424 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  281424:	55                   	push   %ebp
  281425:	89 e5                	mov    %esp,%ebp
  281427:	57                   	push   %edi
  281428:	56                   	push   %esi
  281429:	53                   	push   %ebx
  28142a:	8b 75 10             	mov    0x10(%ebp),%esi
  28142d:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  281430:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281434:	0f b6 03             	movzbl (%ebx),%eax
  281437:	84 c0                	test   %al,%al
  281439:	74 2f                	je     28146a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  28143b:	0f be fa             	movsbl %dl,%edi
  28143e:	0f b6 c0             	movzbl %al,%eax
  281441:	c1 e0 04             	shl    $0x4,%eax
  281444:	05 e0 64 28 00       	add    $0x2864e0,%eax
  281449:	50                   	push   %eax
  28144a:	57                   	push   %edi
  28144b:	ff 75 14             	pushl  0x14(%ebp)
  28144e:	56                   	push   %esi
  28144f:	ff 75 0c             	pushl  0xc(%ebp)
  281452:	ff 75 08             	pushl  0x8(%ebp)
  281455:	e8 62 ff ff ff       	call   2813bc <putfont8>
		x+=HKK_TABLE_COL;
  28145a:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  28145d:	83 c3 01             	add    $0x1,%ebx
  281460:	0f b6 03             	movzbl (%ebx),%eax
  281463:	83 c4 18             	add    $0x18,%esp
  281466:	84 c0                	test   %al,%al
  281468:	75 d4                	jne    28143e <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28146a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28146d:	5b                   	pop    %ebx
  28146e:	5e                   	pop    %esi
  28146f:	5f                   	pop    %edi
  281470:	5d                   	pop    %ebp
  281471:	c3                   	ret    

00281472 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281472:	55                   	push   %ebp
  281473:	89 e5                	mov    %esp,%ebp
  281475:	57                   	push   %edi
  281476:	56                   	push   %esi
  281477:	53                   	push   %ebx
  281478:	8b 55 08             	mov    0x8(%ebp),%edx
  28147b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28147e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281481:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281484:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28148a:	76 09                	jbe    281495 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  28148c:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281492:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  281495:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  281498:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  28149c:	89 ce                	mov    %ecx,%esi
  28149e:	c1 fe 10             	sar    $0x10,%esi
  2814a1:	89 f0                	mov    %esi,%eax
  2814a3:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  2814a6:	89 f8                	mov    %edi,%eax
  2814a8:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  2814ab:	c1 eb 10             	shr    $0x10,%ebx
  2814ae:	83 e3 0f             	and    $0xf,%ebx
  2814b1:	89 f8                	mov    %edi,%eax
  2814b3:	c1 f8 08             	sar    $0x8,%eax
  2814b6:	83 e0 f0             	and    $0xfffffff0,%eax
  2814b9:	09 d8                	or     %ebx,%eax
  2814bb:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  2814be:	c1 e9 18             	shr    $0x18,%ecx
  2814c1:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  2814c4:	5b                   	pop    %ebx
  2814c5:	5e                   	pop    %esi
  2814c6:	5f                   	pop    %edi
  2814c7:	5d                   	pop    %ebp
  2814c8:	c3                   	ret    

002814c9 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  2814c9:	55                   	push   %ebp
  2814ca:	89 e5                	mov    %esp,%ebp
  2814cc:	53                   	push   %ebx
  2814cd:	8b 45 08             	mov    0x8(%ebp),%eax
  2814d0:	8b 55 0c             	mov    0xc(%ebp),%edx
  2814d3:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  2814d6:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  2814d9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2814dc:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2814e0:	89 cb                	mov    %ecx,%ebx
  2814e2:	c1 fb 08             	sar    $0x8,%ebx
  2814e5:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  2814e8:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2814eb:	c1 ea 10             	shr    $0x10,%edx
  2814ee:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2814f2:	5b                   	pop    %ebx
  2814f3:	5d                   	pop    %ebp
  2814f4:	c3                   	ret    

002814f5 <init_gdtidt>:

void init_gdtidt(void)
{
  2814f5:	55                   	push   %ebp
  2814f6:	89 e5                	mov    %esp,%ebp
  2814f8:	53                   	push   %ebx
  2814f9:	83 ec 04             	sub    $0x4,%esp
  2814fc:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  281501:	6a 00                	push   $0x0
  281503:	6a 00                	push   $0x0
  281505:	6a 00                	push   $0x0
  281507:	53                   	push   %ebx
  281508:	e8 65 ff ff ff       	call   281472 <set_segmdesc>
  28150d:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  281510:	83 c4 10             	add    $0x10,%esp
  281513:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  281519:	75 e6                	jne    281501 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  28151b:	68 92 40 00 00       	push   $0x4092
  281520:	6a 00                	push   $0x0
  281522:	6a ff                	push   $0xffffffff
  281524:	68 08 00 27 00       	push   $0x270008
  281529:	e8 44 ff ff ff       	call   281472 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  28152e:	68 9a 40 00 00       	push   $0x409a
  281533:	6a 00                	push   $0x0
  281535:	68 ff ff 0f 00       	push   $0xfffff
  28153a:	68 10 00 27 00       	push   $0x270010
  28153f:	e8 2e ff ff ff       	call   281472 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281544:	83 c4 20             	add    $0x20,%esp
  281547:	68 9a 40 00 00       	push   $0x409a
  28154c:	68 00 00 28 00       	push   $0x280000
  281551:	68 ff ff 07 00       	push   $0x7ffff
  281556:	68 18 00 27 00       	push   $0x270018
  28155b:	e8 12 ff ff ff       	call   281472 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281560:	83 c4 08             	add    $0x8,%esp
  281563:	68 00 00 27 00       	push   $0x270000
  281568:	68 ff ff 00 00       	push   $0xffff
  28156d:	e8 bd f5 ff ff       	call   280b2f <load_gdtr>
  281572:	83 c4 10             	add    $0x10,%esp
  281575:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28157a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28157f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281585:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  281589:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28158d:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281593:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  281596:	3d 00 00 27 00       	cmp    $0x270000,%eax
  28159b:	75 dd                	jne    28157a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  28159d:	b8 3e 18 00 00       	mov    $0x183e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815a2:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  2815a8:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  2815af:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815b1:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  2815b8:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  2815bf:	c1 e8 10             	shr    $0x10,%eax
  2815c2:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  2815c8:	b8 10 18 00 00       	mov    $0x1810,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815cd:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  2815d3:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  2815da:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815dc:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  2815e3:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  2815ea:	c1 e8 10             	shr    $0x10,%eax
  2815ed:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2815f3:	b8 27 18 00 00       	mov    $0x1827,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815f8:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2815fe:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  281605:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281607:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  28160e:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  281615:	c1 e8 10             	shr    $0x10,%eax
  281618:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  28161e:	b8 55 18 00 00       	mov    $0x1855,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281623:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  281629:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  281630:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281632:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  281639:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281640:	c1 e8 10             	shr    $0x10,%eax
  281643:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  281649:	b8 76 18 00 00       	mov    $0x1876,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28164e:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281654:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  28165b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28165d:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281664:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28166b:	c1 e8 10             	shr    $0x10,%eax
  28166e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281674:	b8 96 18 00 00       	mov    $0x1896,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281679:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28167f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  281686:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281688:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  28168f:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  281696:	c1 e8 10             	shr    $0x10,%eax
  281699:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  28169f:	83 ec 08             	sub    $0x8,%esp
  2816a2:	68 00 f8 26 00       	push   $0x26f800
  2816a7:	68 ff 07 00 00       	push   $0x7ff
  2816ac:	e8 8e f4 ff ff       	call   280b3f <load_idtr>

	return;
  2816b1:	83 c4 10             	add    $0x10,%esp
}
  2816b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2816b7:	c9                   	leave  
  2816b8:	c3                   	ret    

002816b9 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  2816b9:	55                   	push   %ebp
  2816ba:	89 e5                	mov    %esp,%ebp
  2816bc:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  2816bf:	68 ff 00 00 00       	push   $0xff
  2816c4:	6a 21                	push   $0x21
  2816c6:	e8 3b f4 ff ff       	call   280b06 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  2816cb:	83 c4 08             	add    $0x8,%esp
  2816ce:	68 ff 00 00 00       	push   $0xff
  2816d3:	68 a1 00 00 00       	push   $0xa1
  2816d8:	e8 29 f4 ff ff       	call   280b06 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  2816dd:	83 c4 08             	add    $0x8,%esp
  2816e0:	6a 11                	push   $0x11
  2816e2:	6a 20                	push   $0x20
  2816e4:	e8 1d f4 ff ff       	call   280b06 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  2816e9:	83 c4 08             	add    $0x8,%esp
  2816ec:	6a 20                	push   $0x20
  2816ee:	6a 21                	push   $0x21
  2816f0:	e8 11 f4 ff ff       	call   280b06 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  2816f5:	83 c4 08             	add    $0x8,%esp
  2816f8:	6a 04                	push   $0x4
  2816fa:	6a 21                	push   $0x21
  2816fc:	e8 05 f4 ff ff       	call   280b06 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  281701:	83 c4 08             	add    $0x8,%esp
  281704:	6a 01                	push   $0x1
  281706:	6a 21                	push   $0x21
  281708:	e8 f9 f3 ff ff       	call   280b06 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  28170d:	83 c4 08             	add    $0x8,%esp
  281710:	6a 11                	push   $0x11
  281712:	68 a0 00 00 00       	push   $0xa0
  281717:	e8 ea f3 ff ff       	call   280b06 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  28171c:	83 c4 08             	add    $0x8,%esp
  28171f:	6a 28                	push   $0x28
  281721:	68 a1 00 00 00       	push   $0xa1
  281726:	e8 db f3 ff ff       	call   280b06 <io_out8>
	io_out8(PIC1_ICW3, 2);
  28172b:	83 c4 08             	add    $0x8,%esp
  28172e:	6a 02                	push   $0x2
  281730:	68 a1 00 00 00       	push   $0xa1
  281735:	e8 cc f3 ff ff       	call   280b06 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  28173a:	83 c4 08             	add    $0x8,%esp
  28173d:	6a 01                	push   $0x1
  28173f:	68 a1 00 00 00       	push   $0xa1
  281744:	e8 bd f3 ff ff       	call   280b06 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  281749:	83 c4 08             	add    $0x8,%esp
  28174c:	68 fb 00 00 00       	push   $0xfb
  281751:	6a 21                	push   $0x21
  281753:	e8 ae f3 ff ff       	call   280b06 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  281758:	83 c4 08             	add    $0x8,%esp
  28175b:	68 ff 00 00 00       	push   $0xff
  281760:	68 a1 00 00 00       	push   $0xa1
  281765:	e8 9c f3 ff ff       	call   280b06 <io_out8>
}
  28176a:	83 c4 10             	add    $0x10,%esp
  28176d:	c9                   	leave  
  28176e:	c3                   	ret    

0028176f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28176f:	55                   	push   %ebp
  281770:	89 e5                	mov    %esp,%ebp
  281772:	57                   	push   %edi
  281773:	56                   	push   %esi
  281774:	53                   	push   %ebx
  281775:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281778:	e8 1b 17 00 00       	call   282e98 <task_now>
  28177d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28177f:	8b b0 a4 00 00 00    	mov    0xa4(%eax),%esi
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  281785:	83 ec 08             	sub    $0x8,%esp
  281788:	68 80 53 28 00       	push   $0x285380
  28178d:	56                   	push   %esi
  28178e:	e8 a5 25 00 00       	call   283d38 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281793:	83 c4 0c             	add    $0xc,%esp
  281796:	8b 45 08             	mov    0x8(%ebp),%eax
  281799:	ff 70 2c             	pushl  0x2c(%eax)
  28179c:	68 a8 53 28 00       	push   $0x2853a8
  2817a1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2817a4:	57                   	push   %edi
  2817a5:	e8 33 02 00 00       	call   2819dd <sprintf>
	cons_putstr0(cons,s);
  2817aa:	83 c4 08             	add    $0x8,%esp
  2817ad:	57                   	push   %edi
  2817ae:	56                   	push   %esi
  2817af:	e8 84 25 00 00       	call   283d38 <cons_putstr0>
	return &(task->tss.esp0);
  2817b4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2817b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2817ba:	5b                   	pop    %ebx
  2817bb:	5e                   	pop    %esi
  2817bc:	5f                   	pop    %edi
  2817bd:	5d                   	pop    %ebp
  2817be:	c3                   	ret    

002817bf <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  2817bf:	55                   	push   %ebp
  2817c0:	89 e5                	mov    %esp,%ebp
  2817c2:	57                   	push   %edi
  2817c3:	56                   	push   %esi
  2817c4:	53                   	push   %ebx
  2817c5:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  2817c8:	e8 cb 16 00 00       	call   282e98 <task_now>
  2817cd:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  2817cf:	8b b0 a4 00 00 00    	mov    0xa4(%eax),%esi
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  2817d5:	83 ec 08             	sub    $0x8,%esp
  2817d8:	68 b0 53 28 00       	push   $0x2853b0
  2817dd:	56                   	push   %esi
  2817de:	e8 55 25 00 00       	call   283d38 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2817e3:	83 c4 0c             	add    $0xc,%esp
  2817e6:	8b 45 08             	mov    0x8(%ebp),%eax
  2817e9:	ff 70 2c             	pushl  0x2c(%eax)
  2817ec:	68 a8 53 28 00       	push   $0x2853a8
  2817f1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2817f4:	57                   	push   %edi
  2817f5:	e8 e3 01 00 00       	call   2819dd <sprintf>
	cons_putstr0(cons,s);
  2817fa:	83 c4 08             	add    $0x8,%esp
  2817fd:	57                   	push   %edi
  2817fe:	56                   	push   %esi
  2817ff:	e8 34 25 00 00       	call   283d38 <cons_putstr0>
	return &(task->tss.esp0);
  281804:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281807:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28180a:	5b                   	pop    %ebx
  28180b:	5e                   	pop    %esi
  28180c:	5f                   	pop    %edi
  28180d:	5d                   	pop    %ebp
  28180e:	c3                   	ret    
  28180f:	90                   	nop

00281810 <asm_inthandler21>:
  281810:	06                   	push   %es
  281811:	1e                   	push   %ds
  281812:	60                   	pusha  
  281813:	89 e0                	mov    %esp,%eax
  281815:	50                   	push   %eax
  281816:	66 8c d0             	mov    %ss,%ax
  281819:	8e d8                	mov    %eax,%ds
  28181b:	8e c0                	mov    %eax,%es
  28181d:	e8 ed 05 00 00       	call   281e0f <inthandler21>
  281822:	58                   	pop    %eax
  281823:	61                   	popa   
  281824:	1f                   	pop    %ds
  281825:	07                   	pop    %es
  281826:	cf                   	iret   

00281827 <asm_inthandler2c>:
  281827:	06                   	push   %es
  281828:	1e                   	push   %ds
  281829:	60                   	pusha  
  28182a:	89 e0                	mov    %esp,%eax
  28182c:	50                   	push   %eax
  28182d:	66 8c d0             	mov    %ss,%ax
  281830:	8e d8                	mov    %eax,%ds
  281832:	8e c0                	mov    %eax,%es
  281834:	e8 3c 05 00 00       	call   281d75 <inthandler2c>
  281839:	58                   	pop    %eax
  28183a:	61                   	popa   
  28183b:	1f                   	pop    %ds
  28183c:	07                   	pop    %es
  28183d:	cf                   	iret   

0028183e <asm_inthandler20>:
  28183e:	06                   	push   %es
  28183f:	1e                   	push   %ds
  281840:	60                   	pusha  
  281841:	89 e0                	mov    %esp,%eax
  281843:	50                   	push   %eax
  281844:	66 8c d0             	mov    %ss,%ax
  281847:	8e d8                	mov    %eax,%ds
  281849:	8e c0                	mov    %eax,%es
  28184b:	e8 c1 13 00 00       	call   282c11 <inthandler20>
  281850:	58                   	pop    %eax
  281851:	61                   	popa   
  281852:	1f                   	pop    %ds
  281853:	07                   	pop    %es
  281854:	cf                   	iret   

00281855 <asm_sys_api>:
  281855:	fb                   	sti    
  281856:	1e                   	push   %ds
  281857:	06                   	push   %es
  281858:	60                   	pusha  
  281859:	60                   	pusha  
  28185a:	66 8c d0             	mov    %ss,%ax
  28185d:	8e d8                	mov    %eax,%ds
  28185f:	8e c0                	mov    %eax,%es
  281861:	e8 38 2c 00 00       	call   28449e <sys_api>
  281866:	83 f8 00             	cmp    $0x0,%eax
  281869:	75 07                	jne    281872 <end_app>
  28186b:	83 c4 20             	add    $0x20,%esp
  28186e:	61                   	popa   
  28186f:	07                   	pop    %es
  281870:	1f                   	pop    %ds
  281871:	cf                   	iret   

00281872 <end_app>:
  281872:	8b 20                	mov    (%eax),%esp
  281874:	61                   	popa   
  281875:	c3                   	ret    

00281876 <asm_inthandler0d>:
  281876:	fb                   	sti    
  281877:	06                   	push   %es
  281878:	1e                   	push   %ds
  281879:	60                   	pusha  
  28187a:	89 e0                	mov    %esp,%eax
  28187c:	50                   	push   %eax
  28187d:	66 8c d0             	mov    %ss,%ax
  281880:	8e d8                	mov    %eax,%ds
  281882:	8e c0                	mov    %eax,%es
  281884:	e8 e6 fe ff ff       	call   28176f <inthandler0d>
  281889:	83 f8 00             	cmp    $0x0,%eax
  28188c:	75 e4                	jne    281872 <end_app>
  28188e:	58                   	pop    %eax
  28188f:	61                   	popa   
  281890:	1f                   	pop    %ds
  281891:	07                   	pop    %es
  281892:	83 c4 04             	add    $0x4,%esp
  281895:	cf                   	iret   

00281896 <asm_inthandler0c>:
  281896:	fb                   	sti    
  281897:	06                   	push   %es
  281898:	1e                   	push   %ds
  281899:	60                   	pusha  
  28189a:	89 e0                	mov    %esp,%eax
  28189c:	50                   	push   %eax
  28189d:	66 8c d0             	mov    %ss,%ax
  2818a0:	8e d8                	mov    %eax,%ds
  2818a2:	8e c0                	mov    %eax,%es
  2818a4:	e8 16 ff ff ff       	call   2817bf <inthandler0c>
  2818a9:	83 f8 00             	cmp    $0x0,%eax
  2818ac:	75 c4                	jne    281872 <end_app>
  2818ae:	58                   	pop    %eax
  2818af:	61                   	popa   
  2818b0:	1f                   	pop    %ds
  2818b1:	07                   	pop    %es
  2818b2:	83 c4 04             	add    $0x4,%esp
  2818b5:	cf                   	iret   

002818b6 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  2818b6:	55                   	push   %ebp
  2818b7:	89 e5                	mov    %esp,%ebp
  2818b9:	57                   	push   %edi
  2818ba:	56                   	push   %esi
  2818bb:	53                   	push   %ebx
  2818bc:	83 ec 10             	sub    $0x10,%esp
  2818bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2818c2:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  2818c5:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  2818cc:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  2818d3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  2818d9:	85 c9                	test   %ecx,%ecx
  2818db:	79 08                	jns    2818e5 <itoa+0x2f>
		*buf++ = '-';
  2818dd:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  2818e0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  2818e2:	8d 7f 01             	lea    0x1(%edi),%edi
  2818e5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  2818e8:	be 67 66 66 66       	mov    $0x66666667,%esi
  2818ed:	83 c3 01             	add    $0x1,%ebx
  2818f0:	89 c8                	mov    %ecx,%eax
  2818f2:	f7 ee                	imul   %esi
  2818f4:	c1 fa 02             	sar    $0x2,%edx
  2818f7:	89 c8                	mov    %ecx,%eax
  2818f9:	c1 f8 1f             	sar    $0x1f,%eax
  2818fc:	29 c2                	sub    %eax,%edx
  2818fe:	8d 04 92             	lea    (%edx,%edx,4),%eax
  281901:	01 c0                	add    %eax,%eax
  281903:	29 c1                	sub    %eax,%ecx
  281905:	83 c1 30             	add    $0x30,%ecx
  281908:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  28190b:	89 d1                	mov    %edx,%ecx
	}while(value);
  28190d:	85 d2                	test   %edx,%edx
  28190f:	75 dc                	jne    2818ed <itoa+0x37>
	while(tmp_buf != tbp--)
  281911:	8d 73 ff             	lea    -0x1(%ebx),%esi
  281914:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281917:	39 c3                	cmp    %eax,%ebx
  281919:	74 20                	je     28193b <itoa+0x85>
  28191b:	89 f0                	mov    %esi,%eax
  28191d:	89 fa                	mov    %edi,%edx
  28191f:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  281922:	83 c2 01             	add    $0x1,%edx
  281925:	0f b6 08             	movzbl (%eax),%ecx
  281928:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  28192b:	83 e8 01             	sub    $0x1,%eax
  28192e:	39 d8                	cmp    %ebx,%eax
  281930:	75 f0                	jne    281922 <itoa+0x6c>
  281932:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281935:	29 c6                	sub    %eax,%esi
  281937:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  28193b:	c6 07 00             	movb   $0x0,(%edi)
}
  28193e:	83 c4 10             	add    $0x10,%esp
  281941:	5b                   	pop    %ebx
  281942:	5e                   	pop    %esi
  281943:	5f                   	pop    %edi
  281944:	5d                   	pop    %ebp
  281945:	c3                   	ret    

00281946 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281946:	55                   	push   %ebp
  281947:	89 e5                	mov    %esp,%ebp
  281949:	57                   	push   %edi
  28194a:	56                   	push   %esi
  28194b:	53                   	push   %ebx
  28194c:	83 ec 20             	sub    $0x20,%esp
  28194f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281952:	bb 00 00 00 00       	mov    $0x0,%ebx
  281957:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28195e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281965:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28196a:	ba 00 00 00 00       	mov    $0x0,%edx
  28196f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281973:	83 c2 04             	add    $0x4,%edx
  281976:	39 ca                	cmp    %ecx,%edx
  281978:	72 f5                	jb     28196f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28197a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28197d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281980:	83 c6 02             	add    $0x2,%esi
  281983:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281986:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28198a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28198d:	83 c3 01             	add    $0x1,%ebx
  281990:	89 c1                	mov    %eax,%ecx
  281992:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281995:	8d 79 37             	lea    0x37(%ecx),%edi
  281998:	8d 51 30             	lea    0x30(%ecx),%edx
  28199b:	83 f9 0a             	cmp    $0xa,%ecx
  28199e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  2819a1:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  2819a4:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  2819a7:	85 c0                	test   %eax,%eax
  2819a9:	75 e2                	jne    28198d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  2819ab:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  2819ae:	39 c3                	cmp    %eax,%ebx
  2819b0:	74 20                	je     2819d2 <xtoa+0x8c>
  2819b2:	89 d8                	mov    %ebx,%eax
  2819b4:	89 f1                	mov    %esi,%ecx
  2819b6:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  2819b9:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  2819bc:	83 c1 01             	add    $0x1,%ecx
  2819bf:	0f b6 10             	movzbl (%eax),%edx
  2819c2:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  2819c5:	39 f8                	cmp    %edi,%eax
  2819c7:	75 f0                	jne    2819b9 <xtoa+0x73>
  2819c9:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2819cc:	29 c3                	sub    %eax,%ebx
  2819ce:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  2819d2:	c6 06 00             	movb   $0x0,(%esi)
}
  2819d5:	83 c4 20             	add    $0x20,%esp
  2819d8:	5b                   	pop    %ebx
  2819d9:	5e                   	pop    %esi
  2819da:	5f                   	pop    %edi
  2819db:	5d                   	pop    %ebp
  2819dc:	c3                   	ret    

002819dd <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  2819dd:	55                   	push   %ebp
  2819de:	89 e5                	mov    %esp,%ebp
  2819e0:	57                   	push   %edi
  2819e1:	56                   	push   %esi
  2819e2:	53                   	push   %ebx
  2819e3:	83 ec 10             	sub    $0x10,%esp
  2819e6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  2819e9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2819ec:	e9 a8 00 00 00       	jmp    281a99 <sprintf+0xbc>
		if(*format!='%'){
  2819f1:	3c 25                	cmp    $0x25,%al
  2819f3:	74 10                	je     281a05 <sprintf+0x28>
			*str++=*format++;
  2819f5:	83 c6 01             	add    $0x1,%esi
  2819f8:	89 75 0c             	mov    %esi,0xc(%ebp)
  2819fb:	88 03                	mov    %al,(%ebx)
  2819fd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  281a00:	e9 94 00 00 00       	jmp    281a99 <sprintf+0xbc>
		}
		else{
			format++;
  281a05:	8d 46 01             	lea    0x1(%esi),%eax
  281a08:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  281a0b:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  281a0f:	3c 73                	cmp    $0x73,%al
  281a11:	74 5e                	je     281a71 <sprintf+0x94>
  281a13:	3c 78                	cmp    $0x78,%al
  281a15:	74 2f                	je     281a46 <sprintf+0x69>
  281a17:	3c 64                	cmp    $0x64,%al
  281a19:	75 75                	jne    281a90 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281a1b:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281a1e:	50                   	push   %eax
  281a1f:	ff 37                	pushl  (%edi)
  281a21:	e8 90 fe ff ff       	call   2818b6 <itoa>
  281a26:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281a2a:	83 c4 08             	add    $0x8,%esp
  281a2d:	84 c0                	test   %al,%al
  281a2f:	74 5f                	je     281a90 <sprintf+0xb3>
  281a31:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281a34:	83 c3 01             	add    $0x1,%ebx
  281a37:	83 c2 01             	add    $0x1,%edx
  281a3a:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a3d:	0f b6 02             	movzbl (%edx),%eax
  281a40:	84 c0                	test   %al,%al
  281a42:	75 f0                	jne    281a34 <sprintf+0x57>
  281a44:	eb 4a                	jmp    281a90 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281a46:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281a49:	50                   	push   %eax
  281a4a:	ff 37                	pushl  (%edi)
  281a4c:	e8 f5 fe ff ff       	call   281946 <xtoa>
  281a51:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281a55:	83 c4 08             	add    $0x8,%esp
  281a58:	84 c0                	test   %al,%al
  281a5a:	74 34                	je     281a90 <sprintf+0xb3>
  281a5c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281a5f:	83 c3 01             	add    $0x1,%ebx
  281a62:	83 c2 01             	add    $0x1,%edx
  281a65:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a68:	0f b6 02             	movzbl (%edx),%eax
  281a6b:	84 c0                	test   %al,%al
  281a6d:	75 f0                	jne    281a5f <sprintf+0x82>
  281a6f:	eb 1f                	jmp    281a90 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281a71:	8b 0f                	mov    (%edi),%ecx
  281a73:	0f b6 11             	movzbl (%ecx),%edx
  281a76:	84 d2                	test   %dl,%dl
  281a78:	74 16                	je     281a90 <sprintf+0xb3>
  281a7a:	89 d8                	mov    %ebx,%eax
  281a7c:	83 c0 01             	add    $0x1,%eax
  281a7f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281a82:	89 c2                	mov    %eax,%edx
  281a84:	29 da                	sub    %ebx,%edx
  281a86:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  281a8a:	84 d2                	test   %dl,%dl
  281a8c:	75 ee                	jne    281a7c <sprintf+0x9f>
  281a8e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281a90:	83 c7 04             	add    $0x4,%edi
			format++;
  281a93:	83 c6 02             	add    $0x2,%esi
  281a96:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281a99:	8b 75 0c             	mov    0xc(%ebp),%esi
  281a9c:	0f b6 06             	movzbl (%esi),%eax
  281a9f:	84 c0                	test   %al,%al
  281aa1:	0f 85 4a ff ff ff    	jne    2819f1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281aa7:	c6 03 00             	movb   $0x0,(%ebx)
}
  281aaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281aad:	5b                   	pop    %ebx
  281aae:	5e                   	pop    %esi
  281aaf:	5f                   	pop    %edi
  281ab0:	5d                   	pop    %ebp
  281ab1:	c3                   	ret    

00281ab2 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281ab2:	55                   	push   %ebp
  281ab3:	89 e5                	mov    %esp,%ebp
  281ab5:	57                   	push   %edi
  281ab6:	56                   	push   %esi
  281ab7:	53                   	push   %ebx
  281ab8:	8b 7d 08             	mov    0x8(%ebp),%edi
  281abb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281abe:	0f b6 17             	movzbl (%edi),%edx
  281ac1:	be 00 00 00 00       	mov    $0x0,%esi
  281ac6:	84 d2                	test   %dl,%dl
  281ac8:	74 40                	je     281b0a <strcmp+0x58>
  281aca:	eb 1d                	jmp    281ae9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  281acc:	38 ca                	cmp    %cl,%dl
  281ace:	75 0f                	jne    281adf <strcmp+0x2d>
  281ad0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281ad3:	89 c6                	mov    %eax,%esi
  281ad5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  281ad9:	84 d2                	test   %dl,%dl
  281adb:	75 1e                	jne    281afb <strcmp+0x49>
  281add:	eb 2b                	jmp    281b0a <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  281adf:	0f be c2             	movsbl %dl,%eax
  281ae2:	0f be c9             	movsbl %cl,%ecx
  281ae5:	29 c8                	sub    %ecx,%eax
  281ae7:	eb 2a                	jmp    281b13 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281ae9:	0f b6 0b             	movzbl (%ebx),%ecx
  281aec:	84 c9                	test   %cl,%cl
  281aee:	74 15                	je     281b05 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281af0:	b8 00 00 00 00       	mov    $0x0,%eax
  281af5:	38 ca                	cmp    %cl,%dl
  281af7:	74 d7                	je     281ad0 <strcmp+0x1e>
  281af9:	eb e4                	jmp    281adf <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281afb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281aff:	84 c9                	test   %cl,%cl
  281b01:	75 c9                	jne    281acc <strcmp+0x1a>
  281b03:	eb 05                	jmp    281b0a <strcmp+0x58>
  281b05:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281b0a:	0f be c2             	movsbl %dl,%eax
  281b0d:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281b11:	29 d0                	sub    %edx,%eax
}
  281b13:	5b                   	pop    %ebx
  281b14:	5e                   	pop    %esi
  281b15:	5f                   	pop    %edi
  281b16:	5d                   	pop    %ebp
  281b17:	c3                   	ret    

00281b18 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281b18:	55                   	push   %ebp
  281b19:	89 e5                	mov    %esp,%ebp
  281b1b:	57                   	push   %edi
  281b1c:	56                   	push   %esi
  281b1d:	53                   	push   %ebx
  281b1e:	8b 75 08             	mov    0x8(%ebp),%esi
  281b21:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281b24:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281b27:	b8 00 00 00 00       	mov    $0x0,%eax
  281b2c:	85 ff                	test   %edi,%edi
  281b2e:	74 63                	je     281b93 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b30:	83 ef 01             	sub    $0x1,%edi
  281b33:	89 fa                	mov    %edi,%edx
  281b35:	74 52                	je     281b89 <strncmp+0x71>
  281b37:	eb 19                	jmp    281b52 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281b39:	38 c8                	cmp    %cl,%al
  281b3b:	75 0b                	jne    281b48 <strncmp+0x30>
  281b3d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b40:	39 fa                	cmp    %edi,%edx
  281b42:	75 27                	jne    281b6b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281b44:	89 fa                	mov    %edi,%edx
  281b46:	eb 41                	jmp    281b89 <strncmp+0x71>
		else return c1-c2;
  281b48:	0f be c0             	movsbl %al,%eax
  281b4b:	0f be c9             	movsbl %cl,%ecx
  281b4e:	29 c8                	sub    %ecx,%eax
  281b50:	eb 41                	jmp    281b93 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b52:	0f b6 06             	movzbl (%esi),%eax
  281b55:	84 c0                	test   %al,%al
  281b57:	74 24                	je     281b7d <strncmp+0x65>
  281b59:	0f b6 0b             	movzbl (%ebx),%ecx
  281b5c:	84 c9                	test   %cl,%cl
  281b5e:	74 24                	je     281b84 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281b60:	ba 00 00 00 00       	mov    $0x0,%edx
  281b65:	38 c8                	cmp    %cl,%al
  281b67:	74 d4                	je     281b3d <strncmp+0x25>
  281b69:	eb dd                	jmp    281b48 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b6b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281b6f:	84 c0                	test   %al,%al
  281b71:	74 16                	je     281b89 <strncmp+0x71>
  281b73:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281b77:	84 c9                	test   %cl,%cl
  281b79:	75 be                	jne    281b39 <strncmp+0x21>
  281b7b:	eb 0c                	jmp    281b89 <strncmp+0x71>
  281b7d:	ba 00 00 00 00       	mov    $0x0,%edx
  281b82:	eb 05                	jmp    281b89 <strncmp+0x71>
  281b84:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281b89:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281b8d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281b91:	29 d0                	sub    %edx,%eax
}
  281b93:	5b                   	pop    %ebx
  281b94:	5e                   	pop    %esi
  281b95:	5f                   	pop    %edi
  281b96:	5d                   	pop    %ebp
  281b97:	c3                   	ret    

00281b98 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281b98:	55                   	push   %ebp
  281b99:	89 e5                	mov    %esp,%ebp
  281b9b:	8b 45 08             	mov    0x8(%ebp),%eax
  281b9e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281ba1:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281ba4:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281ba7:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281ba9:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281bac:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281bb3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281bba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281bc1:	8b 55 14             	mov    0x14(%ebp),%edx
  281bc4:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281bc7:	5d                   	pop    %ebp
  281bc8:	c3                   	ret    

00281bc9 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281bc9:	55                   	push   %ebp
  281bca:	89 e5                	mov    %esp,%ebp
  281bcc:	53                   	push   %ebx
  281bcd:	83 ec 04             	sub    $0x4,%esp
  281bd0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281bd3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281bd7:	75 0b                	jne    281be4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281bd9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281bdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281be2:	eb 52                	jmp    281c36 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281be4:	8b 48 04             	mov    0x4(%eax),%ecx
  281be7:	8b 10                	mov    (%eax),%edx
  281be9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281bec:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281bef:	8b 48 04             	mov    0x4(%eax),%ecx
  281bf2:	8d 51 01             	lea    0x1(%ecx),%edx
  281bf5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281bf8:	3b 50 0c             	cmp    0xc(%eax),%edx
  281bfb:	75 07                	jne    281c04 <fifo32_put+0x3b>
		fifo->p = 0;
  281bfd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281c04:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281c08:	8b 50 18             	mov    0x18(%eax),%edx
  281c0b:	85 d2                	test   %edx,%edx
  281c0d:	74 22                	je     281c31 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281c0f:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281c14:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281c18:	74 1c                	je     281c36 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281c1a:	83 ec 04             	sub    $0x4,%esp
  281c1d:	6a 00                	push   $0x0
  281c1f:	6a ff                	push   $0xffffffff
  281c21:	52                   	push   %edx
  281c22:	e8 66 13 00 00       	call   282f8d <task_run>
  281c27:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281c2a:	b8 00 00 00 00       	mov    $0x0,%eax
  281c2f:	eb 05                	jmp    281c36 <fifo32_put+0x6d>
  281c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281c36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281c39:	c9                   	leave  
  281c3a:	c3                   	ret    

00281c3b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281c3b:	55                   	push   %ebp
  281c3c:	89 e5                	mov    %esp,%ebp
  281c3e:	56                   	push   %esi
  281c3f:	53                   	push   %ebx
  281c40:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281c43:	8b 59 10             	mov    0x10(%ecx),%ebx
  281c46:	8b 71 0c             	mov    0xc(%ecx),%esi
  281c49:	39 f3                	cmp    %esi,%ebx
  281c4b:	74 20                	je     281c6d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281c4d:	8b 51 08             	mov    0x8(%ecx),%edx
  281c50:	8b 01                	mov    (%ecx),%eax
  281c52:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281c55:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281c58:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281c5a:	be 00 00 00 00       	mov    $0x0,%esi
  281c5f:	0f 44 d6             	cmove  %esi,%edx
  281c62:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281c65:	83 c3 01             	add    $0x1,%ebx
  281c68:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281c6b:	eb 05                	jmp    281c72 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281c6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281c72:	5b                   	pop    %ebx
  281c73:	5e                   	pop    %esi
  281c74:	5d                   	pop    %ebp
  281c75:	c3                   	ret    

00281c76 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281c76:	55                   	push   %ebp
  281c77:	89 e5                	mov    %esp,%ebp
  281c79:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281c7c:	8b 42 0c             	mov    0xc(%edx),%eax
  281c7f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281c82:	5d                   	pop    %ebp
  281c83:	c3                   	ret    

00281c84 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281c84:	55                   	push   %ebp
  281c85:	89 e5                	mov    %esp,%ebp
  281c87:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281c8a:	8b 45 08             	mov    0x8(%ebp),%eax
  281c8d:	a3 c4 7e 28 00       	mov    %eax,0x287ec4
	mousedata0 = data0;
  281c92:	8b 45 0c             	mov    0xc(%ebp),%eax
  281c95:	a3 c0 7e 28 00       	mov    %eax,0x287ec0

	wait_KBC_sendready();
  281c9a:	e8 1a 01 00 00       	call   281db9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281c9f:	83 ec 08             	sub    $0x8,%esp
  281ca2:	68 d4 00 00 00       	push   $0xd4
  281ca7:	6a 64                	push   $0x64
  281ca9:	e8 58 ee ff ff       	call   280b06 <io_out8>
	wait_KBC_sendready();
  281cae:	e8 06 01 00 00       	call   281db9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281cb3:	83 c4 08             	add    $0x8,%esp
  281cb6:	68 f4 00 00 00       	push   $0xf4
  281cbb:	6a 60                	push   $0x60
  281cbd:	e8 44 ee ff ff       	call   280b06 <io_out8>
	mdec->phase = 0;
  281cc2:	8b 45 10             	mov    0x10(%ebp),%eax
  281cc5:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281cc9:	83 c4 10             	add    $0x10,%esp
}
  281ccc:	c9                   	leave  
  281ccd:	c3                   	ret    

00281cce <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281cce:	55                   	push   %ebp
  281ccf:	89 e5                	mov    %esp,%ebp
  281cd1:	56                   	push   %esi
  281cd2:	53                   	push   %ebx
  281cd3:	8b 55 08             	mov    0x8(%ebp),%edx
  281cd6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281cd9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281cdd:	84 c0                	test   %al,%al
  281cdf:	75 14                	jne    281cf5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281ce1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281ce6:	80 f9 fa             	cmp    $0xfa,%cl
  281ce9:	0f 85 82 00 00 00    	jne    281d71 <mouse_decode+0xa3>
			mdec->phase = 1;
  281cef:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281cf3:	eb 7c                	jmp    281d71 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281cf5:	3c 01                	cmp    $0x1,%al
  281cf7:	75 17                	jne    281d10 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281cf9:	89 cb                	mov    %ecx,%ebx
  281cfb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281cfe:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281d03:	80 fb 08             	cmp    $0x8,%bl
  281d06:	75 69                	jne    281d71 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281d08:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281d0a:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281d0e:	eb 61                	jmp    281d71 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281d10:	3c 02                	cmp    $0x2,%al
  281d12:	75 0e                	jne    281d22 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281d14:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281d17:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281d1b:	b8 00 00 00 00       	mov    $0x0,%eax
  281d20:	eb 4f                	jmp    281d71 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281d22:	3c 03                	cmp    $0x3,%al
  281d24:	75 46                	jne    281d6c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281d26:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281d29:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281d2d:	0f b6 02             	movzbl (%edx),%eax
  281d30:	89 c3                	mov    %eax,%ebx
  281d32:	83 e3 07             	and    $0x7,%ebx
  281d35:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281d38:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281d3c:	0f b6 f3             	movzbl %bl,%esi
  281d3f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281d42:	0f b6 f1             	movzbl %cl,%esi
  281d45:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281d48:	a8 10                	test   $0x10,%al
  281d4a:	74 09                	je     281d55 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281d4c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281d52:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281d55:	a8 20                	test   $0x20,%al
  281d57:	74 09                	je     281d62 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281d59:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281d5f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281d62:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281d65:	b8 01 00 00 00       	mov    $0x1,%eax
  281d6a:	eb 05                	jmp    281d71 <mouse_decode+0xa3>
	}
	return -1;
  281d6c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281d71:	5b                   	pop    %ebx
  281d72:	5e                   	pop    %esi
  281d73:	5d                   	pop    %ebp
  281d74:	c3                   	ret    

00281d75 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281d75:	55                   	push   %ebp
  281d76:	89 e5                	mov    %esp,%ebp
  281d78:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281d7b:	6a 64                	push   $0x64
  281d7d:	68 a0 00 00 00       	push   $0xa0
  281d82:	e8 7f ed ff ff       	call   280b06 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281d87:	83 c4 08             	add    $0x8,%esp
  281d8a:	6a 62                	push   $0x62
  281d8c:	6a 20                	push   $0x20
  281d8e:	e8 73 ed ff ff       	call   280b06 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d93:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d9a:	e8 45 ed ff ff       	call   280ae4 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281d9f:	83 c4 08             	add    $0x8,%esp
  281da2:	03 05 c0 7e 28 00    	add    0x287ec0,%eax
  281da8:	50                   	push   %eax
  281da9:	ff 35 c4 7e 28 00    	pushl  0x287ec4
  281daf:	e8 15 fe ff ff       	call   281bc9 <fifo32_put>
	return;
  281db4:	83 c4 10             	add    $0x10,%esp
}
  281db7:	c9                   	leave  
  281db8:	c3                   	ret    

00281db9 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281db9:	55                   	push   %ebp
  281dba:	89 e5                	mov    %esp,%ebp
  281dbc:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281dbf:	83 ec 0c             	sub    $0xc,%esp
  281dc2:	6a 64                	push   $0x64
  281dc4:	e8 1b ed ff ff       	call   280ae4 <io_in8>
  281dc9:	83 c4 10             	add    $0x10,%esp
  281dcc:	a8 02                	test   $0x2,%al
  281dce:	75 ef                	jne    281dbf <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281dd0:	c9                   	leave  
  281dd1:	c3                   	ret    

00281dd2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281dd2:	55                   	push   %ebp
  281dd3:	89 e5                	mov    %esp,%ebp
  281dd5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281dd8:	8b 45 08             	mov    0x8(%ebp),%eax
  281ddb:	a3 c8 7e 28 00       	mov    %eax,0x287ec8
	keydata0 = data0;
  281de0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281de3:	a3 cc 7e 28 00       	mov    %eax,0x287ecc
	wait_KBC_sendready();
  281de8:	e8 cc ff ff ff       	call   281db9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281ded:	83 ec 08             	sub    $0x8,%esp
  281df0:	6a 60                	push   $0x60
  281df2:	6a 64                	push   $0x64
  281df4:	e8 0d ed ff ff       	call   280b06 <io_out8>
	wait_KBC_sendready();
  281df9:	e8 bb ff ff ff       	call   281db9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281dfe:	83 c4 08             	add    $0x8,%esp
  281e01:	6a 47                	push   $0x47
  281e03:	6a 60                	push   $0x60
  281e05:	e8 fc ec ff ff       	call   280b06 <io_out8>
	return;
  281e0a:	83 c4 10             	add    $0x10,%esp
}
  281e0d:	c9                   	leave  
  281e0e:	c3                   	ret    

00281e0f <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281e0f:	55                   	push   %ebp
  281e10:	89 e5                	mov    %esp,%ebp
  281e12:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281e15:	6a 61                	push   $0x61
  281e17:	6a 20                	push   $0x20
  281e19:	e8 e8 ec ff ff       	call   280b06 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281e1e:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281e25:	e8 ba ec ff ff       	call   280ae4 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281e2a:	83 c4 08             	add    $0x8,%esp
  281e2d:	03 05 cc 7e 28 00    	add    0x287ecc,%eax
  281e33:	50                   	push   %eax
  281e34:	ff 35 c8 7e 28 00    	pushl  0x287ec8
  281e3a:	e8 8a fd ff ff       	call   281bc9 <fifo32_put>
	return;
  281e3f:	83 c4 10             	add    $0x10,%esp
}
  281e42:	c9                   	leave  
  281e43:	c3                   	ret    

00281e44 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281e44:	55                   	push   %ebp
  281e45:	89 e5                	mov    %esp,%ebp
  281e47:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281e4a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281e4f:	83 fa 7f             	cmp    $0x7f,%edx
  281e52:	77 16                	ja     281e6a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281e54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281e58:	75 09                	jne    281e63 <key_char+0x1f>
  281e5a:	0f b6 82 60 54 28 00 	movzbl 0x285460(%edx),%eax
  281e61:	eb 07                	jmp    281e6a <key_char+0x26>
		else return keytable1[key];
  281e63:	0f b6 82 e0 53 28 00 	movzbl 0x2853e0(%edx),%eax
	}
	else return 0;
}
  281e6a:	5d                   	pop    %ebp
  281e6b:	c3                   	ret    

00281e6c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281e6c:	55                   	push   %ebp
  281e6d:	89 e5                	mov    %esp,%ebp
  281e6f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281e72:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281e76:	e8 aa ec ff ff       	call   280b25 <io_load_eflags>
  281e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281e7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e81:	83 ec 0c             	sub    $0xc,%esp
  281e84:	50                   	push   %eax
  281e85:	e8 9e ec ff ff       	call   280b28 <io_store_eflags>
  281e8a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281e8d:	e8 93 ec ff ff       	call   280b25 <io_load_eflags>
  281e92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281e95:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e98:	25 00 00 04 00       	and    $0x40000,%eax
  281e9d:	85 c0                	test   %eax,%eax
  281e9f:	74 04                	je     281ea5 <memtest+0x39>
		flg486 = 1;
  281ea1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281ea5:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281eac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281eaf:	83 ec 0c             	sub    $0xc,%esp
  281eb2:	50                   	push   %eax
  281eb3:	e8 70 ec ff ff       	call   280b28 <io_store_eflags>
  281eb8:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281ebb:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281ebf:	74 1d                	je     281ede <memtest+0x72>
	{
		cr0 = load_cr0;
  281ec1:	c7 45 ec 4f 0b 28 00 	movl   $0x280b4f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281ec8:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281ecf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281ed2:	83 ec 0c             	sub    $0xc,%esp
  281ed5:	50                   	push   %eax
  281ed6:	e8 78 ec ff ff       	call   280b53 <store_cr0>
  281edb:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281ede:	83 ec 08             	sub    $0x8,%esp
  281ee1:	ff 75 0c             	pushl  0xc(%ebp)
  281ee4:	ff 75 08             	pushl  0x8(%ebp)
  281ee7:	e8 6f ec ff ff       	call   280b5b <_memtest_sub>
  281eec:	83 c4 10             	add    $0x10,%esp
  281eef:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281ef2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281ef6:	74 1e                	je     281f16 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281ef8:	e8 52 ec ff ff       	call   280b4f <load_cr0>
  281efd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281f00:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281f0a:	83 ec 0c             	sub    $0xc,%esp
  281f0d:	50                   	push   %eax
  281f0e:	e8 40 ec ff ff       	call   280b53 <store_cr0>
  281f13:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281f16:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281f19:	c9                   	leave  
  281f1a:	c3                   	ret    

00281f1b <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281f1b:	55                   	push   %ebp
  281f1c:	89 e5                	mov    %esp,%ebp
  281f1e:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281f21:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281f28:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281f2f:	8b 45 08             	mov    0x8(%ebp),%eax
  281f32:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281f35:	eb 67                	jmp    281f9e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281f37:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281f3a:	05 fc 0f 00 00       	add    $0xffc,%eax
  281f3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f45:	8b 00                	mov    (%eax),%eax
  281f47:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f4d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f50:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281f52:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f55:	8b 00                	mov    (%eax),%eax
  281f57:	f7 d0                	not    %eax
  281f59:	89 c2                	mov    %eax,%edx
  281f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f5e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f63:	8b 00                	mov    (%eax),%eax
  281f65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281f68:	74 0d                	je     281f77 <memtest_sub+0x5c>
  281f6a:	eb 01                	jmp    281f6d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281f6c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281f6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f70:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f73:	89 10                	mov    %edx,(%eax)
			break;
  281f75:	eb 2f                	jmp    281fa6 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281f77:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f7a:	8b 00                	mov    (%eax),%eax
  281f7c:	f7 d0                	not    %eax
  281f7e:	89 c2                	mov    %eax,%edx
  281f80:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f83:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f88:	8b 00                	mov    (%eax),%eax
  281f8a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281f8d:	75 dd                	jne    281f6c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f92:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f95:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281f97:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281f9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281fa1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281fa4:	76 91                	jbe    281f37 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281fa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281fa9:	c9                   	leave  
  281faa:	c3                   	ret    

00281fab <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281fab:	55                   	push   %ebp
  281fac:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281fae:	8b 45 08             	mov    0x8(%ebp),%eax
  281fb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281fb7:	8b 45 08             	mov    0x8(%ebp),%eax
  281fba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281fc1:	8b 45 08             	mov    0x8(%ebp),%eax
  281fc4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281fcb:	8b 45 08             	mov    0x8(%ebp),%eax
  281fce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281fd5:	90                   	nop
}
  281fd6:	5d                   	pop    %ebp
  281fd7:	c3                   	ret    

00281fd8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281fd8:	55                   	push   %ebp
  281fd9:	89 e5                	mov    %esp,%ebp
  281fdb:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281fde:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281fe5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281fec:	eb 14                	jmp    282002 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281fee:	8b 45 08             	mov    0x8(%ebp),%eax
  281ff1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281ff4:	83 c2 02             	add    $0x2,%edx
  281ff7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281ffb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281ffe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  282002:	8b 45 08             	mov    0x8(%ebp),%eax
  282005:	8b 00                	mov    (%eax),%eax
  282007:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  28200a:	77 e2                	ja     281fee <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  28200c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  28200f:	c9                   	leave  
  282010:	c3                   	ret    

00282011 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  282011:	55                   	push   %ebp
  282012:	89 e5                	mov    %esp,%ebp
  282014:	53                   	push   %ebx
  282015:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  282018:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28201f:	e9 bd 00 00 00       	jmp    2820e1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  282024:	8b 45 08             	mov    0x8(%ebp),%eax
  282027:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28202a:	83 c2 02             	add    $0x2,%edx
  28202d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282031:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282034:	0f 82 a3 00 00 00    	jb     2820dd <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  28203a:	8b 45 08             	mov    0x8(%ebp),%eax
  28203d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282040:	83 c2 02             	add    $0x2,%edx
  282043:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282046:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  282049:	8b 45 08             	mov    0x8(%ebp),%eax
  28204c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28204f:	83 c2 02             	add    $0x2,%edx
  282052:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282055:	8b 45 0c             	mov    0xc(%ebp),%eax
  282058:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28205b:	8b 45 08             	mov    0x8(%ebp),%eax
  28205e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282061:	83 c2 02             	add    $0x2,%edx
  282064:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  282067:	8b 45 08             	mov    0x8(%ebp),%eax
  28206a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28206d:	83 c2 02             	add    $0x2,%edx
  282070:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282074:	2b 45 0c             	sub    0xc(%ebp),%eax
  282077:	89 c2                	mov    %eax,%edx
  282079:	8b 45 08             	mov    0x8(%ebp),%eax
  28207c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  28207f:	83 c1 02             	add    $0x2,%ecx
  282082:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  282086:	8b 45 08             	mov    0x8(%ebp),%eax
  282089:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28208c:	83 c2 02             	add    $0x2,%edx
  28208f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282093:	85 c0                	test   %eax,%eax
  282095:	75 41                	jne    2820d8 <memman_alloc+0xc7>
			{
				man->frees--;
  282097:	8b 45 08             	mov    0x8(%ebp),%eax
  28209a:	8b 00                	mov    (%eax),%eax
  28209c:	8d 50 ff             	lea    -0x1(%eax),%edx
  28209f:	8b 45 08             	mov    0x8(%ebp),%eax
  2820a2:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  2820a4:	eb 28                	jmp    2820ce <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  2820a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820a9:	8d 50 01             	lea    0x1(%eax),%edx
  2820ac:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2820af:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820b2:	8d 58 02             	lea    0x2(%eax),%ebx
  2820b5:	8b 45 08             	mov    0x8(%ebp),%eax
  2820b8:	83 c2 02             	add    $0x2,%edx
  2820bb:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2820be:	8b 02                	mov    (%edx),%eax
  2820c0:	8b 52 04             	mov    0x4(%edx),%edx
  2820c3:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2820c6:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  2820ca:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820ce:	8b 45 08             	mov    0x8(%ebp),%eax
  2820d1:	8b 00                	mov    (%eax),%eax
  2820d3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820d6:	77 ce                	ja     2820a6 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  2820d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2820db:	eb 17                	jmp    2820f4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  2820dd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820e1:	8b 45 08             	mov    0x8(%ebp),%eax
  2820e4:	8b 00                	mov    (%eax),%eax
  2820e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820e9:	0f 87 35 ff ff ff    	ja     282024 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  2820ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2820f4:	83 c4 10             	add    $0x10,%esp
  2820f7:	5b                   	pop    %ebx
  2820f8:	5d                   	pop    %ebp
  2820f9:	c3                   	ret    

002820fa <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  2820fa:	55                   	push   %ebp
  2820fb:	89 e5                	mov    %esp,%ebp
  2820fd:	53                   	push   %ebx
  2820fe:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  282101:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  282108:	eb 15                	jmp    28211f <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  28210a:	8b 45 08             	mov    0x8(%ebp),%eax
  28210d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282110:	83 c2 02             	add    $0x2,%edx
  282113:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282116:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282119:	77 10                	ja     28212b <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  28211b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28211f:	8b 45 08             	mov    0x8(%ebp),%eax
  282122:	8b 00                	mov    (%eax),%eax
  282124:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282127:	7f e1                	jg     28210a <memman_free+0x10>
  282129:	eb 01                	jmp    28212c <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  28212b:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  28212c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  282130:	0f 8e f2 00 00 00    	jle    282228 <memman_free+0x12e>
  282136:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282139:	8d 50 ff             	lea    -0x1(%eax),%edx
  28213c:	8b 45 08             	mov    0x8(%ebp),%eax
  28213f:	83 c2 02             	add    $0x2,%edx
  282142:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282145:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282148:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28214b:	8b 45 08             	mov    0x8(%ebp),%eax
  28214e:	83 c1 02             	add    $0x2,%ecx
  282151:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282155:	01 d0                	add    %edx,%eax
  282157:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28215a:	0f 85 c8 00 00 00    	jne    282228 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282160:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282163:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282166:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282169:	8d 50 ff             	lea    -0x1(%eax),%edx
  28216c:	8b 45 08             	mov    0x8(%ebp),%eax
  28216f:	83 c2 02             	add    $0x2,%edx
  282172:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282176:	8b 45 10             	mov    0x10(%ebp),%eax
  282179:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28217c:	8b 45 08             	mov    0x8(%ebp),%eax
  28217f:	8d 53 02             	lea    0x2(%ebx),%edx
  282182:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282186:	8b 45 08             	mov    0x8(%ebp),%eax
  282189:	8b 00                	mov    (%eax),%eax
  28218b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28218e:	0f 8e 8a 00 00 00    	jle    28221e <memman_free+0x124>
  282194:	8b 55 0c             	mov    0xc(%ebp),%edx
  282197:	8b 45 10             	mov    0x10(%ebp),%eax
  28219a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28219d:	8b 45 08             	mov    0x8(%ebp),%eax
  2821a0:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2821a3:	83 c2 02             	add    $0x2,%edx
  2821a6:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2821a9:	39 c1                	cmp    %eax,%ecx
  2821ab:	75 71                	jne    28221e <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  2821ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821b0:	8d 58 ff             	lea    -0x1(%eax),%ebx
  2821b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821b6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2821b9:	8b 45 08             	mov    0x8(%ebp),%eax
  2821bc:	83 c2 02             	add    $0x2,%edx
  2821bf:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  2821c3:	8b 45 08             	mov    0x8(%ebp),%eax
  2821c6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  2821c9:	83 c1 02             	add    $0x2,%ecx
  2821cc:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2821d0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2821d3:	8b 45 08             	mov    0x8(%ebp),%eax
  2821d6:	8d 53 02             	lea    0x2(%ebx),%edx
  2821d9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  2821dd:	eb 28                	jmp    282207 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  2821df:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821e2:	8d 50 01             	lea    0x1(%eax),%edx
  2821e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2821e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821eb:	8d 58 02             	lea    0x2(%eax),%ebx
  2821ee:	8b 45 08             	mov    0x8(%ebp),%eax
  2821f1:	83 c2 02             	add    $0x2,%edx
  2821f4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2821f7:	8b 02                	mov    (%edx),%eax
  2821f9:	8b 52 04             	mov    0x4(%edx),%edx
  2821fc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2821ff:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  282203:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282207:	8b 45 08             	mov    0x8(%ebp),%eax
  28220a:	8b 00                	mov    (%eax),%eax
  28220c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28220f:	7f ce                	jg     2821df <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  282211:	8b 45 08             	mov    0x8(%ebp),%eax
  282214:	8b 00                	mov    (%eax),%eax
  282216:	8d 50 ff             	lea    -0x1(%eax),%edx
  282219:	8b 45 08             	mov    0x8(%ebp),%eax
  28221c:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  28221e:	b8 00 00 00 00       	mov    $0x0,%eax
  282223:	e9 1f 01 00 00       	jmp    282347 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  282228:	8b 45 08             	mov    0x8(%ebp),%eax
  28222b:	8b 00                	mov    (%eax),%eax
  28222d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282230:	7e 52                	jle    282284 <memman_free+0x18a>
  282232:	8b 55 0c             	mov    0xc(%ebp),%edx
  282235:	8b 45 10             	mov    0x10(%ebp),%eax
  282238:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28223b:	8b 45 08             	mov    0x8(%ebp),%eax
  28223e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282241:	83 c2 02             	add    $0x2,%edx
  282244:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282247:	39 c1                	cmp    %eax,%ecx
  282249:	75 39                	jne    282284 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28224b:	8b 45 08             	mov    0x8(%ebp),%eax
  28224e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282251:	8d 4a 02             	lea    0x2(%edx),%ecx
  282254:	8b 55 0c             	mov    0xc(%ebp),%edx
  282257:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28225a:	8b 45 08             	mov    0x8(%ebp),%eax
  28225d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282260:	83 c2 02             	add    $0x2,%edx
  282263:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282267:	8b 45 10             	mov    0x10(%ebp),%eax
  28226a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28226d:	8b 45 08             	mov    0x8(%ebp),%eax
  282270:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282273:	83 c2 02             	add    $0x2,%edx
  282276:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28227a:	b8 00 00 00 00       	mov    $0x0,%eax
  28227f:	e9 c3 00 00 00       	jmp    282347 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282284:	8b 45 08             	mov    0x8(%ebp),%eax
  282287:	8b 00                	mov    (%eax),%eax
  282289:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28228e:	0f 8f 8a 00 00 00    	jg     28231e <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282294:	8b 45 08             	mov    0x8(%ebp),%eax
  282297:	8b 00                	mov    (%eax),%eax
  282299:	83 e8 01             	sub    $0x1,%eax
  28229c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28229f:	eb 28                	jmp    2822c9 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  2822a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2822a4:	83 c0 01             	add    $0x1,%eax
  2822a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2822aa:	8d 58 02             	lea    0x2(%eax),%ebx
  2822ad:	8b 45 08             	mov    0x8(%ebp),%eax
  2822b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2822b3:	83 c2 02             	add    $0x2,%edx
  2822b6:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2822b9:	8b 02                	mov    (%edx),%eax
  2822bb:	8b 52 04             	mov    0x4(%edx),%edx
  2822be:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2822c1:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  2822c5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  2822c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2822cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2822cf:	7d d0                	jge    2822a1 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2822d1:	8b 45 08             	mov    0x8(%ebp),%eax
  2822d4:	8b 50 04             	mov    0x4(%eax),%edx
  2822d7:	8b 45 08             	mov    0x8(%ebp),%eax
  2822da:	8b 00                	mov    (%eax),%eax
  2822dc:	39 c2                	cmp    %eax,%edx
  2822de:	7d 0b                	jge    2822eb <memman_free+0x1f1>
  2822e0:	8b 45 08             	mov    0x8(%ebp),%eax
  2822e3:	8b 10                	mov    (%eax),%edx
  2822e5:	8b 45 08             	mov    0x8(%ebp),%eax
  2822e8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2822eb:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ee:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822f1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822f4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2822f7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2822fa:	8b 45 08             	mov    0x8(%ebp),%eax
  2822fd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282300:	8d 4a 02             	lea    0x2(%edx),%ecx
  282303:	8b 55 10             	mov    0x10(%ebp),%edx
  282306:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  28230a:	8b 45 08             	mov    0x8(%ebp),%eax
  28230d:	8b 00                	mov    (%eax),%eax
  28230f:	8d 50 01             	lea    0x1(%eax),%edx
  282312:	8b 45 08             	mov    0x8(%ebp),%eax
  282315:	89 10                	mov    %edx,(%eax)
		return 0;
  282317:	b8 00 00 00 00       	mov    $0x0,%eax
  28231c:	eb 29                	jmp    282347 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  28231e:	8b 45 08             	mov    0x8(%ebp),%eax
  282321:	8b 40 0c             	mov    0xc(%eax),%eax
  282324:	8d 50 01             	lea    0x1(%eax),%edx
  282327:	8b 45 08             	mov    0x8(%ebp),%eax
  28232a:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  28232d:	8b 45 08             	mov    0x8(%ebp),%eax
  282330:	8b 40 08             	mov    0x8(%eax),%eax
  282333:	89 c2                	mov    %eax,%edx
  282335:	8b 45 10             	mov    0x10(%ebp),%eax
  282338:	01 d0                	add    %edx,%eax
  28233a:	89 c2                	mov    %eax,%edx
  28233c:	8b 45 08             	mov    0x8(%ebp),%eax
  28233f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282342:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282347:	83 c4 10             	add    $0x10,%esp
  28234a:	5b                   	pop    %ebx
  28234b:	5d                   	pop    %ebp
  28234c:	c3                   	ret    

0028234d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28234d:	55                   	push   %ebp
  28234e:	89 e5                	mov    %esp,%ebp
  282350:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282353:	8b 45 0c             	mov    0xc(%ebp),%eax
  282356:	05 ff 0f 00 00       	add    $0xfff,%eax
  28235b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282360:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282363:	ff 75 0c             	pushl  0xc(%ebp)
  282366:	ff 75 08             	pushl  0x8(%ebp)
  282369:	e8 a3 fc ff ff       	call   282011 <memman_alloc>
  28236e:	83 c4 08             	add    $0x8,%esp
  282371:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282374:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282377:	c9                   	leave  
  282378:	c3                   	ret    

00282379 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282379:	55                   	push   %ebp
  28237a:	89 e5                	mov    %esp,%ebp
  28237c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28237f:	8b 45 10             	mov    0x10(%ebp),%eax
  282382:	05 ff 0f 00 00       	add    $0xfff,%eax
  282387:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28238c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28238f:	ff 75 10             	pushl  0x10(%ebp)
  282392:	ff 75 0c             	pushl  0xc(%ebp)
  282395:	ff 75 08             	pushl  0x8(%ebp)
  282398:	e8 5d fd ff ff       	call   2820fa <memman_free>
  28239d:	83 c4 0c             	add    $0xc,%esp
  2823a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  2823a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  2823a6:	c9                   	leave  
  2823a7:	c3                   	ret    

002823a8 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  2823a8:	55                   	push   %ebp
  2823a9:	89 e5                	mov    %esp,%ebp
  2823ab:	57                   	push   %edi
  2823ac:	56                   	push   %esi
  2823ad:	53                   	push   %ebx
  2823ae:	83 ec 14             	sub    $0x14,%esp
  2823b1:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  2823b4:	68 14 2c 00 00       	push   $0x2c14
  2823b9:	57                   	push   %edi
  2823ba:	e8 8e ff ff ff       	call   28234d <memman_alloc_4k>
  2823bf:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  2823c1:	83 c4 10             	add    $0x10,%esp
  2823c4:	85 c0                	test   %eax,%eax
  2823c6:	74 6a                	je     282432 <shtctl_init+0x8a>
  2823c8:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  2823ca:	8b 45 0c             	mov    0xc(%ebp),%eax
  2823cd:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  2823cf:	83 ec 08             	sub    $0x8,%esp
  2823d2:	8b 45 10             	mov    0x10(%ebp),%eax
  2823d5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2823d9:	50                   	push   %eax
  2823da:	57                   	push   %edi
  2823db:	e8 6d ff ff ff       	call   28234d <memman_alloc_4k>
  2823e0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2823e3:	83 c4 10             	add    $0x10,%esp
  2823e6:	85 c0                	test   %eax,%eax
  2823e8:	75 19                	jne    282403 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2823ea:	83 ec 04             	sub    $0x4,%esp
  2823ed:	68 14 2c 00 00       	push   $0x2c14
  2823f2:	56                   	push   %esi
  2823f3:	57                   	push   %edi
  2823f4:	e8 80 ff ff ff       	call   282379 <memman_free_4k>
		ctl = 0;
		goto err;
  2823f9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2823fc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  282401:	eb 2f                	jmp    282432 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  282403:	8b 45 10             	mov    0x10(%ebp),%eax
  282406:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  282409:	8b 45 14             	mov    0x14(%ebp),%eax
  28240c:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  28240f:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  282416:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  28241c:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  282422:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  282428:	89 70 04             	mov    %esi,0x4(%eax)
  28242b:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  28242e:	39 d8                	cmp    %ebx,%eax
  282430:	75 f0                	jne    282422 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
err:
	return ctl;
}
  282432:	89 f0                	mov    %esi,%eax
  282434:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282437:	5b                   	pop    %ebx
  282438:	5e                   	pop    %esi
  282439:	5f                   	pop    %edi
  28243a:	5d                   	pop    %ebp
  28243b:	c3                   	ret    

0028243c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28243c:	55                   	push   %ebp
  28243d:	89 e5                	mov    %esp,%ebp
  28243f:	56                   	push   %esi
  282440:	53                   	push   %ebx
  282441:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282444:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28244b:	74 12                	je     28245f <sheet_alloc+0x23>
  28244d:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282453:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282458:	83 3a 00             	cmpl   $0x0,(%edx)
  28245b:	75 3c                	jne    282499 <sheet_alloc+0x5d>
  28245d:	eb 05                	jmp    282464 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28245f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282464:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28246b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28246e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282471:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282478:	00 00 00 
			sht->height = -1;
  28247b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  282482:	ff ff ff 
			sht->task = 0;
  282485:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  28248c:	00 00 00 00 
			return sht;
  282490:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  282497:	eb 12                	jmp    2824ab <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282499:	83 c0 01             	add    $0x1,%eax
  28249c:	83 c2 28             	add    $0x28,%edx
  28249f:	3d 00 01 00 00       	cmp    $0x100,%eax
  2824a4:	75 b2                	jne    282458 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  2824a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2824ab:	5b                   	pop    %ebx
  2824ac:	5e                   	pop    %esi
  2824ad:	5d                   	pop    %ebp
  2824ae:	c3                   	ret    

002824af <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  2824af:	55                   	push   %ebp
  2824b0:	89 e5                	mov    %esp,%ebp
  2824b2:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  2824b5:	8b 55 0c             	mov    0xc(%ebp),%edx
  2824b8:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  2824ba:	8b 55 10             	mov    0x10(%ebp),%edx
  2824bd:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  2824c0:	8b 55 14             	mov    0x14(%ebp),%edx
  2824c3:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  2824c6:	8b 55 18             	mov    0x18(%ebp),%edx
  2824c9:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  2824cc:	5d                   	pop    %ebp
  2824cd:	c3                   	ret    

002824ce <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  2824ce:	55                   	push   %ebp
  2824cf:	89 e5                	mov    %esp,%ebp
  2824d1:	57                   	push   %edi
  2824d2:	56                   	push   %esi
  2824d3:	53                   	push   %ebx
  2824d4:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  2824d7:	8b 45 08             	mov    0x8(%ebp),%eax
  2824da:	8b 00                	mov    (%eax),%eax
  2824dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2824df:	8b 45 08             	mov    0x8(%ebp),%eax
  2824e2:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2824e6:	0f 88 80 00 00 00    	js     28256c <sheet_refresh_ob+0x9e>
  2824ec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2824f3:	8b 45 08             	mov    0x8(%ebp),%eax
  2824f6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2824f9:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2824fd:	8b 02                	mov    (%edx),%eax
  2824ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  282502:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  282506:	7e 55                	jle    28255d <sheet_refresh_ob+0x8f>
  282508:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  28250d:	89 f8                	mov    %edi,%eax
  28250f:	03 42 10             	add    0x10(%edx),%eax
  282512:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  282515:	8b 4a 04             	mov    0x4(%edx),%ecx
  282518:	85 c9                	test   %ecx,%ecx
  28251a:	7e 39                	jle    282555 <sheet_refresh_ob+0x87>
  28251c:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  282521:	0f af cf             	imul   %edi,%ecx
  282524:	8b 75 f0             	mov    -0x10(%ebp),%esi
  282527:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28252a:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  28252e:	0f b6 cb             	movzbl %bl,%ecx
  282531:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282534:	74 15                	je     28254b <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  282536:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282539:	8b 75 ec             	mov    -0x14(%ebp),%esi
  28253c:	0f af 71 08          	imul   0x8(%ecx),%esi
  282540:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282543:	01 c1                	add    %eax,%ecx
  282545:	03 4a 0c             	add    0xc(%edx),%ecx
  282548:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28254b:	83 c0 01             	add    $0x1,%eax
  28254e:	8b 4a 04             	mov    0x4(%edx),%ecx
  282551:	39 c1                	cmp    %eax,%ecx
  282553:	7f cc                	jg     282521 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282555:	83 c7 01             	add    $0x1,%edi
  282558:	39 7a 08             	cmp    %edi,0x8(%edx)
  28255b:	7f b0                	jg     28250d <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28255d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282561:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282564:	8b 7d 08             	mov    0x8(%ebp),%edi
  282567:	39 47 10             	cmp    %eax,0x10(%edi)
  28256a:	7d 87                	jge    2824f3 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28256c:	83 c4 10             	add    $0x10,%esp
  28256f:	5b                   	pop    %ebx
  282570:	5e                   	pop    %esi
  282571:	5f                   	pop    %edi
  282572:	5d                   	pop    %ebp
  282573:	c3                   	ret    

00282574 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282574:	55                   	push   %ebp
  282575:	89 e5                	mov    %esp,%ebp
  282577:	57                   	push   %edi
  282578:	56                   	push   %esi
  282579:	53                   	push   %ebx
  28257a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28257d:	8b 45 08             	mov    0x8(%ebp),%eax
  282580:	8b 00                	mov    (%eax),%eax
  282582:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282585:	8b 45 08             	mov    0x8(%ebp),%eax
  282588:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  28258c:	0f 88 a7 00 00 00    	js     282639 <sheet_refreshsub1+0xc5>
  282592:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  282599:	8b 45 08             	mov    0x8(%ebp),%eax
  28259c:	8b 7d e0             	mov    -0x20(%ebp),%edi
  28259f:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  2825a3:	8b 01                	mov    (%ecx),%eax
  2825a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  2825a8:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  2825ac:	7e 78                	jle    282626 <sheet_refreshsub1+0xb2>
  2825ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  2825b5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  2825b8:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  2825bb:	8b 71 04             	mov    0x4(%ecx),%esi
  2825be:	85 f6                	test   %esi,%esi
  2825c0:	7e 58                	jle    28261a <sheet_refreshsub1+0xa6>
  2825c2:	b8 00 00 00 00       	mov    $0x0,%eax
  2825c7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  2825ca:	89 c2                	mov    %eax,%edx
  2825cc:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  2825cf:	3b 55 0c             	cmp    0xc(%ebp),%edx
  2825d2:	7c 3c                	jl     282610 <sheet_refreshsub1+0x9c>
  2825d4:	3b 55 14             	cmp    0x14(%ebp),%edx
  2825d7:	7d 37                	jge    282610 <sheet_refreshsub1+0x9c>
  2825d9:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2825dc:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2825df:	7c 2f                	jl     282610 <sheet_refreshsub1+0x9c>
  2825e1:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2825e4:	7d 2a                	jge    282610 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2825e6:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2825ea:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2825ed:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2825f0:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2825f4:	89 f3                	mov    %esi,%ebx
  2825f6:	0f b6 fb             	movzbl %bl,%edi
  2825f9:	3b 79 14             	cmp    0x14(%ecx),%edi
  2825fc:	74 12                	je     282610 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2825fe:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282601:	8b 7d f0             	mov    -0x10(%ebp),%edi
  282604:	0f af 7b 08          	imul   0x8(%ebx),%edi
  282608:	03 55 e4             	add    -0x1c(%ebp),%edx
  28260b:	89 f3                	mov    %esi,%ebx
  28260d:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  282610:	83 c0 01             	add    $0x1,%eax
  282613:	8b 71 04             	mov    0x4(%ecx),%esi
  282616:	39 c6                	cmp    %eax,%esi
  282618:	7f b0                	jg     2825ca <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  28261a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  28261e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  282621:	39 41 08             	cmp    %eax,0x8(%ecx)
  282624:	7f 8f                	jg     2825b5 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282626:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  28262a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  28262d:	8b 7d 08             	mov    0x8(%ebp),%edi
  282630:	39 47 10             	cmp    %eax,0x10(%edi)
  282633:	0f 8d 60 ff ff ff    	jge    282599 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  282639:	83 c4 14             	add    $0x14,%esp
  28263c:	5b                   	pop    %ebx
  28263d:	5e                   	pop    %esi
  28263e:	5f                   	pop    %edi
  28263f:	5d                   	pop    %ebp
  282640:	c3                   	ret    

00282641 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282641:	55                   	push   %ebp
  282642:	89 e5                	mov    %esp,%ebp
  282644:	57                   	push   %edi
  282645:	56                   	push   %esi
  282646:	53                   	push   %ebx
  282647:	83 ec 34             	sub    $0x34,%esp
  28264a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28264d:	8b 55 10             	mov    0x10(%ebp),%edx
  282650:	8b 75 14             	mov    0x14(%ebp),%esi
  282653:	8b 7d 18             	mov    0x18(%ebp),%edi
  282656:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  282659:	8b 45 08             	mov    0x8(%ebp),%eax
  28265c:	8b 00                	mov    (%eax),%eax
  28265e:	89 45 c0             	mov    %eax,-0x40(%ebp)
  282661:	8b 45 08             	mov    0x8(%ebp),%eax
  282664:	8b 40 04             	mov    0x4(%eax),%eax
  282667:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28266a:	b8 00 00 00 00       	mov    $0x0,%eax
  28266f:	85 c9                	test   %ecx,%ecx
  282671:	0f 48 c8             	cmovs  %eax,%ecx
  282674:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  282677:	85 d2                	test   %edx,%edx
  282679:	0f 48 d0             	cmovs  %eax,%edx
  28267c:	89 55 c8             	mov    %edx,-0x38(%ebp)
	struct SHEET *sht;

	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28267f:	8b 55 08             	mov    0x8(%ebp),%edx
  282682:	8b 52 08             	mov    0x8(%edx),%edx
  282685:	39 f2                	cmp    %esi,%edx
  282687:	0f 4e f2             	cmovle %edx,%esi
  28268a:	89 75 d0             	mov    %esi,-0x30(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  28268d:	8b 55 08             	mov    0x8(%ebp),%edx
  282690:	8b 52 0c             	mov    0xc(%edx),%edx
  282693:	39 fa                	cmp    %edi,%edx
  282695:	0f 4e fa             	cmovle %edx,%edi
  282698:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28269b:	85 db                	test   %ebx,%ebx
  28269d:	0f 49 c3             	cmovns %ebx,%eax
  2826a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  2826a3:	8b 7d 08             	mov    0x8(%ebp),%edi
  2826a6:	3b 47 10             	cmp    0x10(%edi),%eax
  2826a9:	0f 8f 9c 01 00 00    	jg     28284b <sheet_refreshsub2+0x20a>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  2826af:	8b 45 08             	mov    0x8(%ebp),%eax
  2826b2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  2826b5:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2826b9:	8b 02                	mov    (%edx),%eax
  2826bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  2826be:	8b 72 0c             	mov    0xc(%edx),%esi
		by0 = vy0 - sht->vy0;
  2826c1:	8b 7a 10             	mov    0x10(%edx),%edi
		bx1 = vx1 - sht->vx0;
  2826c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2826c7:	29 f0                	sub    %esi,%eax
		by1 = vy1 - sht->vy0;
  2826c9:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  2826cc:	89 7d f0             	mov    %edi,-0x10(%ebp)
  2826cf:	29 fb                	sub    %edi,%ebx
  2826d1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  2826d4:	29 f1                	sub    %esi,%ecx
  2826d6:	bf 00 00 00 00       	mov    $0x0,%edi
  2826db:	0f 48 cf             	cmovs  %edi,%ecx
  2826de:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  2826e1:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2826e4:	2b 4d f0             	sub    -0x10(%ebp),%ecx
  2826e7:	0f 49 f9             	cmovns %ecx,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2826ea:	8b 4a 04             	mov    0x4(%edx),%ecx
  2826ed:	39 c8                	cmp    %ecx,%eax
  2826ef:	0f 4e c8             	cmovle %eax,%ecx
  2826f2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2826f5:	8b 42 08             	mov    0x8(%edx),%eax
  2826f8:	39 c3                	cmp    %eax,%ebx
  2826fa:	0f 4e c3             	cmovle %ebx,%eax
  2826fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(sht->col_inv == -1)
  282700:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  282704:	74 0d                	je     282713 <sheet_refreshsub2+0xd2>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  282706:	39 f8                	cmp    %edi,%eax
  282708:	0f 8f dd 00 00 00    	jg     2827eb <sheet_refreshsub2+0x1aa>
  28270e:	e9 25 01 00 00       	jmp    282838 <sheet_refreshsub2+0x1f7>
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
  282713:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282716:	09 f0                	or     %esi,%eax
  282718:	a8 03                	test   $0x3,%al
  28271a:	75 06                	jne    282722 <sheet_refreshsub2+0xe1>
  28271c:	f6 45 f0 03          	testb  $0x3,-0x10(%ebp)
  282720:	74 0c                	je     28272e <sheet_refreshsub2+0xed>
  282722:	89 fe                	mov    %edi,%esi
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  282724:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  282727:	7f 71                	jg     28279a <sheet_refreshsub2+0x159>
  282729:	e9 0a 01 00 00       	jmp    282838 <sheet_refreshsub2+0x1f7>
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
  28272e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282731:	01 c6                	add    %eax,%esi
  282733:	89 75 e4             	mov    %esi,-0x1c(%ebp)
				bx1 = (bx1-bx0)/4;
  282736:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  282739:	29 c3                	sub    %eax,%ebx
  28273b:	89 d8                	mov    %ebx,%eax
  28273d:	8d 4b 03             	lea    0x3(%ebx),%ecx
  282740:	85 db                	test   %ebx,%ebx
  282742:	0f 48 c1             	cmovs  %ecx,%eax
  282745:	c1 f8 02             	sar    $0x2,%eax
  282748:	89 c6                	mov    %eax,%esi
				for(by=by0;by<by1;by++)
  28274a:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  28274d:	0f 8e e5 00 00 00    	jle    282838 <sheet_refreshsub2+0x1f7>
				{

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
  282753:	89 f9                	mov    %edi,%ecx
  282755:	03 4a 10             	add    0x10(%edx),%ecx
  282758:	8b 45 08             	mov    0x8(%ebp),%eax
  28275b:	0f af 48 08          	imul   0x8(%eax),%ecx
  28275f:	03 4d e4             	add    -0x1c(%ebp),%ecx
					int *q = (int *) &buf[by*sht->bxsize+bx0];
  282762:	89 fb                	mov    %edi,%ebx
  282764:	0f af 5a 04          	imul   0x4(%edx),%ebx
  282768:	03 5d d8             	add    -0x28(%ebp),%ebx

					for(bx=0;bx<bx1;bx++)
  28276b:	85 f6                	test   %esi,%esi
  28276d:	7e 1e                	jle    28278d <sheet_refreshsub2+0x14c>
  28276f:	b8 00 00 00 00       	mov    $0x0,%eax
					{
						p[bx]=q[bx];
  282774:	03 5d ec             	add    -0x14(%ebp),%ebx
  282777:	03 4d e8             	add    -0x18(%ebp),%ecx
  28277a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28277d:	8b 14 83             	mov    (%ebx,%eax,4),%edx
  282780:	89 14 81             	mov    %edx,(%ecx,%eax,4)

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
					int *q = (int *) &buf[by*sht->bxsize+bx0];

					for(bx=0;bx<bx1;bx++)
  282783:	83 c0 01             	add    $0x1,%eax
  282786:	39 c6                	cmp    %eax,%esi
  282788:	75 f3                	jne    28277d <sheet_refreshsub2+0x13c>
  28278a:	8b 55 f0             	mov    -0x10(%ebp),%edx
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
				bx1 = (bx1-bx0)/4;
				for(by=by0;by<by1;by++)
  28278d:	83 c7 01             	add    $0x1,%edi
  282790:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282793:	75 be                	jne    282753 <sheet_refreshsub2+0x112>
  282795:	e9 9e 00 00 00       	jmp    282838 <sheet_refreshsub2+0x1f7>
			}
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
  28279a:	89 f7                	mov    %esi,%edi
  28279c:	03 7a 10             	add    0x10(%edx),%edi
					for(bx=bx0;bx<bx1;bx++)
  28279f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2827a2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2827a5:	7e 3a                	jle    2827e1 <sheet_refreshsub2+0x1a0>
  2827a7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  2827aa:	89 7d e0             	mov    %edi,-0x20(%ebp)
					{
						vx = sht->vx0+bx;
						map[vy*ctl->xsize+vx] = buf[by*sht->bxsize+bx];
  2827ad:	89 f1                	mov    %esi,%ecx
  2827af:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2827b2:	0f af 4f 04          	imul   0x4(%edi),%ecx
  2827b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2827b9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  2827bc:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
  2827c0:	89 da                	mov    %ebx,%edx
  2827c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2827c5:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  2827c8:	0f af 59 08          	imul   0x8(%ecx),%ebx
  2827cc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2827cf:	01 c1                	add    %eax,%ecx
  2827d1:	03 4f 0c             	add    0xc(%edi),%ecx
  2827d4:	88 14 19             	mov    %dl,(%ecx,%ebx,1)
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
					for(bx=bx0;bx<bx1;bx++)
  2827d7:	83 c0 01             	add    $0x1,%eax
  2827da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  2827dd:	75 ce                	jne    2827ad <sheet_refreshsub2+0x16c>
  2827df:	89 fa                	mov    %edi,%edx
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  2827e1:	83 c6 01             	add    $0x1,%esi
  2827e4:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  2827e7:	75 b1                	jne    28279a <sheet_refreshsub2+0x159>
  2827e9:	eb 4d                	jmp    282838 <sheet_refreshsub2+0x1f7>
		}
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
  2827eb:	89 f8                	mov    %edi,%eax
  2827ed:	03 42 10             	add    0x10(%edx),%eax
  2827f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				for(bx=bx0;bx<bx1;bx++)
  2827f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2827f6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2827f9:	7e 35                	jle    282830 <sheet_refreshsub2+0x1ef>
				{
					vx = sht->vx0+bx;
					c  = buf[by*sht->bxsize+bx];
  2827fb:	89 f9                	mov    %edi,%ecx
  2827fd:	0f af 4a 04          	imul   0x4(%edx),%ecx
  282801:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282804:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  282807:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
					if(c!=sht->col_inv)
  28280b:	0f b6 cb             	movzbl %bl,%ecx
  28280e:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282811:	74 15                	je     282828 <sheet_refreshsub2+0x1e7>
						map[vy*ctl->xsize+vx] = c;
  282813:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282816:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  282819:	0f af 71 08          	imul   0x8(%ecx),%esi
  28281d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282820:	01 c1                	add    %eax,%ecx
  282822:	03 4a 0c             	add    0xc(%edx),%ecx
  282825:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
				for(bx=bx0;bx<bx1;bx++)
  282828:	83 c0 01             	add    $0x1,%eax
  28282b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  28282e:	75 cb                	jne    2827fb <sheet_refreshsub2+0x1ba>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  282830:	83 c7 01             	add    $0x1,%edi
  282833:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282836:	75 b3                	jne    2827eb <sheet_refreshsub2+0x1aa>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282838:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
  28283c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28283f:	8b 7d 08             	mov    0x8(%ebp),%edi
  282842:	39 47 10             	cmp    %eax,0x10(%edi)
  282845:	0f 8d 64 fe ff ff    	jge    2826af <sheet_refreshsub2+0x6e>
				}
			}
		}

	}
	if(((vx1-vx0)&3)==0)
  28284b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  28284e:	2b 45 c4             	sub    -0x3c(%ebp),%eax
  282851:	a8 03                	test   $0x3,%al
  282853:	74 0d                	je     282862 <sheet_refreshsub2+0x221>
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  282855:	8b 7d c8             	mov    -0x38(%ebp),%edi
  282858:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  28285b:	7f 79                	jg     2828d6 <sheet_refreshsub2+0x295>
  28285d:	e9 8c 00 00 00       	jmp    2828ee <sheet_refreshsub2+0x2ad>
		}

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
  282862:	8d 50 03             	lea    0x3(%eax),%edx
  282865:	85 c0                	test   %eax,%eax
  282867:	0f 48 c2             	cmovs  %edx,%eax
  28286a:	c1 f8 02             	sar    $0x2,%eax
  28286d:	89 c3                	mov    %eax,%ebx
		for(vy=vy0;vy<vy1;vy++)
  28286f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282872:	39 45 cc             	cmp    %eax,-0x34(%ebp)
  282875:	7e 77                	jle    2828ee <sheet_refreshsub2+0x2ad>
  282877:	89 c1                	mov    %eax,%ecx
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
  282879:	8b 45 08             	mov    0x8(%ebp),%eax
  28287c:	89 ca                	mov    %ecx,%edx
  28287e:	0f af 50 08          	imul   0x8(%eax),%edx
  282882:	03 55 c4             	add    -0x3c(%ebp),%edx
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  282885:	85 db                	test   %ebx,%ebx
  282887:	7e 1b                	jle    2828a4 <sheet_refreshsub2+0x263>
  282889:	b8 00 00 00 00       	mov    $0x0,%eax
				d[vx] = s[vx];
  28288e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  282891:	8d 34 17             	lea    (%edi,%edx,1),%esi
  282894:	03 55 c0             	add    -0x40(%ebp),%edx
  282897:	8b 3c 86             	mov    (%esi,%eax,4),%edi
  28289a:	89 3c 82             	mov    %edi,(%edx,%eax,4)
		for(vy=vy0;vy<vy1;vy++)
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  28289d:	83 c0 01             	add    $0x1,%eax
  2828a0:	39 c3                	cmp    %eax,%ebx
  2828a2:	75 f3                	jne    282897 <sheet_refreshsub2+0x256>

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
		for(vy=vy0;vy<vy1;vy++)
  2828a4:	83 c1 01             	add    $0x1,%ecx
  2828a7:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  2828aa:	75 cd                	jne    282879 <sheet_refreshsub2+0x238>
  2828ac:	eb 40                	jmp    2828ee <sheet_refreshsub2+0x2ad>
  2828ae:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  2828b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2828b4:	0f af 47 08          	imul   0x8(%edi),%eax
  2828b8:	01 d0                	add    %edx,%eax
  2828ba:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  2828be:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
  2828c1:	83 c2 01             	add    $0x1,%edx
  2828c4:	3b 55 d0             	cmp    -0x30(%ebp),%edx
  2828c7:	75 e8                	jne    2828b1 <sheet_refreshsub2+0x270>
  2828c9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  2828cc:	83 c1 01             	add    $0x1,%ecx
  2828cf:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  2828d2:	74 1a                	je     2828ee <sheet_refreshsub2+0x2ad>
  2828d4:	eb 0c                	jmp    2828e2 <sheet_refreshsub2+0x2a1>
  2828d6:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  2828d9:	8b 75 e8             	mov    -0x18(%ebp),%esi
  2828dc:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2828df:	8b 7d 08             	mov    0x8(%ebp),%edi
			for(vx=vx0;vx<vx1;vx++)
  2828e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  2828e5:	89 c2                	mov    %eax,%edx
  2828e7:	39 45 d0             	cmp    %eax,-0x30(%ebp)
  2828ea:	7f c2                	jg     2828ae <sheet_refreshsub2+0x26d>
  2828ec:	eb de                	jmp    2828cc <sheet_refreshsub2+0x28b>
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
	}
}
  2828ee:	83 c4 34             	add    $0x34,%esp
  2828f1:	5b                   	pop    %ebx
  2828f2:	5e                   	pop    %esi
  2828f3:	5f                   	pop    %edi
  2828f4:	5d                   	pop    %ebp
  2828f5:	c3                   	ret    

002828f6 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  2828f6:	55                   	push   %ebp
  2828f7:	89 e5                	mov    %esp,%ebp
  2828f9:	53                   	push   %ebx
  2828fa:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
	struct SHTCTL *ctl = sht->ctl;
	sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  2828fd:	8b 48 10             	mov    0x10(%eax),%ecx
  282900:	8b 50 0c             	mov    0xc(%eax),%edx
  282903:	ff 70 18             	pushl  0x18(%eax)
  282906:	89 cb                	mov    %ecx,%ebx
  282908:	03 5d 18             	add    0x18(%ebp),%ebx
  28290b:	53                   	push   %ebx
  28290c:	89 d3                	mov    %edx,%ebx
  28290e:	03 5d 14             	add    0x14(%ebp),%ebx
  282911:	53                   	push   %ebx
  282912:	03 4d 10             	add    0x10(%ebp),%ecx
  282915:	51                   	push   %ecx
  282916:	03 55 0c             	add    0xc(%ebp),%edx
  282919:	52                   	push   %edx
  28291a:	ff 70 20             	pushl  0x20(%eax)
  28291d:	e8 1f fd ff ff       	call   282641 <sheet_refreshsub2>
	//}
	return;
  282922:	83 c4 18             	add    $0x18,%esp
}
  282925:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282928:	c9                   	leave  
  282929:	c3                   	ret    

0028292a <sheet_updown>:
}


//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  28292a:	55                   	push   %ebp
  28292b:	89 e5                	mov    %esp,%ebp
  28292d:	57                   	push   %edi
  28292e:	56                   	push   %esi
  28292f:	53                   	push   %ebx
  282930:	8b 75 08             	mov    0x8(%ebp),%esi
  282933:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  282936:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  282939:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  28293c:	8b 79 10             	mov    0x10(%ecx),%edi
  28293f:	8d 57 01             	lea    0x1(%edi),%edx
  282942:	39 da                	cmp    %ebx,%edx
  282944:	0f 4f d3             	cmovg  %ebx,%edx
  282947:	85 d2                	test   %edx,%edx
  282949:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  28294e:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282951:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282954:	39 d8                	cmp    %ebx,%eax
  282956:	7e 59                	jle    2829b1 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282958:	85 db                	test   %ebx,%ebx
  28295a:	79 09                	jns    282965 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28295c:	8b 59 10             	mov    0x10(%ecx),%ebx
  28295f:	39 d8                	cmp    %ebx,%eax
  282961:	7c 1c                	jl     28297f <sheet_updown+0x55>
  282963:	eb 31                	jmp    282996 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282965:	8d 50 ff             	lea    -0x1(%eax),%edx
  282968:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28296c:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282970:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282973:	89 d0                	mov    %edx,%eax
  282975:	39 d3                	cmp    %edx,%ebx
  282977:	75 ec                	jne    282965 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282979:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28297d:	eb 1d                	jmp    28299c <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28297f:	8d 50 01             	lea    0x1(%eax),%edx
  282982:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282986:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28298a:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28298d:	8b 59 10             	mov    0x10(%ecx),%ebx
  282990:	89 d0                	mov    %edx,%eax
  282992:	39 d3                	cmp    %edx,%ebx
  282994:	7f e9                	jg     28297f <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282996:	83 eb 01             	sub    $0x1,%ebx
  282999:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28299c:	ff 76 08             	pushl  0x8(%esi)
  28299f:	ff 76 04             	pushl  0x4(%esi)
  2829a2:	6a 00                	push   $0x0
  2829a4:	6a 00                	push   $0x0
  2829a6:	56                   	push   %esi
  2829a7:	e8 4a ff ff ff       	call   2828f6 <sheet_refresh>
  2829ac:	83 c4 14             	add    $0x14,%esp
  2829af:	eb 5a                	jmp    282a0b <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  2829b1:	39 d8                	cmp    %ebx,%eax
  2829b3:	7d 56                	jge    282a0b <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  2829b5:	85 c0                	test   %eax,%eax
  2829b7:	78 1a                	js     2829d3 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  2829b9:	8d 50 01             	lea    0x1(%eax),%edx
  2829bc:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  2829c0:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  2829c4:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  2829c7:	89 d0                	mov    %edx,%eax
  2829c9:	39 d3                	cmp    %edx,%ebx
  2829cb:	75 ec                	jne    2829b9 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2829cd:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  2829d1:	eb 25                	jmp    2829f8 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  2829d3:	8b 41 10             	mov    0x10(%ecx),%eax
  2829d6:	8d 50 01             	lea    0x1(%eax),%edx
  2829d9:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  2829dc:	39 d3                	cmp    %edx,%ebx
  2829de:	7d 14                	jge    2829f4 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  2829e0:	8d 42 ff             	lea    -0x1(%edx),%eax
  2829e3:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  2829e7:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  2829eb:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  2829ee:	89 c2                	mov    %eax,%edx
  2829f0:	39 c3                	cmp    %eax,%ebx
  2829f2:	75 ec                	jne    2829e0 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2829f4:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  2829f8:	ff 76 08             	pushl  0x8(%esi)
  2829fb:	ff 76 04             	pushl  0x4(%esi)
  2829fe:	6a 00                	push   $0x0
  282a00:	6a 00                	push   $0x0
  282a02:	56                   	push   %esi
  282a03:	e8 ee fe ff ff       	call   2828f6 <sheet_refresh>
  282a08:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  282a0b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282a0e:	5b                   	pop    %ebx
  282a0f:	5e                   	pop    %esi
  282a10:	5f                   	pop    %edi
  282a11:	5d                   	pop    %ebp
  282a12:	c3                   	ret    

00282a13 <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  282a13:	55                   	push   %ebp
  282a14:	89 e5                	mov    %esp,%ebp
  282a16:	57                   	push   %edi
  282a17:	56                   	push   %esi
  282a18:	53                   	push   %ebx
  282a19:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282a1c:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  282a1f:	8b 43 0c             	mov    0xc(%ebx),%eax
  282a22:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  282a25:	8b 7d 0c             	mov    0xc(%ebp),%edi
  282a28:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  282a2b:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  282a2e:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a32:	78 36                	js     282a6a <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  282a34:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  282a37:	6a 00                	push   $0x0
  282a39:	89 d1                	mov    %edx,%ecx
  282a3b:	03 4b 08             	add    0x8(%ebx),%ecx
  282a3e:	51                   	push   %ecx
  282a3f:	89 c1                	mov    %eax,%ecx
  282a41:	03 4b 04             	add    0x4(%ebx),%ecx
  282a44:	51                   	push   %ecx
  282a45:	52                   	push   %edx
  282a46:	50                   	push   %eax
  282a47:	57                   	push   %edi
  282a48:	e8 f4 fb ff ff       	call   282641 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  282a4d:	ff 73 18             	pushl  0x18(%ebx)
  282a50:	89 f0                	mov    %esi,%eax
  282a52:	03 43 08             	add    0x8(%ebx),%eax
  282a55:	50                   	push   %eax
  282a56:	8b 45 0c             	mov    0xc(%ebp),%eax
  282a59:	03 43 04             	add    0x4(%ebx),%eax
  282a5c:	50                   	push   %eax
  282a5d:	56                   	push   %esi
  282a5e:	ff 75 0c             	pushl  0xc(%ebp)
  282a61:	57                   	push   %edi
  282a62:	e8 da fb ff ff       	call   282641 <sheet_refreshsub2>
  282a67:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  282a6a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282a6d:	5b                   	pop    %ebx
  282a6e:	5e                   	pop    %esi
  282a6f:	5f                   	pop    %edi
  282a70:	5d                   	pop    %ebp
  282a71:	c3                   	ret    

00282a72 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282a72:	55                   	push   %ebp
  282a73:	89 e5                	mov    %esp,%ebp
  282a75:	53                   	push   %ebx
  282a76:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282a79:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a7d:	78 0b                	js     282a8a <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282a7f:	6a ff                	push   $0xffffffff
  282a81:	53                   	push   %ebx
  282a82:	e8 a3 fe ff ff       	call   28292a <sheet_updown>
  282a87:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  282a8a:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282a91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282a94:	c9                   	leave  
  282a95:	c3                   	ret    

00282a96 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282a96:	55                   	push   %ebp
  282a97:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  282a99:	80 3d f0 7e 28 00 00 	cmpb   $0x0,0x287ef0
  282aa0:	74 11                	je     282ab3 <timer_alloc+0x1d>
  282aa2:	ba 04 7f 28 00       	mov    $0x287f04,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282aa7:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  282aac:	80 3a 00             	cmpb   $0x0,(%edx)
  282aaf:	75 2b                	jne    282adc <timer_alloc+0x46>
  282ab1:	eb 05                	jmp    282ab8 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282ab3:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282ab8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282abf:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282ac2:	8d 0c 8d e0 7e 28 00 	lea    0x287ee0(,%ecx,4),%ecx
  282ac9:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  282acd:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  282ad1:	01 d0                	add    %edx,%eax
  282ad3:	8d 04 85 e8 7e 28 00 	lea    0x287ee8(,%eax,4),%eax
  282ada:	eb 12                	jmp    282aee <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282adc:	83 c0 01             	add    $0x1,%eax
  282adf:	83 c2 14             	add    $0x14,%edx
  282ae2:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282ae7:	75 c3                	jne    282aac <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282ae9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282aee:	5d                   	pop    %ebp
  282aef:	c3                   	ret    

00282af0 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282af0:	55                   	push   %ebp
  282af1:	89 e5                	mov    %esp,%ebp
  282af3:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282af6:	6a 34                	push   $0x34
  282af8:	6a 43                	push   $0x43
  282afa:	e8 07 e0 ff ff       	call   280b06 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282aff:	83 c4 08             	add    $0x8,%esp
  282b02:	68 9c 00 00 00       	push   $0x9c
  282b07:	6a 40                	push   $0x40
  282b09:	e8 f8 df ff ff       	call   280b06 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282b0e:	83 c4 08             	add    $0x8,%esp
  282b11:	6a 2e                	push   $0x2e
  282b13:	6a 40                	push   $0x40
  282b15:	e8 ec df ff ff       	call   280b06 <io_out8>
  282b1a:	b8 f0 7e 28 00       	mov    $0x287ef0,%eax
  282b1f:	ba 00 a6 28 00       	mov    $0x28a600,%edx
  282b24:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282b27:	c6 00 00             	movb   $0x0,(%eax)
  282b2a:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282b2d:	39 d0                	cmp    %edx,%eax
  282b2f:	75 f6                	jne    282b27 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282b31:	e8 60 ff ff ff       	call   282a96 <timer_alloc>
	t->next = 0;
  282b36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282b3c:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282b43:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282b47:	a3 f8 a5 28 00       	mov    %eax,0x28a5f8
	timerctl.next = 0xffffffff;
  282b4c:	c7 05 e4 7e 28 00 ff 	movl   $0xffffffff,0x287ee4
  282b53:	ff ff ff 
	return;
}
  282b56:	c9                   	leave  
  282b57:	c3                   	ret    

00282b58 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282b58:	55                   	push   %ebp
  282b59:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282b5b:	8b 45 08             	mov    0x8(%ebp),%eax
  282b5e:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282b62:	5d                   	pop    %ebp
  282b63:	c3                   	ret    

00282b64 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282b64:	55                   	push   %ebp
  282b65:	89 e5                	mov    %esp,%ebp
  282b67:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282b6a:	8b 55 0c             	mov    0xc(%ebp),%edx
  282b6d:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282b70:	8b 55 10             	mov    0x10(%ebp),%edx
  282b73:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282b76:	5d                   	pop    %ebp
  282b77:	c3                   	ret    

00282b78 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282b78:	55                   	push   %ebp
  282b79:	89 e5                	mov    %esp,%ebp
  282b7b:	57                   	push   %edi
  282b7c:	56                   	push   %esi
  282b7d:	53                   	push   %ebx
  282b7e:	83 ec 0c             	sub    $0xc,%esp
  282b81:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282b84:	a1 e0 7e 28 00       	mov    0x287ee0,%eax
  282b89:	03 45 0c             	add    0xc(%ebp),%eax
  282b8c:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282b8f:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282b93:	e8 8d df ff ff       	call   280b25 <io_load_eflags>
  282b98:	89 c6                	mov    %eax,%esi
	io_cli();
  282b9a:	e8 33 df ff ff       	call   280ad2 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282b9f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282ba2:	8b 3d f8 a5 28 00    	mov    0x28a5f8,%edi
  282ba8:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282bab:	77 1e                	ja     282bcb <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282bad:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282baf:	89 1d f8 a5 28 00    	mov    %ebx,0x28a5f8
		timerctl.next = timer->timeout;
  282bb5:	8b 43 04             	mov    0x4(%ebx),%eax
  282bb8:	a3 e4 7e 28 00       	mov    %eax,0x287ee4
		io_store_eflags(e);
  282bbd:	83 ec 0c             	sub    $0xc,%esp
  282bc0:	56                   	push   %esi
  282bc1:	e8 62 df ff ff       	call   280b28 <io_store_eflags>
		return;
  282bc6:	83 c4 10             	add    $0x10,%esp
  282bc9:	eb 3e                	jmp    282c09 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282bcb:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282bcd:	85 d2                	test   %edx,%edx
  282bcf:	74 2c                	je     282bfd <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282bd1:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282bd4:	77 21                	ja     282bf7 <timer_settime+0x7f>
  282bd6:	eb 07                	jmp    282bdf <timer_settime+0x67>
  282bd8:	3b 48 04             	cmp    0x4(%eax),%ecx
  282bdb:	77 18                	ja     282bf5 <timer_settime+0x7d>
  282bdd:	eb 04                	jmp    282be3 <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282bdf:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282be1:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282be3:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282be5:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282be7:	83 ec 0c             	sub    $0xc,%esp
  282bea:	56                   	push   %esi
  282beb:	e8 38 df ff ff       	call   280b28 <io_store_eflags>
			return;
  282bf0:	83 c4 10             	add    $0x10,%esp
  282bf3:	eb 14                	jmp    282c09 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282bf5:	89 c2                	mov    %eax,%edx
  282bf7:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282bf9:	85 c0                	test   %eax,%eax
  282bfb:	75 db                	jne    282bd8 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282bfd:	83 ec 0c             	sub    $0xc,%esp
  282c00:	56                   	push   %esi
  282c01:	e8 22 df ff ff       	call   280b28 <io_store_eflags>
	return;
  282c06:	83 c4 10             	add    $0x10,%esp
}
  282c09:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282c0c:	5b                   	pop    %ebx
  282c0d:	5e                   	pop    %esi
  282c0e:	5f                   	pop    %edi
  282c0f:	5d                   	pop    %ebp
  282c10:	c3                   	ret    

00282c11 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282c11:	55                   	push   %ebp
  282c12:	89 e5                	mov    %esp,%ebp
  282c14:	56                   	push   %esi
  282c15:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282c16:	83 ec 08             	sub    $0x8,%esp
  282c19:	6a 60                	push   $0x60
  282c1b:	6a 20                	push   $0x20
  282c1d:	e8 e4 de ff ff       	call   280b06 <io_out8>
	timerctl.count ++;
  282c22:	a1 e0 7e 28 00       	mov    0x287ee0,%eax
  282c27:	8d 50 01             	lea    0x1(%eax),%edx
  282c2a:	89 15 e0 7e 28 00    	mov    %edx,0x287ee0
	
	if(timerctl.count >= timerctl.next)
  282c30:	83 c4 10             	add    $0x10,%esp
  282c33:	3b 15 e4 7e 28 00    	cmp    0x287ee4,%edx
  282c39:	72 69                	jb     282ca4 <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282c3b:	8b 1d f8 a5 28 00    	mov    0x28a5f8,%ebx
		while(t)
  282c41:	85 db                	test   %ebx,%ebx
  282c43:	75 46                	jne    282c8b <inthandler20+0x7a>
  282c45:	eb 5d                	jmp    282ca4 <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282c47:	8b 43 04             	mov    0x4(%ebx),%eax
  282c4a:	3b 05 e0 7e 28 00    	cmp    0x287ee0,%eax
  282c50:	77 2c                	ja     282c7e <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282c52:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282c56:	39 1d 00 a6 28 00    	cmp    %ebx,0x28a600
  282c5c:	74 13                	je     282c71 <inthandler20+0x60>
  282c5e:	83 ec 08             	sub    $0x8,%esp
  282c61:	ff 73 10             	pushl  0x10(%ebx)
  282c64:	ff 73 0c             	pushl  0xc(%ebx)
  282c67:	e8 5d ef ff ff       	call   281bc9 <fifo32_put>
  282c6c:	83 c4 10             	add    $0x10,%esp
  282c6f:	eb 05                	jmp    282c76 <inthandler20+0x65>
				else ts=1;
  282c71:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282c76:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282c78:	85 db                	test   %ebx,%ebx
  282c7a:	75 cb                	jne    282c47 <inthandler20+0x36>
  282c7c:	eb 1b                	jmp    282c99 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282c7e:	a3 e4 7e 28 00       	mov    %eax,0x287ee4
				timerctl.t0 = t;
  282c83:	89 1d f8 a5 28 00    	mov    %ebx,0x28a5f8
				break;
  282c89:	eb 0e                	jmp    282c99 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282c8b:	8b 43 04             	mov    0x4(%ebx),%eax
  282c8e:	be 00 00 00 00       	mov    $0x0,%esi
  282c93:	39 c2                	cmp    %eax,%edx
  282c95:	73 bb                	jae    282c52 <inthandler20+0x41>
  282c97:	eb e5                	jmp    282c7e <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282c99:	89 f0                	mov    %esi,%eax
  282c9b:	84 c0                	test   %al,%al
  282c9d:	74 05                	je     282ca4 <inthandler20+0x93>
  282c9f:	e8 fa 04 00 00       	call   28319e <task_switch>
	return;
}
  282ca4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282ca7:	5b                   	pop    %ebx
  282ca8:	5e                   	pop    %esi
  282ca9:	5d                   	pop    %ebp
  282caa:	c3                   	ret    

00282cab <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282cab:	55                   	push   %ebp
  282cac:	89 e5                	mov    %esp,%ebp
  282cae:	56                   	push   %esi
  282caf:	53                   	push   %ebx
  282cb0:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282cb3:	e8 6d de ff ff       	call   280b25 <io_load_eflags>
  282cb8:	89 c6                	mov    %eax,%esi
	io_cli();
  282cba:	e8 13 de ff ff       	call   280ad2 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282cbf:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282cc3:	75 3e                	jne    282d03 <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282cc5:	8b 15 f8 a5 28 00    	mov    0x28a5f8,%edx
  282ccb:	39 d3                	cmp    %edx,%ebx
  282ccd:	75 13                	jne    282ce2 <timer_cancel+0x37>
		{
			t = timer->next;
  282ccf:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282cd1:	a3 f8 a5 28 00       	mov    %eax,0x28a5f8
			timerctl.next = t->timeout;
  282cd6:	8b 40 04             	mov    0x4(%eax),%eax
  282cd9:	a3 e4 7e 28 00       	mov    %eax,0x287ee4
  282cde:	eb 0c                	jmp    282cec <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282ce0:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282ce2:	8b 02                	mov    (%edx),%eax
  282ce4:	39 c3                	cmp    %eax,%ebx
  282ce6:	75 f8                	jne    282ce0 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282ce8:	8b 03                	mov    (%ebx),%eax
  282cea:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282cec:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282cf0:	83 ec 0c             	sub    $0xc,%esp
  282cf3:	56                   	push   %esi
  282cf4:	e8 2f de ff ff       	call   280b28 <io_store_eflags>
		return 1;
  282cf9:	83 c4 10             	add    $0x10,%esp
  282cfc:	b8 01 00 00 00       	mov    $0x1,%eax
  282d01:	eb 11                	jmp    282d14 <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282d03:	83 ec 0c             	sub    $0xc,%esp
  282d06:	56                   	push   %esi
  282d07:	e8 1c de ff ff       	call   280b28 <io_store_eflags>
	return 0;
  282d0c:	83 c4 10             	add    $0x10,%esp
  282d0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282d14:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282d17:	5b                   	pop    %ebx
  282d18:	5e                   	pop    %esi
  282d19:	5d                   	pop    %ebp
  282d1a:	c3                   	ret    

00282d1b <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282d1b:	55                   	push   %ebp
  282d1c:	89 e5                	mov    %esp,%ebp
  282d1e:	57                   	push   %edi
  282d1f:	56                   	push   %esi
  282d20:	53                   	push   %ebx
  282d21:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282d24:	e8 fc dd ff ff       	call   280b25 <io_load_eflags>
  282d29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282d2c:	e8 a1 dd ff ff       	call   280ad2 <io_cli>
  282d31:	bb e8 7e 28 00       	mov    $0x287ee8,%ebx
  282d36:	bf f8 a5 28 00       	mov    $0x28a5f8,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282d3b:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282d3f:	74 1e                	je     282d5f <timer_cancelall+0x44>
  282d41:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282d45:	74 18                	je     282d5f <timer_cancelall+0x44>
  282d47:	8b 45 08             	mov    0x8(%ebp),%eax
  282d4a:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282d4d:	75 10                	jne    282d5f <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282d4f:	83 ec 0c             	sub    $0xc,%esp
  282d52:	53                   	push   %ebx
  282d53:	e8 53 ff ff ff       	call   282cab <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282d58:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282d5c:	83 c4 10             	add    $0x10,%esp
  282d5f:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282d62:	39 fb                	cmp    %edi,%ebx
  282d64:	75 d5                	jne    282d3b <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282d66:	83 ec 0c             	sub    $0xc,%esp
  282d69:	ff 75 e4             	pushl  -0x1c(%ebp)
  282d6c:	e8 b7 dd ff ff       	call   280b28 <io_store_eflags>
	return;
  282d71:	83 c4 10             	add    $0x10,%esp
}
  282d74:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282d77:	5b                   	pop    %ebx
  282d78:	5e                   	pop    %esi
  282d79:	5f                   	pop    %edi
  282d7a:	5d                   	pop    %ebp
  282d7b:	c3                   	ret    
  282d7c:	66 90                	xchg   %ax,%ax
  282d7e:	66 90                	xchg   %ax,%ax

00282d80 <load_tr>:
  282d80:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282d85:	c3                   	ret    

00282d86 <farjmp>:
  282d86:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282d8a:	c3                   	ret    

00282d8b <farcall>:
  282d8b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282d8f:	c3                   	ret    

00282d90 <asm_end_app>:
  282d90:	8b 20                	mov    (%eax),%esp
  282d92:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282d99:	61                   	popa   
  282d9a:	c3                   	ret    

00282d9b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282d9b:	55                   	push   %ebp
  282d9c:	89 e5                	mov    %esp,%ebp
  282d9e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282da1:	e8 2a dd ff ff       	call   280ad0 <io_hlt>
  282da6:	eb f9                	jmp    282da1 <task_idle+0x6>

00282da8 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282da8:	55                   	push   %ebp
  282da9:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282dab:	8b 0d fc a5 28 00    	mov    0x28a5fc,%ecx
  282db1:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282db8:	74 16                	je     282dd0 <task_alloc+0x28>
  282dba:	8d 91 b8 10 00 00    	lea    0x10b8(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282dc0:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282dc5:	83 3a 00             	cmpl   $0x0,(%edx)
  282dc8:	0f 85 af 00 00 00    	jne    282e7d <task_alloc+0xd5>
  282dce:	eb 05                	jmp    282dd5 <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282dd0:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282dd5:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
			task->flags = 1;
  282ddb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282dde:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282de5:	00 00 00 
			task->tss.eflags = 0x202;
  282de8:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282def:	02 00 00 
			task->tss.eax = 0;
  282df2:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282df9:	00 00 00 
			task->tss.ecx = 0;
  282dfc:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282e03:	00 00 00 
			task->tss.edx = 0;
  282e06:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282e0d:	00 00 00 
			task->tss.ebx = 0;
  282e10:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282e17:	00 00 00 
			task->tss.ebp = 0;
  282e1a:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282e21:	00 00 00 
			task->tss.esi = 0;
  282e24:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282e2b:	00 00 00 
			task->tss.edi = 0;
  282e2e:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282e35:	00 00 00 
			task->tss.es  = 0;
  282e38:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282e3f:	00 00 00 
			task->tss.ds  = 0;
  282e42:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282e49:	00 00 00 
			task->tss.fs  = 0;
  282e4c:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282e53:	00 00 00 
			task->tss.gs  = 0;
  282e56:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282e5d:	00 00 00 
			task->tss.iomap = 0x40000000;
  282e60:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282e67:	00 00 40 
			task->tss.ss0 = 0;
  282e6a:	c7 82 2c 10 00 00 00 	movl   $0x0,0x102c(%edx)
  282e71:	00 00 00 
			return task;
  282e74:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282e7b:	eb 19                	jmp    282e96 <task_alloc+0xee>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e7d:	83 c0 01             	add    $0x1,%eax
  282e80:	81 c2 bc 00 00 00    	add    $0xbc,%edx
  282e86:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282e8b:	0f 85 34 ff ff ff    	jne    282dc5 <task_alloc+0x1d>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282e96:	5d                   	pop    %ebp
  282e97:	c3                   	ret    

00282e98 <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282e98:	55                   	push   %ebp
  282e99:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282e9b:	8b 15 fc a5 28 00    	mov    0x28a5fc,%edx
  282ea1:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282ea3:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282ea9:	6b c0 66             	imul   $0x66,%eax,%eax
  282eac:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282eb0:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282eb4:	5d                   	pop    %ebp
  282eb5:	c3                   	ret    

00282eb6 <task_add>:

void task_add(struct TASK *task)
{
  282eb6:	55                   	push   %ebp
  282eb7:	89 e5                	mov    %esp,%ebp
  282eb9:	56                   	push   %esi
  282eba:	53                   	push   %ebx
  282ebb:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282ebe:	8b 35 fc a5 28 00    	mov    0x28a5fc,%esi
  282ec4:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282ec7:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282ecd:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282ecf:	8b 50 08             	mov    0x8(%eax),%edx
  282ed2:	83 fa 64             	cmp    $0x64,%edx
  282ed5:	74 14                	je     282eeb <task_add+0x35>
	tl->tasks[tl->running] = task;
  282ed7:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282eda:	01 ca                	add    %ecx,%edx
  282edc:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282ee0:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282ee4:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282eeb:	5b                   	pop    %ebx
  282eec:	5e                   	pop    %esi
  282eed:	5d                   	pop    %ebp
  282eee:	c3                   	ret    

00282eef <task_remove>:

void task_remove(struct TASK *task)
{
  282eef:	55                   	push   %ebp
  282ef0:	89 e5                	mov    %esp,%ebp
  282ef2:	57                   	push   %edi
  282ef3:	56                   	push   %esi
  282ef4:	53                   	push   %ebx
  282ef5:	83 ec 04             	sub    $0x4,%esp
  282ef8:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282efb:	8b 3d fc a5 28 00    	mov    0x28a5fc,%edi
  282f01:	8b 43 08             	mov    0x8(%ebx),%eax
  282f04:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282f07:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282f0d:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282f0f:	8b 4a 08             	mov    0x8(%edx),%ecx
  282f12:	85 c9                	test   %ecx,%ecx
  282f14:	7e 1d                	jle    282f33 <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282f16:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282f19:	74 1f                	je     282f3a <task_remove+0x4b>
  282f1b:	b8 00 00 00 00       	mov    $0x0,%eax
  282f20:	eb 06                	jmp    282f28 <task_remove+0x39>
  282f22:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282f26:	74 17                	je     282f3f <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282f28:	83 c0 01             	add    $0x1,%eax
  282f2b:	39 c8                	cmp    %ecx,%eax
  282f2d:	75 f3                	jne    282f22 <task_remove+0x33>
  282f2f:	89 c8                	mov    %ecx,%eax
  282f31:	eb 0c                	jmp    282f3f <task_remove+0x50>
  282f33:	b8 00 00 00 00       	mov    $0x0,%eax
  282f38:	eb 05                	jmp    282f3f <task_remove+0x50>
  282f3a:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282f3f:	83 e9 01             	sub    $0x1,%ecx
  282f42:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282f45:	8b 72 0c             	mov    0xc(%edx),%esi
  282f48:	39 c6                	cmp    %eax,%esi
  282f4a:	7e 06                	jle    282f52 <task_remove+0x63>
	{
		tl->now--;
  282f4c:	83 ee 01             	sub    $0x1,%esi
  282f4f:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282f52:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282f55:	7f 07                	jg     282f5e <task_remove+0x6f>
	{
		tl->now = 0;
  282f57:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282f5e:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282f65:	39 42 08             	cmp    %eax,0x8(%edx)
  282f68:	7e 1b                	jle    282f85 <task_remove+0x96>
  282f6a:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282f6e:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282f72:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282f75:	83 c0 01             	add    $0x1,%eax
  282f78:	8b 19                	mov    (%ecx),%ebx
  282f7a:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282f7d:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282f80:	39 42 08             	cmp    %eax,0x8(%edx)
  282f83:	7f f0                	jg     282f75 <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282f85:	83 c4 04             	add    $0x4,%esp
  282f88:	5b                   	pop    %ebx
  282f89:	5e                   	pop    %esi
  282f8a:	5f                   	pop    %edi
  282f8b:	5d                   	pop    %ebp
  282f8c:	c3                   	ret    

00282f8d <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282f8d:	55                   	push   %ebp
  282f8e:	89 e5                	mov    %esp,%ebp
  282f90:	56                   	push   %esi
  282f91:	53                   	push   %ebx
  282f92:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282f95:	8b 75 0c             	mov    0xc(%ebp),%esi
  282f98:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282f9b:	85 f6                	test   %esi,%esi
  282f9d:	79 03                	jns    282fa2 <task_run+0x15>
  282f9f:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282fa2:	85 c0                	test   %eax,%eax
  282fa4:	7e 03                	jle    282fa9 <task_run+0x1c>
  282fa6:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282fa9:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282fad:	75 14                	jne    282fc3 <task_run+0x36>
  282faf:	3b 73 08             	cmp    0x8(%ebx),%esi
  282fb2:	74 1b                	je     282fcf <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282fb4:	53                   	push   %ebx
  282fb5:	e8 35 ff ff ff       	call   282eef <task_remove>
	}
	if(task->flags != 2)
  282fba:	83 c4 04             	add    $0x4,%esp
  282fbd:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282fc1:	74 0c                	je     282fcf <task_run+0x42>
	{
		task->level = level;
  282fc3:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282fc6:	53                   	push   %ebx
  282fc7:	e8 ea fe ff ff       	call   282eb6 <task_add>
  282fcc:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282fcf:	a1 fc a5 28 00       	mov    0x28a5fc,%eax
  282fd4:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282fd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282fdb:	5b                   	pop    %ebx
  282fdc:	5e                   	pop    %esi
  282fdd:	5d                   	pop    %ebp
  282fde:	c3                   	ret    

00282fdf <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282fdf:	55                   	push   %ebp
  282fe0:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282fe2:	8b 0d fc a5 28 00    	mov    0x28a5fc,%ecx
  282fe8:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282fec:	7f 20                	jg     28300e <task_switchsub+0x2f>
  282fee:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282ff4:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282ff9:	83 3a 00             	cmpl   $0x0,(%edx)
  282ffc:	7f 15                	jg     283013 <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282ffe:	83 c0 01             	add    $0x1,%eax
  283001:	81 c2 98 01 00 00    	add    $0x198,%edx
  283007:	83 f8 0a             	cmp    $0xa,%eax
  28300a:	75 ed                	jne    282ff9 <task_switchsub+0x1a>
  28300c:	eb 05                	jmp    283013 <task_switchsub+0x34>
  28300e:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  283013:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  283015:	a1 fc a5 28 00       	mov    0x28a5fc,%eax
  28301a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  28301e:	5d                   	pop    %ebp
  28301f:	c3                   	ret    

00283020 <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  283020:	55                   	push   %ebp
  283021:	89 e5                	mov    %esp,%ebp
  283023:	57                   	push   %edi
  283024:	56                   	push   %esi
  283025:	53                   	push   %ebx
  283026:	83 ec 14             	sub    $0x14,%esp
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  283029:	68 58 ee 02 00       	push   $0x2ee58
  28302e:	ff 75 08             	pushl  0x8(%ebp)
  283031:	e8 17 f3 ff ff       	call   28234d <memman_alloc_4k>
  283036:	a3 fc a5 28 00       	mov    %eax,0x28a5fc
  28303b:	83 c4 10             	add    $0x10,%esp
  28303e:	bb 20 00 00 00       	mov    $0x20,%ebx
	for(i=0;i<MAX_TASKS;i++)
  283043:	be 00 00 00 00       	mov    $0x0,%esi
	{
		taskctl->tasks0[i].flags = 0;
  283048:	8b 15 fc a5 28 00    	mov    0x28a5fc,%edx
  28304e:	69 fe bc 00 00 00    	imul   $0xbc,%esi,%edi
  283054:	8d 04 3a             	lea    (%edx,%edi,1),%eax
  283057:	c7 80 fc 0f 00 00 00 	movl   $0x0,0xffc(%eax)
  28305e:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  283061:	89 98 f8 0f 00 00    	mov    %ebx,0xff8(%eax)
		taskctl->tasks0[i].tss.ldtr = (TASK_GDT0 + MAX_TASKS + i) * 8;
  283067:	8d 8b 40 1f 00 00    	lea    0x1f40(%ebx),%ecx
  28306d:	89 88 84 10 00 00    	mov    %ecx,0x1084(%eax)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  283073:	68 89 00 00 00       	push   $0x89
  283078:	8d 84 3a 24 10 00 00 	lea    0x1024(%edx,%edi,1),%eax
  28307f:	50                   	push   %eax
  283080:	6a 67                	push   $0x67
  283082:	8d 83 00 00 27 00    	lea    0x270000(%ebx),%eax
  283088:	50                   	push   %eax
  283089:	e8 e4 e3 ff ff       	call   281472 <set_segmdesc>
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
  28308e:	68 82 00 00 00       	push   $0x82
  283093:	a1 fc a5 28 00       	mov    0x28a5fc,%eax
  283098:	8d 84 38 8c 10 00 00 	lea    0x108c(%eax,%edi,1),%eax
  28309f:	50                   	push   %eax
  2830a0:	6a 0f                	push   $0xf
  2830a2:	8d 83 40 1f 27 00    	lea    0x271f40(%ebx),%eax
  2830a8:	50                   	push   %eax
  2830a9:	e8 c4 e3 ff ff       	call   281472 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  2830ae:	83 c6 01             	add    $0x1,%esi
  2830b1:	83 c3 08             	add    $0x8,%ebx
  2830b4:	83 c4 20             	add    $0x20,%esp
  2830b7:	81 fe e8 03 00 00    	cmp    $0x3e8,%esi
  2830bd:	75 89                	jne    283048 <task_init+0x28>
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  2830bf:	8b 15 fc a5 28 00    	mov    0x28a5fc,%edx
  2830c5:	8d 42 08             	lea    0x8(%edx),%eax
  2830c8:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  2830ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  2830d4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  2830db:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].tss.ldtr = (TASK_GDT0 + MAX_TASKS + i) * 8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
		set_segmdesc(gdt+TASK_GDT0+MAX_TASKS+i,15,(int)taskctl->tasks0[i].ldt,AR_LDT);//2 LDTs
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  2830e0:	39 d0                	cmp    %edx,%eax
  2830e2:	75 ea                	jne    2830ce <task_init+0xae>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  2830e4:	e8 bf fc ff ff       	call   282da8 <task_alloc>
  2830e9:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  2830eb:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  2830f2:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  2830f9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  283100:	83 ec 0c             	sub    $0xc,%esp
  283103:	50                   	push   %eax
  283104:	e8 ad fd ff ff       	call   282eb6 <task_add>
	
	task_switchsub();
  283109:	e8 d1 fe ff ff       	call   282fdf <task_switchsub>
	load_tr(task->sel);
  28310e:	83 c4 04             	add    $0x4,%esp
  283111:	ff 36                	pushl  (%esi)
  283113:	e8 68 fc ff ff       	call   282d80 <load_tr>
	task_timer = timer_alloc();
  283118:	e8 79 f9 ff ff       	call   282a96 <timer_alloc>
  28311d:	a3 00 a6 28 00       	mov    %eax,0x28a600
	timer_settime(task_timer,task->priority);
  283122:	83 c4 08             	add    $0x8,%esp
  283125:	ff 76 0c             	pushl  0xc(%esi)
  283128:	50                   	push   %eax
  283129:	e8 4a fa ff ff       	call   282b78 <timer_settime>

	struct TASK *idle = task_alloc();
  28312e:	e8 75 fc ff ff       	call   282da8 <task_alloc>
  283133:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  283135:	83 c4 08             	add    $0x8,%esp
  283138:	68 00 00 01 00       	push   $0x10000
  28313d:	ff 75 08             	pushl  0x8(%ebp)
  283140:	e8 cc ee ff ff       	call   282011 <memman_alloc>
  283145:	05 00 00 01 00       	add    $0x10000,%eax
  28314a:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  28314d:	c7 43 4c 9b 2d 00 00 	movl   $0x2d9b,0x4c(%ebx)
	idle->tss.es = 1*8;
  283154:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  28315b:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  283162:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  283169:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283170:	00 00 00 
	idle->tss.fs = 1*8;
  283173:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28317a:	00 00 00 
	idle->tss.gs = 1*8;
  28317d:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283184:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  283187:	83 c4 0c             	add    $0xc,%esp
  28318a:	6a 01                	push   $0x1
  28318c:	6a 09                	push   $0x9
  28318e:	53                   	push   %ebx
  28318f:	e8 f9 fd ff ff       	call   282f8d <task_run>
	return task;
}
  283194:	89 f0                	mov    %esi,%eax
  283196:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283199:	5b                   	pop    %ebx
  28319a:	5e                   	pop    %esi
  28319b:	5f                   	pop    %edi
  28319c:	5d                   	pop    %ebp
  28319d:	c3                   	ret    

0028319e <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  28319e:	55                   	push   %ebp
  28319f:	89 e5                	mov    %esp,%ebp
  2831a1:	56                   	push   %esi
  2831a2:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  2831a3:	8b 0d fc a5 28 00    	mov    0x28a5fc,%ecx
  2831a9:	8b 31                	mov    (%ecx),%esi
  2831ab:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  2831b1:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  2831b3:	8b 50 0c             	mov    0xc(%eax),%edx
  2831b6:	6b de 66             	imul   $0x66,%esi,%ebx
  2831b9:	01 d3                	add    %edx,%ebx
  2831bb:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  2831bf:	83 c2 01             	add    $0x1,%edx
  2831c2:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  2831c5:	3b 50 08             	cmp    0x8(%eax),%edx
  2831c8:	75 07                	jne    2831d1 <task_switch+0x33>
	{
		tl->now = 0;
  2831ca:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  2831d1:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  2831d5:	75 0c                	jne    2831e3 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  2831d7:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  2831dd:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  2831e1:	eb 14                	jmp    2831f7 <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  2831e3:	e8 f7 fd ff ff       	call   282fdf <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  2831e8:	a1 fc a5 28 00       	mov    0x28a5fc,%eax
  2831ed:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  2831f3:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  2831f7:	8b 50 04             	mov    0x4(%eax),%edx
  2831fa:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  2831fe:	83 ec 08             	sub    $0x8,%esp
  283201:	ff 76 0c             	pushl  0xc(%esi)
  283204:	ff 35 00 a6 28 00    	pushl  0x28a600
  28320a:	e8 69 f9 ff ff       	call   282b78 <timer_settime>
	if(new_task != now_task)
  28320f:	83 c4 10             	add    $0x10,%esp
  283212:	39 f3                	cmp    %esi,%ebx
  283214:	74 0f                	je     283225 <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  283216:	83 ec 08             	sub    $0x8,%esp
  283219:	ff 36                	pushl  (%esi)
  28321b:	6a 00                	push   $0x0
  28321d:	e8 64 fb ff ff       	call   282d86 <farjmp>
  283222:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  283225:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283228:	5b                   	pop    %ebx
  283229:	5e                   	pop    %esi
  28322a:	5d                   	pop    %ebp
  28322b:	c3                   	ret    

0028322c <task_sleep>:

void task_sleep(struct TASK *task)
{
  28322c:	55                   	push   %ebp
  28322d:	89 e5                	mov    %esp,%ebp
  28322f:	56                   	push   %esi
  283230:	53                   	push   %ebx
  283231:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  283234:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  283238:	75 2d                	jne    283267 <task_sleep+0x3b>
	{
		now_task = task_now();
  28323a:	e8 59 fc ff ff       	call   282e98 <task_now>
  28323f:	89 c6                	mov    %eax,%esi
		task_remove(task);
  283241:	53                   	push   %ebx
  283242:	e8 a8 fc ff ff       	call   282eef <task_remove>
		if(task == now_task)
  283247:	83 c4 04             	add    $0x4,%esp
  28324a:	39 f3                	cmp    %esi,%ebx
  28324c:	75 19                	jne    283267 <task_sleep+0x3b>
		{
			task_switchsub();
  28324e:	e8 8c fd ff ff       	call   282fdf <task_switchsub>
			now_task = task_now();
  283253:	e8 40 fc ff ff       	call   282e98 <task_now>
			farjmp(0,now_task->sel);
  283258:	83 ec 08             	sub    $0x8,%esp
  28325b:	ff 30                	pushl  (%eax)
  28325d:	6a 00                	push   $0x0
  28325f:	e8 22 fb ff ff       	call   282d86 <farjmp>
  283264:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283267:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28326a:	5b                   	pop    %ebx
  28326b:	5e                   	pop    %esi
  28326c:	5d                   	pop    %ebp
  28326d:	c3                   	ret    

0028326e <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  28326e:	55                   	push   %ebp
  28326f:	89 e5                	mov    %esp,%ebp
  283271:	57                   	push   %edi
  283272:	56                   	push   %esi
  283273:	53                   	push   %ebx
  283274:	81 ec bc 00 00 00    	sub    $0xbc,%esp
  28327a:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  28327d:	e8 16 fc ff ff       	call   282e98 <task_now>
  283282:	89 c6                	mov    %eax,%esi
  283284:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  28328a:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  28328d:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  283294:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  28329b:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	//*((int *)0x0fec) = (int)&cons; //for api
	task->cons = &cons;
  2832a2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2832a5:	89 86 a4 00 00 00    	mov    %eax,0xa4(%esi)
	task->cmdline = cmdline;
  2832ab:	8d 45 ca             	lea    -0x36(%ebp),%eax
  2832ae:	89 86 b8 00 00 00    	mov    %eax,0xb8(%esi)

	int i;
	cons.timer = timer_alloc();
  2832b4:	e8 dd f7 ff ff       	call   282a96 <timer_alloc>
  2832b9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  2832bc:	83 c6 10             	add    $0x10,%esi
  2832bf:	83 ec 04             	sub    $0x4,%esp
  2832c2:	6a 01                	push   $0x1
  2832c4:	56                   	push   %esi
  2832c5:	50                   	push   %eax
  2832c6:	e8 99 f8 ff ff       	call   282b64 <timer_init>
	timer_settime(cons.timer,50);
  2832cb:	83 c4 08             	add    $0x8,%esp
  2832ce:	6a 32                	push   $0x32
  2832d0:	ff 75 c4             	pushl  -0x3c(%ebp)
  2832d3:	e8 a0 f8 ff ff       	call   282b78 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  2832d8:	83 c4 08             	add    $0x8,%esp
  2832db:	68 00 2d 00 00       	push   $0x2d00
  2832e0:	68 00 00 3c 00       	push   $0x3c0000
  2832e5:	e8 63 f0 ff ff       	call   28234d <memman_alloc_4k>
  2832ea:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  2832f0:	83 c4 08             	add    $0x8,%esp
  2832f3:	68 00 02 10 00       	push   $0x100200
  2832f8:	50                   	push   %eax
  2832f9:	e8 9f 02 00 00       	call   28359d <file_readfat>
  2832fe:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
  283304:	8d 55 b4             	lea    -0x4c(%ebp),%edx
  283307:	83 c4 10             	add    $0x10,%esp

	struct FILEHANDLE fhandle[8];
	for(i=0;i<8;i++)
	{
		fhandle[i].buf = 0;
  28330a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  283310:	83 c0 0c             	add    $0xc,%eax
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));

	struct FILEHANDLE fhandle[8];
	for(i=0;i<8;i++)
  283313:	39 d0                	cmp    %edx,%eax
  283315:	75 f3                	jne    28330a <console_task+0x9c>
	{
		fhandle[i].buf = 0;
	}
	task->fhandle = fhandle;
  283317:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
  28331d:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
  283323:	89 82 b0 00 00 00    	mov    %eax,0xb0(%edx)
	task->fat = fat;
  283329:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
  28332f:	89 82 b4 00 00 00    	mov    %eax,0xb4(%edx)

	//draw prompt char
	cons_putchar(&cons,'>',1);
  283335:	83 ec 04             	sub    $0x4,%esp
  283338:	6a 01                	push   $0x1
  28333a:	6a 3e                	push   $0x3e
  28333c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28333f:	50                   	push   %eax
  283340:	e8 f9 05 00 00       	call   28393e <cons_putchar>
  283345:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  283348:	e8 85 d7 ff ff       	call   280ad2 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  28334d:	83 ec 0c             	sub    $0xc,%esp
  283350:	56                   	push   %esi
  283351:	e8 20 e9 ff ff       	call   281c76 <fifo32_status>
  283356:	83 c4 10             	add    $0x10,%esp
  283359:	85 c0                	test   %eax,%eax
  28335b:	75 18                	jne    283375 <console_task+0x107>
		{
			task_sleep(task);
  28335d:	83 ec 0c             	sub    $0xc,%esp
  283360:	ff b5 44 ff ff ff    	pushl  -0xbc(%ebp)
  283366:	e8 c1 fe ff ff       	call   28322c <task_sleep>
			io_sti();
  28336b:	e8 64 d7 ff ff       	call   280ad4 <io_sti>
  283370:	83 c4 10             	add    $0x10,%esp
  283373:	eb d3                	jmp    283348 <console_task+0xda>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  283375:	83 ec 0c             	sub    $0xc,%esp
  283378:	56                   	push   %esi
  283379:	e8 bd e8 ff ff       	call   281c3b <fifo32_get>
  28337e:	89 c3                	mov    %eax,%ebx
			io_sti();
  283380:	e8 4f d7 ff ff       	call   280ad4 <io_sti>
			if(i<=1) //for cursor
  283385:	83 c4 10             	add    $0x10,%esp
  283388:	83 fb 01             	cmp    $0x1,%ebx
  28338b:	7f 57                	jg     2833e4 <console_task+0x176>
			{
				if(i!=0)
  28338d:	85 db                	test   %ebx,%ebx
  28338f:	74 20                	je     2833b1 <console_task+0x143>
				{
					timer_init(cons.timer,&task->fifo,0);
  283391:	83 ec 04             	sub    $0x4,%esp
  283394:	6a 00                	push   $0x0
  283396:	56                   	push   %esi
  283397:	ff 75 c4             	pushl  -0x3c(%ebp)
  28339a:	e8 c5 f7 ff ff       	call   282b64 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  28339f:	83 c4 10             	add    $0x10,%esp
  2833a2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  2833a6:	78 27                	js     2833cf <console_task+0x161>
  2833a8:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  2833af:	eb 1e                	jmp    2833cf <console_task+0x161>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  2833b1:	83 ec 04             	sub    $0x4,%esp
  2833b4:	6a 01                	push   $0x1
  2833b6:	56                   	push   %esi
  2833b7:	ff 75 c4             	pushl  -0x3c(%ebp)
  2833ba:	e8 a5 f7 ff ff       	call   282b64 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  2833bf:	83 c4 10             	add    $0x10,%esp
  2833c2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  2833c6:	78 07                	js     2833cf <console_task+0x161>
  2833c8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  2833cf:	83 ec 08             	sub    $0x8,%esp
  2833d2:	6a 32                	push   $0x32
  2833d4:	ff 75 c4             	pushl  -0x3c(%ebp)
  2833d7:	e8 9c f7 ff ff       	call   282b78 <timer_settime>
  2833dc:	83 c4 10             	add    $0x10,%esp
  2833df:	e9 65 01 00 00       	jmp    283549 <console_task+0x2db>
							
			}
			else if(i == 2) //get show_cursor msg
  2833e4:	83 fb 02             	cmp    $0x2,%ebx
  2833e7:	75 19                	jne    283402 <console_task+0x194>
			{
				cons.cur_c = COL8_FFFFFF;
  2833e9:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
					}
				}
			}
			if(sheet != 0)
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2833f0:	b8 07 00 00 00       	mov    $0x7,%eax
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(sheet != 0)
  2833f5:	85 ff                	test   %edi,%edi
  2833f7:	0f 85 5b 01 00 00    	jne    283558 <console_task+0x2ea>
  2833fd:	e9 46 ff ff ff       	jmp    283348 <console_task+0xda>
			}
			else if(i == 2) //get show_cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide_cursor msg
  283402:	83 fb 03             	cmp    $0x3,%ebx
  283405:	75 36                	jne    28343d <console_task+0x1cf>
			{
				cons.cur_c = -1;
  283407:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				if(sheet != 0)boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  28340e:	85 ff                	test   %edi,%edi
  283410:	0f 84 32 ff ff ff    	je     283348 <console_task+0xda>
  283416:	8b 55 bc             	mov    -0x44(%ebp),%edx
  283419:	8b 45 b8             	mov    -0x48(%ebp),%eax
  28341c:	83 ec 04             	sub    $0x4,%esp
  28341f:	8d 4a 0f             	lea    0xf(%edx),%ecx
  283422:	51                   	push   %ecx
  283423:	8d 48 07             	lea    0x7(%eax),%ecx
  283426:	51                   	push   %ecx
  283427:	52                   	push   %edx
  283428:	50                   	push   %eax
  283429:	6a 00                	push   $0x0
  28342b:	ff 77 04             	pushl  0x4(%edi)
  28342e:	ff 37                	pushl  (%edi)
  283430:	e8 8c d8 ff ff       	call   280cc1 <boxfill8>
  283435:	83 c4 20             	add    $0x20,%esp
  283438:	e9 14 01 00 00       	jmp    283551 <console_task+0x2e3>
			}
			else if(i == 4) //close button clicked
  28343d:	83 fb 04             	cmp    $0x4,%ebx
  283440:	75 1a                	jne    28345c <console_task+0x1ee>
			{
				cmd_exit(&cons,fat);
  283442:	83 ec 08             	sub    $0x8,%esp
  283445:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  28344b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28344e:	50                   	push   %eax
  28344f:	e8 33 08 00 00       	call   283c87 <cmd_exit>
  283454:	83 c4 10             	add    $0x10,%esp
  283457:	e9 ed 00 00 00       	jmp    283549 <console_task+0x2db>
			}
			else if(256<=i && i<=511)
  28345c:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  283462:	3d ff 00 00 00       	cmp    $0xff,%eax
  283467:	0f 87 dc 00 00 00    	ja     283549 <console_task+0x2db>
			{
				if(i == 8+256) //back key
  28346d:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  283473:	75 26                	jne    28349b <console_task+0x22d>
				{
					if(cons.cur_x > 16)
  283475:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  283479:	0f 8e ca 00 00 00    	jle    283549 <console_task+0x2db>
					{
						cons_putchar(&cons,' ',0);
  28347f:	83 ec 04             	sub    $0x4,%esp
  283482:	6a 00                	push   $0x0
  283484:	6a 20                	push   $0x20
  283486:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283489:	50                   	push   %eax
  28348a:	e8 af 04 00 00       	call   28393e <cons_putchar>
						cons.cur_x -= 8;
  28348f:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  283493:	83 c4 10             	add    $0x10,%esp
  283496:	e9 ae 00 00 00       	jmp    283549 <console_task+0x2db>
					}
				}
				else if(i == 10+256) //return key
  28349b:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  2834a1:	75 75                	jne    283518 <console_task+0x2aa>
				{
					cons_putchar(&cons,' ',0);
  2834a3:	83 ec 04             	sub    $0x4,%esp
  2834a6:	6a 00                	push   $0x0
  2834a8:	6a 20                	push   $0x20
  2834aa:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834ad:	50                   	push   %eax
  2834ae:	e8 8b 04 00 00       	call   28393e <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  2834b3:	8b 55 b8             	mov    -0x48(%ebp),%edx
  2834b6:	8d 42 07             	lea    0x7(%edx),%eax
  2834b9:	85 d2                	test   %edx,%edx
  2834bb:	0f 49 c2             	cmovns %edx,%eax
  2834be:	c1 f8 03             	sar    $0x3,%eax
  2834c1:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  2834c6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834c9:	89 04 24             	mov    %eax,(%esp)
  2834cc:	e8 9b 03 00 00       	call   28386c <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  2834d1:	ff 75 0c             	pushl  0xc(%ebp)
  2834d4:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  2834da:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834dd:	50                   	push   %eax
  2834de:	8d 45 ca             	lea    -0x36(%ebp),%eax
  2834e1:	50                   	push   %eax
  2834e2:	e8 38 0e 00 00       	call   28431f <cons_runcmd>
					if(sheet == 0)
  2834e7:	83 c4 20             	add    $0x20,%esp
  2834ea:	85 ff                	test   %edi,%edi
  2834ec:	75 15                	jne    283503 <console_task+0x295>
						cmd_exit(&cons,fat);
  2834ee:	83 ec 08             	sub    $0x8,%esp
  2834f1:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
  2834f7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2834fa:	50                   	push   %eax
  2834fb:	e8 87 07 00 00       	call   283c87 <cmd_exit>
  283500:	83 c4 10             	add    $0x10,%esp
					cons_putchar(&cons,'>',1);
  283503:	83 ec 04             	sub    $0x4,%esp
  283506:	6a 01                	push   $0x1
  283508:	6a 3e                	push   $0x3e
  28350a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28350d:	50                   	push   %eax
  28350e:	e8 2b 04 00 00       	call   28393e <cons_putchar>
  283513:	83 c4 10             	add    $0x10,%esp
  283516:	eb 31                	jmp    283549 <console_task+0x2db>
				}
				else
				{
					if(cons.cur_x<240)
  283518:	8b 45 b8             	mov    -0x48(%ebp),%eax
  28351b:	3d ef 00 00 00       	cmp    $0xef,%eax
  283520:	7f 27                	jg     283549 <console_task+0x2db>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  283522:	8d 50 07             	lea    0x7(%eax),%edx
  283525:	85 c0                	test   %eax,%eax
  283527:	0f 48 c2             	cmovs  %edx,%eax
  28352a:	c1 f8 03             	sar    $0x3,%eax
  28352d:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  283531:	83 ec 04             	sub    $0x4,%esp
  283534:	6a 01                	push   $0x1
  283536:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  28353c:	53                   	push   %ebx
  28353d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283540:	50                   	push   %eax
  283541:	e8 f8 03 00 00       	call   28393e <cons_putchar>
  283546:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(sheet != 0)
  283549:	85 ff                	test   %edi,%edi
  28354b:	0f 84 f7 fd ff ff    	je     283348 <console_task+0xda>
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283551:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283554:	85 c0                	test   %eax,%eax
  283556:	78 24                	js     28357c <console_task+0x30e>
  283558:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  28355b:	8b 55 b8             	mov    -0x48(%ebp),%edx
  28355e:	83 ec 04             	sub    $0x4,%esp
  283561:	8d 59 0f             	lea    0xf(%ecx),%ebx
  283564:	53                   	push   %ebx
  283565:	8d 5a 07             	lea    0x7(%edx),%ebx
  283568:	53                   	push   %ebx
  283569:	51                   	push   %ecx
  28356a:	52                   	push   %edx
  28356b:	0f b6 c0             	movzbl %al,%eax
  28356e:	50                   	push   %eax
  28356f:	ff 77 04             	pushl  0x4(%edi)
  283572:	ff 37                	pushl  (%edi)
  283574:	e8 48 d7 ff ff       	call   280cc1 <boxfill8>
  283579:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  28357c:	8b 55 bc             	mov    -0x44(%ebp),%edx
  28357f:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283582:	83 ec 0c             	sub    $0xc,%esp
  283585:	8d 4a 10             	lea    0x10(%edx),%ecx
  283588:	51                   	push   %ecx
  283589:	8d 48 08             	lea    0x8(%eax),%ecx
  28358c:	51                   	push   %ecx
  28358d:	52                   	push   %edx
  28358e:	50                   	push   %eax
  28358f:	57                   	push   %edi
  283590:	e8 61 f3 ff ff       	call   2828f6 <sheet_refresh>
  283595:	83 c4 20             	add    $0x20,%esp
  283598:	e9 ab fd ff ff       	jmp    283348 <console_task+0xda>

0028359d <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  28359d:	55                   	push   %ebp
  28359e:	89 e5                	mov    %esp,%ebp
  2835a0:	53                   	push   %ebx
  2835a1:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2835a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2835ab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2835b2:	e9 87 00 00 00       	jmp    28363e <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  2835b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835c1:	8b 45 08             	mov    0x8(%ebp),%eax
  2835c4:	01 d0                	add    %edx,%eax
  2835c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835c9:	8b 55 0c             	mov    0xc(%ebp),%edx
  2835cc:	01 ca                	add    %ecx,%edx
  2835ce:	0f b6 12             	movzbl (%edx),%edx
  2835d1:	0f b6 d2             	movzbl %dl,%edx
  2835d4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2835d7:	8d 59 01             	lea    0x1(%ecx),%ebx
  2835da:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2835dd:	01 d9                	add    %ebx,%ecx
  2835df:	0f b6 09             	movzbl (%ecx),%ecx
  2835e2:	0f b6 c9             	movzbl %cl,%ecx
  2835e5:	c1 e1 08             	shl    $0x8,%ecx
  2835e8:	09 ca                	or     %ecx,%edx
  2835ea:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  2835f0:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  2835f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835f5:	83 c0 01             	add    $0x1,%eax
  2835f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835ff:	8b 45 08             	mov    0x8(%ebp),%eax
  283602:	01 d0                	add    %edx,%eax
  283604:	8b 55 f4             	mov    -0xc(%ebp),%edx
  283607:	8d 4a 01             	lea    0x1(%edx),%ecx
  28360a:	8b 55 0c             	mov    0xc(%ebp),%edx
  28360d:	01 ca                	add    %ecx,%edx
  28360f:	0f b6 12             	movzbl (%edx),%edx
  283612:	c0 ea 04             	shr    $0x4,%dl
  283615:	0f b6 d2             	movzbl %dl,%edx
  283618:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28361b:	8d 59 02             	lea    0x2(%ecx),%ebx
  28361e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283621:	01 d9                	add    %ebx,%ecx
  283623:	0f b6 09             	movzbl (%ecx),%ecx
  283626:	0f b6 c9             	movzbl %cl,%ecx
  283629:	c1 e1 04             	shl    $0x4,%ecx
  28362c:	09 ca                	or     %ecx,%edx
  28362e:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283634:	89 10                	mov    %edx,(%eax)
		j+=3;
  283636:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  28363a:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  28363e:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283645:	0f 8e 6c ff ff ff    	jle    2835b7 <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  28364b:	90                   	nop
}
  28364c:	83 c4 10             	add    $0x10,%esp
  28364f:	5b                   	pop    %ebx
  283650:	5d                   	pop    %ebp
  283651:	c3                   	ret    

00283652 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  283652:	55                   	push   %ebp
  283653:	89 e5                	mov    %esp,%ebp
  283655:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  283658:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  28365f:	7f 38                	jg     283699 <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  283661:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283668:	eb 25                	jmp    28368f <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  28366a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28366d:	8b 45 10             	mov    0x10(%ebp),%eax
  283670:	01 c2                	add    %eax,%edx
  283672:	8b 45 08             	mov    0x8(%ebp),%eax
  283675:	c1 e0 09             	shl    $0x9,%eax
  283678:	89 c1                	mov    %eax,%ecx
  28367a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28367d:	01 c8                	add    %ecx,%eax
  28367f:	89 c1                	mov    %eax,%ecx
  283681:	8b 45 18             	mov    0x18(%ebp),%eax
  283684:	01 c8                	add    %ecx,%eax
  283686:	0f b6 00             	movzbl (%eax),%eax
  283689:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  28368b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  28368f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283692:	3b 45 0c             	cmp    0xc(%ebp),%eax
  283695:	7c d3                	jl     28366a <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  283697:	eb 5e                	jmp    2836f7 <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  283699:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2836a0:	eb 25                	jmp    2836c7 <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2836a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2836a5:	8b 45 10             	mov    0x10(%ebp),%eax
  2836a8:	01 c2                	add    %eax,%edx
  2836aa:	8b 45 08             	mov    0x8(%ebp),%eax
  2836ad:	c1 e0 09             	shl    $0x9,%eax
  2836b0:	89 c1                	mov    %eax,%ecx
  2836b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836b5:	01 c8                	add    %ecx,%eax
  2836b7:	89 c1                	mov    %eax,%ecx
  2836b9:	8b 45 18             	mov    0x18(%ebp),%eax
  2836bc:	01 c8                	add    %ecx,%eax
  2836be:	0f b6 00             	movzbl (%eax),%eax
  2836c1:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  2836c3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2836c7:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  2836ce:	7e d2                	jle    2836a2 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  2836d0:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  2836d7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  2836de:	8b 45 08             	mov    0x8(%ebp),%eax
  2836e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2836e8:	8b 45 14             	mov    0x14(%ebp),%eax
  2836eb:	01 d0                	add    %edx,%eax
  2836ed:	8b 00                	mov    (%eax),%eax
  2836ef:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  2836f2:	e9 61 ff ff ff       	jmp    283658 <file_loadfile+0x6>
	return;
}
  2836f7:	c9                   	leave  
  2836f8:	c3                   	ret    

002836f9 <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  2836f9:	55                   	push   %ebp
  2836fa:	89 e5                	mov    %esp,%ebp
  2836fc:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  2836ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283706:	eb 0f                	jmp    283717 <file_search+0x1e>
	{
		s[j] = ' ';
  283708:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28370b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28370e:	01 d0                	add    %edx,%eax
  283710:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283713:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283717:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28371b:	7e eb                	jle    283708 <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  28371d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283724:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28372b:	e9 83 00 00 00       	jmp    2837b3 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283730:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283734:	7e 0a                	jle    283740 <file_search+0x47>
  283736:	b8 00 00 00 00       	mov    $0x0,%eax
  28373b:	e9 2a 01 00 00       	jmp    28386a <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283740:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283743:	8b 45 08             	mov    0x8(%ebp),%eax
  283746:	01 d0                	add    %edx,%eax
  283748:	0f b6 00             	movzbl (%eax),%eax
  28374b:	3c 2e                	cmp    $0x2e,%al
  28374d:	75 0f                	jne    28375e <file_search+0x65>
  28374f:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  283753:	7f 09                	jg     28375e <file_search+0x65>
			j = 8;
  283755:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  28375c:	eb 51                	jmp    2837af <file_search+0xb6>
		else
		{
			s[j] = name[i];
  28375e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283761:	8b 45 08             	mov    0x8(%ebp),%eax
  283764:	01 d0                	add    %edx,%eax
  283766:	0f b6 00             	movzbl (%eax),%eax
  283769:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28376c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28376f:	01 ca                	add    %ecx,%edx
  283771:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  283773:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283776:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283779:	01 d0                	add    %edx,%eax
  28377b:	0f b6 00             	movzbl (%eax),%eax
  28377e:	3c 60                	cmp    $0x60,%al
  283780:	7e 29                	jle    2837ab <file_search+0xb2>
  283782:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283785:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283788:	01 d0                	add    %edx,%eax
  28378a:	0f b6 00             	movzbl (%eax),%eax
  28378d:	3c 7a                	cmp    $0x7a,%al
  28378f:	7f 1a                	jg     2837ab <file_search+0xb2>
				s[j] -= 0x20;
  283791:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283794:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283797:	01 d0                	add    %edx,%eax
  283799:	0f b6 00             	movzbl (%eax),%eax
  28379c:	83 e8 20             	sub    $0x20,%eax
  28379f:	89 c1                	mov    %eax,%ecx
  2837a1:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2837a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2837a7:	01 d0                	add    %edx,%eax
  2837a9:	88 08                	mov    %cl,(%eax)
			j++;
  2837ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  2837af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2837b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2837b6:	8b 45 08             	mov    0x8(%ebp),%eax
  2837b9:	01 d0                	add    %edx,%eax
  2837bb:	0f b6 00             	movzbl (%eax),%eax
  2837be:	84 c0                	test   %al,%al
  2837c0:	0f 85 6a ff ff ff    	jne    283730 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2837c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2837cd:	e9 84 00 00 00       	jmp    283856 <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  2837d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837d5:	c1 e0 06             	shl    $0x6,%eax
  2837d8:	89 c2                	mov    %eax,%edx
  2837da:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837dd:	01 d0                	add    %edx,%eax
  2837df:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  2837e3:	84 c0                	test   %al,%al
  2837e5:	74 7d                	je     283864 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  2837e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837ea:	c1 e0 06             	shl    $0x6,%eax
  2837ed:	89 c2                	mov    %eax,%edx
  2837ef:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837f2:	01 d0                	add    %edx,%eax
  2837f4:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  2837f8:	0f b6 c0             	movzbl %al,%eax
  2837fb:	83 e0 18             	and    $0x18,%eax
  2837fe:	85 c0                	test   %eax,%eax
  283800:	75 50                	jne    283852 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  283802:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283809:	eb 31                	jmp    28383c <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  28380b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28380e:	c1 e0 06             	shl    $0x6,%eax
  283811:	89 c2                	mov    %eax,%edx
  283813:	8b 45 0c             	mov    0xc(%ebp),%eax
  283816:	01 c2                	add    %eax,%edx
  283818:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28381b:	01 d0                	add    %edx,%eax
  28381d:	83 c0 20             	add    $0x20,%eax
  283820:	0f b6 00             	movzbl (%eax),%eax
  283823:	0f b6 d0             	movzbl %al,%edx
  283826:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283829:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28382c:	01 c8                	add    %ecx,%eax
  28382e:	0f b6 00             	movzbl (%eax),%eax
  283831:	0f be c0             	movsbl %al,%eax
  283834:	39 c2                	cmp    %eax,%edx
  283836:	75 19                	jne    283851 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  283838:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28383c:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283840:	7e c9                	jle    28380b <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283842:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283845:	c1 e0 06             	shl    $0x6,%eax
  283848:	89 c2                	mov    %eax,%edx
  28384a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28384d:	01 d0                	add    %edx,%eax
  28384f:	eb 19                	jmp    28386a <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  283851:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  283852:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  283856:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283859:	3b 45 10             	cmp    0x10(%ebp),%eax
  28385c:	0f 8c 70 ff ff ff    	jl     2837d2 <file_search+0xd9>
  283862:	eb 01                	jmp    283865 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  283864:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  283865:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28386a:	c9                   	leave  
  28386b:	c3                   	ret    

0028386c <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  28386c:	55                   	push   %ebp
  28386d:	89 e5                	mov    %esp,%ebp
  28386f:	57                   	push   %edi
  283870:	56                   	push   %esi
  283871:	53                   	push   %ebx
  283872:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  283875:	8b 45 08             	mov    0x8(%ebp),%eax
  283878:	8b 40 08             	mov    0x8(%eax),%eax
  28387b:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  283880:	7f 0e                	jg     283890 <cons_newline+0x24>
	{
		cons->cur_y += 16;
  283882:	83 c0 10             	add    $0x10,%eax
  283885:	8b 7d 08             	mov    0x8(%ebp),%edi
  283888:	89 47 08             	mov    %eax,0x8(%edi)
  28388b:	e9 9c 00 00 00       	jmp    28392c <cons_newline+0xc0>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283890:	8b 45 08             	mov    0x8(%ebp),%eax
  283893:	8b 18                	mov    (%eax),%ebx
  283895:	bf 1c 00 00 00       	mov    $0x1c,%edi
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
  28389a:	85 db                	test   %ebx,%ebx
  28389c:	75 3a                	jne    2838d8 <cons_newline+0x6c>
  28389e:	e9 89 00 00 00       	jmp    28392c <cons_newline+0xc0>
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2838a3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2838a6:	8b 43 04             	mov    0x4(%ebx),%eax
  2838a9:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2838ac:	0f af f0             	imul   %eax,%esi
  2838af:	89 d1                	mov    %edx,%ecx
  2838b1:	03 0b                	add    (%ebx),%ecx
  2838b3:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  2838b7:	0f af c7             	imul   %edi,%eax
  2838ba:	89 f3                	mov    %esi,%ebx
  2838bc:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  2838bf:	83 c2 01             	add    $0x1,%edx
  2838c2:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  2838c8:	75 d9                	jne    2838a3 <cons_newline+0x37>
  2838ca:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
  2838cd:	83 c7 01             	add    $0x1,%edi
  2838d0:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  2838d6:	74 33                	je     28390b <cons_newline+0x9f>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2838d8:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2838dd:	8d 47 10             	lea    0x10(%edi),%eax
  2838e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
  2838e3:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  2838e6:	eb bb                	jmp    2838a3 <cons_newline+0x37>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2838e8:	89 fa                	mov    %edi,%edx
  2838ea:	0f af 53 04          	imul   0x4(%ebx),%edx
  2838ee:	89 c1                	mov    %eax,%ecx
  2838f0:	03 0b                	add    (%ebx),%ecx
  2838f2:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  2838f6:	83 c0 01             	add    $0x1,%eax
  2838f9:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2838fe:	75 e8                	jne    2838e8 <cons_newline+0x7c>
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  283900:	83 c7 01             	add    $0x1,%edi
  283903:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283909:	74 07                	je     283912 <cons_newline+0xa6>
  28390b:	b8 08 00 00 00       	mov    $0x8,%eax
  283910:	eb d6                	jmp    2838e8 <cons_newline+0x7c>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  283912:	83 ec 0c             	sub    $0xc,%esp
  283915:	68 9c 00 00 00       	push   $0x9c
  28391a:	68 f8 00 00 00       	push   $0xf8
  28391f:	6a 1c                	push   $0x1c
  283921:	6a 08                	push   $0x8
  283923:	53                   	push   %ebx
  283924:	e8 cd ef ff ff       	call   2828f6 <sheet_refresh>
  283929:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  28392c:	8b 45 08             	mov    0x8(%ebp),%eax
  28392f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283936:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283939:	5b                   	pop    %ebx
  28393a:	5e                   	pop    %esi
  28393b:	5f                   	pop    %edi
  28393c:	5d                   	pop    %ebp
  28393d:	c3                   	ret    

0028393e <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28393e:	55                   	push   %ebp
  28393f:	89 e5                	mov    %esp,%ebp
  283941:	56                   	push   %esi
  283942:	53                   	push   %ebx
  283943:	83 ec 10             	sub    $0x10,%esp
  283946:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283949:	8b 45 0c             	mov    0xc(%ebp),%eax
  28394c:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  28394f:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  283952:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  283956:	3c 09                	cmp    $0x9,%al
  283958:	75 4b                	jne    2839a5 <cons_putchar+0x67>
	{
		//tab
		for(;;)
		{
			if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  28395a:	8b 03                	mov    (%ebx),%eax
  28395c:	85 c0                	test   %eax,%eax
  28395e:	74 1d                	je     28397d <cons_putchar+0x3f>
  283960:	83 ec 04             	sub    $0x4,%esp
  283963:	6a 01                	push   $0x1
  283965:	68 51 55 28 00       	push   $0x285551
  28396a:	6a 00                	push   $0x0
  28396c:	6a 07                	push   $0x7
  28396e:	ff 73 08             	pushl  0x8(%ebx)
  283971:	ff 73 04             	pushl  0x4(%ebx)
  283974:	50                   	push   %eax
  283975:	e8 a6 d7 ff ff       	call   281120 <putfonts8_asc_sht>
  28397a:	83 c4 20             	add    $0x20,%esp
			cons->cur_x += 8;
  28397d:	8b 43 04             	mov    0x4(%ebx),%eax
  283980:	83 c0 08             	add    $0x8,%eax
  283983:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  283986:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28398b:	75 0c                	jne    283999 <cons_putchar+0x5b>
				cons_newline(cons);
  28398d:	83 ec 0c             	sub    $0xc,%esp
  283990:	53                   	push   %ebx
  283991:	e8 d6 fe ff ff       	call   28386c <cons_newline>
  283996:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  283999:	8b 43 04             	mov    0x4(%ebx),%eax
  28399c:	83 e8 08             	sub    $0x8,%eax
  28399f:	a8 1f                	test   $0x1f,%al
  2839a1:	75 b7                	jne    28395a <cons_putchar+0x1c>
  2839a3:	eb 5a                	jmp    2839ff <cons_putchar+0xc1>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2839a5:	3c 0a                	cmp    $0xa,%al
  2839a7:	75 0e                	jne    2839b7 <cons_putchar+0x79>
		cons_newline(cons);
  2839a9:	83 ec 0c             	sub    $0xc,%esp
  2839ac:	53                   	push   %ebx
  2839ad:	e8 ba fe ff ff       	call   28386c <cons_newline>
  2839b2:	83 c4 10             	add    $0x10,%esp
  2839b5:	eb 48                	jmp    2839ff <cons_putchar+0xc1>
	else if(s[0] == 0x0d) 
  2839b7:	3c 0d                	cmp    $0xd,%al
  2839b9:	74 44                	je     2839ff <cons_putchar+0xc1>
		;//todo
	else
	{
		if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  2839bb:	8b 03                	mov    (%ebx),%eax
  2839bd:	85 c0                	test   %eax,%eax
  2839bf:	74 1c                	je     2839dd <cons_putchar+0x9f>
  2839c1:	83 ec 04             	sub    $0x4,%esp
  2839c4:	6a 01                	push   $0x1
  2839c6:	8d 55 f6             	lea    -0xa(%ebp),%edx
  2839c9:	52                   	push   %edx
  2839ca:	6a 00                	push   $0x0
  2839cc:	6a 07                	push   $0x7
  2839ce:	ff 73 08             	pushl  0x8(%ebx)
  2839d1:	ff 73 04             	pushl  0x4(%ebx)
  2839d4:	50                   	push   %eax
  2839d5:	e8 46 d7 ff ff       	call   281120 <putfonts8_asc_sht>
  2839da:	83 c4 20             	add    $0x20,%esp
		if(move != 0)
  2839dd:	89 f0                	mov    %esi,%eax
  2839df:	84 c0                	test   %al,%al
  2839e1:	74 1c                	je     2839ff <cons_putchar+0xc1>
		{
			cons->cur_x += 8;
  2839e3:	8b 43 04             	mov    0x4(%ebx),%eax
  2839e6:	83 c0 08             	add    $0x8,%eax
  2839e9:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  2839ec:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2839f1:	75 0c                	jne    2839ff <cons_putchar+0xc1>
				cons_newline(cons);
  2839f3:	83 ec 0c             	sub    $0xc,%esp
  2839f6:	53                   	push   %ebx
  2839f7:	e8 70 fe ff ff       	call   28386c <cons_newline>
  2839fc:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2839ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a02:	5b                   	pop    %ebx
  283a03:	5e                   	pop    %esi
  283a04:	5d                   	pop    %ebp
  283a05:	c3                   	ret    

00283a06 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283a06:	55                   	push   %ebp
  283a07:	89 e5                	mov    %esp,%ebp
  283a09:	56                   	push   %esi
  283a0a:	53                   	push   %ebx
  283a0b:	83 ec 24             	sub    $0x24,%esp
  283a0e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  283a11:	8b 45 0c             	mov    0xc(%ebp),%eax
  283a14:	c1 e8 14             	shr    $0x14,%eax
  283a17:	50                   	push   %eax
  283a18:	68 e0 54 28 00       	push   $0x2854e0
  283a1d:	8d 75 da             	lea    -0x26(%ebp),%esi
  283a20:	56                   	push   %esi
  283a21:	e8 b7 df ff ff       	call   2819dd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a26:	83 c4 0c             	add    $0xc,%esp
  283a29:	6a 1e                	push   $0x1e
  283a2b:	56                   	push   %esi
  283a2c:	6a 00                	push   $0x0
  283a2e:	6a 07                	push   $0x7
  283a30:	ff 73 08             	pushl  0x8(%ebx)
  283a33:	6a 08                	push   $0x8
  283a35:	ff 33                	pushl  (%ebx)
  283a37:	e8 e4 d6 ff ff       	call   281120 <putfonts8_asc_sht>
	cons_newline(cons);
  283a3c:	83 c4 14             	add    $0x14,%esp
  283a3f:	53                   	push   %ebx
  283a40:	e8 27 fe ff ff       	call   28386c <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283a45:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  283a4c:	e8 87 e5 ff ff       	call   281fd8 <memman_total>
  283a51:	83 c4 0c             	add    $0xc,%esp
  283a54:	c1 e8 0a             	shr    $0xa,%eax
  283a57:	50                   	push   %eax
  283a58:	68 eb 54 28 00       	push   $0x2854eb
  283a5d:	56                   	push   %esi
  283a5e:	e8 7a df ff ff       	call   2819dd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a63:	83 c4 0c             	add    $0xc,%esp
  283a66:	6a 1e                	push   $0x1e
  283a68:	56                   	push   %esi
  283a69:	6a 00                	push   $0x0
  283a6b:	6a 07                	push   $0x7
  283a6d:	ff 73 08             	pushl  0x8(%ebx)
  283a70:	6a 08                	push   $0x8
  283a72:	ff 33                	pushl  (%ebx)
  283a74:	e8 a7 d6 ff ff       	call   281120 <putfonts8_asc_sht>
	cons_newline(cons);
  283a79:	83 c4 14             	add    $0x14,%esp
  283a7c:	53                   	push   %ebx
  283a7d:	e8 ea fd ff ff       	call   28386c <cons_newline>
	cons_newline(cons);
  283a82:	89 1c 24             	mov    %ebx,(%esp)
  283a85:	e8 e2 fd ff ff       	call   28386c <cons_newline>
	return;
  283a8a:	83 c4 10             	add    $0x10,%esp
}
  283a8d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283a90:	5b                   	pop    %ebx
  283a91:	5e                   	pop    %esi
  283a92:	5d                   	pop    %ebp
  283a93:	c3                   	ret    

00283a94 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  283a94:	55                   	push   %ebp
  283a95:	89 e5                	mov    %esp,%ebp
  283a97:	57                   	push   %edi
  283a98:	56                   	push   %esi
  283a99:	53                   	push   %ebx
  283a9a:	83 ec 0c             	sub    $0xc,%esp
  283a9d:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  283aa0:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  283aa2:	be 1c 00 00 00       	mov    $0x1c,%esi
  283aa7:	eb 23                	jmp    283acc <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283aa9:	89 f1                	mov    %esi,%ecx
  283aab:	0f af 4a 04          	imul   0x4(%edx),%ecx
  283aaf:	89 c3                	mov    %eax,%ebx
  283ab1:	03 1a                	add    (%edx),%ebx
  283ab3:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  283ab7:	83 c0 01             	add    $0x1,%eax
  283aba:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283abf:	75 e8                	jne    283aa9 <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283ac1:	83 c6 01             	add    $0x1,%esi
  283ac4:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  283aca:	74 07                	je     283ad3 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  283acc:	b8 08 00 00 00       	mov    $0x8,%eax
  283ad1:	eb d6                	jmp    283aa9 <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283ad3:	83 ec 0c             	sub    $0xc,%esp
  283ad6:	68 9c 00 00 00       	push   $0x9c
  283adb:	68 f8 00 00 00       	push   $0xf8
  283ae0:	6a 1c                	push   $0x1c
  283ae2:	6a 08                	push   $0x8
  283ae4:	52                   	push   %edx
  283ae5:	e8 0c ee ff ff       	call   2828f6 <sheet_refresh>
	cons->cur_y = 28;
  283aea:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283af1:	83 c4 20             	add    $0x20,%esp
}
  283af4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283af7:	5b                   	pop    %ebx
  283af8:	5e                   	pop    %esi
  283af9:	5f                   	pop    %edi
  283afa:	5d                   	pop    %ebp
  283afb:	c3                   	ret    

00283afc <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  283afc:	55                   	push   %ebp
  283afd:	89 e5                	mov    %esp,%ebp
  283aff:	57                   	push   %edi
  283b00:	56                   	push   %esi
  283b01:	53                   	push   %ebx
  283b02:	83 ec 2c             	sub    $0x2c,%esp
  283b05:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283b08:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283b0f:	84 c0                	test   %al,%al
  283b11:	0f 84 87 00 00 00    	je     283b9e <cmd_dir+0xa2>
  283b17:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283b1c:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283b1f:	eb 0b                	jmp    283b2c <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283b21:	83 c3 40             	add    $0x40,%ebx
  283b24:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283b28:	84 c0                	test   %al,%al
  283b2a:	74 72                	je     283b9e <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283b2c:	3c e5                	cmp    $0xe5,%al
  283b2e:	74 66                	je     283b96 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283b30:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283b34:	75 60                	jne    283b96 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283b36:	83 ec 04             	sub    $0x4,%esp
  283b39:	ff 73 3c             	pushl  0x3c(%ebx)
  283b3c:	68 f5 54 28 00       	push   $0x2854f5
  283b41:	56                   	push   %esi
  283b42:	e8 96 de ff ff       	call   2819dd <sprintf>
  283b47:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283b4a:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283b4f:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283b54:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283b57:	83 c0 01             	add    $0x1,%eax
  283b5a:	83 f8 08             	cmp    $0x8,%eax
  283b5d:	75 f0                	jne    283b4f <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  283b5f:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283b63:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283b66:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283b6a:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  283b6d:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  283b71:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283b74:	83 ec 04             	sub    $0x4,%esp
  283b77:	6a 1e                	push   $0x1e
  283b79:	56                   	push   %esi
  283b7a:	6a 00                	push   $0x0
  283b7c:	6a 07                	push   $0x7
  283b7e:	ff 77 08             	pushl  0x8(%edi)
  283b81:	6a 08                	push   $0x8
  283b83:	ff 37                	pushl  (%edi)
  283b85:	e8 96 d5 ff ff       	call   281120 <putfonts8_asc_sht>
				cons_newline(cons);
  283b8a:	83 c4 14             	add    $0x14,%esp
  283b8d:	57                   	push   %edi
  283b8e:	e8 d9 fc ff ff       	call   28386c <cons_newline>
  283b93:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283b96:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283b9c:	75 83                	jne    283b21 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  283b9e:	83 ec 0c             	sub    $0xc,%esp
  283ba1:	57                   	push   %edi
  283ba2:	e8 c5 fc ff ff       	call   28386c <cons_newline>
	return;
  283ba7:	83 c4 10             	add    $0x10,%esp
}
  283baa:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283bad:	5b                   	pop    %ebx
  283bae:	5e                   	pop    %esi
  283baf:	5f                   	pop    %edi
  283bb0:	5d                   	pop    %ebp
  283bb1:	c3                   	ret    

00283bb2 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283bb2:	55                   	push   %ebp
  283bb3:	89 e5                	mov    %esp,%ebp
  283bb5:	57                   	push   %edi
  283bb6:	56                   	push   %esi
  283bb7:	53                   	push   %ebx
  283bb8:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  283bbb:	68 e0 00 00 00       	push   $0xe0
  283bc0:	68 00 26 10 00       	push   $0x102600
  283bc5:	8b 45 10             	mov    0x10(%ebp),%eax
  283bc8:	83 c0 05             	add    $0x5,%eax
  283bcb:	50                   	push   %eax
  283bcc:	e8 28 fb ff ff       	call   2836f9 <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283bd1:	83 c4 10             	add    $0x10,%esp
  283bd4:	85 c0                	test   %eax,%eax
  283bd6:	74 6e                	je     283c46 <cmd_type+0x94>
  283bd8:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283bda:	83 ec 08             	sub    $0x8,%esp
  283bdd:	ff 70 3c             	pushl  0x3c(%eax)
  283be0:	68 00 00 3c 00       	push   $0x3c0000
  283be5:	e8 63 e7 ff ff       	call   28234d <memman_alloc_4k>
  283bea:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283bec:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283bf3:	ff 75 0c             	pushl  0xc(%ebp)
  283bf6:	50                   	push   %eax
  283bf7:	ff 76 3c             	pushl  0x3c(%esi)
  283bfa:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283bfe:	50                   	push   %eax
  283bff:	e8 4e fa ff ff       	call   283652 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283c04:	8b 46 3c             	mov    0x3c(%esi),%eax
  283c07:	83 c4 20             	add    $0x20,%esp
  283c0a:	85 c0                	test   %eax,%eax
  283c0c:	74 24                	je     283c32 <cmd_type+0x80>
  283c0e:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283c13:	83 ec 04             	sub    $0x4,%esp
  283c16:	6a 01                	push   $0x1
  283c18:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283c1c:	50                   	push   %eax
  283c1d:	ff 75 08             	pushl  0x8(%ebp)
  283c20:	e8 19 fd ff ff       	call   28393e <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283c25:	83 c3 01             	add    $0x1,%ebx
  283c28:	8b 46 3c             	mov    0x3c(%esi),%eax
  283c2b:	83 c4 10             	add    $0x10,%esp
  283c2e:	39 d8                	cmp    %ebx,%eax
  283c30:	77 e1                	ja     283c13 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283c32:	83 ec 04             	sub    $0x4,%esp
  283c35:	50                   	push   %eax
  283c36:	57                   	push   %edi
  283c37:	68 00 00 3c 00       	push   $0x3c0000
  283c3c:	e8 38 e7 ff ff       	call   282379 <memman_free_4k>
  283c41:	83 c4 10             	add    $0x10,%esp
  283c44:	eb 2b                	jmp    283c71 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283c46:	83 ec 04             	sub    $0x4,%esp
  283c49:	6a 0f                	push   $0xf
  283c4b:	68 05 55 28 00       	push   $0x285505
  283c50:	6a 00                	push   $0x0
  283c52:	6a 07                	push   $0x7
  283c54:	8b 45 08             	mov    0x8(%ebp),%eax
  283c57:	ff 70 08             	pushl  0x8(%eax)
  283c5a:	6a 08                	push   $0x8
  283c5c:	ff 30                	pushl  (%eax)
  283c5e:	e8 bd d4 ff ff       	call   281120 <putfonts8_asc_sht>
		cons_newline(cons);
  283c63:	83 c4 14             	add    $0x14,%esp
  283c66:	ff 75 08             	pushl  0x8(%ebp)
  283c69:	e8 fe fb ff ff       	call   28386c <cons_newline>
  283c6e:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283c71:	83 ec 0c             	sub    $0xc,%esp
  283c74:	ff 75 08             	pushl  0x8(%ebp)
  283c77:	e8 f0 fb ff ff       	call   28386c <cons_newline>
	return;
  283c7c:	83 c4 10             	add    $0x10,%esp
}
  283c7f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283c82:	5b                   	pop    %ebx
  283c83:	5e                   	pop    %esi
  283c84:	5f                   	pop    %edi
  283c85:	5d                   	pop    %ebp
  283c86:	c3                   	ret    

00283c87 <cmd_exit>:
	}
	return 0;
}

void cmd_exit(struct CONSOLE *cons,int *fat)
{
  283c87:	55                   	push   %ebp
  283c88:	89 e5                	mov    %esp,%ebp
  283c8a:	57                   	push   %edi
  283c8b:	56                   	push   %esi
  283c8c:	53                   	push   %ebx
  283c8d:	83 ec 0c             	sub    $0xc,%esp
	extern struct TASKCTL *taskctl;
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_now();
  283c90:	e8 03 f2 ff ff       	call   282e98 <task_now>
  283c95:	89 c3                	mov    %eax,%ebx
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283c97:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct FIFO32 *fifo = (struct FIFO32 *) *((int *)0x0fec);
  283c9d:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	timer_cancel(cons->timer);
  283ca3:	83 ec 0c             	sub    $0xc,%esp
  283ca6:	8b 45 08             	mov    0x8(%ebp),%eax
  283ca9:	ff 70 10             	pushl  0x10(%eax)
  283cac:	e8 fa ef ff ff       	call   282cab <timer_cancel>
	memman_free_4k(memman,(int)fat,4*2880);
  283cb1:	83 c4 0c             	add    $0xc,%esp
  283cb4:	68 00 2d 00 00       	push   $0x2d00
  283cb9:	ff 75 0c             	pushl  0xc(%ebp)
  283cbc:	68 00 00 3c 00       	push   $0x3c0000
  283cc1:	e8 b3 e6 ff ff       	call   282379 <memman_free_4k>
	io_cli();
  283cc6:	e8 07 ce ff ff       	call   280ad2 <io_cli>
	if(cons->sht != 0)
  283ccb:	8b 45 08             	mov    0x8(%ebp),%eax
  283cce:	8b 00                	mov    (%eax),%eax
  283cd0:	83 c4 10             	add    $0x10,%esp
  283cd3:	85 c0                	test   %eax,%eax
  283cd5:	74 25                	je     283cfc <cmd_exit+0x75>
		fifo32_put(fifo,cons->sht - shtctl->sheets0 + 768);
  283cd7:	83 ec 08             	sub    $0x8,%esp
  283cda:	81 c7 14 04 00 00    	add    $0x414,%edi
  283ce0:	29 f8                	sub    %edi,%eax
  283ce2:	c1 f8 03             	sar    $0x3,%eax
  283ce5:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  283ceb:	05 00 03 00 00       	add    $0x300,%eax
  283cf0:	50                   	push   %eax
  283cf1:	56                   	push   %esi
  283cf2:	e8 d2 de ff ff       	call   281bc9 <fifo32_put>
  283cf7:	83 c4 10             	add    $0x10,%esp
  283cfa:	eb 29                	jmp    283d25 <cmd_exit+0x9e>
	else
		fifo32_put(fifo,task - taskctl->tasks0 + 1024 );
  283cfc:	83 ec 08             	sub    $0x8,%esp
  283cff:	89 d8                	mov    %ebx,%eax
  283d01:	2b 05 fc a5 28 00    	sub    0x28a5fc,%eax
  283d07:	8d 80 08 f0 ff ff    	lea    -0xff8(%eax),%eax
  283d0d:	c1 f8 02             	sar    $0x2,%eax
  283d10:	69 c0 cf 46 7d 67    	imul   $0x677d46cf,%eax,%eax
  283d16:	05 00 04 00 00       	add    $0x400,%eax
  283d1b:	50                   	push   %eax
  283d1c:	56                   	push   %esi
  283d1d:	e8 a7 de ff ff       	call   281bc9 <fifo32_put>
  283d22:	83 c4 10             	add    $0x10,%esp
	io_sti();
  283d25:	e8 aa cd ff ff       	call   280ad4 <io_sti>
	for(;;)
	{
		task_sleep(task);
  283d2a:	83 ec 0c             	sub    $0xc,%esp
  283d2d:	53                   	push   %ebx
  283d2e:	e8 f9 f4 ff ff       	call   28322c <task_sleep>
  283d33:	83 c4 10             	add    $0x10,%esp
  283d36:	eb f2                	jmp    283d2a <cmd_exit+0xa3>

00283d38 <cons_putstr0>:
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283d38:	55                   	push   %ebp
  283d39:	89 e5                	mov    %esp,%ebp
  283d3b:	56                   	push   %esi
  283d3c:	53                   	push   %ebx
  283d3d:	8b 75 08             	mov    0x8(%ebp),%esi
  283d40:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283d43:	0f b6 03             	movzbl (%ebx),%eax
  283d46:	84 c0                	test   %al,%al
  283d48:	74 1c                	je     283d66 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283d4a:	83 ec 04             	sub    $0x4,%esp
  283d4d:	6a 01                	push   $0x1
  283d4f:	0f be c0             	movsbl %al,%eax
  283d52:	50                   	push   %eax
  283d53:	56                   	push   %esi
  283d54:	e8 e5 fb ff ff       	call   28393e <cons_putchar>
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283d59:	83 c3 01             	add    $0x1,%ebx
  283d5c:	0f b6 03             	movzbl (%ebx),%eax
  283d5f:	83 c4 10             	add    $0x10,%esp
  283d62:	84 c0                	test   %al,%al
  283d64:	75 e4                	jne    283d4a <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283d66:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283d69:	5b                   	pop    %ebx
  283d6a:	5e                   	pop    %esi
  283d6b:	5d                   	pop    %ebp
  283d6c:	c3                   	ret    

00283d6d <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283d6d:	55                   	push   %ebp
  283d6e:	89 e5                	mov    %esp,%ebp
  283d70:	57                   	push   %edi
  283d71:	56                   	push   %esi
  283d72:	53                   	push   %ebx
  283d73:	83 ec 4c             	sub    $0x4c,%esp
  283d76:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283d79:	e8 1a f1 ff ff       	call   282e98 <task_now>
  283d7e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283d81:	0f b6 06             	movzbl (%esi),%eax
  283d84:	3c 20                	cmp    $0x20,%al
  283d86:	0f 8f 85 02 00 00    	jg     284011 <cmd_app+0x2a4>
  283d8c:	eb 16                	jmp    283da4 <cmd_app+0x37>
  283d8e:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283d92:	3c 20                	cmp    $0x20,%al
  283d94:	7e 13                	jle    283da9 <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283d96:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283d9a:	83 c3 01             	add    $0x1,%ebx
  283d9d:	83 fb 0d             	cmp    $0xd,%ebx
  283da0:	75 ec                	jne    283d8e <cmd_app+0x21>
  283da2:	eb 05                	jmp    283da9 <cmd_app+0x3c>
  283da4:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283da9:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283dae:	83 ec 04             	sub    $0x4,%esp
  283db1:	68 e0 00 00 00       	push   $0xe0
  283db6:	68 00 26 10 00       	push   $0x102600
  283dbb:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283dbe:	50                   	push   %eax
  283dbf:	e8 35 f9 ff ff       	call   2836f9 <file_search>
  283dc4:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283dc7:	83 c4 10             	add    $0x10,%esp
  283dca:	85 c0                	test   %eax,%eax
  283dcc:	75 48                	jne    283e16 <cmd_app+0xa9>
  283dce:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283dd3:	0f 84 45 02 00 00    	je     28401e <cmd_app+0x2b1>
	{
		name[i  ] = '.';
  283dd9:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283dde:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283de3:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283de8:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283ded:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283df2:	83 ec 04             	sub    $0x4,%esp
  283df5:	68 e0 00 00 00       	push   $0xe0
  283dfa:	68 00 26 10 00       	push   $0x102600
  283dff:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283e02:	50                   	push   %eax
  283e03:	e8 f1 f8 ff ff       	call   2836f9 <file_search>
  283e08:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283e0b:	83 c4 10             	add    $0x10,%esp
  283e0e:	85 c0                	test   %eax,%eax
  283e10:	0f 84 f4 01 00 00    	je     28400a <cmd_app+0x29d>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283e16:	83 ec 08             	sub    $0x8,%esp
  283e19:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283e1c:	ff 77 3c             	pushl  0x3c(%edi)
  283e1f:	68 00 00 3c 00       	push   $0x3c0000
  283e24:	e8 24 e5 ff ff       	call   28234d <memman_alloc_4k>
  283e29:	89 c6                	mov    %eax,%esi
  283e2b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283e2e:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283e35:	ff 75 0c             	pushl  0xc(%ebp)
  283e38:	50                   	push   %eax
  283e39:	ff 77 3c             	pushl  0x3c(%edi)
  283e3c:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283e40:	50                   	push   %eax
  283e41:	e8 0c f8 ff ff       	call   283652 <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283e46:	83 c4 20             	add    $0x20,%esp
  283e49:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283e4d:	0f 86 79 01 00 00    	jbe    283fcc <cmd_app+0x25f>
  283e53:	83 ec 04             	sub    $0x4,%esp
  283e56:	6a 04                	push   $0x4
  283e58:	68 15 55 28 00       	push   $0x285515
  283e5d:	89 f0                	mov    %esi,%eax
  283e5f:	83 c0 04             	add    $0x4,%eax
  283e62:	50                   	push   %eax
  283e63:	e8 b0 dc ff ff       	call   281b18 <strncmp>
  283e68:	83 c4 10             	add    $0x10,%esp
  283e6b:	85 c0                	test   %eax,%eax
  283e6d:	0f 85 59 01 00 00    	jne    283fcc <cmd_app+0x25f>
  283e73:	80 3e 00             	cmpb   $0x0,(%esi)
  283e76:	0f 85 50 01 00 00    	jne    283fcc <cmd_app+0x25f>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283e7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283e7f:	8b 08                	mov    (%eax),%ecx
			int esp		=	*((int *)(p+0x000c));
  283e81:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283e84:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283e87:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283e8a:	83 ec 08             	sub    $0x8,%esp
  283e8d:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  283e90:	51                   	push   %ecx
  283e91:	68 00 00 3c 00       	push   $0x3c0000
  283e96:	e8 b2 e4 ff ff       	call   28234d <memman_alloc_4k>
  283e9b:	89 c2                	mov    %eax,%edx
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
  283e9d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  283ea0:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  283ea3:	89 91 a8 00 00 00    	mov    %edx,0xa8(%ecx)
			set_segmdesc(task->ldt+0,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283ea9:	68 fa 40 00 00       	push   $0x40fa
  283eae:	ff 75 bc             	pushl  -0x44(%ebp)
  283eb1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283eb4:	8b 40 3c             	mov    0x3c(%eax),%eax
  283eb7:	83 e8 01             	sub    $0x1,%eax
  283eba:	50                   	push   %eax
  283ebb:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  283ebe:	89 c8                	mov    %ecx,%eax
  283ec0:	05 94 00 00 00       	add    $0x94,%eax
  283ec5:	50                   	push   %eax
  283ec6:	e8 a7 d5 ff ff       	call   281472 <set_segmdesc>
			set_segmdesc(task->ldt+1,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
  283ecb:	83 c4 20             	add    $0x20,%esp
  283ece:	68 f2 40 00 00       	push   $0x40f2
  283ed3:	ff 75 b4             	pushl  -0x4c(%ebp)
  283ed6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  283ed9:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283edc:	50                   	push   %eax
  283edd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283ee0:	05 9c 00 00 00       	add    $0x9c,%eax
  283ee5:	50                   	push   %eax
  283ee6:	e8 87 d5 ff ff       	call   281472 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283eeb:	83 c4 10             	add    $0x10,%esp
  283eee:	85 db                	test   %ebx,%ebx
  283ef0:	7e 1b                	jle    283f0d <cmd_app+0x1a0>
  283ef2:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283ef7:	03 7d bc             	add    -0x44(%ebp),%edi
  283efa:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283efd:	01 f2                	add    %esi,%edx
  283eff:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283f03:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			q = (char *)memman_alloc_4k(memman,segsiz);
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
			set_segmdesc(task->ldt+0,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(task->ldt+1,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283f06:	83 c0 01             	add    $0x1,%eax
  283f09:	39 c3                	cmp    %eax,%ebx
  283f0b:	75 f2                	jne    283eff <cmd_app+0x192>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,0*8+4,esp,1*8+4,&(task->tss.esp0));
  283f0d:	83 ec 0c             	sub    $0xc,%esp
  283f10:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283f13:	83 c0 30             	add    $0x30,%eax
  283f16:	50                   	push   %eax
  283f17:	6a 0c                	push   $0xc
  283f19:	56                   	push   %esi
  283f1a:	6a 04                	push   $0x4
  283f1c:	6a 1b                	push   $0x1b
  283f1e:	e8 4d 05 00 00       	call   284470 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283f23:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283f29:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283f2f:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283f35:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283f3b:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283f3e:	8b 03                	mov    (%ebx),%eax
  283f40:	83 e0 11             	and    $0x11,%eax
  283f43:	83 f8 11             	cmp    $0x11,%eax
  283f46:	75 14                	jne    283f5c <cmd_app+0x1ef>
  283f48:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283f4b:	3b 43 08             	cmp    0x8(%ebx),%eax
  283f4e:	75 0c                	jne    283f5c <cmd_app+0x1ef>
					sheet_free(sht);
  283f50:	83 ec 0c             	sub    $0xc,%esp
  283f53:	56                   	push   %esi
  283f54:	e8 19 eb ff ff       	call   282a72 <sheet_free>
  283f59:	83 c4 10             	add    $0x10,%esp
  283f5c:	83 c3 28             	add    $0x28,%ebx
  283f5f:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,0*8+4,esp,1*8+4,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283f62:	39 fe                	cmp    %edi,%esi
  283f64:	75 d8                	jne    283f3e <cmd_app+0x1d1>
  283f66:	bb 00 00 00 00       	mov    $0x0,%ebx
  283f6b:	8b 75 c4             	mov    -0x3c(%ebp),%esi
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			for(int i=0;i<8;i++)
			{
				if(task->fhandle[i].buf != 0)
  283f6e:	89 da                	mov    %ebx,%edx
  283f70:	03 96 b0 00 00 00    	add    0xb0(%esi),%edx
  283f76:	8b 02                	mov    (%edx),%eax
  283f78:	85 c0                	test   %eax,%eax
  283f7a:	74 21                	je     283f9d <cmd_app+0x230>
				{
					memman_free_4k(memman,(int)task->fhandle[i].buf,task->fhandle[i].size);
  283f7c:	83 ec 04             	sub    $0x4,%esp
  283f7f:	ff 72 04             	pushl  0x4(%edx)
  283f82:	50                   	push   %eax
  283f83:	68 00 00 3c 00       	push   $0x3c0000
  283f88:	e8 ec e3 ff ff       	call   282379 <memman_free_4k>
					task->fhandle[i].buf = 0;
  283f8d:	8b 86 b0 00 00 00    	mov    0xb0(%esi),%eax
  283f93:	c7 04 18 00 00 00 00 	movl   $0x0,(%eax,%ebx,1)
  283f9a:	83 c4 10             	add    $0x10,%esp
  283f9d:	83 c3 0c             	add    $0xc,%ebx
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			for(int i=0;i<8;i++)
  283fa0:	83 fb 60             	cmp    $0x60,%ebx
  283fa3:	75 c9                	jne    283f6e <cmd_app+0x201>
				{
					memman_free_4k(memman,(int)task->fhandle[i].buf,task->fhandle[i].size);
					task->fhandle[i].buf = 0;
				}
			}
			timer_cancelall(&task->fifo);
  283fa5:	83 ec 0c             	sub    $0xc,%esp
  283fa8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283fab:	83 c0 10             	add    $0x10,%eax
  283fae:	50                   	push   %eax
  283faf:	e8 67 ed ff ff       	call   282d1b <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283fb4:	83 c4 0c             	add    $0xc,%esp
  283fb7:	ff 75 b8             	pushl  -0x48(%ebp)
  283fba:	ff 75 b4             	pushl  -0x4c(%ebp)
  283fbd:	68 00 00 3c 00       	push   $0x3c0000
  283fc2:	e8 b2 e3 ff ff       	call   282379 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283fc7:	83 c4 10             	add    $0x10,%esp
  283fca:	eb 13                	jmp    283fdf <cmd_app+0x272>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283fcc:	83 ec 08             	sub    $0x8,%esp
  283fcf:	68 1a 55 28 00       	push   $0x28551a
  283fd4:	ff 75 08             	pushl  0x8(%ebp)
  283fd7:	e8 5c fd ff ff       	call   283d38 <cons_putstr0>
  283fdc:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283fdf:	83 ec 04             	sub    $0x4,%esp
  283fe2:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283fe5:	ff 70 3c             	pushl  0x3c(%eax)
  283fe8:	ff 75 bc             	pushl  -0x44(%ebp)
  283feb:	68 00 00 3c 00       	push   $0x3c0000
  283ff0:	e8 84 e3 ff ff       	call   282379 <memman_free_4k>
		cons_newline(cons);
  283ff5:	83 c4 04             	add    $0x4,%esp
  283ff8:	ff 75 08             	pushl  0x8(%ebp)
  283ffb:	e8 6c f8 ff ff       	call   28386c <cons_newline>
		return 1;
  284000:	83 c4 10             	add    $0x10,%esp
  284003:	b8 01 00 00 00       	mov    $0x1,%eax
  284008:	eb 14                	jmp    28401e <cmd_app+0x2b1>
	}
	return 0;
  28400a:	b8 00 00 00 00       	mov    $0x0,%eax
  28400f:	eb 0d                	jmp    28401e <cmd_app+0x2b1>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  284011:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  284014:	bb 01 00 00 00       	mov    $0x1,%ebx
  284019:	e9 70 fd ff ff       	jmp    283d8e <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  28401e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284021:	5b                   	pop    %ebx
  284022:	5e                   	pop    %esi
  284023:	5f                   	pop    %edi
  284024:	5d                   	pop    %ebp
  284025:	c3                   	ret    

00284026 <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  284026:	55                   	push   %ebp
  284027:	89 e5                	mov    %esp,%ebp
  284029:	57                   	push   %edi
  28402a:	56                   	push   %esi
  28402b:	53                   	push   %ebx
  28402c:	83 ec 0c             	sub    $0xc,%esp
  28402f:	8b 7d 08             	mov    0x8(%ebp),%edi
  284032:	8b 75 0c             	mov    0xc(%ebp),%esi
  284035:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  284038:	85 c0                	test   %eax,%eax
  28403a:	7e 1d                	jle    284059 <cons_putstr1+0x33>
  28403c:	89 f3                	mov    %esi,%ebx
  28403e:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  284040:	83 ec 04             	sub    $0x4,%esp
  284043:	6a 01                	push   $0x1
  284045:	0f be 03             	movsbl (%ebx),%eax
  284048:	50                   	push   %eax
  284049:	57                   	push   %edi
  28404a:	e8 ef f8 ff ff       	call   28393e <cons_putchar>
  28404f:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  284052:	83 c4 10             	add    $0x10,%esp
  284055:	39 f3                	cmp    %esi,%ebx
  284057:	75 e7                	jne    284040 <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  284059:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28405c:	5b                   	pop    %ebx
  28405d:	5e                   	pop    %esi
  28405e:	5f                   	pop    %edi
  28405f:	5d                   	pop    %ebp
  284060:	c3                   	ret    

00284061 <open_constask>:

struct TASK *open_constask(struct SHEET *sht,unsigned int memtotal)
{
  284061:	55                   	push   %ebp
  284062:	89 e5                	mov    %esp,%ebp
  284064:	53                   	push   %ebx
  284065:	83 ec 04             	sub    $0x4,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_alloc();
  284068:	e8 3b ed ff ff       	call   282da8 <task_alloc>
  28406d:	89 c3                	mov    %eax,%ebx
	task->cons_stack = memman_alloc_4k(memman,64*1024);
  28406f:	83 ec 08             	sub    $0x8,%esp
  284072:	68 00 00 01 00       	push   $0x10000
  284077:	68 00 00 3c 00       	push   $0x3c0000
  28407c:	e8 cc e2 ff ff       	call   28234d <memman_alloc_4k>
  284081:	89 83 ac 00 00 00    	mov    %eax,0xac(%ebx)
	task->tss.esp = task->cons_stack+64*1024-12;
  284087:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
  28408d:	89 53 64             	mov    %edx,0x64(%ebx)
	task->tss.eip = (int)&console_task - 0x280000;
  284090:	c7 43 4c 6e 32 00 00 	movl   $0x326e,0x4c(%ebx)
	task->tss.es = 1*8;
  284097:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	task->tss.cs = 3*8;
  28409e:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	task->tss.ss = 1*8;
  2840a5:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	task->tss.ds = 1*8;
  2840ac:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  2840b3:	00 00 00 
	task->tss.fs = 1*8;
  2840b6:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  2840bd:	00 00 00 
	task->tss.gs = 1*8;
  2840c0:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  2840c7:	00 00 00 
	*((int *)(task->tss.esp + 4)) = sht;
  2840ca:	8b 55 08             	mov    0x8(%ebp),%edx
  2840cd:	89 90 f8 ff 00 00    	mov    %edx,0xfff8(%eax)
	*((int *)(task->tss.esp + 8)) = memtotal;
  2840d3:	8b 43 64             	mov    0x64(%ebx),%eax
  2840d6:	8b 55 0c             	mov    0xc(%ebp),%edx
  2840d9:	89 50 08             	mov    %edx,0x8(%eax)
	task_run(task,2,2);
  2840dc:	83 c4 0c             	add    $0xc,%esp
  2840df:	6a 02                	push   $0x2
  2840e1:	6a 02                	push   $0x2
  2840e3:	53                   	push   %ebx
  2840e4:	e8 a4 ee ff ff       	call   282f8d <task_run>
	int *cons_fifo = memman_alloc_4k(memman,128*4);
  2840e9:	83 c4 08             	add    $0x8,%esp
  2840ec:	68 00 02 00 00       	push   $0x200
  2840f1:	68 00 00 3c 00       	push   $0x3c0000
  2840f6:	e8 52 e2 ff ff       	call   28234d <memman_alloc_4k>
	fifo32_init(&task->fifo,128,cons_fifo,task);
  2840fb:	53                   	push   %ebx
  2840fc:	50                   	push   %eax
  2840fd:	68 80 00 00 00       	push   $0x80
  284102:	8d 43 10             	lea    0x10(%ebx),%eax
  284105:	50                   	push   %eax
  284106:	e8 8d da ff ff       	call   281b98 <fifo32_init>
	return task;
}
  28410b:	89 d8                	mov    %ebx,%eax
  28410d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284110:	c9                   	leave  
  284111:	c3                   	ret    

00284112 <open_console>:

struct SHEET *open_console(struct SHTCTL *shtctl,unsigned int memtotal)
{
  284112:	55                   	push   %ebp
  284113:	89 e5                	mov    %esp,%ebp
  284115:	56                   	push   %esi
  284116:	53                   	push   %ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct SHEET *sht = sheet_alloc(shtctl);
  284117:	83 ec 0c             	sub    $0xc,%esp
  28411a:	ff 75 08             	pushl  0x8(%ebp)
  28411d:	e8 1a e3 ff ff       	call   28243c <sheet_alloc>
  284122:	89 c3                	mov    %eax,%ebx
	unsigned char *buf = (unsigned char *)memman_alloc_4k(memman,256*165);
  284124:	83 c4 08             	add    $0x8,%esp
  284127:	68 00 a5 00 00       	push   $0xa500
  28412c:	68 00 00 3c 00       	push   $0x3c0000
  284131:	e8 17 e2 ff ff       	call   28234d <memman_alloc_4k>
  284136:	89 c6                	mov    %eax,%esi
	sheet_setbuf(sht,buf,256,165,-1);
  284138:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  28413f:	68 a5 00 00 00       	push   $0xa5
  284144:	68 00 01 00 00       	push   $0x100
  284149:	50                   	push   %eax
  28414a:	53                   	push   %ebx
  28414b:	e8 5f e3 ff ff       	call   2824af <sheet_setbuf>
	make_window8(buf,256,165,"console",0);
  284150:	83 c4 14             	add    $0x14,%esp
  284153:	6a 00                	push   $0x0
  284155:	68 33 55 28 00       	push   $0x285533
  28415a:	68 a5 00 00 00       	push   $0xa5
  28415f:	68 00 01 00 00       	push   $0x100
  284164:	56                   	push   %esi
  284165:	e8 58 ce ff ff       	call   280fc2 <make_window8>
	make_textbox8(sht,8,28,240,128,COL8_000000);
  28416a:	83 c4 18             	add    $0x18,%esp
  28416d:	6a 00                	push   $0x0
  28416f:	68 80 00 00 00       	push   $0x80
  284174:	68 f0 00 00 00       	push   $0xf0
  284179:	6a 1c                	push   $0x1c
  28417b:	6a 08                	push   $0x8
  28417d:	53                   	push   %ebx
  28417e:	e8 02 d0 ff ff       	call   281185 <make_textbox8>
	sht->task = open_constask(sht,memtotal);
  284183:	83 c4 18             	add    $0x18,%esp
  284186:	ff 75 0c             	pushl  0xc(%ebp)
  284189:	53                   	push   %ebx
  28418a:	e8 d2 fe ff ff       	call   284061 <open_constask>
  28418f:	89 43 24             	mov    %eax,0x24(%ebx)
	sht->flags |= 0x20;
  284192:	83 4b 1c 20          	orl    $0x20,0x1c(%ebx)
	return sht;
}
  284196:	89 d8                	mov    %ebx,%eax
  284198:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28419b:	5b                   	pop    %ebx
  28419c:	5e                   	pop    %esi
  28419d:	5d                   	pop    %ebp
  28419e:	c3                   	ret    

0028419f <close_constask>:

void close_constask(struct TASK *task)
{
  28419f:	55                   	push   %ebp
  2841a0:	89 e5                	mov    %esp,%ebp
  2841a2:	53                   	push   %ebx
  2841a3:	83 ec 10             	sub    $0x10,%esp
  2841a6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	task_sleep(task);
  2841a9:	53                   	push   %ebx
  2841aa:	e8 7d f0 ff ff       	call   28322c <task_sleep>
	memman_free_4k(memman,task->cons_stack,64 * 1024);
  2841af:	83 c4 0c             	add    $0xc,%esp
  2841b2:	68 00 00 01 00       	push   $0x10000
  2841b7:	ff b3 ac 00 00 00    	pushl  0xac(%ebx)
  2841bd:	68 00 00 3c 00       	push   $0x3c0000
  2841c2:	e8 b2 e1 ff ff       	call   282379 <memman_free_4k>
	memman_free_4k(memman,(int)task->fifo.buf,128*4);
  2841c7:	83 c4 0c             	add    $0xc,%esp
  2841ca:	68 00 02 00 00       	push   $0x200
  2841cf:	ff 73 10             	pushl  0x10(%ebx)
  2841d2:	68 00 00 3c 00       	push   $0x3c0000
  2841d7:	e8 9d e1 ff ff       	call   282379 <memman_free_4k>
	task->flags = 0;
  2841dc:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
	return;
  2841e3:	83 c4 10             	add    $0x10,%esp
}
  2841e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2841e9:	c9                   	leave  
  2841ea:	c3                   	ret    

002841eb <close_console>:

void close_console(struct SHEET *sht)
{
  2841eb:	55                   	push   %ebp
  2841ec:	89 e5                	mov    %esp,%ebp
  2841ee:	56                   	push   %esi
  2841ef:	53                   	push   %ebx
  2841f0:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = sht->task;
  2841f3:	8b 73 24             	mov    0x24(%ebx),%esi
	memman_free_4k(memman,(int)sht->buf,256*165);
  2841f6:	83 ec 04             	sub    $0x4,%esp
  2841f9:	68 00 a5 00 00       	push   $0xa500
  2841fe:	ff 33                	pushl  (%ebx)
  284200:	68 00 00 3c 00       	push   $0x3c0000
  284205:	e8 6f e1 ff ff       	call   282379 <memman_free_4k>
	sheet_free(sht);
  28420a:	89 1c 24             	mov    %ebx,(%esp)
  28420d:	e8 60 e8 ff ff       	call   282a72 <sheet_free>
	close_constask(task);
  284212:	89 34 24             	mov    %esi,(%esp)
  284215:	e8 85 ff ff ff       	call   28419f <close_constask>
	return;
  28421a:	83 c4 10             	add    $0x10,%esp
}
  28421d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  284220:	5b                   	pop    %ebx
  284221:	5e                   	pop    %esi
  284222:	5d                   	pop    %ebp
  284223:	c3                   	ret    

00284224 <cmd_start>:

void cmd_start(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  284224:	55                   	push   %ebp
  284225:	89 e5                	mov    %esp,%ebp
  284227:	57                   	push   %edi
  284228:	56                   	push   %esi
  284229:	53                   	push   %ebx
  28422a:	83 ec 14             	sub    $0x14,%esp
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
  28422d:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct SHEET *sht = open_console(shtctl,memtotal);
  284233:	ff 75 10             	pushl  0x10(%ebp)
  284236:	57                   	push   %edi
  284237:	e8 d6 fe ff ff       	call   284112 <open_console>
  28423c:	89 c6                	mov    %eax,%esi
	struct FIFO32 *fifo = &sht->task->fifo;
  28423e:	8b 40 24             	mov    0x24(%eax),%eax
  284241:	8d 58 10             	lea    0x10(%eax),%ebx
	int i;
	sheet_slide(sht,32,4);
  284244:	83 c4 0c             	add    $0xc,%esp
  284247:	6a 04                	push   $0x4
  284249:	6a 20                	push   $0x20
  28424b:	56                   	push   %esi
  28424c:	e8 c2 e7 ff ff       	call   282a13 <sheet_slide>
	sheet_updown(sht,shtctl->top);
  284251:	83 c4 08             	add    $0x8,%esp
  284254:	ff 77 10             	pushl  0x10(%edi)
  284257:	56                   	push   %esi
  284258:	e8 cd e6 ff ff       	call   28292a <sheet_updown>
	for(i = 6;cmdline[i]!=0;i++)
  28425d:	8b 45 0c             	mov    0xc(%ebp),%eax
  284260:	0f b6 40 06          	movzbl 0x6(%eax),%eax
  284264:	83 c4 10             	add    $0x10,%esp
  284267:	84 c0                	test   %al,%al
  284269:	74 26                	je     284291 <cmd_start+0x6d>
  28426b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28426e:	8d 72 07             	lea    0x7(%edx),%esi
	{
		fifo32_put(fifo,cmdline[i] + 256);
  284271:	83 ec 08             	sub    $0x8,%esp
  284274:	0f be c0             	movsbl %al,%eax
  284277:	05 00 01 00 00       	add    $0x100,%eax
  28427c:	50                   	push   %eax
  28427d:	53                   	push   %ebx
  28427e:	e8 46 d9 ff ff       	call   281bc9 <fifo32_put>
  284283:	83 c6 01             	add    $0x1,%esi
	struct SHEET *sht = open_console(shtctl,memtotal);
	struct FIFO32 *fifo = &sht->task->fifo;
	int i;
	sheet_slide(sht,32,4);
	sheet_updown(sht,shtctl->top);
	for(i = 6;cmdline[i]!=0;i++)
  284286:	0f b6 46 ff          	movzbl -0x1(%esi),%eax
  28428a:	83 c4 10             	add    $0x10,%esp
  28428d:	84 c0                	test   %al,%al
  28428f:	75 e0                	jne    284271 <cmd_start+0x4d>
	{
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  284291:	83 ec 08             	sub    $0x8,%esp
  284294:	68 0a 01 00 00       	push   $0x10a
  284299:	53                   	push   %ebx
  28429a:	e8 2a d9 ff ff       	call   281bc9 <fifo32_put>
	cons_newline(cons);
  28429f:	83 c4 04             	add    $0x4,%esp
  2842a2:	ff 75 08             	pushl  0x8(%ebp)
  2842a5:	e8 c2 f5 ff ff       	call   28386c <cons_newline>
	return;
  2842aa:	83 c4 10             	add    $0x10,%esp
}
  2842ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2842b0:	5b                   	pop    %ebx
  2842b1:	5e                   	pop    %esi
  2842b2:	5f                   	pop    %edi
  2842b3:	5d                   	pop    %ebp
  2842b4:	c3                   	ret    

002842b5 <cmd_ncst>:

void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  2842b5:	55                   	push   %ebp
  2842b6:	89 e5                	mov    %esp,%ebp
  2842b8:	56                   	push   %esi
  2842b9:	53                   	push   %ebx
  2842ba:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct TASK *task = open_constask(0,memtotal);
  2842bd:	83 ec 08             	sub    $0x8,%esp
  2842c0:	ff 75 10             	pushl  0x10(%ebp)
  2842c3:	6a 00                	push   $0x0
  2842c5:	e8 97 fd ff ff       	call   284061 <open_constask>
	struct FIFO32 *fifo = &task->fifo;
  2842ca:	8d 70 10             	lea    0x10(%eax),%esi
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  2842cd:	0f b6 53 05          	movzbl 0x5(%ebx),%edx
  2842d1:	83 c4 10             	add    $0x10,%esp
  2842d4:	84 d2                	test   %dl,%dl
  2842d6:	74 24                	je     2842fc <cmd_ncst+0x47>
  2842d8:	83 c3 06             	add    $0x6,%ebx
		fifo32_put(fifo,cmdline[i] + 256);
  2842db:	83 ec 08             	sub    $0x8,%esp
  2842de:	0f be d2             	movsbl %dl,%edx
  2842e1:	81 c2 00 01 00 00    	add    $0x100,%edx
  2842e7:	52                   	push   %edx
  2842e8:	56                   	push   %esi
  2842e9:	e8 db d8 ff ff       	call   281bc9 <fifo32_put>
  2842ee:	83 c3 01             	add    $0x1,%ebx
void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
	struct TASK *task = open_constask(0,memtotal);
	struct FIFO32 *fifo = &task->fifo;
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  2842f1:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
  2842f5:	83 c4 10             	add    $0x10,%esp
  2842f8:	84 d2                	test   %dl,%dl
  2842fa:	75 df                	jne    2842db <cmd_ncst+0x26>
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  2842fc:	83 ec 08             	sub    $0x8,%esp
  2842ff:	68 0a 01 00 00       	push   $0x10a
  284304:	56                   	push   %esi
  284305:	e8 bf d8 ff ff       	call   281bc9 <fifo32_put>
	cons_newline(cons);
  28430a:	83 c4 04             	add    $0x4,%esp
  28430d:	ff 75 08             	pushl  0x8(%ebp)
  284310:	e8 57 f5 ff ff       	call   28386c <cons_newline>
	return;
  284315:	83 c4 10             	add    $0x10,%esp
}
  284318:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28431b:	5b                   	pop    %ebx
  28431c:	5e                   	pop    %esi
  28431d:	5d                   	pop    %ebp
  28431e:	c3                   	ret    

0028431f <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  28431f:	55                   	push   %ebp
  284320:	89 e5                	mov    %esp,%ebp
  284322:	53                   	push   %ebx
  284323:	83 ec 0c             	sub    $0xc,%esp
  284326:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  284329:	68 3b 55 28 00       	push   $0x28553b
  28432e:	53                   	push   %ebx
  28432f:	e8 7e d7 ff ff       	call   281ab2 <strcmp>
  284334:	83 c4 10             	add    $0x10,%esp
  284337:	85 c0                	test   %eax,%eax
  284339:	75 16                	jne    284351 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  28433b:	83 ec 08             	sub    $0x8,%esp
  28433e:	ff 75 14             	pushl  0x14(%ebp)
  284341:	ff 75 0c             	pushl  0xc(%ebp)
  284344:	e8 bd f6 ff ff       	call   283a06 <cmd_mem>
  284349:	83 c4 10             	add    $0x10,%esp
  28434c:	e9 1a 01 00 00       	jmp    28446b <cons_runcmd+0x14c>
	else if(strcmp(cmdline,"cls") == 0)
  284351:	83 ec 08             	sub    $0x8,%esp
  284354:	68 3f 55 28 00       	push   $0x28553f
  284359:	53                   	push   %ebx
  28435a:	e8 53 d7 ff ff       	call   281ab2 <strcmp>
  28435f:	83 c4 10             	add    $0x10,%esp
  284362:	85 c0                	test   %eax,%eax
  284364:	75 13                	jne    284379 <cons_runcmd+0x5a>
		cmd_cls(cons);
  284366:	83 ec 0c             	sub    $0xc,%esp
  284369:	ff 75 0c             	pushl  0xc(%ebp)
  28436c:	e8 23 f7 ff ff       	call   283a94 <cmd_cls>
  284371:	83 c4 10             	add    $0x10,%esp
  284374:	e9 f2 00 00 00       	jmp    28446b <cons_runcmd+0x14c>
	else if(strcmp(cmdline,"dir") == 0)
  284379:	83 ec 08             	sub    $0x8,%esp
  28437c:	68 43 55 28 00       	push   $0x285543
  284381:	53                   	push   %ebx
  284382:	e8 2b d7 ff ff       	call   281ab2 <strcmp>
  284387:	83 c4 10             	add    $0x10,%esp
  28438a:	85 c0                	test   %eax,%eax
  28438c:	75 13                	jne    2843a1 <cons_runcmd+0x82>
		cmd_dir(cons);
  28438e:	83 ec 0c             	sub    $0xc,%esp
  284391:	ff 75 0c             	pushl  0xc(%ebp)
  284394:	e8 63 f7 ff ff       	call   283afc <cmd_dir>
  284399:	83 c4 10             	add    $0x10,%esp
  28439c:	e9 ca 00 00 00       	jmp    28446b <cons_runcmd+0x14c>
	//else if(strncmp(cmdline,"type ",5) == 0)
	//	cmd_type(cons,fat,cmdline);
	else if(strcmp(cmdline,"exit") == 0)
  2843a1:	83 ec 08             	sub    $0x8,%esp
  2843a4:	68 47 55 28 00       	push   $0x285547
  2843a9:	53                   	push   %ebx
  2843aa:	e8 03 d7 ff ff       	call   281ab2 <strcmp>
  2843af:	83 c4 10             	add    $0x10,%esp
  2843b2:	85 c0                	test   %eax,%eax
  2843b4:	75 0e                	jne    2843c4 <cons_runcmd+0xa5>
		cmd_exit(cons,fat);
  2843b6:	83 ec 08             	sub    $0x8,%esp
  2843b9:	ff 75 10             	pushl  0x10(%ebp)
  2843bc:	ff 75 0c             	pushl  0xc(%ebp)
  2843bf:	e8 c3 f8 ff ff       	call   283c87 <cmd_exit>
	else if(strncmp(cmdline,"start ",6) == 0)
  2843c4:	83 ec 04             	sub    $0x4,%esp
  2843c7:	6a 06                	push   $0x6
  2843c9:	68 4c 55 28 00       	push   $0x28554c
  2843ce:	53                   	push   %ebx
  2843cf:	e8 44 d7 ff ff       	call   281b18 <strncmp>
  2843d4:	83 c4 10             	add    $0x10,%esp
  2843d7:	85 c0                	test   %eax,%eax
  2843d9:	75 14                	jne    2843ef <cons_runcmd+0xd0>
		cmd_start(cons,cmdline,memtotal);
  2843db:	83 ec 04             	sub    $0x4,%esp
  2843de:	ff 75 14             	pushl  0x14(%ebp)
  2843e1:	53                   	push   %ebx
  2843e2:	ff 75 0c             	pushl  0xc(%ebp)
  2843e5:	e8 3a fe ff ff       	call   284224 <cmd_start>
  2843ea:	83 c4 10             	add    $0x10,%esp
  2843ed:	eb 7c                	jmp    28446b <cons_runcmd+0x14c>
	else if(strncmp(cmdline,"ncst ",5) == 0)
  2843ef:	83 ec 04             	sub    $0x4,%esp
  2843f2:	6a 05                	push   $0x5
  2843f4:	68 53 55 28 00       	push   $0x285553
  2843f9:	53                   	push   %ebx
  2843fa:	e8 19 d7 ff ff       	call   281b18 <strncmp>
  2843ff:	83 c4 10             	add    $0x10,%esp
  284402:	85 c0                	test   %eax,%eax
  284404:	75 14                	jne    28441a <cons_runcmd+0xfb>
		cmd_ncst(cons,cmdline,memtotal);
  284406:	83 ec 04             	sub    $0x4,%esp
  284409:	ff 75 14             	pushl  0x14(%ebp)
  28440c:	53                   	push   %ebx
  28440d:	ff 75 0c             	pushl  0xc(%ebp)
  284410:	e8 a0 fe ff ff       	call   2842b5 <cmd_ncst>
  284415:	83 c4 10             	add    $0x10,%esp
  284418:	eb 51                	jmp    28446b <cons_runcmd+0x14c>
	else if(cmdline[0] != 0)
  28441a:	80 3b 00             	cmpb   $0x0,(%ebx)
  28441d:	74 4c                	je     28446b <cons_runcmd+0x14c>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  28441f:	83 ec 04             	sub    $0x4,%esp
  284422:	53                   	push   %ebx
  284423:	ff 75 10             	pushl  0x10(%ebp)
  284426:	ff 75 0c             	pushl  0xc(%ebp)
  284429:	e8 3f f9 ff ff       	call   283d6d <cmd_app>
  28442e:	83 c4 10             	add    $0x10,%esp
  284431:	85 c0                	test   %eax,%eax
  284433:	75 36                	jne    28446b <cons_runcmd+0x14c>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  284435:	83 ec 04             	sub    $0x4,%esp
  284438:	6a 0c                	push   $0xc
  28443a:	68 59 55 28 00       	push   $0x285559
  28443f:	6a 00                	push   $0x0
  284441:	6a 07                	push   $0x7
  284443:	8b 45 0c             	mov    0xc(%ebp),%eax
  284446:	ff 70 08             	pushl  0x8(%eax)
  284449:	6a 08                	push   $0x8
  28444b:	ff 30                	pushl  (%eax)
  28444d:	e8 ce cc ff ff       	call   281120 <putfonts8_asc_sht>
			cons_newline(cons);
  284452:	83 c4 14             	add    $0x14,%esp
  284455:	ff 75 0c             	pushl  0xc(%ebp)
  284458:	e8 0f f4 ff ff       	call   28386c <cons_newline>
			cons_newline(cons);
  28445d:	83 c4 04             	add    $0x4,%esp
  284460:	ff 75 0c             	pushl  0xc(%ebp)
  284463:	e8 04 f4 ff ff       	call   28386c <cons_newline>
  284468:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  28446b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28446e:	c9                   	leave  
  28446f:	c3                   	ret    

00284470 <start_app>:
  284470:	60                   	pusha  
  284471:	8b 44 24 24          	mov    0x24(%esp),%eax
  284475:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  284479:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  28447d:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  284481:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  284485:	89 65 00             	mov    %esp,0x0(%ebp)
  284488:	8c 55 04             	mov    %ss,0x4(%ebp)
  28448b:	8e c3                	mov    %ebx,%es
  28448d:	8e db                	mov    %ebx,%ds
  28448f:	8e e3                	mov    %ebx,%fs
  284491:	8e eb                	mov    %ebx,%gs
  284493:	83 c9 03             	or     $0x3,%ecx
  284496:	83 cb 03             	or     $0x3,%ebx
  284499:	53                   	push   %ebx
  28449a:	52                   	push   %edx
  28449b:	51                   	push   %ecx
  28449c:	50                   	push   %eax
  28449d:	cb                   	lret   

0028449e <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  28449e:	55                   	push   %ebp
  28449f:	89 e5                	mov    %esp,%ebp
  2844a1:	53                   	push   %ebx
  2844a2:	83 ec 44             	sub    $0x44,%esp
	struct TASK *task = task_now();
  2844a5:	e8 ee e9 ff ff       	call   282e98 <task_now>
  2844aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct CONSOLE *cons = task->cons;
  2844ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2844b0:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
  2844b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int ds_base = task->ds_base;
  2844b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2844bc:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
  2844c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  2844c5:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  2844ca:	8b 00                	mov    (%eax),%eax
  2844cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  2844cf:	8d 45 24             	lea    0x24(%ebp),%eax
  2844d2:	83 c0 04             	add    $0x4,%eax
  2844d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	   */
	struct FILEINFO *finfo;
	struct FILEHANDLE *fh;
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
  2844d8:	c7 45 d4 00 00 3c 00 	movl   $0x3c0000,-0x2c(%ebp)
	
	
	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  2844df:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  2844e3:	75 1c                	jne    284501 <sys_api+0x63>
  2844e5:	8b 45 24             	mov    0x24(%ebp),%eax
  2844e8:	0f b6 c0             	movzbl %al,%eax
  2844eb:	83 ec 04             	sub    $0x4,%esp
  2844ee:	6a 01                	push   $0x1
  2844f0:	50                   	push   %eax
  2844f1:	ff 75 e4             	pushl  -0x1c(%ebp)
  2844f4:	e8 45 f4 ff ff       	call   28393e <cons_putchar>
  2844f9:	83 c4 10             	add    $0x10,%esp
  2844fc:	e9 0b 09 00 00       	jmp    284e0c <sys_api+0x96e>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  284501:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  284505:	75 1c                	jne    284523 <sys_api+0x85>
  284507:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28450a:	8b 45 18             	mov    0x18(%ebp),%eax
  28450d:	01 d0                	add    %edx,%eax
  28450f:	83 ec 08             	sub    $0x8,%esp
  284512:	50                   	push   %eax
  284513:	ff 75 e4             	pushl  -0x1c(%ebp)
  284516:	e8 1d f8 ff ff       	call   283d38 <cons_putstr0>
  28451b:	83 c4 10             	add    $0x10,%esp
  28451e:	e9 e9 08 00 00       	jmp    284e0c <sys_api+0x96e>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  284523:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  284527:	75 1f                	jne    284548 <sys_api+0xaa>
  284529:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28452c:	8b 45 18             	mov    0x18(%ebp),%eax
  28452f:	01 d0                	add    %edx,%eax
  284531:	83 ec 04             	sub    $0x4,%esp
  284534:	ff 75 20             	pushl  0x20(%ebp)
  284537:	50                   	push   %eax
  284538:	ff 75 e4             	pushl  -0x1c(%ebp)
  28453b:	e8 e6 fa ff ff       	call   284026 <cons_putstr1>
  284540:	83 c4 10             	add    $0x10,%esp
  284543:	e9 c4 08 00 00       	jmp    284e0c <sys_api+0x96e>
	else if(edx == 4)
  284548:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  28454c:	75 0b                	jne    284559 <sys_api+0xbb>
	{
		//exit app
		return &(task->tss.esp0);
  28454e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284551:	83 c0 30             	add    $0x30,%eax
  284554:	e9 b8 08 00 00       	jmp    284e11 <sys_api+0x973>
	}
	else if(edx == 5)
  284559:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  28455d:	0f 85 d1 00 00 00    	jne    284634 <sys_api+0x196>
	{
		sht = sheet_alloc(shtctl);
  284563:	83 ec 0c             	sub    $0xc,%esp
  284566:	ff 75 dc             	pushl  -0x24(%ebp)
  284569:	e8 ce de ff ff       	call   28243c <sheet_alloc>
  28456e:	83 c4 10             	add    $0x10,%esp
  284571:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sht->task = task;
  284574:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284577:	8b 55 e8             	mov    -0x18(%ebp),%edx
  28457a:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  28457d:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284580:	8b 40 1c             	mov    0x1c(%eax),%eax
  284583:	83 c8 11             	or     $0x11,%eax
  284586:	89 c2                	mov    %eax,%edx
  284588:	8b 45 bc             	mov    -0x44(%ebp),%eax
  28458b:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  28458e:	8b 45 24             	mov    0x24(%ebp),%eax
  284591:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  284594:	8b 55 18             	mov    0x18(%ebp),%edx
  284597:	01 ca                	add    %ecx,%edx
  284599:	83 ec 0c             	sub    $0xc,%esp
  28459c:	50                   	push   %eax
  28459d:	ff 75 08             	pushl  0x8(%ebp)
  2845a0:	ff 75 0c             	pushl  0xc(%ebp)
  2845a3:	52                   	push   %edx
  2845a4:	ff 75 bc             	pushl  -0x44(%ebp)
  2845a7:	e8 03 df ff ff       	call   2824af <sheet_setbuf>
  2845ac:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  2845af:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2845b2:	8b 45 20             	mov    0x20(%ebp),%eax
  2845b5:	01 d0                	add    %edx,%eax
  2845b7:	89 c1                	mov    %eax,%ecx
  2845b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2845bc:	8b 45 18             	mov    0x18(%ebp),%eax
  2845bf:	01 d0                	add    %edx,%eax
  2845c1:	83 ec 0c             	sub    $0xc,%esp
  2845c4:	6a 00                	push   $0x0
  2845c6:	51                   	push   %ecx
  2845c7:	ff 75 08             	pushl  0x8(%ebp)
  2845ca:	ff 75 0c             	pushl  0xc(%ebp)
  2845cd:	50                   	push   %eax
  2845ce:	e8 ef c9 ff ff       	call   280fc2 <make_window8>
  2845d3:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,((shtctl->xsize - esi)/2)&~3,(shtctl->ysize - edi)/2);
  2845d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2845d9:	8b 40 0c             	mov    0xc(%eax),%eax
  2845dc:	2b 45 08             	sub    0x8(%ebp),%eax
  2845df:	89 c2                	mov    %eax,%edx
  2845e1:	c1 ea 1f             	shr    $0x1f,%edx
  2845e4:	01 d0                	add    %edx,%eax
  2845e6:	d1 f8                	sar    %eax
  2845e8:	89 c1                	mov    %eax,%ecx
  2845ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2845ed:	8b 40 08             	mov    0x8(%eax),%eax
  2845f0:	2b 45 0c             	sub    0xc(%ebp),%eax
  2845f3:	89 c2                	mov    %eax,%edx
  2845f5:	c1 ea 1f             	shr    $0x1f,%edx
  2845f8:	01 d0                	add    %edx,%eax
  2845fa:	d1 f8                	sar    %eax
  2845fc:	83 e0 fc             	and    $0xfffffffc,%eax
  2845ff:	83 ec 04             	sub    $0x4,%esp
  284602:	51                   	push   %ecx
  284603:	50                   	push   %eax
  284604:	ff 75 bc             	pushl  -0x44(%ebp)
  284607:	e8 07 e4 ff ff       	call   282a13 <sheet_slide>
  28460c:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  28460f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  284612:	8b 40 10             	mov    0x10(%eax),%eax
  284615:	83 ec 08             	sub    $0x8,%esp
  284618:	50                   	push   %eax
  284619:	ff 75 bc             	pushl  -0x44(%ebp)
  28461c:	e8 09 e3 ff ff       	call   28292a <sheet_updown>
  284621:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  284624:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284627:	8d 50 1c             	lea    0x1c(%eax),%edx
  28462a:	8b 45 bc             	mov    -0x44(%ebp),%eax
  28462d:	89 02                	mov    %eax,(%edx)
  28462f:	e9 d8 07 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 6)
  284634:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  284638:	75 74                	jne    2846ae <sys_api+0x210>
	{
		sht = (struct SHEET *)ebx;
  28463a:	8b 45 18             	mov    0x18(%ebp),%eax
  28463d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  284640:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284643:	8b 45 10             	mov    0x10(%ebp),%eax
  284646:	01 d0                	add    %edx,%eax
  284648:	89 c3                	mov    %eax,%ebx
  28464a:	8b 45 24             	mov    0x24(%ebp),%eax
  28464d:	0f be c8             	movsbl %al,%ecx
  284650:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284653:	8b 50 04             	mov    0x4(%eax),%edx
  284656:	8b 45 bc             	mov    -0x44(%ebp),%eax
  284659:	8b 00                	mov    (%eax),%eax
  28465b:	83 ec 08             	sub    $0x8,%esp
  28465e:	53                   	push   %ebx
  28465f:	51                   	push   %ecx
  284660:	ff 75 08             	pushl  0x8(%ebp)
  284663:	ff 75 0c             	pushl  0xc(%ebp)
  284666:	52                   	push   %edx
  284667:	50                   	push   %eax
  284668:	e8 b7 cd ff ff       	call   281424 <putfonts8_asc>
  28466d:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284670:	8b 45 18             	mov    0x18(%ebp),%eax
  284673:	83 e0 01             	and    $0x1,%eax
  284676:	85 c0                	test   %eax,%eax
  284678:	0f 85 8e 07 00 00    	jne    284e0c <sys_api+0x96e>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  28467e:	8b 45 08             	mov    0x8(%ebp),%eax
  284681:	8d 50 10             	lea    0x10(%eax),%edx
  284684:	8b 45 20             	mov    0x20(%ebp),%eax
  284687:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  28468e:	8b 45 0c             	mov    0xc(%ebp),%eax
  284691:	01 c8                	add    %ecx,%eax
  284693:	83 ec 0c             	sub    $0xc,%esp
  284696:	52                   	push   %edx
  284697:	50                   	push   %eax
  284698:	ff 75 08             	pushl  0x8(%ebp)
  28469b:	ff 75 0c             	pushl  0xc(%ebp)
  28469e:	ff 75 bc             	pushl  -0x44(%ebp)
  2846a1:	e8 50 e2 ff ff       	call   2828f6 <sheet_refresh>
  2846a6:	83 c4 20             	add    $0x20,%esp
  2846a9:	e9 5e 07 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 7)
  2846ae:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  2846b2:	75 68                	jne    28471c <sys_api+0x27e>
	{
		sht = (struct SHEET *)ebx;
  2846b4:	8b 45 18             	mov    0x18(%ebp),%eax
  2846b7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  2846ba:	8b 5d 24             	mov    0x24(%ebp),%ebx
  2846bd:	8b 45 10             	mov    0x10(%ebp),%eax
  2846c0:	0f b6 c8             	movzbl %al,%ecx
  2846c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2846c6:	8b 50 04             	mov    0x4(%eax),%edx
  2846c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2846cc:	8b 00                	mov    (%eax),%eax
  2846ce:	83 ec 04             	sub    $0x4,%esp
  2846d1:	ff 75 08             	pushl  0x8(%ebp)
  2846d4:	ff 75 0c             	pushl  0xc(%ebp)
  2846d7:	ff 75 20             	pushl  0x20(%ebp)
  2846da:	53                   	push   %ebx
  2846db:	51                   	push   %ecx
  2846dc:	52                   	push   %edx
  2846dd:	50                   	push   %eax
  2846de:	e8 de c5 ff ff       	call   280cc1 <boxfill8>
  2846e3:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2846e6:	8b 45 18             	mov    0x18(%ebp),%eax
  2846e9:	83 e0 01             	and    $0x1,%eax
  2846ec:	85 c0                	test   %eax,%eax
  2846ee:	0f 85 18 07 00 00    	jne    284e0c <sys_api+0x96e>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  2846f4:	8b 45 08             	mov    0x8(%ebp),%eax
  2846f7:	8d 48 01             	lea    0x1(%eax),%ecx
  2846fa:	8b 45 0c             	mov    0xc(%ebp),%eax
  2846fd:	8d 50 01             	lea    0x1(%eax),%edx
  284700:	8b 45 24             	mov    0x24(%ebp),%eax
  284703:	83 ec 0c             	sub    $0xc,%esp
  284706:	51                   	push   %ecx
  284707:	52                   	push   %edx
  284708:	ff 75 20             	pushl  0x20(%ebp)
  28470b:	50                   	push   %eax
  28470c:	ff 75 bc             	pushl  -0x44(%ebp)
  28470f:	e8 e2 e1 ff ff       	call   2828f6 <sheet_refresh>
  284714:	83 c4 20             	add    $0x20,%esp
  284717:	e9 f0 06 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 8)
  28471c:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284720:	75 3b                	jne    28475d <sys_api+0x2bf>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  284722:	8b 55 18             	mov    0x18(%ebp),%edx
  284725:	8b 45 e0             	mov    -0x20(%ebp),%eax
  284728:	01 d0                	add    %edx,%eax
  28472a:	83 ec 0c             	sub    $0xc,%esp
  28472d:	50                   	push   %eax
  28472e:	e8 78 d8 ff ff       	call   281fab <memman_init>
  284733:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  284736:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  28473a:	8b 45 20             	mov    0x20(%ebp),%eax
  28473d:	8b 55 24             	mov    0x24(%ebp),%edx
  284740:	89 d3                	mov    %edx,%ebx
  284742:	8b 4d 18             	mov    0x18(%ebp),%ecx
  284745:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284748:	01 ca                	add    %ecx,%edx
  28474a:	83 ec 04             	sub    $0x4,%esp
  28474d:	50                   	push   %eax
  28474e:	53                   	push   %ebx
  28474f:	52                   	push   %edx
  284750:	e8 a5 d9 ff ff       	call   2820fa <memman_free>
  284755:	83 c4 10             	add    $0x10,%esp
  284758:	e9 af 06 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 9)
  28475d:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  284761:	75 31                	jne    284794 <sys_api+0x2f6>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  284763:	8b 45 20             	mov    0x20(%ebp),%eax
  284766:	83 c0 0f             	add    $0xf,%eax
  284769:	83 e0 f0             	and    $0xfffffff0,%eax
  28476c:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  28476f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284772:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284775:	8b 45 20             	mov    0x20(%ebp),%eax
  284778:	8b 4d 18             	mov    0x18(%ebp),%ecx
  28477b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  28477e:	01 ca                	add    %ecx,%edx
  284780:	83 ec 08             	sub    $0x8,%esp
  284783:	50                   	push   %eax
  284784:	52                   	push   %edx
  284785:	e8 87 d8 ff ff       	call   282011 <memman_alloc>
  28478a:	83 c4 10             	add    $0x10,%esp
  28478d:	89 03                	mov    %eax,(%ebx)
  28478f:	e9 78 06 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 10)
  284794:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  284798:	75 2f                	jne    2847c9 <sys_api+0x32b>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  28479a:	8b 45 20             	mov    0x20(%ebp),%eax
  28479d:	83 c0 0f             	add    $0xf,%eax
  2847a0:	83 e0 f0             	and    $0xfffffff0,%eax
  2847a3:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  2847a6:	8b 45 20             	mov    0x20(%ebp),%eax
  2847a9:	8b 55 24             	mov    0x24(%ebp),%edx
  2847ac:	89 d3                	mov    %edx,%ebx
  2847ae:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  2847b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2847b4:	01 ca                	add    %ecx,%edx
  2847b6:	83 ec 04             	sub    $0x4,%esp
  2847b9:	50                   	push   %eax
  2847ba:	53                   	push   %ebx
  2847bb:	52                   	push   %edx
  2847bc:	e8 39 d9 ff ff       	call   2820fa <memman_free>
  2847c1:	83 c4 10             	add    $0x10,%esp
  2847c4:	e9 43 06 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 11)
  2847c9:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  2847cd:	75 58                	jne    284827 <sys_api+0x389>
	{
		sht = (struct SHEET *)ebx;
  2847cf:	8b 45 18             	mov    0x18(%ebp),%eax
  2847d2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  2847d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2847d8:	8b 10                	mov    (%eax),%edx
  2847da:	8b 45 bc             	mov    -0x44(%ebp),%eax
  2847dd:	8b 40 04             	mov    0x4(%eax),%eax
  2847e0:	0f af 45 08          	imul   0x8(%ebp),%eax
  2847e4:	89 c1                	mov    %eax,%ecx
  2847e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2847e9:	01 c8                	add    %ecx,%eax
  2847eb:	01 d0                	add    %edx,%eax
  2847ed:	8b 55 24             	mov    0x24(%ebp),%edx
  2847f0:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  2847f2:	8b 45 18             	mov    0x18(%ebp),%eax
  2847f5:	83 e0 01             	and    $0x1,%eax
  2847f8:	85 c0                	test   %eax,%eax
  2847fa:	0f 85 0c 06 00 00    	jne    284e0c <sys_api+0x96e>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  284800:	8b 45 08             	mov    0x8(%ebp),%eax
  284803:	8d 50 01             	lea    0x1(%eax),%edx
  284806:	8b 45 0c             	mov    0xc(%ebp),%eax
  284809:	83 c0 01             	add    $0x1,%eax
  28480c:	83 ec 0c             	sub    $0xc,%esp
  28480f:	52                   	push   %edx
  284810:	50                   	push   %eax
  284811:	ff 75 08             	pushl  0x8(%ebp)
  284814:	ff 75 0c             	pushl  0xc(%ebp)
  284817:	ff 75 bc             	pushl  -0x44(%ebp)
  28481a:	e8 d7 e0 ff ff       	call   2828f6 <sheet_refresh>
  28481f:	83 c4 20             	add    $0x20,%esp
  284822:	e9 e5 05 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 12)
  284827:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  28482b:	75 26                	jne    284853 <sys_api+0x3b5>
	{
		sht = (struct SHEET *)ebx;
  28482d:	8b 45 18             	mov    0x18(%ebp),%eax
  284830:	89 45 bc             	mov    %eax,-0x44(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  284833:	8b 45 24             	mov    0x24(%ebp),%eax
  284836:	83 ec 0c             	sub    $0xc,%esp
  284839:	ff 75 08             	pushl  0x8(%ebp)
  28483c:	ff 75 0c             	pushl  0xc(%ebp)
  28483f:	ff 75 20             	pushl  0x20(%ebp)
  284842:	50                   	push   %eax
  284843:	ff 75 bc             	pushl  -0x44(%ebp)
  284846:	e8 ab e0 ff ff       	call   2828f6 <sheet_refresh>
  28484b:	83 c4 20             	add    $0x20,%esp
  28484e:	e9 b9 05 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 13)
  284853:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  284857:	75 5d                	jne    2848b6 <sys_api+0x418>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  284859:	8b 45 18             	mov    0x18(%ebp),%eax
  28485c:	83 e0 fe             	and    $0xfffffffe,%eax
  28485f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  284862:	8b 45 24             	mov    0x24(%ebp),%eax
  284865:	83 ec 08             	sub    $0x8,%esp
  284868:	ff 75 10             	pushl  0x10(%ebp)
  28486b:	ff 75 08             	pushl  0x8(%ebp)
  28486e:	ff 75 0c             	pushl  0xc(%ebp)
  284871:	ff 75 20             	pushl  0x20(%ebp)
  284874:	50                   	push   %eax
  284875:	ff 75 bc             	pushl  -0x44(%ebp)
  284878:	e8 31 ca ff ff       	call   2812ae <drawline8_sht>
  28487d:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284880:	8b 45 18             	mov    0x18(%ebp),%eax
  284883:	83 e0 01             	and    $0x1,%eax
  284886:	85 c0                	test   %eax,%eax
  284888:	0f 85 7e 05 00 00    	jne    284e0c <sys_api+0x96e>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  28488e:	8b 45 08             	mov    0x8(%ebp),%eax
  284891:	8d 48 01             	lea    0x1(%eax),%ecx
  284894:	8b 45 0c             	mov    0xc(%ebp),%eax
  284897:	8d 50 01             	lea    0x1(%eax),%edx
  28489a:	8b 45 24             	mov    0x24(%ebp),%eax
  28489d:	83 ec 0c             	sub    $0xc,%esp
  2848a0:	51                   	push   %ecx
  2848a1:	52                   	push   %edx
  2848a2:	ff 75 20             	pushl  0x20(%ebp)
  2848a5:	50                   	push   %eax
  2848a6:	ff 75 bc             	pushl  -0x44(%ebp)
  2848a9:	e8 48 e0 ff ff       	call   2828f6 <sheet_refresh>
  2848ae:	83 c4 20             	add    $0x20,%esp
  2848b1:	e9 56 05 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 14)
  2848b6:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  2848ba:	75 14                	jne    2848d0 <sys_api+0x432>
	{
		sheet_free((struct SHEET *)ebx);
  2848bc:	8b 45 18             	mov    0x18(%ebp),%eax
  2848bf:	83 ec 0c             	sub    $0xc,%esp
  2848c2:	50                   	push   %eax
  2848c3:	e8 aa e1 ff ff       	call   282a72 <sheet_free>
  2848c8:	83 c4 10             	add    $0x10,%esp
  2848cb:	e9 3c 05 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 15)
  2848d0:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  2848d4:	0f 85 f3 00 00 00    	jne    2849cd <sys_api+0x52f>
	{
		for(;;)
		{
			io_cli();
  2848da:	e8 f3 c1 ff ff       	call   280ad2 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  2848df:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2848e2:	83 c0 10             	add    $0x10,%eax
  2848e5:	83 ec 0c             	sub    $0xc,%esp
  2848e8:	50                   	push   %eax
  2848e9:	e8 88 d3 ff ff       	call   281c76 <fifo32_status>
  2848ee:	83 c4 10             	add    $0x10,%esp
  2848f1:	85 c0                	test   %eax,%eax
  2848f3:	75 32                	jne    284927 <sys_api+0x489>
			{
				if(eax != 0)
  2848f5:	8b 45 24             	mov    0x24(%ebp),%eax
  2848f8:	85 c0                	test   %eax,%eax
  2848fa:	74 10                	je     28490c <sys_api+0x46e>
					task_sleep(task);
  2848fc:	83 ec 0c             	sub    $0xc,%esp
  2848ff:	ff 75 e8             	pushl  -0x18(%ebp)
  284902:	e8 25 e9 ff ff       	call   28322c <task_sleep>
  284907:	83 c4 10             	add    $0x10,%esp
  28490a:	eb 1b                	jmp    284927 <sys_api+0x489>
				else
				{
					io_sti();
  28490c:	e8 c3 c1 ff ff       	call   280ad4 <io_sti>
					reg[7] = -1;
  284911:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284914:	83 c0 1c             	add    $0x1c,%eax
  284917:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  28491d:	b8 00 00 00 00       	mov    $0x0,%eax
  284922:	e9 ea 04 00 00       	jmp    284e11 <sys_api+0x973>
				}
			}
			int i = fifo32_get(&task->fifo);
  284927:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28492a:	83 c0 10             	add    $0x10,%eax
  28492d:	83 ec 0c             	sub    $0xc,%esp
  284930:	50                   	push   %eax
  284931:	e8 05 d3 ff ff       	call   281c3b <fifo32_get>
  284936:	83 c4 10             	add    $0x10,%esp
  284939:	89 45 d0             	mov    %eax,-0x30(%ebp)
			io_sti();
  28493c:	e8 93 c1 ff ff       	call   280ad4 <io_sti>
			if(i <= 1)
  284941:	83 7d d0 01          	cmpl   $0x1,-0x30(%ebp)
  284945:	7f 34                	jg     28497b <sys_api+0x4dd>
			{
				timer_init(cons->timer,&task->fifo,1);
  284947:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28494a:	8d 50 10             	lea    0x10(%eax),%edx
  28494d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284950:	8b 40 10             	mov    0x10(%eax),%eax
  284953:	83 ec 04             	sub    $0x4,%esp
  284956:	6a 01                	push   $0x1
  284958:	52                   	push   %edx
  284959:	50                   	push   %eax
  28495a:	e8 05 e2 ff ff       	call   282b64 <timer_init>
  28495f:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  284962:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284965:	8b 40 10             	mov    0x10(%eax),%eax
  284968:	83 ec 08             	sub    $0x8,%esp
  28496b:	6a 32                	push   $0x32
  28496d:	50                   	push   %eax
  28496e:	e8 05 e2 ff ff       	call   282b78 <timer_settime>
  284973:	83 c4 10             	add    $0x10,%esp
  284976:	e9 5f ff ff ff       	jmp    2848da <sys_api+0x43c>
			}
			else if(i == 2)
  28497b:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  28497f:	75 0f                	jne    284990 <sys_api+0x4f2>
			{
				cons->cur_c = COL8_FFFFFF;
  284981:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284984:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  28498b:	e9 4a ff ff ff       	jmp    2848da <sys_api+0x43c>
			}
			else if(i == 3)
  284990:	83 7d d0 03          	cmpl   $0x3,-0x30(%ebp)
  284994:	75 0f                	jne    2849a5 <sys_api+0x507>
			{
				cons->cur_c = -1;
  284996:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284999:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  2849a0:	e9 35 ff ff ff       	jmp    2848da <sys_api+0x43c>
			}
			else if(i>=256)
  2849a5:	81 7d d0 ff 00 00 00 	cmpl   $0xff,-0x30(%ebp)
  2849ac:	0f 8e 28 ff ff ff    	jle    2848da <sys_api+0x43c>
			{
				reg[7] = i-256;
  2849b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2849b5:	83 c0 1c             	add    $0x1c,%eax
  2849b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
  2849bb:	81 ea 00 01 00 00    	sub    $0x100,%edx
  2849c1:	89 10                	mov    %edx,(%eax)
				return 0;
  2849c3:	b8 00 00 00 00       	mov    $0x0,%eax
  2849c8:	e9 44 04 00 00       	jmp    284e11 <sys_api+0x973>
			}
		}
	}
	else if(edx == 16)
  2849cd:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  2849d1:	75 1e                	jne    2849f1 <sys_api+0x553>
	{
		reg[7] = (int)timer_alloc();
  2849d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2849d6:	8d 58 1c             	lea    0x1c(%eax),%ebx
  2849d9:	e8 b8 e0 ff ff       	call   282a96 <timer_alloc>
  2849de:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  2849e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2849e3:	83 c0 1c             	add    $0x1c,%eax
  2849e6:	8b 00                	mov    (%eax),%eax
  2849e8:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  2849ec:	e9 1b 04 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 17)
  2849f1:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  2849f5:	75 25                	jne    284a1c <sys_api+0x57e>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  2849f7:	8b 45 24             	mov    0x24(%ebp),%eax
  2849fa:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  284a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284a03:	8d 50 10             	lea    0x10(%eax),%edx
  284a06:	8b 45 18             	mov    0x18(%ebp),%eax
  284a09:	83 ec 04             	sub    $0x4,%esp
  284a0c:	51                   	push   %ecx
  284a0d:	52                   	push   %edx
  284a0e:	50                   	push   %eax
  284a0f:	e8 50 e1 ff ff       	call   282b64 <timer_init>
  284a14:	83 c4 10             	add    $0x10,%esp
  284a17:	e9 f0 03 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 18)
  284a1c:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284a20:	75 1a                	jne    284a3c <sys_api+0x59e>
	{
		timer_settime((struct TIMER *)ebx,eax);
  284a22:	8b 45 24             	mov    0x24(%ebp),%eax
  284a25:	89 c2                	mov    %eax,%edx
  284a27:	8b 45 18             	mov    0x18(%ebp),%eax
  284a2a:	83 ec 08             	sub    $0x8,%esp
  284a2d:	52                   	push   %edx
  284a2e:	50                   	push   %eax
  284a2f:	e8 44 e1 ff ff       	call   282b78 <timer_settime>
  284a34:	83 c4 10             	add    $0x10,%esp
  284a37:	e9 d0 03 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 19)
  284a3c:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  284a40:	75 14                	jne    284a56 <sys_api+0x5b8>
	{
		timer_free((struct TIMER *)ebx);
  284a42:	8b 45 18             	mov    0x18(%ebp),%eax
  284a45:	83 ec 0c             	sub    $0xc,%esp
  284a48:	50                   	push   %eax
  284a49:	e8 0a e1 ff ff       	call   282b58 <timer_free>
  284a4e:	83 c4 10             	add    $0x10,%esp
  284a51:	e9 b6 03 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 20)
  284a56:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  284a5a:	0f 85 a4 00 00 00    	jne    284b04 <sys_api+0x666>
	{
		if(eax == 0)
  284a60:	8b 45 24             	mov    0x24(%ebp),%eax
  284a63:	85 c0                	test   %eax,%eax
  284a65:	75 29                	jne    284a90 <sys_api+0x5f2>
		{
			int i = io_in8(0x61);
  284a67:	83 ec 0c             	sub    $0xc,%esp
  284a6a:	6a 61                	push   $0x61
  284a6c:	e8 73 c0 ff ff       	call   280ae4 <io_in8>
  284a71:	83 c4 10             	add    $0x10,%esp
  284a74:	89 45 cc             	mov    %eax,-0x34(%ebp)
			io_out8(0x61,i&0x0d);
  284a77:	8b 45 cc             	mov    -0x34(%ebp),%eax
  284a7a:	83 e0 0d             	and    $0xd,%eax
  284a7d:	83 ec 08             	sub    $0x8,%esp
  284a80:	50                   	push   %eax
  284a81:	6a 61                	push   $0x61
  284a83:	e8 7e c0 ff ff       	call   280b06 <io_out8>
  284a88:	83 c4 10             	add    $0x10,%esp
  284a8b:	e9 7c 03 00 00       	jmp    284e0c <sys_api+0x96e>
		}
		else
		{
			int i = 1193180000/eax;
  284a90:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284a93:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  284a98:	99                   	cltd   
  284a99:	f7 fb                	idiv   %ebx
  284a9b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			io_out8(0x43,0xb6);
  284a9e:	83 ec 08             	sub    $0x8,%esp
  284aa1:	68 b6 00 00 00       	push   $0xb6
  284aa6:	6a 43                	push   $0x43
  284aa8:	e8 59 c0 ff ff       	call   280b06 <io_out8>
  284aad:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  284ab0:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284ab3:	0f b6 c0             	movzbl %al,%eax
  284ab6:	83 ec 08             	sub    $0x8,%esp
  284ab9:	50                   	push   %eax
  284aba:	6a 42                	push   $0x42
  284abc:	e8 45 c0 ff ff       	call   280b06 <io_out8>
  284ac1:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  284ac4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284ac7:	c1 f8 08             	sar    $0x8,%eax
  284aca:	83 ec 08             	sub    $0x8,%esp
  284acd:	50                   	push   %eax
  284ace:	6a 42                	push   $0x42
  284ad0:	e8 31 c0 ff ff       	call   280b06 <io_out8>
  284ad5:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  284ad8:	83 ec 0c             	sub    $0xc,%esp
  284adb:	6a 61                	push   $0x61
  284add:	e8 02 c0 ff ff       	call   280ae4 <io_in8>
  284ae2:	83 c4 10             	add    $0x10,%esp
  284ae5:	89 45 c8             	mov    %eax,-0x38(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  284ae8:	8b 45 c8             	mov    -0x38(%ebp),%eax
  284aeb:	83 e0 0c             	and    $0xc,%eax
  284aee:	83 c8 03             	or     $0x3,%eax
  284af1:	83 ec 08             	sub    $0x8,%esp
  284af4:	50                   	push   %eax
  284af5:	6a 61                	push   $0x61
  284af7:	e8 0a c0 ff ff       	call   280b06 <io_out8>
  284afc:	83 c4 10             	add    $0x10,%esp
  284aff:	e9 08 03 00 00       	jmp    284e0c <sys_api+0x96e>
		}
	}
	else if(edx == 21)
  284b04:	83 7d 1c 15          	cmpl   $0x15,0x1c(%ebp)
  284b08:	0f 85 06 01 00 00    	jne    284c14 <sys_api+0x776>
	{

		int i = 0;
  284b0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for(;i<8;i++)
  284b15:	eb 21                	jmp    284b38 <sys_api+0x69a>
		{
			if(task->fhandle[i].buf == 0)
  284b17:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284b1a:	8b 88 b0 00 00 00    	mov    0xb0(%eax),%ecx
  284b20:	8b 55 f4             	mov    -0xc(%ebp),%edx
  284b23:	89 d0                	mov    %edx,%eax
  284b25:	01 c0                	add    %eax,%eax
  284b27:	01 d0                	add    %edx,%eax
  284b29:	c1 e0 02             	shl    $0x2,%eax
  284b2c:	01 c8                	add    %ecx,%eax
  284b2e:	8b 00                	mov    (%eax),%eax
  284b30:	85 c0                	test   %eax,%eax
  284b32:	74 0c                	je     284b40 <sys_api+0x6a2>
	}
	else if(edx == 21)
	{

		int i = 0;
		for(;i<8;i++)
  284b34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  284b38:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
  284b3c:	7e d9                	jle    284b17 <sys_api+0x679>
  284b3e:	eb 01                	jmp    284b41 <sys_api+0x6a3>
		{
			if(task->fhandle[i].buf == 0)
				break;
  284b40:	90                   	nop
		}
		fh = &task->fhandle[i];
  284b41:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284b44:	8b 88 b0 00 00 00    	mov    0xb0(%eax),%ecx
  284b4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  284b4d:	89 d0                	mov    %edx,%eax
  284b4f:	01 c0                	add    %eax,%eax
  284b51:	01 d0                	add    %edx,%eax
  284b53:	c1 e0 02             	shl    $0x2,%eax
  284b56:	01 c8                	add    %ecx,%eax
  284b58:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		reg[7] = 0;
  284b5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284b5e:	83 c0 1c             	add    $0x1c,%eax
  284b61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(i<8) 
  284b67:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
  284b6b:	0f 8f 9b 02 00 00    	jg     284e0c <sys_api+0x96e>
		{
			finfo = file_search((char *)ebx + ds_base,(struct FILEINFO *)(ADR_DISKIMG+0x002600),224);
  284b71:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284b74:	8b 45 18             	mov    0x18(%ebp),%eax
  284b77:	01 d0                	add    %edx,%eax
  284b79:	83 ec 04             	sub    $0x4,%esp
  284b7c:	68 e0 00 00 00       	push   $0xe0
  284b81:	68 00 26 10 00       	push   $0x102600
  284b86:	50                   	push   %eax
  284b87:	e8 6d eb ff ff       	call   2836f9 <file_search>
  284b8c:	83 c4 10             	add    $0x10,%esp
  284b8f:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if(finfo != 0 )
  284b92:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  284b96:	0f 84 70 02 00 00    	je     284e0c <sys_api+0x96e>
			{
				reg[7] = (int)fh;
  284b9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284b9f:	8d 50 1c             	lea    0x1c(%eax),%edx
  284ba2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ba5:	89 02                	mov    %eax,(%edx)
				fh->buf = (char *)memman_alloc_4k(memman,finfo->size);
  284ba7:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284baa:	8b 40 3c             	mov    0x3c(%eax),%eax
  284bad:	83 ec 08             	sub    $0x8,%esp
  284bb0:	50                   	push   %eax
  284bb1:	ff 75 d4             	pushl  -0x2c(%ebp)
  284bb4:	e8 94 d7 ff ff       	call   28234d <memman_alloc_4k>
  284bb9:	83 c4 10             	add    $0x10,%esp
  284bbc:	89 c2                	mov    %eax,%edx
  284bbe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bc1:	89 10                	mov    %edx,(%eax)
				fh->size= finfo->size;
  284bc3:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284bc6:	8b 40 3c             	mov    0x3c(%eax),%eax
  284bc9:	89 c2                	mov    %eax,%edx
  284bcb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bce:	89 50 04             	mov    %edx,0x4(%eax)
				fh->pos = 0;
  284bd1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284bd4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				file_loadfile(finfo->clustno,finfo->size,fh->buf,task->fat,(char *)(ADR_DISKIMG + 0x003e00));
  284bdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284bde:	8b 88 b4 00 00 00    	mov    0xb4(%eax),%ecx
  284be4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284be7:	8b 10                	mov    (%eax),%edx
  284be9:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284bec:	8b 40 3c             	mov    0x3c(%eax),%eax
  284bef:	89 c3                	mov    %eax,%ebx
  284bf1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  284bf4:	0f b7 40 3a          	movzwl 0x3a(%eax),%eax
  284bf8:	0f b7 c0             	movzwl %ax,%eax
  284bfb:	83 ec 0c             	sub    $0xc,%esp
  284bfe:	68 00 3e 10 00       	push   $0x103e00
  284c03:	51                   	push   %ecx
  284c04:	52                   	push   %edx
  284c05:	53                   	push   %ebx
  284c06:	50                   	push   %eax
  284c07:	e8 46 ea ff ff       	call   283652 <file_loadfile>
  284c0c:	83 c4 20             	add    $0x20,%esp
  284c0f:	e9 f8 01 00 00       	jmp    284e0c <sys_api+0x96e>
			}
		}
	}
	else if(edx == 22)
  284c14:	83 7d 1c 16          	cmpl   $0x16,0x1c(%ebp)
  284c18:	75 31                	jne    284c4b <sys_api+0x7ad>
	{
		fh = (struct FILEHANDLE *)eax;
  284c1a:	8b 45 24             	mov    0x24(%ebp),%eax
  284c1d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		memman_free_4k(memman,(int)fh->buf,fh->size);
  284c20:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c23:	8b 40 04             	mov    0x4(%eax),%eax
  284c26:	89 c2                	mov    %eax,%edx
  284c28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c2b:	8b 00                	mov    (%eax),%eax
  284c2d:	83 ec 04             	sub    $0x4,%esp
  284c30:	52                   	push   %edx
  284c31:	50                   	push   %eax
  284c32:	ff 75 d4             	pushl  -0x2c(%ebp)
  284c35:	e8 3f d7 ff ff       	call   282379 <memman_free_4k>
  284c3a:	83 c4 10             	add    $0x10,%esp
		fh->buf = 0;
  284c3d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  284c46:	e9 c1 01 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 23)
  284c4b:	83 7d 1c 17          	cmpl   $0x17,0x1c(%ebp)
  284c4f:	0f 85 80 00 00 00    	jne    284cd5 <sys_api+0x837>
	{
		fh = (struct FILEHANDLE *)eax;
  284c55:	8b 45 24             	mov    0x24(%ebp),%eax
  284c58:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if(ecx == 0)
  284c5b:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
  284c5f:	75 0b                	jne    284c6c <sys_api+0x7ce>
		{
			fh->pos = ebx;
  284c61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c64:	8b 55 18             	mov    0x18(%ebp),%edx
  284c67:	89 50 08             	mov    %edx,0x8(%eax)
  284c6a:	eb 30                	jmp    284c9c <sys_api+0x7fe>
		}
		else if(ecx == 1)
  284c6c:	83 7d 20 01          	cmpl   $0x1,0x20(%ebp)
  284c70:	75 13                	jne    284c85 <sys_api+0x7e7>
		{
			fh->pos += ebx;
  284c72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c75:	8b 50 08             	mov    0x8(%eax),%edx
  284c78:	8b 45 18             	mov    0x18(%ebp),%eax
  284c7b:	01 c2                	add    %eax,%edx
  284c7d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c80:	89 50 08             	mov    %edx,0x8(%eax)
  284c83:	eb 17                	jmp    284c9c <sys_api+0x7fe>
		}
		else if(ecx == 2)
  284c85:	83 7d 20 02          	cmpl   $0x2,0x20(%ebp)
  284c89:	75 11                	jne    284c9c <sys_api+0x7fe>
		{
			fh->pos = fh->size+ebx;
  284c8b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c8e:	8b 50 04             	mov    0x4(%eax),%edx
  284c91:	8b 45 18             	mov    0x18(%ebp),%eax
  284c94:	01 c2                	add    %eax,%edx
  284c96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c99:	89 50 08             	mov    %edx,0x8(%eax)
		}

		if(fh->pos < 0)
  284c9c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284c9f:	8b 40 08             	mov    0x8(%eax),%eax
  284ca2:	85 c0                	test   %eax,%eax
  284ca4:	79 0a                	jns    284cb0 <sys_api+0x812>
			fh->pos = 0;
  284ca6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ca9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		if(fh->pos > fh->size)
  284cb0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cb3:	8b 50 08             	mov    0x8(%eax),%edx
  284cb6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cb9:	8b 40 04             	mov    0x4(%eax),%eax
  284cbc:	39 c2                	cmp    %eax,%edx
  284cbe:	0f 8e 48 01 00 00    	jle    284e0c <sys_api+0x96e>
			fh->pos = fh->size;
  284cc4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cc7:	8b 50 04             	mov    0x4(%eax),%edx
  284cca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284ccd:	89 50 08             	mov    %edx,0x8(%eax)
  284cd0:	e9 37 01 00 00       	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 24)
  284cd5:	83 7d 1c 18          	cmpl   $0x18,0x1c(%ebp)
  284cd9:	75 5f                	jne    284d3a <sys_api+0x89c>
	{
		fh = (struct FILEHANDLE *)eax;
  284cdb:	8b 45 24             	mov    0x24(%ebp),%eax
  284cde:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if(ecx == 0)
  284ce1:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
  284ce5:	75 13                	jne    284cfa <sys_api+0x85c>
		{
			reg[7] = fh->size;
  284ce7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284cea:	8d 50 1c             	lea    0x1c(%eax),%edx
  284ced:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284cf0:	8b 40 04             	mov    0x4(%eax),%eax
  284cf3:	89 02                	mov    %eax,(%edx)
  284cf5:	e9 12 01 00 00       	jmp    284e0c <sys_api+0x96e>
		}
		else if(ecx == 1)
  284cfa:	83 7d 20 01          	cmpl   $0x1,0x20(%ebp)
  284cfe:	75 13                	jne    284d13 <sys_api+0x875>
		{
			reg[7] = fh->pos;
  284d00:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284d03:	8d 50 1c             	lea    0x1c(%eax),%edx
  284d06:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d09:	8b 40 08             	mov    0x8(%eax),%eax
  284d0c:	89 02                	mov    %eax,(%edx)
  284d0e:	e9 f9 00 00 00       	jmp    284e0c <sys_api+0x96e>
		}
		else if(ecx == 2)
  284d13:	83 7d 20 02          	cmpl   $0x2,0x20(%ebp)
  284d17:	0f 85 ef 00 00 00    	jne    284e0c <sys_api+0x96e>
		{
			reg[7] = fh->pos - fh->size;
  284d1d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284d20:	8d 50 1c             	lea    0x1c(%eax),%edx
  284d23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d26:	8b 48 08             	mov    0x8(%eax),%ecx
  284d29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d2c:	8b 40 04             	mov    0x4(%eax),%eax
  284d2f:	29 c1                	sub    %eax,%ecx
  284d31:	89 c8                	mov    %ecx,%eax
  284d33:	89 02                	mov    %eax,(%edx)
  284d35:	e9 d2 00 00 00       	jmp    284e0c <sys_api+0x96e>
		}
	}
	else if(edx == 25)
  284d3a:	83 7d 1c 19          	cmpl   $0x19,0x1c(%ebp)
  284d3e:	75 6b                	jne    284dab <sys_api+0x90d>
	{
		fh = (struct FILEHANDLE *)eax;
  284d40:	8b 45 24             	mov    0x24(%ebp),%eax
  284d43:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		int i=0;
  284d46:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(;i<ecx;i++)
  284d4d:	eb 44                	jmp    284d93 <sys_api+0x8f5>
		{
			if(fh->pos == fh->size)
  284d4f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d52:	8b 50 08             	mov    0x8(%eax),%edx
  284d55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d58:	8b 40 04             	mov    0x4(%eax),%eax
  284d5b:	39 c2                	cmp    %eax,%edx
  284d5d:	74 3e                	je     284d9d <sys_api+0x8ff>
			{
				break;
			}
			*((char *)ebx+ds_base+i) = fh->buf[fh->pos];
  284d5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284d62:	8b 45 18             	mov    0x18(%ebp),%eax
  284d65:	01 c2                	add    %eax,%edx
  284d67:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284d6a:	01 d0                	add    %edx,%eax
  284d6c:	89 c1                	mov    %eax,%ecx
  284d6e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d71:	8b 10                	mov    (%eax),%edx
  284d73:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d76:	8b 40 08             	mov    0x8(%eax),%eax
  284d79:	01 d0                	add    %edx,%eax
  284d7b:	0f b6 00             	movzbl (%eax),%eax
  284d7e:	88 01                	mov    %al,(%ecx)
			fh->pos++;
  284d80:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d83:	8b 40 08             	mov    0x8(%eax),%eax
  284d86:	8d 50 01             	lea    0x1(%eax),%edx
  284d89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  284d8c:	89 50 08             	mov    %edx,0x8(%eax)
	}
	else if(edx == 25)
	{
		fh = (struct FILEHANDLE *)eax;
		int i=0;
		for(;i<ecx;i++)
  284d8f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  284d93:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284d96:	3b 45 20             	cmp    0x20(%ebp),%eax
  284d99:	7c b4                	jl     284d4f <sys_api+0x8b1>
  284d9b:	eb 01                	jmp    284d9e <sys_api+0x900>
		{
			if(fh->pos == fh->size)
			{
				break;
  284d9d:	90                   	nop
			}
			*((char *)ebx+ds_base+i) = fh->buf[fh->pos];
			fh->pos++;
		}
		reg[7] = i;
  284d9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284da1:	8d 50 1c             	lea    0x1c(%eax),%edx
  284da4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284da7:	89 02                	mov    %eax,(%edx)
  284da9:	eb 61                	jmp    284e0c <sys_api+0x96e>
	}
	else if(edx == 26)
  284dab:	83 7d 1c 1a          	cmpl   $0x1a,0x1c(%ebp)
  284daf:	75 5b                	jne    284e0c <sys_api+0x96e>
	{
		int i=0;
  284db1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		for(;;)
		{
			*((char *)ebx + ds_base +i) = task->cmdline[i];
  284db8:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284dbb:	8b 45 18             	mov    0x18(%ebp),%eax
  284dbe:	01 c2                	add    %eax,%edx
  284dc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284dc3:	01 d0                	add    %edx,%eax
  284dc5:	89 c1                	mov    %eax,%ecx
  284dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284dca:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
  284dd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284dd3:	01 d0                	add    %edx,%eax
  284dd5:	0f b6 00             	movzbl (%eax),%eax
  284dd8:	88 01                	mov    %al,(%ecx)
			if(task->cmdline[i] == 0)
  284dda:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284ddd:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
  284de3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284de6:	01 d0                	add    %edx,%eax
  284de8:	0f b6 00             	movzbl (%eax),%eax
  284deb:	84 c0                	test   %al,%al
  284ded:	74 0e                	je     284dfd <sys_api+0x95f>
				break;
			if(i >= ecx)
  284def:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284df2:	3b 45 20             	cmp    0x20(%ebp),%eax
  284df5:	7d 09                	jge    284e00 <sys_api+0x962>
				break;
			i++;
  284df7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
		}
  284dfb:	eb bb                	jmp    284db8 <sys_api+0x91a>
		int i=0;
		for(;;)
		{
			*((char *)ebx + ds_base +i) = task->cmdline[i];
			if(task->cmdline[i] == 0)
				break;
  284dfd:	90                   	nop
  284dfe:	eb 01                	jmp    284e01 <sys_api+0x963>
			if(i >= ecx)
				break;
  284e00:	90                   	nop
			i++;
		}
		reg[7] = i;
  284e01:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284e04:	8d 50 1c             	lea    0x1c(%eax),%edx
  284e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284e0a:	89 02                	mov    %eax,(%edx)
	}
	return 0;
  284e0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  284e11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284e14:	c9                   	leave  
  284e15:	c3                   	ret    
  284e16:	66 90                	xchg   %ax,%ax
  284e18:	66 90                	xchg   %ax,%ax
  284e1a:	66 90                	xchg   %ax,%ax
  284e1c:	66 90                	xchg   %ax,%ax
  284e1e:	66 90                	xchg   %ax,%ax

00284e20 <api_putchar>:
  284e20:	ba 01 00 00 00       	mov    $0x1,%edx
  284e25:	8a 44 24 04          	mov    0x4(%esp),%al
  284e29:	cd 40                	int    $0x40
  284e2b:	c3                   	ret    

00284e2c <api_putstr>:
  284e2c:	ba 02 00 00 00       	mov    $0x2,%edx
  284e31:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284e35:	cd 40                	int    $0x40
  284e37:	c3                   	ret    

00284e38 <api_end>:
  284e38:	ba 04 00 00 00       	mov    $0x4,%edx
  284e3d:	cd 40                	int    $0x40

00284e3f <api_test>:
  284e3f:	05 80 00 00 00       	add    $0x80,%eax
  284e44:	c3                   	ret    

00284e45 <api_openwin>:
  284e45:	57                   	push   %edi
  284e46:	56                   	push   %esi
  284e47:	53                   	push   %ebx
  284e48:	ba 05 00 00 00       	mov    $0x5,%edx
  284e4d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284e51:	8b 74 24 14          	mov    0x14(%esp),%esi
  284e55:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284e59:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284e5d:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  284e61:	cd 40                	int    $0x40
  284e63:	5b                   	pop    %ebx
  284e64:	5e                   	pop    %esi
  284e65:	5f                   	pop    %edi
  284e66:	c3                   	ret    

00284e67 <api_putstrwin>:
  284e67:	57                   	push   %edi
  284e68:	56                   	push   %esi
  284e69:	55                   	push   %ebp
  284e6a:	53                   	push   %ebx
  284e6b:	ba 06 00 00 00       	mov    $0x6,%edx
  284e70:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284e74:	8b 74 24 18          	mov    0x18(%esp),%esi
  284e78:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  284e7c:	8b 44 24 20          	mov    0x20(%esp),%eax
  284e80:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  284e84:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284e88:	cd 40                	int    $0x40
  284e8a:	5b                   	pop    %ebx
  284e8b:	5d                   	pop    %ebp
  284e8c:	5e                   	pop    %esi
  284e8d:	5f                   	pop    %edi
  284e8e:	c3                   	ret    

00284e8f <api_boxfilwin>:
  284e8f:	57                   	push   %edi
  284e90:	56                   	push   %esi
  284e91:	55                   	push   %ebp
  284e92:	53                   	push   %ebx
  284e93:	ba 07 00 00 00       	mov    $0x7,%edx
  284e98:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284e9c:	8b 44 24 18          	mov    0x18(%esp),%eax
  284ea0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284ea4:	8b 74 24 20          	mov    0x20(%esp),%esi
  284ea8:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284eac:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284eb0:	cd 40                	int    $0x40
  284eb2:	5b                   	pop    %ebx
  284eb3:	5d                   	pop    %ebp
  284eb4:	5e                   	pop    %esi
  284eb5:	5f                   	pop    %edi
  284eb6:	c3                   	ret    

00284eb7 <api_initmalloc>:
  284eb7:	53                   	push   %ebx
  284eb8:	ba 08 00 00 00       	mov    $0x8,%edx
  284ebd:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284ec4:	89 d8                	mov    %ebx,%eax
  284ec6:	05 00 80 00 00       	add    $0x8000,%eax
  284ecb:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  284ed2:	29 c1                	sub    %eax,%ecx
  284ed4:	cd 40                	int    $0x40
  284ed6:	5b                   	pop    %ebx
  284ed7:	c3                   	ret    

00284ed8 <api_malloc>:
  284ed8:	53                   	push   %ebx
  284ed9:	ba 09 00 00 00       	mov    $0x9,%edx
  284ede:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284ee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  284ee9:	cd 40                	int    $0x40
  284eeb:	5b                   	pop    %ebx
  284eec:	c3                   	ret    

00284eed <api_free>:
  284eed:	53                   	push   %ebx
  284eee:	ba 0a 00 00 00       	mov    $0xa,%edx
  284ef3:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284efa:	8b 44 24 08          	mov    0x8(%esp),%eax
  284efe:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284f02:	cd 40                	int    $0x40
  284f04:	5b                   	pop    %ebx
  284f05:	c3                   	ret    

00284f06 <api_pointwin>:
  284f06:	57                   	push   %edi
  284f07:	56                   	push   %esi
  284f08:	53                   	push   %ebx
  284f09:	ba 0b 00 00 00       	mov    $0xb,%edx
  284f0e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284f12:	8b 74 24 14          	mov    0x14(%esp),%esi
  284f16:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284f1a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284f1e:	cd 40                	int    $0x40
  284f20:	5b                   	pop    %ebx
  284f21:	5e                   	pop    %esi
  284f22:	5f                   	pop    %edi
  284f23:	c3                   	ret    

00284f24 <api_refreshwin>:
  284f24:	57                   	push   %edi
  284f25:	56                   	push   %esi
  284f26:	53                   	push   %ebx
  284f27:	ba 0c 00 00 00       	mov    $0xc,%edx
  284f2c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284f30:	8b 44 24 14          	mov    0x14(%esp),%eax
  284f34:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284f38:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  284f3c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284f40:	cd 40                	int    $0x40
  284f42:	5b                   	pop    %ebx
  284f43:	5e                   	pop    %esi
  284f44:	5f                   	pop    %edi
  284f45:	c3                   	ret    

00284f46 <api_linewin>:
  284f46:	57                   	push   %edi
  284f47:	56                   	push   %esi
  284f48:	55                   	push   %ebp
  284f49:	53                   	push   %ebx
  284f4a:	ba 0d 00 00 00       	mov    $0xd,%edx
  284f4f:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284f53:	8b 44 24 18          	mov    0x18(%esp),%eax
  284f57:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284f5b:	8b 74 24 20          	mov    0x20(%esp),%esi
  284f5f:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284f63:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284f67:	cd 40                	int    $0x40
  284f69:	5b                   	pop    %ebx
  284f6a:	5d                   	pop    %ebp
  284f6b:	5e                   	pop    %esi
  284f6c:	5f                   	pop    %edi
  284f6d:	c3                   	ret    

00284f6e <api_closewin>:
  284f6e:	53                   	push   %ebx
  284f6f:	ba 0e 00 00 00       	mov    $0xe,%edx
  284f74:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f78:	cd 40                	int    $0x40
  284f7a:	5b                   	pop    %ebx
  284f7b:	c3                   	ret    

00284f7c <api_getkey>:
  284f7c:	ba 0f 00 00 00       	mov    $0xf,%edx
  284f81:	8b 44 24 04          	mov    0x4(%esp),%eax
  284f85:	cd 40                	int    $0x40
  284f87:	c3                   	ret    

00284f88 <api_alloctimer>:
  284f88:	ba 10 00 00 00       	mov    $0x10,%edx
  284f8d:	cd 40                	int    $0x40
  284f8f:	c3                   	ret    

00284f90 <api_inittimer>:
  284f90:	53                   	push   %ebx
  284f91:	ba 11 00 00 00       	mov    $0x11,%edx
  284f96:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284f9a:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284f9e:	cd 40                	int    $0x40
  284fa0:	5b                   	pop    %ebx
  284fa1:	c3                   	ret    

00284fa2 <api_settimer>:
  284fa2:	53                   	push   %ebx
  284fa3:	ba 12 00 00 00       	mov    $0x12,%edx
  284fa8:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284fac:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284fb0:	cd 40                	int    $0x40
  284fb2:	5b                   	pop    %ebx
  284fb3:	c3                   	ret    

00284fb4 <api_freetimer>:
  284fb4:	53                   	push   %ebx
  284fb5:	ba 13 00 00 00       	mov    $0x13,%edx
  284fba:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284fbe:	cd 40                	int    $0x40
  284fc0:	5b                   	pop    %ebx
  284fc1:	c3                   	ret    

00284fc2 <api_beep>:
  284fc2:	ba 14 00 00 00       	mov    $0x14,%edx
  284fc7:	8b 44 24 04          	mov    0x4(%esp),%eax
  284fcb:	cd 40                	int    $0x40
  284fcd:	c3                   	ret    

00284fce <api_fopen>:
  284fce:	53                   	push   %ebx
  284fcf:	ba 15 00 00 00       	mov    $0x15,%edx
  284fd4:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284fd8:	cd 40                	int    $0x40
  284fda:	5b                   	pop    %ebx
  284fdb:	c3                   	ret    

00284fdc <api_fclose>:
  284fdc:	ba 16 00 00 00       	mov    $0x16,%edx
  284fe1:	8b 44 24 04          	mov    0x4(%esp),%eax
  284fe5:	cd 40                	int    $0x40
  284fe7:	c3                   	ret    

00284fe8 <api_seek>:
  284fe8:	53                   	push   %ebx
  284fe9:	ba 17 00 00 00       	mov    $0x17,%edx
  284fee:	8b 44 24 08          	mov    0x8(%esp),%eax
  284ff2:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  284ff6:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
  284ffa:	cd 40                	int    $0x40
  284ffc:	5b                   	pop    %ebx
  284ffd:	c3                   	ret    

00284ffe <api_fsize>:
  284ffe:	ba 18 00 00 00       	mov    $0x18,%edx
  285003:	8b 44 24 04          	mov    0x4(%esp),%eax
  285007:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  28500b:	cd 40                	int    $0x40
  28500d:	c3                   	ret    

0028500e <api_fread>:
  28500e:	53                   	push   %ebx
  28500f:	ba 19 00 00 00       	mov    $0x19,%edx
  285014:	8b 44 24 10          	mov    0x10(%esp),%eax
  285018:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  28501c:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  285020:	cd 40                	int    $0x40
  285022:	5b                   	pop    %ebx
  285023:	c3                   	ret    

00285024 <api_cmdline>:
  285024:	53                   	push   %ebx
  285025:	ba 1a 00 00 00       	mov    $0x1a,%edx
  28502a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  28502e:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  285032:	cd 40                	int    $0x40
  285034:	5b                   	pop    %ebx
  285035:	c3                   	ret    

00285036 <change_wtitle8>:
	}
	return;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  285036:	55                   	push   %ebp
  285037:	89 e5                	mov    %esp,%ebp
  285039:	57                   	push   %edi
  28503a:	56                   	push   %esi
  28503b:	53                   	push   %ebx
  28503c:	83 ec 2c             	sub    $0x2c,%esp
  28503f:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  285042:	8b 7d 08             	mov    0x8(%ebp),%edi
  285045:	8b 7f 04             	mov    0x4(%edi),%edi
  285048:	89 fe                	mov    %edi,%esi
  28504a:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  28504d:	3c 01                	cmp    $0x1,%al
  28504f:	19 ff                	sbb    %edi,%edi
  285051:	89 fb                	mov    %edi,%ebx
  285053:	83 e3 fd             	and    $0xfffffffd,%ebx
  285056:	83 c3 0f             	add    $0xf,%ebx
  285059:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  28505c:	89 fb                	mov    %edi,%ebx
  28505e:	83 c3 08             	add    $0x8,%ebx
  285061:	88 5d e7             	mov    %bl,-0x19(%ebp)
  285064:	83 e7 03             	and    $0x3,%edi
  285067:	83 c7 0c             	add    $0xc,%edi
  28506a:	3c 01                	cmp    $0x1,%al
  28506c:	19 c0                	sbb    %eax,%eax
  28506e:	f7 d0                	not    %eax
  285070:	83 c0 08             	add    $0x8,%eax
  285073:	88 45 e5             	mov    %al,-0x1b(%ebp)
  285076:	89 f0                	mov    %esi,%eax
  285078:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  28507b:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  28507e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  285081:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  285083:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  28508a:	8d 5e fc             	lea    -0x4(%esi),%ebx
  28508d:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  285090:	83 e8 03             	sub    $0x3,%eax
  285093:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  285096:	8d 46 ea             	lea    -0x16(%esi),%eax
  285099:	89 45 dc             	mov    %eax,-0x24(%ebp)
  28509c:	eb 32                	jmp    2850d0 <change_wtitle8+0x9a>
  28509e:	89 ce                	mov    %ecx,%esi
  2850a0:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  2850a2:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  2850a6:	38 45 e7             	cmp    %al,-0x19(%ebp)
  2850a9:	75 05                	jne    2850b0 <change_wtitle8+0x7a>
  2850ab:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  2850ae:	7d 08                	jge    2850b8 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  2850b0:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  2850b3:	0f 44 c7             	cmove  %edi,%eax
  2850b6:	eb 04                	jmp    2850bc <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  2850b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  2850bc:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  2850bf:	83 c2 01             	add    $0x1,%edx
  2850c2:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  2850c5:	75 d7                	jne    28509e <change_wtitle8+0x68>
  2850c7:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  2850ca:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  2850ce:	74 0d                	je     2850dd <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  2850d0:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  2850d4:	7e f1                	jle    2850c7 <change_wtitle8+0x91>
  2850d6:	ba 03 00 00 00       	mov    $0x3,%edx
  2850db:	eb c1                	jmp    28509e <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  2850dd:	83 ec 0c             	sub    $0xc,%esp
  2850e0:	6a 15                	push   $0x15
  2850e2:	ff 75 cc             	pushl  -0x34(%ebp)
  2850e5:	6a 03                	push   $0x3
  2850e7:	6a 03                	push   $0x3
  2850e9:	ff 75 08             	pushl  0x8(%ebp)
  2850ec:	e8 05 d8 ff ff       	call   2828f6 <sheet_refresh>
	return;
  2850f1:	83 c4 20             	add    $0x20,%esp
}
  2850f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2850f7:	5b                   	pop    %ebx
  2850f8:	5e                   	pop    %esi
  2850f9:	5f                   	pop    %edi
  2850fa:	5d                   	pop    %ebp
  2850fb:	c3                   	ret    

002850fc <keywin_off>:
#include "common.h"
#include "graphics.h"
#include "memory.h"
#include "task_console.h"
void keywin_off(struct SHEET *key_win)
{
  2850fc:	55                   	push   %ebp
  2850fd:	89 e5                	mov    %esp,%ebp
  2850ff:	53                   	push   %ebx
  285100:	83 ec 0c             	sub    $0xc,%esp
  285103:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  285106:	6a 00                	push   $0x0
  285108:	53                   	push   %ebx
  285109:	e8 28 ff ff ff       	call   285036 <change_wtitle8>
	if((key_win->flags & 0x20))
  28510e:	83 c4 10             	add    $0x10,%esp
  285111:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  285115:	74 14                	je     28512b <keywin_off+0x2f>
	{
		fifo32_put(&key_win->task->fifo,3);
  285117:	83 ec 08             	sub    $0x8,%esp
  28511a:	6a 03                	push   $0x3
  28511c:	8b 43 24             	mov    0x24(%ebx),%eax
  28511f:	83 c0 10             	add    $0x10,%eax
  285122:	50                   	push   %eax
  285123:	e8 a1 ca ff ff       	call   281bc9 <fifo32_put>
  285128:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  28512b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28512e:	c9                   	leave  
  28512f:	c3                   	ret    

00285130 <keywin_on>:

void keywin_on(struct SHEET *key_win)
{
  285130:	55                   	push   %ebp
  285131:	89 e5                	mov    %esp,%ebp
  285133:	53                   	push   %ebx
  285134:	83 ec 0c             	sub    $0xc,%esp
  285137:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  28513a:	6a 01                	push   $0x1
  28513c:	53                   	push   %ebx
  28513d:	e8 f4 fe ff ff       	call   285036 <change_wtitle8>
	if((key_win->flags & 0x20))
  285142:	83 c4 10             	add    $0x10,%esp
  285145:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  285149:	74 14                	je     28515f <keywin_on+0x2f>
	{
		fifo32_put(&key_win->task->fifo,2);
  28514b:	83 ec 08             	sub    $0x8,%esp
  28514e:	6a 02                	push   $0x2
  285150:	8b 43 24             	mov    0x24(%ebx),%eax
  285153:	83 c0 10             	add    $0x10,%eax
  285156:	50                   	push   %eax
  285157:	e8 6d ca ff ff       	call   281bc9 <fifo32_put>
  28515c:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  28515f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  285162:	c9                   	leave  
  285163:	c3                   	ret    

00285164 <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  285164:	55                   	push   %ebp
  285165:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  285167:	8b 45 0c             	mov    0xc(%ebp),%eax
  28516a:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  28516e:	5d                   	pop    %ebp
  28516f:	c3                   	ret    
