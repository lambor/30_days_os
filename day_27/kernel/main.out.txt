
main.out.o:     file format elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280013:	8d 9d fc fb ff ff    	lea    -0x404(%ebp),%ebx
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280019:	8d b5 18 fc ff ff    	lea    -0x3e8(%ebp),%esi
#include "header.h"


int bootmain()
{
  28001f:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280025:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280027:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  28002d:	6a 00                	push   $0x0
  28002f:	50                   	push   %eax
  280030:	68 80 00 00 00       	push   $0x80
  280035:	53                   	push   %ebx
  280036:	e8 1d 1b 00 00       	call   281b58 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  28003b:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  280041:	6a 00                	push   $0x0
  280043:	50                   	push   %eax
  280044:	6a 20                	push   $0x20
  280046:	56                   	push   %esi
  280047:	e8 0c 1b 00 00       	call   281b58 <fifo32_init>
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;
  280054:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int key_leds = (binfo->leds>>4)&7;

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28005a:	68 ed 00 00 00       	push   $0xed
  28005f:	56                   	push   %esi
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  280060:	c0 f8 04             	sar    $0x4,%al
  280063:	83 e0 07             	and    $0x7,%eax
  280066:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28006c:	e8 18 1b 00 00       	call   281b89 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	59                   	pop    %ecx
  280072:	5f                   	pop    %edi
  280073:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280079:	56                   	push   %esi
  28007a:	e8 0a 1b 00 00       	call   281b89 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  28007f:	e8 31 14 00 00       	call   2814b5 <init_gdtidt>
	init_pic();
  280084:	e8 f0 15 00 00       	call   281679 <init_pic>
	io_sti();
  280089:	e8 06 0a 00 00       	call   280a94 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  28008e:	58                   	pop    %eax
  28008f:	5a                   	pop    %edx
  280090:	68 00 01 00 00       	push   $0x100
  280095:	53                   	push   %ebx
  280096:	e8 f7 1c 00 00       	call   281d92 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  28009b:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800a1:	83 c4 0c             	add    $0xc,%esp
  2800a4:	50                   	push   %eax
  2800a5:	68 00 02 00 00       	push   $0x200
  2800aa:	53                   	push   %ebx
  2800ab:	e8 94 1b 00 00       	call   281c44 <enable_mouse>

	//init timer
	init_pit();
  2800b0:	e8 fb 29 00 00       	call   282ab0 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800b5:	59                   	pop    %ecx
  2800b6:	5f                   	pop    %edi
  2800b7:	68 f8 00 00 00       	push   $0xf8
  2800bc:	6a 21                	push   $0x21
  2800be:	e8 03 0a 00 00       	call   280ac6 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800c3:	58                   	pop    %eax
  2800c4:	5a                   	pop    %edx
  2800c5:	68 ef 00 00 00       	push   $0xef
  2800ca:	68 a1 00 00 00       	push   $0xa1
  2800cf:	e8 f2 09 00 00       	call   280ac6 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800d4:	59                   	pop    %ecx
  2800d5:	5f                   	pop    %edi
  2800d6:	68 ff ff ff bf       	push   $0xbfffffff
  2800db:	68 00 00 40 00       	push   $0x400000
  2800e0:	e8 47 1d 00 00       	call   281e2c <memtest>
	memman_init(memman);
  2800e5:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800ec:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	memman_init(memman);
  2800f2:	e8 74 1e 00 00       	call   281f6b <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  2800f7:	83 c4 0c             	add    $0xc,%esp
  2800fa:	68 00 e0 09 00       	push   $0x9e000
  2800ff:	68 00 10 00 00       	push   $0x1000
  280104:	68 00 00 3c 00       	push   $0x3c0000
  280109:	e8 ac 1f 00 00       	call   2820ba <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28010e:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  280114:	83 c4 0c             	add    $0xc,%esp
  280117:	2d 00 00 40 00       	sub    $0x400000,%eax
  28011c:	50                   	push   %eax
  28011d:	68 00 00 40 00       	push   $0x400000
  280122:	68 00 00 3c 00       	push   $0x3c0000
  280127:	e8 8e 1f 00 00       	call   2820ba <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
  28012c:	e8 ca 0a 00 00       	call   280bfb <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280131:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280138:	50                   	push   %eax
  280139:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280140:	50                   	push   %eax
  280141:	ff 35 f8 0f 00 00    	pushl  0xff8
  280147:	68 00 00 3c 00       	push   $0x3c0000
  28014c:	e8 17 22 00 00       	call   282368 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280151:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280154:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  28015a:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  28015f:	68 00 00 3c 00       	push   $0x3c0000
  280164:	e8 8e 2e 00 00       	call   282ff7 <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280169:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  28016c:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%ebp)
	fifo.task = task_a;
  280172:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280178:	6a 00                	push   $0x0
  28017a:	6a 01                	push   $0x1
  28017c:	50                   	push   %eax
  28017d:	e8 e2 2d 00 00       	call   282f64 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280182:	58                   	pop    %eax
  280183:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280189:	e8 6e 22 00 00       	call   2823fc <sheet_alloc>
  28018e:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  280194:	58                   	pop    %eax
  280195:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  28019c:	5a                   	pop    %edx
  28019d:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801a4:	0f af c2             	imul   %edx,%eax
  2801a7:	50                   	push   %eax
  2801a8:	68 00 00 3c 00       	push   $0x3c0000
  2801ad:	e8 5b 21 00 00       	call   28230d <memman_alloc_4k>
  2801b2:	89 c7                	mov    %eax,%edi
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801b4:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801bb:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801c2:	50                   	push   %eax
  2801c3:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801ca:	50                   	push   %eax
  2801cb:	57                   	push   %edi
  2801cc:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2801d2:	e8 98 22 00 00       	call   28246f <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801d7:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801de:	83 c4 1c             	add    $0x1c,%esp
  2801e1:	50                   	push   %eax
  2801e2:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801e9:	50                   	push   %eax
  2801ea:	57                   	push   %edi

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2801eb:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801f1:	e8 fb 0a 00 00       	call   280cf1 <init_screen8>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2801f6:	59                   	pop    %ecx
  2801f7:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2801fd:	e8 fa 21 00 00       	call   2823fc <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280202:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  280209:	6a 10                	push   $0x10
  28020b:	6a 10                	push   $0x10
  28020d:	57                   	push   %edi
  28020e:	50                   	push   %eax
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  28020f:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280215:	e8 55 22 00 00       	call   28246f <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  28021a:	83 c4 18             	add    $0x18,%esp
  28021d:	6a 63                	push   $0x63
  28021f:	57                   	push   %edi
  280220:	e8 3b 0c 00 00       	call   280e60 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280225:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  28022c:	b9 02 00 00 00       	mov    $0x2,%ecx
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280231:	5f                   	pop    %edi
	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280232:	83 e8 10             	sub    $0x10,%eax
  280235:	99                   	cltd   
  280236:	f7 f9                	idiv   %ecx
  280238:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int my = (binfo->scrny-28-16)/2;
  28023e:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280245:	83 e8 2c             	sub    $0x2c,%eax
  280248:	99                   	cltd   
  280249:	f7 f9                	idiv   %ecx
  28024b:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280251:	58                   	pop    %eax
  280252:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280258:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28025e:	e8 f4 3d 00 00       	call   284057 <open_console>
  280263:	89 c7                	mov    %eax,%edi
	keywin_on(key_win);
  280265:	89 04 24             	mov    %eax,(%esp)
  280268:	e8 bb 4a 00 00       	call   284d28 <keywin_on>

	sheet_slide(sht_bg,0,0);
  28026d:	83 c4 0c             	add    $0xc,%esp
  280270:	6a 00                	push   $0x0
  280272:	6a 00                	push   $0x0
  280274:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28027a:	e8 54 27 00 00       	call   2829d3 <sheet_slide>
	sheet_slide(key_win,32,4);
  28027f:	83 c4 0c             	add    $0xc,%esp
  280282:	6a 04                	push   $0x4
  280284:	6a 20                	push   $0x20
  280286:	57                   	push   %edi
  280287:	e8 47 27 00 00       	call   2829d3 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  28028c:	83 c4 0c             	add    $0xc,%esp
  28028f:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280295:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28029b:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802a1:	e8 2d 27 00 00       	call   2829d3 <sheet_slide>
	sheet_updown(sht_bg,		0);
  2802a6:	58                   	pop    %eax
  2802a7:	5a                   	pop    %edx
  2802a8:	6a 00                	push   $0x0
  2802aa:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802b0:	e8 35 26 00 00       	call   2828ea <sheet_updown>
	sheet_updown(key_win,1);
  2802b5:	59                   	pop    %ecx
  2802b6:	58                   	pop    %eax
  2802b7:	6a 01                	push   $0x1
  2802b9:	57                   	push   %edi
  2802ba:	e8 2b 26 00 00       	call   2828ea <sheet_updown>
	sheet_updown(sht_mouse,		2);
  2802bf:	58                   	pop    %eax
  2802c0:	5a                   	pop    %edx
  2802c1:	6a 02                	push   $0x2
  2802c3:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802c9:	e8 1c 26 00 00       	call   2828ea <sheet_updown>
  2802ce:	83 c4 10             	add    $0x10,%esp

	extern struct TIMERCTL timerctl;
	
	int key_shift = 0,keycmd_wait = -1;
  2802d1:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  2802d8:	ff ff ff 
  2802db:	c7 85 c8 fb ff ff 00 	movl   $0x0,-0x438(%ebp)
  2802e2:	00 00 00 
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
  2802e5:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2802ec:	00 00 00 
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;
  2802ef:	c7 85 b4 fb ff ff 00 	movl   $0x0,-0x44c(%ebp)
  2802f6:	00 00 00 
  2802f9:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280300:	ff ff 7f 
  280303:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  28030a:	00 00 00 
  28030d:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  280314:	ff ff ff 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
  280317:	c7 85 9c fb ff ff 00 	movl   $0x0,-0x464(%ebp)
  28031e:	00 00 00 
  280321:	c7 85 a8 fb ff ff ff 	movl   $0xffffffff,-0x458(%ebp)
  280328:	ff ff ff 
  28032b:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280332:	ff ff ff 
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280335:	89 b5 c4 fb ff ff    	mov    %esi,-0x43c(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  28033b:	89 9d 98 fb ff ff    	mov    %ebx,-0x468(%ebp)
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280341:	83 ec 0c             	sub    $0xc,%esp
  280344:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28034a:	e8 e7 18 00 00       	call   281c36 <fifo32_status>
  28034f:	8b 8d b8 fb ff ff    	mov    -0x448(%ebp),%ecx
  280355:	83 c4 10             	add    $0x10,%esp
  280358:	c1 e9 1f             	shr    $0x1f,%ecx
  28035b:	74 2f                	je     28038c <bootmain+0x38c>
  28035d:	85 c0                	test   %eax,%eax
  28035f:	7e 2b                	jle    28038c <bootmain+0x38c>
		{
			keycmd_wait = fifo32_get(&keycmd);
  280361:	83 ec 0c             	sub    $0xc,%esp
  280364:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28036a:	e8 8c 18 00 00       	call   281bfb <fifo32_get>
  28036f:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
			wait_KBC_sendready();
  280375:	e8 ff 19 00 00       	call   281d79 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  28037a:	58                   	pop    %eax
  28037b:	5a                   	pop    %edx
  28037c:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280382:	6a 60                	push   $0x60
  280384:	e8 3d 07 00 00       	call   280ac6 <io_out8>
  280389:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  28038c:	e8 01 07 00 00       	call   280a92 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280391:	83 ec 0c             	sub    $0xc,%esp
  280394:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  28039a:	e8 97 18 00 00       	call   281c36 <fifo32_status>
  28039f:	83 c4 10             	add    $0x10,%esp
  2803a2:	85 c0                	test   %eax,%eax
  2803a4:	0f 85 86 00 00 00    	jne    280430 <bootmain+0x430>
		{	
			if(new_mx >= 0)
  2803aa:	83 bd e0 fb ff ff 00 	cmpl   $0x0,-0x420(%ebp)
  2803b1:	78 2f                	js     2803e2 <bootmain+0x3e2>
			{
				io_sti();
  2803b3:	e8 dc 06 00 00       	call   280a94 <io_sti>
				sheet_slide(sht_mouse,new_mx,new_my);
  2803b8:	50                   	push   %eax
  2803b9:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2803bf:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2803c5:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2803cb:	e8 03 26 00 00       	call   2829d3 <sheet_slide>
  2803d0:	83 c4 10             	add    $0x10,%esp
				new_mx = -1;
  2803d3:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  2803da:	ff ff ff 
  2803dd:	e9 5f ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else if(new_wx!=0x7fffffff)
  2803e2:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2803e9:	ff ff 7f 
  2803ec:	74 2f                	je     28041d <bootmain+0x41d>
			{
				io_sti();
  2803ee:	e8 a1 06 00 00       	call   280a94 <io_sti>
				sheet_slide(sht,new_wx,new_wy);
  2803f3:	50                   	push   %eax
  2803f4:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2803fa:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280400:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280406:	e8 c8 25 00 00       	call   2829d3 <sheet_slide>
  28040b:	83 c4 10             	add    $0x10,%esp
				new_wx = 0x7fffffff;
  28040e:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280415:	ff ff 7f 
  280418:	e9 24 ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else
			{
				task_sleep(task_a);
  28041d:	83 ec 0c             	sub    $0xc,%esp
  280420:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280426:	e8 b6 2d 00 00       	call   2831e1 <task_sleep>
  28042b:	e9 7e 02 00 00       	jmp    2806ae <bootmain+0x6ae>
				io_sti();
			}
		}
		else
		{
			int i = fifo32_get(&fifo);
  280430:	83 ec 0c             	sub    $0xc,%esp
  280433:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  280439:	e8 bd 17 00 00       	call   281bfb <fifo32_get>
  28043e:	89 c6                	mov    %eax,%esi
			io_sti();
  280440:	e8 4f 06 00 00       	call   280a94 <io_sti>
			if(key_win != 0 && key_win->flags == 0) //key_win already closed
  280445:	83 c4 10             	add    $0x10,%esp
  280448:	85 ff                	test   %edi,%edi
  28044a:	74 2c                	je     280478 <bootmain+0x478>
  28044c:	83 7f 1c 00          	cmpl   $0x0,0x1c(%edi)
  280450:	75 26                	jne    280478 <bootmain+0x478>
			{
				if(shtctl->top == 1)
  280452:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280458:	31 ff                	xor    %edi,%edi
  28045a:	8b 40 10             	mov    0x10(%eax),%eax
  28045d:	83 f8 01             	cmp    $0x1,%eax
  280460:	74 16                	je     280478 <bootmain+0x478>
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280462:	8b 8d d8 fb ff ff    	mov    -0x428(%ebp),%ecx
					keywin_on(key_win);
  280468:	83 ec 0c             	sub    $0xc,%esp
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  28046b:	8b 7c 81 10          	mov    0x10(%ecx,%eax,4),%edi
					keywin_on(key_win);
  28046f:	57                   	push   %edi
  280470:	e8 b3 48 00 00       	call   284d28 <keywin_on>
  280475:	83 c4 10             	add    $0x10,%esp
				}
			}
			if(256<=i && i<=511)
  280478:	8d 9e 00 ff ff ff    	lea    -0x100(%esi),%ebx
  28047e:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  280484:	0f 87 bf 02 00 00    	ja     280749 <bootmain+0x749>
			{
				xtoa(i-256,s);
  28048a:	50                   	push   %eax
  28048b:	50                   	push   %eax
  28048c:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280492:	50                   	push   %eax
  280493:	53                   	push   %ebx
  280494:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  28049a:	e8 67 14 00 00       	call   281906 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  28049f:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
  2804a5:	83 c4 0c             	add    $0xc,%esp
  2804a8:	6a 04                	push   $0x4
  2804aa:	50                   	push   %eax
  2804ab:	6a 00                	push   $0x0
  2804ad:	6a 07                	push   $0x7
  2804af:	6a 10                	push   $0x10
  2804b1:	6a 00                	push   $0x0
  2804b3:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2804b9:	e8 22 0c 00 00       	call   2810e0 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2804be:	83 c4 18             	add    $0x18,%esp
  2804c1:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804c7:	53                   	push   %ebx
  2804c8:	e8 37 19 00 00       	call   281e04 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2804cd:	8d 50 bf             	lea    -0x41(%eax),%edx
  2804d0:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2804d3:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2804d9:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2804e0:	80 fa 19             	cmp    $0x19,%dl
  2804e3:	77 26                	ja     28050b <bootmain+0x50b>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2804e5:	f6 85 cc fb ff ff 04 	testb  $0x4,-0x434(%ebp)
  2804ec:	75 0b                	jne    2804f9 <bootmain+0x4f9>
  2804ee:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  2804f5:	75 0b                	jne    280502 <bootmain+0x502>
  2804f7:	eb 12                	jmp    28050b <bootmain+0x50b>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2804f9:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280500:	75 09                	jne    28050b <bootmain+0x50b>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280502:	83 c0 20             	add    $0x20,%eax
  280505:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0 && key_win != 0)//visible char,return key and back key
  28050b:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280512:	85 ff                	test   %edi,%edi
  280514:	0f 95 c3             	setne  %bl
  280517:	84 c0                	test   %al,%al
  280519:	74 1b                	je     280536 <bootmain+0x536>
  28051b:	84 db                	test   %bl,%bl
  28051d:	74 17                	je     280536 <bootmain+0x536>
				{
					fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  28051f:	05 00 01 00 00       	add    $0x100,%eax
  280524:	51                   	push   %ecx
  280525:	51                   	push   %ecx
  280526:	50                   	push   %eax
  280527:	8b 47 24             	mov    0x24(%edi),%eax
  28052a:	83 c0 10             	add    $0x10,%eax
  28052d:	50                   	push   %eax
  28052e:	e8 56 16 00 00       	call   281b89 <fifo32_put>
  280533:	83 c4 10             	add    $0x10,%esp
				}
				if(i == 256 + 0x0f && key_win != 0) //tab key
  280536:	81 fe 0f 01 00 00    	cmp    $0x10f,%esi
  28053c:	75 39                	jne    280577 <bootmain+0x577>
  28053e:	84 db                	test   %bl,%bl
  280540:	74 35                	je     280577 <bootmain+0x577>
				{
					keywin_off(key_win);
  280542:	83 ec 0c             	sub    $0xc,%esp
  280545:	57                   	push   %edi
  280546:	e8 a9 47 00 00       	call   284cf4 <keywin_off>
					int j=key_win->height - 1;
  28054b:	8b 47 18             	mov    0x18(%edi),%eax
					if(j==0)
  28054e:	83 c4 10             	add    $0x10,%esp
  280551:	48                   	dec    %eax
  280552:	75 10                	jne    280564 <bootmain+0x564>
					{
						j = shtctl->top-1;
  280554:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28055a:	8b 40 10             	mov    0x10(%eax),%eax
  28055d:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  280563:	48                   	dec    %eax
					}
					key_win = shtctl->sheets[j];
  280564:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
					keywin_on(key_win);
  28056a:	83 ec 0c             	sub    $0xc,%esp
					int j=key_win->height - 1;
					if(j==0)
					{
						j = shtctl->top-1;
					}
					key_win = shtctl->sheets[j];
  28056d:	8b 7c 82 14          	mov    0x14(%edx,%eax,4),%edi
					keywin_on(key_win);
  280571:	57                   	push   %edi
  280572:	e9 93 01 00 00       	jmp    28070a <bootmain+0x70a>
				}
				else if(i == 256 + 0x2a)  //left shift on
  280577:	81 fe 2a 01 00 00    	cmp    $0x12a,%esi
  28057d:	75 0c                	jne    28058b <bootmain+0x58b>
				{
					key_shift |= 1;
  28057f:	83 8d c8 fb ff ff 01 	orl    $0x1,-0x438(%ebp)
  280586:	e9 b6 fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0x36) //right shift on
  28058b:	81 fe 36 01 00 00    	cmp    $0x136,%esi
  280591:	75 0c                	jne    28059f <bootmain+0x59f>
				{
					key_shift |= 2;
  280593:	83 8d c8 fb ff ff 02 	orl    $0x2,-0x438(%ebp)
  28059a:	e9 a2 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xaa)  //left shift off
  28059f:	81 fe aa 01 00 00    	cmp    $0x1aa,%esi
  2805a5:	75 0c                	jne    2805b3 <bootmain+0x5b3>
				{
					key_shift &= ~1;
  2805a7:	83 a5 c8 fb ff ff fe 	andl   $0xfffffffe,-0x438(%ebp)
  2805ae:	e9 8e fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0xb6) //right shift off
  2805b3:	81 fe b6 01 00 00    	cmp    $0x1b6,%esi
  2805b9:	75 0c                	jne    2805c7 <bootmain+0x5c7>
				{
					key_shift &= ~2;
  2805bb:	83 a5 c8 fb ff ff fd 	andl   $0xfffffffd,-0x438(%ebp)
  2805c2:	e9 7a fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0x3a) //CapsLock
  2805c7:	81 fe 3a 01 00 00    	cmp    $0x13a,%esi
  2805cd:	75 09                	jne    2805d8 <bootmain+0x5d8>
				{
					key_leds ^= 4;
  2805cf:	83 b5 cc fb ff ff 04 	xorl   $0x4,-0x434(%ebp)
  2805d6:	eb 20                	jmp    2805f8 <bootmain+0x5f8>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2805d8:	81 fe 45 01 00 00    	cmp    $0x145,%esi
  2805de:	75 09                	jne    2805e9 <bootmain+0x5e9>
				{
					key_leds ^= 2;
  2805e0:	83 b5 cc fb ff ff 02 	xorl   $0x2,-0x434(%ebp)
  2805e7:	eb 0f                	jmp    2805f8 <bootmain+0x5f8>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2805e9:	81 fe 46 01 00 00    	cmp    $0x146,%esi
  2805ef:	75 31                	jne    280622 <bootmain+0x622>
				{
					key_leds ^= 1;
  2805f1:	83 b5 cc fb ff ff 01 	xorl   $0x1,-0x434(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2805f8:	50                   	push   %eax
  2805f9:	50                   	push   %eax
  2805fa:	68 ed 00 00 00       	push   $0xed
  2805ff:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280605:	e8 7f 15 00 00       	call   281b89 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  28060a:	58                   	pop    %eax
  28060b:	5a                   	pop    %edx
  28060c:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280612:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280618:	e8 6c 15 00 00       	call   281b89 <fifo32_put>
  28061d:	e9 62 04 00 00       	jmp    280a84 <bootmain+0xa84>
				}
				else if(i == 256 + 0xfa)
  280622:	81 fe fa 01 00 00    	cmp    $0x1fa,%esi
  280628:	75 0f                	jne    280639 <bootmain+0x639>
				{
					keycmd_wait = -1;
  28062a:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  280631:	ff ff ff 
  280634:	e9 08 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xfe)
  280639:	81 fe fe 01 00 00    	cmp    $0x1fe,%esi
  28063f:	75 19                	jne    28065a <bootmain+0x65a>
				{
					wait_KBC_sendready();
  280641:	e8 33 17 00 00       	call   281d79 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  280646:	50                   	push   %eax
  280647:	50                   	push   %eax
  280648:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  28064e:	6a 60                	push   $0x60
  280650:	e8 71 04 00 00       	call   280ac6 <io_out8>
  280655:	e9 2a 04 00 00       	jmp    280a84 <bootmain+0xa84>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && key_win != 0)	//shift + F1
  28065a:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280661:	0f 95 c0             	setne  %al
  280664:	81 fe 3b 01 00 00    	cmp    $0x13b,%esi
  28066a:	0f 94 c2             	sete   %dl
  28066d:	84 c2                	test   %al,%dl
  28066f:	74 47                	je     2806b8 <bootmain+0x6b8>
  280671:	84 db                	test   %bl,%bl
  280673:	74 43                	je     2806b8 <bootmain+0x6b8>
				{
					struct TASK *task = key_win->task;
  280675:	8b 5f 24             	mov    0x24(%edi),%ebx
					if(task!=0 && task->tss.ss0 != 0)
  280678:	85 db                	test   %ebx,%ebx
  28067a:	0f 84 c1 fc ff ff    	je     280341 <bootmain+0x341>
  280680:	83 7b 34 00          	cmpl   $0x0,0x34(%ebx)
  280684:	0f 84 b7 fc ff ff    	je     280341 <bootmain+0x341>
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
  28068a:	50                   	push   %eax
  28068b:	50                   	push   %eax
  28068c:	68 80 4d 28 00       	push   $0x284d80
  280691:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  280697:	e8 f9 35 00 00       	call   283c95 <cons_putstr0>
						io_cli();
  28069c:	e8 f1 03 00 00       	call   280a92 <io_cli>
						task->tss.eax = (int)&(task->tss.esp0);
  2806a1:	8d 43 30             	lea    0x30(%ebx),%eax
						task->tss.eip = (int)asm_end_app - 0x280000;
  2806a4:	c7 43 4c 50 2d 00 00 	movl   $0x2d50,0x4c(%ebx)
					if(task!=0 && task->tss.ss0 != 0)
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
						io_cli();
						task->tss.eax = (int)&(task->tss.esp0);
  2806ab:	89 43 54             	mov    %eax,0x54(%ebx)
						task->tss.eip = (int)asm_end_app - 0x280000;
						io_sti();
  2806ae:	e8 e1 03 00 00       	call   280a94 <io_sti>
  2806b3:	e9 cc 03 00 00       	jmp    280a84 <bootmain+0xa84>
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
  2806b8:	81 fe 3c 01 00 00    	cmp    $0x13c,%esi
  2806be:	75 54                	jne    280714 <bootmain+0x714>
  2806c0:	84 c0                	test   %al,%al
  2806c2:	74 50                	je     280714 <bootmain+0x714>
				{
					if(key_win != 0) keywin_off(key_win);
  2806c4:	85 ff                	test   %edi,%edi
  2806c6:	74 0c                	je     2806d4 <bootmain+0x6d4>
  2806c8:	83 ec 0c             	sub    $0xc,%esp
  2806cb:	57                   	push   %edi
  2806cc:	e8 23 46 00 00       	call   284cf4 <keywin_off>
  2806d1:	83 c4 10             	add    $0x10,%esp
					key_win = open_console(shtctl,memtotal);
  2806d4:	51                   	push   %ecx
  2806d5:	51                   	push   %ecx
  2806d6:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  2806dc:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2806e2:	e8 70 39 00 00       	call   284057 <open_console>
					sheet_slide(key_win,32,4);
  2806e7:	83 c4 0c             	add    $0xc,%esp
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
				{
					if(key_win != 0) keywin_off(key_win);
					key_win = open_console(shtctl,memtotal);
  2806ea:	89 c7                	mov    %eax,%edi
					sheet_slide(key_win,32,4);
  2806ec:	6a 04                	push   $0x4
  2806ee:	6a 20                	push   $0x20
  2806f0:	50                   	push   %eax
  2806f1:	e8 dd 22 00 00       	call   2829d3 <sheet_slide>
					sheet_updown(key_win,shtctl->top);
  2806f6:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  2806fc:	5b                   	pop    %ebx
  2806fd:	5e                   	pop    %esi
  2806fe:	ff 70 10             	pushl  0x10(%eax)
  280701:	57                   	push   %edi
  280702:	e8 e3 21 00 00       	call   2828ea <sheet_updown>
					keywin_on(key_win);
  280707:	89 3c 24             	mov    %edi,(%esp)
  28070a:	e8 19 46 00 00       	call   284d28 <keywin_on>
  28070f:	e9 70 03 00 00       	jmp    280a84 <bootmain+0xa84>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  280714:	81 fe 57 01 00 00    	cmp    $0x157,%esi
  28071a:	0f 85 21 fc ff ff    	jne    280341 <bootmain+0x341>
  280720:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280726:	8b 40 10             	mov    0x10(%eax),%eax
  280729:	83 f8 02             	cmp    $0x2,%eax
  28072c:	0f 8e 0f fc ff ff    	jle    280341 <bootmain+0x341>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280732:	48                   	dec    %eax
  280733:	52                   	push   %edx
  280734:	52                   	push   %edx
  280735:	50                   	push   %eax
  280736:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28073c:	ff 70 18             	pushl  0x18(%eax)
  28073f:	e8 a6 21 00 00       	call   2828ea <sheet_updown>
  280744:	e9 3b 03 00 00       	jmp    280a84 <bootmain+0xa84>
				}

			}
			else if(512<=i && i<=767)
  280749:	8d 86 00 fe ff ff    	lea    -0x200(%esi),%eax
  28074f:	3d ff 00 00 00       	cmp    $0xff,%eax
  280754:	0f 87 d6 02 00 00    	ja     280a30 <bootmain+0xa30>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  28075a:	50                   	push   %eax
  28075b:	50                   	push   %eax
  28075c:	89 f0                	mov    %esi,%eax
  28075e:	0f b6 f0             	movzbl %al,%esi
  280761:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  280767:	56                   	push   %esi
  280768:	50                   	push   %eax
  280769:	e8 20 15 00 00       	call   281c8e <mouse_decode>
  28076e:	83 c4 10             	add    $0x10,%esp
  280771:	85 c0                	test   %eax,%eax
  280773:	0f 84 c8 fb ff ff    	je     280341 <bootmain+0x341>
  280779:	31 c9                	xor    %ecx,%ecx
  28077b:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  280781:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  280787:	0f 48 c1             	cmovs  %ecx,%eax
  28078a:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)
  280790:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280796:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  28079c:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  28079f:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2807a6:	3b 85 e0 fb ff ff    	cmp    -0x420(%ebp),%eax
  2807ac:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807af:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807b6:	0f 4f 95 e0 fb ff ff 	cmovg  -0x420(%ebp),%edx
  2807bd:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807c3:	8d 50 ff             	lea    -0x1(%eax),%edx
  2807c6:	39 c8                	cmp    %ecx,%eax
  2807c8:	0f 4f d1             	cmovg  %ecx,%edx
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807cb:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807d2:	89 95 dc fb ff ff    	mov    %edx,-0x424(%ebp)
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807d8:	0f 84 e0 01 00 00    	je     2809be <bootmain+0x9be>
					{
						if(mmx < 0) 
  2807de:	83 bd bc fb ff ff 00 	cmpl   $0x0,-0x444(%ebp)
  2807e5:	0f 89 7f 01 00 00    	jns    28096a <bootmain+0x96a>
						{
							for(int j=shtctl->top-1;j>0;j--)
  2807eb:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  2807f1:	8b 40 10             	mov    0x10(%eax),%eax
  2807f4:	48                   	dec    %eax
  2807f5:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2807fb:	85 c0                	test   %eax,%eax
  2807fd:	0f 8e 5f 01 00 00    	jle    280962 <bootmain+0x962>
							{
								sht = shtctl->sheets[j];
  280803:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280809:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  28080f:	8b 54 82 14          	mov    0x14(%edx,%eax,4),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280813:	2b 72 0c             	sub    0xc(%edx),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280816:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28081c:	0f 88 3a 01 00 00    	js     28095c <bootmain+0x95c>
  280822:	8b 9d dc fb ff ff    	mov    -0x424(%ebp),%ebx
  280828:	2b 5a 10             	sub    0x10(%edx),%ebx
  28082b:	8b 4a 04             	mov    0x4(%edx),%ecx
  28082e:	0f 88 28 01 00 00    	js     28095c <bootmain+0x95c>
  280834:	39 ce                	cmp    %ecx,%esi
  280836:	0f 8d 20 01 00 00    	jge    28095c <bootmain+0x95c>
  28083c:	3b 5a 08             	cmp    0x8(%edx),%ebx
  28083f:	0f 8d 17 01 00 00    	jge    28095c <bootmain+0x95c>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280845:	8b 12                	mov    (%edx),%edx
  280847:	0f af cb             	imul   %ebx,%ecx
  28084a:	01 f2                	add    %esi,%edx
  28084c:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%ebp)
  280852:	89 d1                	mov    %edx,%ecx
  280854:	8b 95 d0 fb ff ff    	mov    -0x430(%ebp),%edx
  28085a:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  28085e:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280864:	3b 4a 14             	cmp    0x14(%edx),%ecx
  280867:	0f 84 ef 00 00 00    	je     28095c <bootmain+0x95c>
									{
										sheet_updown(sht,shtctl->top-1);
  28086d:	50                   	push   %eax
  28086e:	50                   	push   %eax
  28086f:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280875:	52                   	push   %edx
  280876:	e8 6f 20 00 00       	call   2828ea <sheet_updown>
										if(sht!=key_win)
  28087b:	83 c4 10             	add    $0x10,%esp
  28087e:	3b bd e4 fb ff ff    	cmp    -0x41c(%ebp),%edi
  280884:	74 18                	je     28089e <bootmain+0x89e>
										{
											keywin_off(key_win);
  280886:	83 ec 0c             	sub    $0xc,%esp
  280889:	57                   	push   %edi
  28088a:	e8 65 44 00 00       	call   284cf4 <keywin_off>
											key_win = sht;
											keywin_on(key_win);
  28088f:	5f                   	pop    %edi
  280890:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280896:	e8 8d 44 00 00       	call   284d28 <keywin_on>
  28089b:	83 c4 10             	add    $0x10,%esp
  28089e:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  2808a4:	83 fe 02             	cmp    $0x2,%esi
  2808a7:	8b 40 04             	mov    0x4(%eax),%eax
  2808aa:	7e 3f                	jle    2808eb <bootmain+0x8eb>
  2808ac:	8d 50 fd             	lea    -0x3(%eax),%edx
  2808af:	39 d6                	cmp    %edx,%esi
  2808b1:	7d 38                	jge    2808eb <bootmain+0x8eb>
  2808b3:	8d 53 fd             	lea    -0x3(%ebx),%edx
  2808b6:	83 fa 11             	cmp    $0x11,%edx
  2808b9:	77 30                	ja     2808eb <bootmain+0x8eb>
										{
											mmx = mx;
											mmy = my;
											mmx2 = sht->vx0;
  2808bb:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
  2808c1:	8b 79 0c             	mov    0xc(%ecx),%edi
  2808c4:	89 bd 9c fb ff ff    	mov    %edi,-0x464(%ebp)
											new_wy = sht->vy0;
  2808ca:	8b 79 10             	mov    0x10(%ecx),%edi
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
											mmy = my;
  2808cd:	8b 8d dc fb ff ff    	mov    -0x424(%ebp),%ecx
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
  2808d3:	89 bd b4 fb ff ff    	mov    %edi,-0x44c(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808d9:	8b bd e0 fb ff ff    	mov    -0x420(%ebp),%edi
											mmy = my;
  2808df:	89 8d a8 fb ff ff    	mov    %ecx,-0x458(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808e5:	89 bd bc fb ff ff    	mov    %edi,-0x444(%ebp)
											mmy = my;
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19) //click the close button
  2808eb:	8d 50 eb             	lea    -0x15(%eax),%edx
  2808ee:	39 d6                	cmp    %edx,%esi
  2808f0:	7c 62                	jl     280954 <bootmain+0x954>
  2808f2:	83 e8 05             	sub    $0x5,%eax
  2808f5:	39 c6                	cmp    %eax,%esi
  2808f7:	7d 5b                	jge    280954 <bootmain+0x954>
  2808f9:	83 eb 05             	sub    $0x5,%ebx
  2808fc:	83 fb 0d             	cmp    $0xd,%ebx
  2808ff:	77 53                	ja     280954 <bootmain+0x954>
										{
											if(sht->flags & 0x10)
  280901:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280907:	f6 40 1c 10          	testb  $0x10,0x1c(%eax)
  28090b:	8b 58 24             	mov    0x24(%eax),%ebx
  28090e:	74 2a                	je     28093a <bootmain+0x93a>
											{
												if(sht->task != 0)
  280910:	85 db                	test   %ebx,%ebx
  280912:	74 40                	je     280954 <bootmain+0x954>
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  280914:	51                   	push   %ecx
  280915:	51                   	push   %ecx
  280916:	68 8e 4d 28 00       	push   $0x284d8e
  28091b:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  280921:	e8 6f 33 00 00       	call   283c95 <cons_putstr0>
													io_cli();
  280926:	e8 67 01 00 00       	call   280a92 <io_cli>
													task->tss.eax = (int)&(task->tss.esp0);
  28092b:	8d 43 30             	lea    0x30(%ebx),%eax
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
  28092e:	c7 43 4c 50 2d 00 00 	movl   $0x2d50,0x4c(%ebx)
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task->tss.eax = (int)&(task->tss.esp0);
  280935:	89 43 54             	mov    %eax,0x54(%ebx)
  280938:	eb 12                	jmp    28094c <bootmain+0x94c>
											}
											else
											{
												struct TASK *task = sht->task;
												io_cli();
												fifo32_put(&task->fifo,4);
  28093a:	83 c3 10             	add    $0x10,%ebx
												}
											}
											else
											{
												struct TASK *task = sht->task;
												io_cli();
  28093d:	e8 50 01 00 00       	call   280a92 <io_cli>
												fifo32_put(&task->fifo,4);
  280942:	52                   	push   %edx
  280943:	52                   	push   %edx
  280944:	6a 04                	push   $0x4
  280946:	53                   	push   %ebx
  280947:	e8 3d 12 00 00       	call   281b89 <fifo32_put>
												io_sti();
  28094c:	e8 43 01 00 00       	call   280a94 <io_sti>
  280951:	83 c4 10             	add    $0x10,%esp
  280954:	8b bd e4 fb ff ff    	mov    -0x41c(%ebp),%edi
  28095a:	eb 06                	jmp    280962 <bootmain+0x962>
					new_my = my;
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  28095c:	48                   	dec    %eax
  28095d:	e9 99 fe ff ff       	jmp    2807fb <bootmain+0x7fb>
  280962:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280968:	eb 3d                	jmp    2809a7 <bootmain+0x9a7>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
  28096a:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280970:	2b 85 bc fb ff ff    	sub    -0x444(%ebp),%eax
  280976:	8b 9d 9c fb ff ff    	mov    -0x464(%ebp),%ebx
  28097c:	8d 44 03 02          	lea    0x2(%ebx,%eax,1),%eax
  280980:	83 e0 fc             	and    $0xfffffffc,%eax
  280983:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
							new_wy = new_wy+y;
  280989:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28098f:	2b 85 a8 fb ff ff    	sub    -0x458(%ebp),%eax
  280995:	01 85 b4 fb ff ff    	add    %eax,-0x44c(%ebp)
							//sheet_slide(sht,(mmx2+x+2)&~3,sht->vy0+y);
							mmy = my;
  28099b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809a1:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
							new_wy = new_wy+y;
  2809a7:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809ad:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809b3:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809b9:	e9 83 f9 ff ff       	jmp    280341 <bootmain+0x341>
						}
					}
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
  2809be:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2809c5:	ff ff 7f 
  2809c8:	75 27                	jne    2809f1 <bootmain+0x9f1>
  2809ca:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809d0:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809d6:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809dc:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  2809e2:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  2809e9:	ff ff ff 
  2809ec:	e9 50 f9 ff ff       	jmp    280341 <bootmain+0x341>
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  2809f1:	50                   	push   %eax
  2809f2:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2809f8:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2809fe:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280a04:	e8 ca 1f 00 00       	call   2829d3 <sheet_slide>
  280a09:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280a0f:	83 c4 10             	add    $0x10,%esp
							new_wx = 0x7fffffff;
  280a12:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280a19:	ff ff 7f 
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a1c:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a22:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a28:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  280a2e:	eb b2                	jmp    2809e2 <bootmain+0x9e2>
							new_wx = 0x7fffffff;
						}
					}
				}
			}
			else if(768<=i && i<=1023)
  280a30:	8d 86 00 fd ff ff    	lea    -0x300(%esi),%eax
  280a36:	3d ff 00 00 00       	cmp    $0xff,%eax
  280a3b:	77 1b                	ja     280a58 <bootmain+0xa58>
			{
				close_console(shtctl->sheets0 + (i-768));
  280a3d:	6b f6 28             	imul   $0x28,%esi,%esi
  280a40:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280a46:	83 ec 0c             	sub    $0xc,%esp
  280a49:	8d 84 30 14 8c ff ff 	lea    -0x73ec(%eax,%esi,1),%eax
  280a50:	50                   	push   %eax
  280a51:	e8 da 36 00 00       	call   284130 <close_console>
  280a56:	eb 2c                	jmp    280a84 <bootmain+0xa84>
			}
			else if(1024<=i && i<=2023)
  280a58:	8d 86 00 fc ff ff    	lea    -0x400(%esi),%eax
  280a5e:	3d e7 03 00 00       	cmp    $0x3e7,%eax
  280a63:	0f 87 d8 f8 ff ff    	ja     280341 <bootmain+0x341>
			{
				extern struct TASKCTL *taskctl;
				close_constask(taskctl->tasks0 + (i-1024));
  280a69:	69 f6 a0 00 00 00    	imul   $0xa0,%esi,%esi
  280a6f:	a1 fc a1 28 00       	mov    0x28a1fc,%eax
  280a74:	83 ec 0c             	sub    $0xc,%esp
  280a77:	8d 84 30 f8 8f fd ff 	lea    -0x27008(%eax,%esi,1),%eax
  280a7e:	50                   	push   %eax
  280a7f:	e8 60 36 00 00       	call   2840e4 <close_constask>
  280a84:	83 c4 10             	add    $0x10,%esp
  280a87:	e9 b5 f8 ff ff       	jmp    280341 <bootmain+0x341>
  280a8c:	66 90                	xchg   %ax,%ax
  280a8e:	66 90                	xchg   %ax,%ax

00280a90 <io_hlt>:
  280a90:	f4                   	hlt    
  280a91:	c3                   	ret    

00280a92 <io_cli>:
  280a92:	fa                   	cli    
  280a93:	c3                   	ret    

00280a94 <io_sti>:
  280a94:	fb                   	sti    
  280a95:	c3                   	ret    

00280a96 <io_stihlt>:
  280a96:	fb                   	sti    
  280a97:	f4                   	hlt    
  280a98:	c3                   	ret    

00280a99 <write_mem8>:
  280a99:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280a9d:	8a 44 24 08          	mov    0x8(%esp),%al
  280aa1:	88 01                	mov    %al,(%ecx)
  280aa3:	c3                   	ret    

00280aa4 <io_in8>:
  280aa4:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aa8:	b8 00 00 00 00       	mov    $0x0,%eax
  280aad:	ec                   	in     (%dx),%al
  280aae:	c3                   	ret    

00280aaf <io_in16>:
  280aaf:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ab3:	b8 00 00 00 00       	mov    $0x0,%eax
  280ab8:	66 ed                	in     (%dx),%ax
  280aba:	c3                   	ret    

00280abb <io_in32>:
  280abb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280abf:	b8 00 00 00 00       	mov    $0x0,%eax
  280ac4:	ed                   	in     (%dx),%eax
  280ac5:	c3                   	ret    

00280ac6 <io_out8>:
  280ac6:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aca:	8b 44 24 08          	mov    0x8(%esp),%eax
  280ace:	ee                   	out    %al,(%dx)
  280acf:	c3                   	ret    

00280ad0 <io_out16>:
  280ad0:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ad4:	8b 44 24 08          	mov    0x8(%esp),%eax
  280ad8:	66 ef                	out    %ax,(%dx)
  280ada:	c3                   	ret    

00280adb <io_out32>:
  280adb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280adf:	8b 44 24 08          	mov    0x8(%esp),%eax
  280ae3:	ef                   	out    %eax,(%dx)
  280ae4:	c3                   	ret    

00280ae5 <io_load_eflags>:
  280ae5:	9c                   	pushf  
  280ae6:	58                   	pop    %eax
  280ae7:	c3                   	ret    

00280ae8 <io_store_eflags>:
  280ae8:	8b 44 24 04          	mov    0x4(%esp),%eax
  280aec:	50                   	push   %eax
  280aed:	9d                   	popf   
  280aee:	c3                   	ret    

00280aef <load_gdtr>:
  280aef:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280af4:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280af9:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280afe:	c3                   	ret    

00280aff <load_idtr>:
  280aff:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280b04:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280b09:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280b0e:	c3                   	ret    

00280b0f <load_cr0>:
  280b0f:	0f 20 c0             	mov    %cr0,%eax
  280b12:	c3                   	ret    

00280b13 <store_cr0>:
  280b13:	8b 44 24 04          	mov    0x4(%esp),%eax
  280b17:	0f 22 c0             	mov    %eax,%cr0
  280b1a:	c3                   	ret    

00280b1b <_memtest_sub>:
  280b1b:	57                   	push   %edi
  280b1c:	56                   	push   %esi
  280b1d:	53                   	push   %ebx
  280b1e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280b23:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280b28:	8b 44 24 10          	mov    0x10(%esp),%eax

00280b2c <mts_loop>:
  280b2c:	89 c3                	mov    %eax,%ebx
  280b2e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280b34:	8b 13                	mov    (%ebx),%edx
  280b36:	89 33                	mov    %esi,(%ebx)
  280b38:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b3b:	3b 3b                	cmp    (%ebx),%edi
  280b3d:	75 18                	jne    280b57 <mts_qit>
  280b3f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b42:	3b 33                	cmp    (%ebx),%esi
  280b44:	75 11                	jne    280b57 <mts_qit>
  280b46:	89 13                	mov    %edx,(%ebx)
  280b48:	05 00 10 00 00       	add    $0x1000,%eax
  280b4d:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280b51:	76 d9                	jbe    280b2c <mts_loop>

00280b53 <mts_ret>:
  280b53:	5b                   	pop    %ebx
  280b54:	5e                   	pop    %esi
  280b55:	5f                   	pop    %edi
  280b56:	c3                   	ret    

00280b57 <mts_qit>:
  280b57:	89 13                	mov    %edx,(%ebx)
  280b59:	5b                   	pop    %ebx
  280b5a:	5e                   	pop    %esi
  280b5b:	5f                   	pop    %edi
  280b5c:	c3                   	ret    

00280b5d <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280b5d:	55                   	push   %ebp
  280b5e:	89 e5                	mov    %esp,%ebp
  280b60:	57                   	push   %edi
  280b61:	56                   	push   %esi
  280b62:	53                   	push   %ebx
  280b63:	83 ec 1c             	sub    $0x1c,%esp
  280b66:	8b 75 08             	mov    0x8(%ebp),%esi
  280b69:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280b6c:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280b6f:	e8 71 ff ff ff       	call   280ae5 <io_load_eflags>
  280b74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280b77:	e8 16 ff ff ff       	call   280a92 <io_cli>
	io_out8(0x03c8,start);
  280b7c:	83 ec 08             	sub    $0x8,%esp
  280b7f:	56                   	push   %esi
  280b80:	68 c8 03 00 00       	push   $0x3c8
  280b85:	e8 3c ff ff ff       	call   280ac6 <io_out8>
	for(i=start;i<=end;i++)
  280b8a:	83 c4 10             	add    $0x10,%esp
  280b8d:	39 fe                	cmp    %edi,%esi
  280b8f:	7f 54                	jg     280be5 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280b91:	83 ec 08             	sub    $0x8,%esp
  280b94:	0f b6 03             	movzbl (%ebx),%eax
  280b97:	c0 e8 02             	shr    $0x2,%al
  280b9a:	0f b6 c0             	movzbl %al,%eax
  280b9d:	50                   	push   %eax
  280b9e:	68 c9 03 00 00       	push   $0x3c9
  280ba3:	e8 1e ff ff ff       	call   280ac6 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280ba8:	83 c4 08             	add    $0x8,%esp
  280bab:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280baf:	c0 e8 02             	shr    $0x2,%al
  280bb2:	0f b6 c0             	movzbl %al,%eax
  280bb5:	50                   	push   %eax
  280bb6:	68 c9 03 00 00       	push   $0x3c9
  280bbb:	e8 06 ff ff ff       	call   280ac6 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280bc0:	83 c4 08             	add    $0x8,%esp
  280bc3:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280bc7:	c0 e8 02             	shr    $0x2,%al
  280bca:	0f b6 c0             	movzbl %al,%eax
  280bcd:	50                   	push   %eax
  280bce:	68 c9 03 00 00       	push   $0x3c9
  280bd3:	e8 ee fe ff ff       	call   280ac6 <io_out8>
		rgb+=3;
  280bd8:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280bdb:	83 c6 01             	add    $0x1,%esi
  280bde:	83 c4 10             	add    $0x10,%esp
  280be1:	39 f7                	cmp    %esi,%edi
  280be3:	7d ac                	jge    280b91 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280be5:	83 ec 0c             	sub    $0xc,%esp
  280be8:	ff 75 e4             	pushl  -0x1c(%ebp)
  280beb:	e8 f8 fe ff ff       	call   280ae8 <io_store_eflags>
	return;
  280bf0:	83 c4 10             	add    $0x10,%esp
}
  280bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280bf6:	5b                   	pop    %ebx
  280bf7:	5e                   	pop    %esi
  280bf8:	5f                   	pop    %edi
  280bf9:	5d                   	pop    %ebp
  280bfa:	c3                   	ret    

00280bfb <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280bfb:	55                   	push   %ebp
  280bfc:	89 e5                	mov    %esp,%ebp
  280bfe:	57                   	push   %edi
  280bff:	56                   	push   %esi
  280c00:	53                   	push   %ebx
  280c01:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280c07:	68 a0 60 28 00       	push   $0x2860a0
  280c0c:	6a 0f                	push   $0xf
  280c0e:	6a 00                	push   $0x0
  280c10:	e8 48 ff ff ff       	call   280b5d <set_palette>
  280c15:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280c1b:	83 c4 10             	add    $0x10,%esp
  280c1e:	bb 00 00 00 00       	mov    $0x0,%ebx
  280c23:	eb 32                	jmp    280c57 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280c25:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280c27:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280c2a:	88 58 02             	mov    %bl,0x2(%eax)
  280c2d:	83 c2 33             	add    $0x33,%edx
  280c30:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280c33:	80 fa 32             	cmp    $0x32,%dl
  280c36:	75 ed                	jne    280c25 <init_palette+0x2a>
  280c38:	83 c6 12             	add    $0x12,%esi
  280c3b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280c3e:	80 f9 32             	cmp    $0x32,%cl
  280c41:	74 09                	je     280c4c <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280c43:	89 f0                	mov    %esi,%eax
  280c45:	ba 00 00 00 00       	mov    $0x0,%edx
  280c4a:	eb d9                	jmp    280c25 <init_palette+0x2a>
  280c4c:	83 c3 33             	add    $0x33,%ebx
  280c4f:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280c52:	80 fb 32             	cmp    $0x32,%bl
  280c55:	74 09                	je     280c60 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280c57:	89 fe                	mov    %edi,%esi
  280c59:	b9 00 00 00 00       	mov    $0x0,%ecx
  280c5e:	eb e3                	jmp    280c43 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280c60:	83 ec 04             	sub    $0x4,%esp
  280c63:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280c69:	50                   	push   %eax
  280c6a:	68 e7 00 00 00       	push   $0xe7
  280c6f:	6a 10                	push   $0x10
  280c71:	e8 e7 fe ff ff       	call   280b5d <set_palette>
	return;	
  280c76:	83 c4 10             	add    $0x10,%esp
}
  280c79:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c7c:	5b                   	pop    %ebx
  280c7d:	5e                   	pop    %esi
  280c7e:	5f                   	pop    %edi
  280c7f:	5d                   	pop    %ebp
  280c80:	c3                   	ret    

00280c81 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280c81:	55                   	push   %ebp
  280c82:	89 e5                	mov    %esp,%ebp
  280c84:	57                   	push   %edi
  280c85:	56                   	push   %esi
  280c86:	53                   	push   %ebx
  280c87:	83 ec 04             	sub    $0x4,%esp
  280c8a:	8b 55 0c             	mov    0xc(%ebp),%edx
  280c8d:	8b 7d 14             	mov    0x14(%ebp),%edi
  280c90:	8b 75 18             	mov    0x18(%ebp),%esi
  280c93:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280c96:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280c9a:	3b 75 20             	cmp    0x20(%ebp),%esi
  280c9d:	7f 28                	jg     280cc7 <boxfill8+0x46>
  280c9f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280ca2:	0f af d6             	imul   %esi,%edx
  280ca5:	03 55 08             	add    0x8(%ebp),%edx
  280ca8:	eb 15                	jmp    280cbf <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280caa:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280cad:	83 c0 01             	add    $0x1,%eax
  280cb0:	39 c1                	cmp    %eax,%ecx
  280cb2:	7d f6                	jge    280caa <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280cb4:	83 c6 01             	add    $0x1,%esi
  280cb7:	03 55 f0             	add    -0x10(%ebp),%edx
  280cba:	39 75 20             	cmp    %esi,0x20(%ebp)
  280cbd:	7c 08                	jl     280cc7 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280cbf:	89 f8                	mov    %edi,%eax
  280cc1:	39 cf                	cmp    %ecx,%edi
  280cc3:	7e e5                	jle    280caa <boxfill8+0x29>
  280cc5:	eb ed                	jmp    280cb4 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280cc7:	83 c4 04             	add    $0x4,%esp
  280cca:	5b                   	pop    %ebx
  280ccb:	5e                   	pop    %esi
  280ccc:	5f                   	pop    %edi
  280ccd:	5d                   	pop    %ebp
  280cce:	c3                   	ret    

00280ccf <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280ccf:	55                   	push   %ebp
  280cd0:	89 e5                	mov    %esp,%ebp
  280cd2:	53                   	push   %ebx
  280cd3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280cd6:	8b 55 10             	mov    0x10(%ebp),%edx
  280cd9:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280cdd:	85 d2                	test   %edx,%edx
  280cdf:	7e 0d                	jle    280cee <boxfill8_test+0x1f>
  280ce1:	89 d8                	mov    %ebx,%eax
  280ce3:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280ce5:	88 08                	mov    %cl,(%eax)
  280ce7:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280cea:	39 d0                	cmp    %edx,%eax
  280cec:	75 f7                	jne    280ce5 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280cee:	5b                   	pop    %ebx
  280cef:	5d                   	pop    %ebp
  280cf0:	c3                   	ret    

00280cf1 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280cf1:	55                   	push   %ebp
  280cf2:	89 e5                	mov    %esp,%ebp
  280cf4:	57                   	push   %edi
  280cf5:	56                   	push   %esi
  280cf6:	53                   	push   %ebx
  280cf7:	83 ec 14             	sub    $0x14,%esp
  280cfa:	8b 7d 08             	mov    0x8(%ebp),%edi
  280cfd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280d00:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280d03:	68 be 00 00 00       	push   $0xbe
  280d08:	68 36 01 00 00       	push   $0x136
  280d0d:	6a 00                	push   $0x0
  280d0f:	6a 00                	push   $0x0
  280d11:	6a 0e                	push   $0xe
  280d13:	68 36 01 00 00       	push   $0x136
  280d18:	57                   	push   %edi
  280d19:	e8 63 ff ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280d1e:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d21:	89 c2                	mov    %eax,%edx
  280d23:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d26:	50                   	push   %eax
  280d27:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d2a:	52                   	push   %edx
  280d2b:	6a 00                	push   $0x0
  280d2d:	6a 00                	push   $0x0
  280d2f:	6a 0e                	push   $0xe
  280d31:	53                   	push   %ebx
  280d32:	57                   	push   %edi
  280d33:	e8 49 ff ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d38:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d3b:	83 c4 38             	add    $0x38,%esp
  280d3e:	50                   	push   %eax
  280d3f:	ff 75 f0             	pushl  -0x10(%ebp)
  280d42:	50                   	push   %eax
  280d43:	6a 00                	push   $0x0
  280d45:	6a 08                	push   $0x8
  280d47:	53                   	push   %ebx
  280d48:	57                   	push   %edi
  280d49:	e8 33 ff ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d4e:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d51:	50                   	push   %eax
  280d52:	ff 75 f0             	pushl  -0x10(%ebp)
  280d55:	50                   	push   %eax
  280d56:	6a 00                	push   $0x0
  280d58:	6a 07                	push   $0x7
  280d5a:	53                   	push   %ebx
  280d5b:	57                   	push   %edi
  280d5c:	e8 20 ff ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280d61:	83 c4 38             	add    $0x38,%esp
  280d64:	8d 46 ff             	lea    -0x1(%esi),%eax
  280d67:	50                   	push   %eax
  280d68:	ff 75 f0             	pushl  -0x10(%ebp)
  280d6b:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280d6e:	50                   	push   %eax
  280d6f:	6a 00                	push   $0x0
  280d71:	6a 08                	push   $0x8
  280d73:	53                   	push   %ebx
  280d74:	57                   	push   %edi
  280d75:	e8 07 ff ff ff       	call   280c81 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280d7a:	8d 46 e8             	lea    -0x18(%esi),%eax
  280d7d:	50                   	push   %eax
  280d7e:	6a 3b                	push   $0x3b
  280d80:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280d83:	50                   	push   %eax
  280d84:	6a 03                	push   $0x3
  280d86:	6a 07                	push   $0x7
  280d88:	53                   	push   %ebx
  280d89:	57                   	push   %edi
  280d8a:	e8 f2 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280d8f:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280d92:	83 c4 38             	add    $0x38,%esp
  280d95:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280d98:	51                   	push   %ecx
  280d99:	6a 02                	push   $0x2
  280d9b:	ff 75 f0             	pushl  -0x10(%ebp)
  280d9e:	6a 02                	push   $0x2
  280da0:	6a 07                	push   $0x7
  280da2:	53                   	push   %ebx
  280da3:	57                   	push   %edi
  280da4:	e8 d8 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280da9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280dac:	51                   	push   %ecx
  280dad:	6a 3b                	push   $0x3b
  280daf:	51                   	push   %ecx
  280db0:	6a 03                	push   $0x3
  280db2:	6a 0f                	push   $0xf
  280db4:	53                   	push   %ebx
  280db5:	57                   	push   %edi
  280db6:	e8 c6 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280dbb:	8d 56 e9             	lea    -0x17(%esi),%edx
  280dbe:	83 c4 38             	add    $0x38,%esp
  280dc1:	8d 46 fb             	lea    -0x5(%esi),%eax
  280dc4:	50                   	push   %eax
  280dc5:	6a 3b                	push   $0x3b
  280dc7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280dca:	52                   	push   %edx
  280dcb:	6a 3b                	push   $0x3b
  280dcd:	6a 0f                	push   $0xf
  280dcf:	53                   	push   %ebx
  280dd0:	57                   	push   %edi
  280dd1:	e8 ab fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280dd6:	83 ee 03             	sub    $0x3,%esi
  280dd9:	56                   	push   %esi
  280dda:	6a 3b                	push   $0x3b
  280ddc:	56                   	push   %esi
  280ddd:	6a 02                	push   $0x2
  280ddf:	6a 00                	push   $0x0
  280de1:	53                   	push   %ebx
  280de2:	57                   	push   %edi
  280de3:	e8 99 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280de8:	83 c4 38             	add    $0x38,%esp
  280deb:	56                   	push   %esi
  280dec:	6a 3c                	push   $0x3c
  280dee:	ff 75 f0             	pushl  -0x10(%ebp)
  280df1:	6a 3c                	push   $0x3c
  280df3:	6a 00                	push   $0x0
  280df5:	53                   	push   %ebx
  280df6:	57                   	push   %edi
  280df7:	e8 85 fe ff ff       	call   280c81 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280dfc:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280dff:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280e05:	50                   	push   %eax
  280e06:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280e09:	51                   	push   %ecx
  280e0a:	50                   	push   %eax
  280e0b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280e0e:	52                   	push   %edx
  280e0f:	6a 0f                	push   $0xf
  280e11:	53                   	push   %ebx
  280e12:	57                   	push   %edi
  280e13:	e8 69 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280e18:	83 c4 38             	add    $0x38,%esp
  280e1b:	ff 75 ec             	pushl  -0x14(%ebp)
  280e1e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e21:	52                   	push   %edx
  280e22:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e25:	52                   	push   %edx
  280e26:	6a 0f                	push   $0xf
  280e28:	53                   	push   %ebx
  280e29:	57                   	push   %edi
  280e2a:	e8 52 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e2f:	56                   	push   %esi
  280e30:	ff 75 e0             	pushl  -0x20(%ebp)
  280e33:	56                   	push   %esi
  280e34:	ff 75 e8             	pushl  -0x18(%ebp)
  280e37:	6a 07                	push   $0x7
  280e39:	53                   	push   %ebx
  280e3a:	57                   	push   %edi
  280e3b:	e8 41 fe ff ff       	call   280c81 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e40:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e43:	83 c4 38             	add    $0x38,%esp
  280e46:	56                   	push   %esi
  280e47:	50                   	push   %eax
  280e48:	ff 75 f0             	pushl  -0x10(%ebp)
  280e4b:	50                   	push   %eax
  280e4c:	6a 07                	push   $0x7
  280e4e:	53                   	push   %ebx
  280e4f:	57                   	push   %edi
  280e50:	e8 2c fe ff ff       	call   280c81 <boxfill8>
}
  280e55:	83 c4 1c             	add    $0x1c,%esp
  280e58:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e5b:	5b                   	pop    %ebx
  280e5c:	5e                   	pop    %esi
  280e5d:	5f                   	pop    %edi
  280e5e:	5d                   	pop    %ebp
  280e5f:	c3                   	ret    

00280e60 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280e60:	55                   	push   %ebp
  280e61:	89 e5                	mov    %esp,%ebp
  280e63:	57                   	push   %edi
  280e64:	56                   	push   %esi
  280e65:	53                   	push   %ebx
  280e66:	83 ec 08             	sub    $0x8,%esp
  280e69:	8b 75 08             	mov    0x8(%ebp),%esi
  280e6c:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280e70:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280e73:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280e79:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280e7c:	eb 38                	jmp    280eb6 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e7e:	0f b6 94 03 80 4e 28 	movzbl 0x284e80(%ebx,%eax,1),%edx
  280e85:	00 
  280e86:	80 fa 2a             	cmp    $0x2a,%dl
  280e89:	75 06                	jne    280e91 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280e8b:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280e8f:	eb 15                	jmp    280ea6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280e91:	80 fa 4f             	cmp    $0x4f,%dl
  280e94:	75 06                	jne    280e9c <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280e96:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280e9a:	eb 0a                	jmp    280ea6 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280e9c:	80 fa 2e             	cmp    $0x2e,%dl
  280e9f:	75 05                	jne    280ea6 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280ea1:	89 fa                	mov    %edi,%edx
  280ea3:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280ea6:	83 c0 01             	add    $0x1,%eax
  280ea9:	83 f8 10             	cmp    $0x10,%eax
  280eac:	75 d0                	jne    280e7e <init_mouse_cursor8+0x1e>
  280eae:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280eb1:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280eb4:	74 0c                	je     280ec2 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280eb6:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280ebb:	89 f3                	mov    %esi,%ebx
  280ebd:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280ec0:	eb bc                	jmp    280e7e <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280ec2:	83 c4 08             	add    $0x8,%esp
  280ec5:	5b                   	pop    %ebx
  280ec6:	5e                   	pop    %esi
  280ec7:	5f                   	pop    %edi
  280ec8:	5d                   	pop    %ebp
  280ec9:	c3                   	ret    

00280eca <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280eca:	55                   	push   %ebp
  280ecb:	89 e5                	mov    %esp,%ebp
  280ecd:	57                   	push   %edi
  280ece:	56                   	push   %esi
  280ecf:	53                   	push   %ebx
  280ed0:	83 ec 1c             	sub    $0x1c,%esp
  280ed3:	8b 75 08             	mov    0x8(%ebp),%esi
  280ed6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280ed9:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280edc:	80 fa 01             	cmp    $0x1,%dl
  280edf:	19 c0                	sbb    %eax,%eax
  280ee1:	83 e0 03             	and    $0x3,%eax
  280ee4:	83 c0 0c             	add    $0xc,%eax
  280ee7:	80 fa 01             	cmp    $0x1,%dl
  280eea:	19 ff                	sbb    %edi,%edi
  280eec:	f7 d7                	not    %edi
  280eee:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280ef1:	6a 14                	push   $0x14
  280ef3:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280ef6:	52                   	push   %edx
  280ef7:	6a 03                	push   $0x3
  280ef9:	6a 03                	push   $0x3
  280efb:	0f b6 c0             	movzbl %al,%eax
  280efe:	50                   	push   %eax
  280eff:	53                   	push   %ebx
  280f00:	56                   	push   %esi
  280f01:	e8 7b fd ff ff       	call   280c81 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280f06:	83 c4 04             	add    $0x4,%esp
  280f09:	ff 75 10             	pushl  0x10(%ebp)
  280f0c:	89 f8                	mov    %edi,%eax
  280f0e:	0f be f8             	movsbl %al,%edi
  280f11:	57                   	push   %edi
  280f12:	6a 04                	push   $0x4
  280f14:	6a 18                	push   $0x18
  280f16:	53                   	push   %ebx
  280f17:	56                   	push   %esi
  280f18:	e8 c7 04 00 00       	call   2813e4 <putfonts8_asc>
  280f1d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f20:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f23:	01 fb                	add    %edi,%ebx
  280f25:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f28:	83 c4 30             	add    $0x30,%esp
  280f2b:	be 00 00 00 00       	mov    $0x0,%esi
  280f30:	eb 41                	jmp    280f73 <make_wtitle8+0xa9>
  280f32:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f34:	0f b6 9c 06 a0 4d 28 	movzbl 0x284da0(%esi,%eax,1),%ebx
  280f3b:	00 
			if(c == '@') c=COL8_000000;
  280f3c:	ba 00 00 00 00       	mov    $0x0,%edx
  280f41:	80 fb 40             	cmp    $0x40,%bl
  280f44:	74 13                	je     280f59 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f46:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f4b:	80 fb 24             	cmp    $0x24,%bl
  280f4e:	74 09                	je     280f59 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f50:	80 fb 51             	cmp    $0x51,%bl
  280f53:	0f 94 c2             	sete   %dl
  280f56:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f59:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280f5d:	83 c0 01             	add    $0x1,%eax
  280f60:	83 f8 10             	cmp    $0x10,%eax
  280f63:	75 cd                	jne    280f32 <make_wtitle8+0x68>
  280f65:	03 7d e4             	add    -0x1c(%ebp),%edi
  280f68:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280f6b:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280f71:	74 07                	je     280f7a <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280f73:	b8 00 00 00 00       	mov    $0x0,%eax
  280f78:	eb b8                	jmp    280f32 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280f7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280f7d:	5b                   	pop    %ebx
  280f7e:	5e                   	pop    %esi
  280f7f:	5f                   	pop    %edi
  280f80:	5d                   	pop    %ebp
  280f81:	c3                   	ret    

00280f82 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280f82:	55                   	push   %ebp
  280f83:	89 e5                	mov    %esp,%ebp
  280f85:	57                   	push   %edi
  280f86:	56                   	push   %esi
  280f87:	53                   	push   %ebx
  280f88:	83 ec 1c             	sub    $0x1c,%esp
  280f8b:	8b 75 08             	mov    0x8(%ebp),%esi
  280f8e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f91:	8b 45 18             	mov    0x18(%ebp),%eax
  280f94:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280f97:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280f9a:	6a 00                	push   $0x0
  280f9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280f9f:	50                   	push   %eax
  280fa0:	6a 00                	push   $0x0
  280fa2:	6a 00                	push   $0x0
  280fa4:	6a 08                	push   $0x8
  280fa6:	53                   	push   %ebx
  280fa7:	56                   	push   %esi
  280fa8:	e8 d4 fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280fad:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280fb0:	6a 01                	push   $0x1
  280fb2:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280fb5:	52                   	push   %edx
  280fb6:	6a 01                	push   $0x1
  280fb8:	6a 01                	push   $0x1
  280fba:	6a 07                	push   $0x7
  280fbc:	53                   	push   %ebx
  280fbd:	56                   	push   %esi
  280fbe:	e8 be fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  280fc3:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fc6:	8d 4f ff             	lea    -0x1(%edi),%ecx
  280fc9:	83 c4 38             	add    $0x38,%esp
  280fcc:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  280fcf:	51                   	push   %ecx
  280fd0:	6a 00                	push   $0x0
  280fd2:	6a 00                	push   $0x0
  280fd4:	6a 00                	push   $0x0
  280fd6:	6a 08                	push   $0x8
  280fd8:	53                   	push   %ebx
  280fd9:	56                   	push   %esi
  280fda:	e8 a2 fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  280fdf:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fe2:	83 ef 02             	sub    $0x2,%edi
  280fe5:	57                   	push   %edi
  280fe6:	6a 01                	push   $0x1
  280fe8:	6a 01                	push   $0x1
  280fea:	6a 01                	push   $0x1
  280fec:	6a 07                	push   $0x7
  280fee:	53                   	push   %ebx
  280fef:	56                   	push   %esi
  280ff0:	e8 8c fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  280ff5:	83 c4 38             	add    $0x38,%esp
  280ff8:	57                   	push   %edi
  280ff9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  280ffc:	52                   	push   %edx
  280ffd:	6a 01                	push   $0x1
  280fff:	52                   	push   %edx
  281000:	6a 0f                	push   $0xf
  281002:	53                   	push   %ebx
  281003:	56                   	push   %esi
  281004:	e8 78 fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  281009:	ff 75 dc             	pushl  -0x24(%ebp)
  28100c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28100f:	50                   	push   %eax
  281010:	6a 00                	push   $0x0
  281012:	50                   	push   %eax
  281013:	6a 00                	push   $0x0
  281015:	53                   	push   %ebx
  281016:	56                   	push   %esi
  281017:	e8 65 fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  28101c:	83 c4 38             	add    $0x38,%esp
  28101f:	8b 55 10             	mov    0x10(%ebp),%edx
  281022:	8d 42 fd             	lea    -0x3(%edx),%eax
  281025:	50                   	push   %eax
  281026:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281029:	50                   	push   %eax
  28102a:	6a 02                	push   $0x2
  28102c:	6a 02                	push   $0x2
  28102e:	6a 08                	push   $0x8
  281030:	53                   	push   %ebx
  281031:	56                   	push   %esi
  281032:	e8 4a fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  281037:	57                   	push   %edi
  281038:	ff 75 e0             	pushl  -0x20(%ebp)
  28103b:	57                   	push   %edi
  28103c:	6a 01                	push   $0x1
  28103e:	6a 0f                	push   $0xf
  281040:	53                   	push   %ebx
  281041:	56                   	push   %esi
  281042:	e8 3a fc ff ff       	call   280c81 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  281047:	83 c4 38             	add    $0x38,%esp
  28104a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  28104d:	51                   	push   %ecx
  28104e:	ff 75 e4             	pushl  -0x1c(%ebp)
  281051:	51                   	push   %ecx
  281052:	6a 00                	push   $0x0
  281054:	6a 00                	push   $0x0
  281056:	53                   	push   %ebx
  281057:	56                   	push   %esi
  281058:	e8 24 fc ff ff       	call   280c81 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  28105d:	83 c4 1c             	add    $0x1c,%esp
  281060:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  281064:	50                   	push   %eax
  281065:	ff 75 14             	pushl  0x14(%ebp)
  281068:	53                   	push   %ebx
  281069:	56                   	push   %esi
  28106a:	e8 5b fe ff ff       	call   280eca <make_wtitle8>
	return;
  28106f:	83 c4 10             	add    $0x10,%esp
}
  281072:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281075:	5b                   	pop    %ebx
  281076:	5e                   	pop    %esi
  281077:	5f                   	pop    %edi
  281078:	5d                   	pop    %ebp
  281079:	c3                   	ret    

0028107a <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  28107a:	55                   	push   %ebp
  28107b:	89 e5                	mov    %esp,%ebp
  28107d:	57                   	push   %edi
  28107e:	56                   	push   %esi
  28107f:	53                   	push   %ebx
  281080:	83 ec 04             	sub    $0x4,%esp
  281083:	8b 45 0c             	mov    0xc(%ebp),%eax
  281086:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  281089:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  28108d:	7e 49                	jle    2810d8 <putblock8_8+0x5e>
  28108f:	8b 7d 24             	mov    0x24(%ebp),%edi
  281092:	8b 4d 20             	mov    0x20(%ebp),%ecx
  281095:	89 45 f0             	mov    %eax,-0x10(%ebp)
  281098:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  28109c:	03 45 18             	add    0x18(%ebp),%eax
  28109f:	89 c2                	mov    %eax,%edx
  2810a1:	03 55 08             	add    0x8(%ebp),%edx
  2810a4:	be 00 00 00 00       	mov    $0x0,%esi
  2810a9:	eb 22                	jmp    2810cd <putblock8_8+0x53>
  2810ab:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  2810ae:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  2810b2:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  2810b5:	83 c0 01             	add    $0x1,%eax
  2810b8:	39 45 10             	cmp    %eax,0x10(%ebp)
  2810bb:	75 f1                	jne    2810ae <putblock8_8+0x34>
  2810bd:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  2810c0:	83 c6 01             	add    $0x1,%esi
  2810c3:	01 f9                	add    %edi,%ecx
  2810c5:	03 55 f0             	add    -0x10(%ebp),%edx
  2810c8:	39 75 14             	cmp    %esi,0x14(%ebp)
  2810cb:	74 0b                	je     2810d8 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  2810cd:	b8 00 00 00 00       	mov    $0x0,%eax
  2810d2:	85 db                	test   %ebx,%ebx
  2810d4:	7f d5                	jg     2810ab <putblock8_8+0x31>
  2810d6:	eb e8                	jmp    2810c0 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  2810d8:	83 c4 04             	add    $0x4,%esp
  2810db:	5b                   	pop    %ebx
  2810dc:	5e                   	pop    %esi
  2810dd:	5f                   	pop    %edi
  2810de:	5d                   	pop    %ebp
  2810df:	c3                   	ret    

002810e0 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  2810e0:	55                   	push   %ebp
  2810e1:	89 e5                	mov    %esp,%ebp
  2810e3:	57                   	push   %edi
  2810e4:	56                   	push   %esi
  2810e5:	53                   	push   %ebx
  2810e6:	83 ec 0c             	sub    $0xc,%esp
  2810e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2810ec:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  2810ef:	8b 45 20             	mov    0x20(%ebp),%eax
  2810f2:	8b 55 0c             	mov    0xc(%ebp),%edx
  2810f5:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  2810f8:	8d 46 0f             	lea    0xf(%esi),%eax
  2810fb:	50                   	push   %eax
  2810fc:	8d 47 ff             	lea    -0x1(%edi),%eax
  2810ff:	50                   	push   %eax
  281100:	56                   	push   %esi
  281101:	52                   	push   %edx
  281102:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281106:	50                   	push   %eax
  281107:	ff 73 04             	pushl  0x4(%ebx)
  28110a:	ff 33                	pushl  (%ebx)
  28110c:	e8 70 fb ff ff       	call   280c81 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281111:	83 c4 04             	add    $0x4,%esp
  281114:	ff 75 1c             	pushl  0x1c(%ebp)
  281117:	ff 75 14             	pushl  0x14(%ebp)
  28111a:	56                   	push   %esi
  28111b:	ff 75 0c             	pushl  0xc(%ebp)
  28111e:	ff 73 04             	pushl  0x4(%ebx)
  281121:	ff 33                	pushl  (%ebx)
  281123:	e8 bc 02 00 00       	call   2813e4 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281128:	83 c4 24             	add    $0x24,%esp
  28112b:	8d 46 10             	lea    0x10(%esi),%eax
  28112e:	50                   	push   %eax
  28112f:	57                   	push   %edi
  281130:	56                   	push   %esi
  281131:	ff 75 0c             	pushl  0xc(%ebp)
  281134:	53                   	push   %ebx
  281135:	e8 7c 17 00 00       	call   2828b6 <sheet_refresh>
}
  28113a:	83 c4 20             	add    $0x20,%esp
  28113d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281140:	5b                   	pop    %ebx
  281141:	5e                   	pop    %esi
  281142:	5f                   	pop    %edi
  281143:	5d                   	pop    %ebp
  281144:	c3                   	ret    

00281145 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281145:	55                   	push   %ebp
  281146:	89 e5                	mov    %esp,%ebp
  281148:	57                   	push   %edi
  281149:	56                   	push   %esi
  28114a:	53                   	push   %ebx
  28114b:	83 ec 18             	sub    $0x18,%esp
  28114e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281151:	8b 45 0c             	mov    0xc(%ebp),%eax
  281154:	03 45 14             	add    0x14(%ebp),%eax
  281157:	8b 55 10             	mov    0x10(%ebp),%edx
  28115a:	03 55 18             	add    0x18(%ebp),%edx
  28115d:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  28115f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  281162:	8d 48 01             	lea    0x1(%eax),%ecx
  281165:	8b 75 10             	mov    0x10(%ebp),%esi
  281168:	83 ee 03             	sub    $0x3,%esi
  28116b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28116e:	83 ea 02             	sub    $0x2,%edx
  281171:	56                   	push   %esi
  281172:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  281175:	51                   	push   %ecx
  281176:	56                   	push   %esi
  281177:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28117a:	52                   	push   %edx
  28117b:	6a 0f                	push   $0xf
  28117d:	ff 73 04             	pushl  0x4(%ebx)
  281180:	ff 33                	pushl  (%ebx)
  281182:	e8 fa fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  281187:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  28118a:	8d 7f 01             	lea    0x1(%edi),%edi
  28118d:	89 f9                	mov    %edi,%ecx
  28118f:	8b 7d 0c             	mov    0xc(%ebp),%edi
  281192:	83 ef 03             	sub    $0x3,%edi
  281195:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  281198:	51                   	push   %ecx
  281199:	57                   	push   %edi
  28119a:	56                   	push   %esi
  28119b:	57                   	push   %edi
  28119c:	6a 0f                	push   $0xf
  28119e:	ff 73 04             	pushl  0x4(%ebx)
  2811a1:	ff 33                	pushl  (%ebx)
  2811a3:	e8 d9 fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  2811a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  2811ab:	8d 4a 02             	lea    0x2(%edx),%ecx
  2811ae:	83 c4 38             	add    $0x38,%esp
  2811b1:	51                   	push   %ecx
  2811b2:	ff 75 e0             	pushl  -0x20(%ebp)
  2811b5:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  2811b8:	51                   	push   %ecx
  2811b9:	57                   	push   %edi
  2811ba:	6a 07                	push   $0x7
  2811bc:	ff 73 04             	pushl  0x4(%ebx)
  2811bf:	ff 33                	pushl  (%ebx)
  2811c1:	e8 bb fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  2811c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2811c9:	83 c0 02             	add    $0x2,%eax
  2811cc:	ff 75 dc             	pushl  -0x24(%ebp)
  2811cf:	50                   	push   %eax
  2811d0:	56                   	push   %esi
  2811d1:	50                   	push   %eax
  2811d2:	6a 07                	push   $0x7
  2811d4:	ff 73 04             	pushl  0x4(%ebx)
  2811d7:	ff 33                	pushl  (%ebx)
  2811d9:	e8 a3 fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  2811de:	8b 75 10             	mov    0x10(%ebp),%esi
  2811e1:	8d 7e fe             	lea    -0x2(%esi),%edi
  2811e4:	8b 75 0c             	mov    0xc(%ebp),%esi
  2811e7:	83 ee 01             	sub    $0x1,%esi
  2811ea:	83 c4 38             	add    $0x38,%esp
  2811ed:	57                   	push   %edi
  2811ee:	ff 75 e8             	pushl  -0x18(%ebp)
  2811f1:	57                   	push   %edi
  2811f2:	56                   	push   %esi
  2811f3:	6a 00                	push   $0x0
  2811f5:	ff 73 04             	pushl  0x4(%ebx)
  2811f8:	ff 33                	pushl  (%ebx)
  2811fa:	e8 82 fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  2811ff:	ff 75 e4             	pushl  -0x1c(%ebp)
  281202:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281205:	52                   	push   %edx
  281206:	57                   	push   %edi
  281207:	52                   	push   %edx
  281208:	6a 00                	push   $0x0
  28120a:	ff 73 04             	pushl  0x4(%ebx)
  28120d:	ff 33                	pushl  (%ebx)
  28120f:	e8 6d fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281214:	83 c4 38             	add    $0x38,%esp
  281217:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28121a:	50                   	push   %eax
  28121b:	ff 75 e8             	pushl  -0x18(%ebp)
  28121e:	50                   	push   %eax
  28121f:	ff 75 f0             	pushl  -0x10(%ebp)
  281222:	6a 08                	push   $0x8
  281224:	ff 73 04             	pushl  0x4(%ebx)
  281227:	ff 33                	pushl  (%ebx)
  281229:	e8 53 fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28122e:	ff 75 ec             	pushl  -0x14(%ebp)
  281231:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281234:	51                   	push   %ecx
  281235:	57                   	push   %edi
  281236:	51                   	push   %ecx
  281237:	6a 08                	push   $0x8
  281239:	ff 73 04             	pushl  0x4(%ebx)
  28123c:	ff 33                	pushl  (%ebx)
  28123e:	e8 3e fa ff ff       	call   280c81 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281243:	83 c4 38             	add    $0x38,%esp
  281246:	ff 75 e4             	pushl  -0x1c(%ebp)
  281249:	ff 75 e8             	pushl  -0x18(%ebp)
  28124c:	8b 45 10             	mov    0x10(%ebp),%eax
  28124f:	83 e8 01             	sub    $0x1,%eax
  281252:	50                   	push   %eax
  281253:	56                   	push   %esi
  281254:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  281258:	50                   	push   %eax
  281259:	ff 73 04             	pushl  0x4(%ebx)
  28125c:	ff 33                	pushl  (%ebx)
  28125e:	e8 1e fa ff ff       	call   280c81 <boxfill8>
    return;
  281263:	83 c4 1c             	add    $0x1c,%esp
}
  281266:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281269:	5b                   	pop    %ebx
  28126a:	5e                   	pop    %esi
  28126b:	5f                   	pop    %edi
  28126c:	5d                   	pop    %ebp
  28126d:	c3                   	ret    

0028126e <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  28126e:	55                   	push   %ebp
  28126f:	89 e5                	mov    %esp,%ebp
  281271:	57                   	push   %edi
  281272:	56                   	push   %esi
  281273:	53                   	push   %ebx
  281274:	83 ec 10             	sub    $0x10,%esp
  281277:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  28127a:	8b 7d 14             	mov    0x14(%ebp),%edi
  28127d:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  281280:	8b 45 18             	mov    0x18(%ebp),%eax
  281283:	2b 45 10             	sub    0x10(%ebp),%eax
  281286:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  281289:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28128c:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  28128f:	8b 5d 10             	mov    0x10(%ebp),%ebx
  281292:	c1 e3 0a             	shl    $0xa,%ebx
  281295:	89 fa                	mov    %edi,%edx
  281297:	c1 fa 1f             	sar    $0x1f,%edx
  28129a:	89 d0                	mov    %edx,%eax
  28129c:	31 fa                	xor    %edi,%edx
  28129e:	29 c2                	sub    %eax,%edx
  2812a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812a3:	c1 f8 1f             	sar    $0x1f,%eax
  2812a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2812a9:	33 45 f0             	xor    -0x10(%ebp),%eax
  2812ac:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  2812af:	39 c2                	cmp    %eax,%edx
  2812b1:	7c 4a                	jl     2812fd <drawline8_sht+0x8f>
	{
		len=dx+1;
  2812b3:	83 c2 01             	add    $0x1,%edx
  2812b6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  2812b9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2812bc:	39 7d 14             	cmp    %edi,0x14(%ebp)
  2812bf:	b8 00 04 00 00       	mov    $0x400,%eax
  2812c4:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  2812c9:	89 c7                	mov    %eax,%edi
  2812cb:	0f 4c fa             	cmovl  %edx,%edi
  2812ce:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  2812d1:	8b 7d 10             	mov    0x10(%ebp),%edi
  2812d4:	39 7d 18             	cmp    %edi,0x18(%ebp)
  2812d7:	7c 12                	jl     2812eb <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  2812d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812dc:	83 c0 01             	add    $0x1,%eax
  2812df:	c1 e0 0a             	shl    $0xa,%eax
  2812e2:	99                   	cltd   
  2812e3:	f7 7d ec             	idivl  -0x14(%ebp)
  2812e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  2812e9:	eb 52                	jmp    28133d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  2812eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812ee:	83 e8 01             	sub    $0x1,%eax
  2812f1:	c1 e0 0a             	shl    $0xa,%eax
  2812f4:	99                   	cltd   
  2812f5:	f7 7d ec             	idivl  -0x14(%ebp)
  2812f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  2812fb:	eb 40                	jmp    28133d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  2812fd:	83 c0 01             	add    $0x1,%eax
  281300:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  281303:	8b 55 10             	mov    0x10(%ebp),%edx
  281306:	39 55 18             	cmp    %edx,0x18(%ebp)
  281309:	b8 00 04 00 00       	mov    $0x400,%eax
  28130e:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281313:	0f 4c c2             	cmovl  %edx,%eax
  281316:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  281319:	8b 55 0c             	mov    0xc(%ebp),%edx
  28131c:	39 55 14             	cmp    %edx,0x14(%ebp)
  28131f:	7c 0f                	jl     281330 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281321:	8d 47 01             	lea    0x1(%edi),%eax
  281324:	c1 e0 0a             	shl    $0xa,%eax
  281327:	99                   	cltd   
  281328:	f7 7d ec             	idivl  -0x14(%ebp)
  28132b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28132e:	eb 0d                	jmp    28133d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281330:	8d 47 ff             	lea    -0x1(%edi),%eax
  281333:	c1 e0 0a             	shl    $0xa,%eax
  281336:	99                   	cltd   
  281337:	f7 7d ec             	idivl  -0x14(%ebp)
  28133a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28133d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  281341:	7e 31                	jle    281374 <drawline8_sht+0x106>
  281343:	ba 00 00 00 00       	mov    $0x0,%edx
  281348:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  28134b:	89 d8                	mov    %ebx,%eax
  28134d:	c1 f8 0a             	sar    $0xa,%eax
  281350:	0f af 46 04          	imul   0x4(%esi),%eax
  281354:	89 cf                	mov    %ecx,%edi
  281356:	c1 ff 0a             	sar    $0xa,%edi
  281359:	03 06                	add    (%esi),%eax
  28135b:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  28135f:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  281362:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  281365:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  281368:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  28136c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28136f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  281372:	75 d7                	jne    28134b <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  281374:	83 c4 10             	add    $0x10,%esp
  281377:	5b                   	pop    %ebx
  281378:	5e                   	pop    %esi
  281379:	5f                   	pop    %edi
  28137a:	5d                   	pop    %ebp
  28137b:	c3                   	ret    

0028137c <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  28137c:	55                   	push   %ebp
  28137d:	89 e5                	mov    %esp,%ebp
  28137f:	57                   	push   %edi
  281380:	56                   	push   %esi
  281381:	53                   	push   %ebx
  281382:	83 ec 08             	sub    $0x8,%esp
  281385:	8b 45 0c             	mov    0xc(%ebp),%eax
  281388:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  28138b:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  28138f:	89 fb                	mov    %edi,%ebx
  281391:	89 45 ec             	mov    %eax,-0x14(%ebp)
  281394:	0f af 45 14          	imul   0x14(%ebp),%eax
  281398:	03 45 10             	add    0x10(%ebp),%eax
  28139b:	89 c1                	mov    %eax,%ecx
  28139d:	03 4d 08             	add    0x8(%ebp),%ecx
  2813a0:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  2813a3:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  2813a6:	b8 07 00 00 00       	mov    $0x7,%eax
  2813ab:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  2813ae:	89 f1                	mov    %esi,%ecx
  2813b0:	89 de                	mov    %ebx,%esi
  2813b2:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  2813b4:	f6 c2 01             	test   $0x1,%dl
  2813b7:	74 06                	je     2813bf <putfont8+0x43>
  2813b9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813bc:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  2813bf:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  2813c1:	83 e8 01             	sub    $0x1,%eax
  2813c4:	83 f8 ff             	cmp    $0xffffffff,%eax
  2813c7:	75 eb                	jne    2813b4 <putfont8+0x38>
  2813c9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813cc:	89 d8                	mov    %ebx,%eax
  2813ce:	89 f3                	mov    %esi,%ebx
  2813d0:	89 c6                	mov    %eax,%esi
  2813d2:	83 c3 01             	add    $0x1,%ebx
  2813d5:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  2813d8:	39 fb                	cmp    %edi,%ebx
  2813da:	75 c7                	jne    2813a3 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  2813dc:	83 c4 08             	add    $0x8,%esp
  2813df:	5b                   	pop    %ebx
  2813e0:	5e                   	pop    %esi
  2813e1:	5f                   	pop    %edi
  2813e2:	5d                   	pop    %ebp
  2813e3:	c3                   	ret    

002813e4 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  2813e4:	55                   	push   %ebp
  2813e5:	89 e5                	mov    %esp,%ebp
  2813e7:	57                   	push   %edi
  2813e8:	56                   	push   %esi
  2813e9:	53                   	push   %ebx
  2813ea:	8b 75 10             	mov    0x10(%ebp),%esi
  2813ed:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  2813f0:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  2813f4:	0f b6 03             	movzbl (%ebx),%eax
  2813f7:	84 c0                	test   %al,%al
  2813f9:	74 2f                	je     28142a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  2813fb:	0f be fa             	movsbl %dl,%edi
  2813fe:	0f b6 c0             	movzbl %al,%eax
  281401:	c1 e0 04             	shl    $0x4,%eax
  281404:	05 e0 60 28 00       	add    $0x2860e0,%eax
  281409:	50                   	push   %eax
  28140a:	57                   	push   %edi
  28140b:	ff 75 14             	pushl  0x14(%ebp)
  28140e:	56                   	push   %esi
  28140f:	ff 75 0c             	pushl  0xc(%ebp)
  281412:	ff 75 08             	pushl  0x8(%ebp)
  281415:	e8 62 ff ff ff       	call   28137c <putfont8>
		x+=HKK_TABLE_COL;
  28141a:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  28141d:	83 c3 01             	add    $0x1,%ebx
  281420:	0f b6 03             	movzbl (%ebx),%eax
  281423:	83 c4 18             	add    $0x18,%esp
  281426:	84 c0                	test   %al,%al
  281428:	75 d4                	jne    2813fe <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28142a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28142d:	5b                   	pop    %ebx
  28142e:	5e                   	pop    %esi
  28142f:	5f                   	pop    %edi
  281430:	5d                   	pop    %ebp
  281431:	c3                   	ret    

00281432 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281432:	55                   	push   %ebp
  281433:	89 e5                	mov    %esp,%ebp
  281435:	57                   	push   %edi
  281436:	56                   	push   %esi
  281437:	53                   	push   %ebx
  281438:	8b 55 08             	mov    0x8(%ebp),%edx
  28143b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28143e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281441:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281444:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28144a:	76 09                	jbe    281455 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  28144c:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281452:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  281455:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  281458:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  28145c:	89 ce                	mov    %ecx,%esi
  28145e:	c1 fe 10             	sar    $0x10,%esi
  281461:	89 f0                	mov    %esi,%eax
  281463:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  281466:	89 f8                	mov    %edi,%eax
  281468:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  28146b:	c1 eb 10             	shr    $0x10,%ebx
  28146e:	83 e3 0f             	and    $0xf,%ebx
  281471:	89 f8                	mov    %edi,%eax
  281473:	c1 f8 08             	sar    $0x8,%eax
  281476:	83 e0 f0             	and    $0xfffffff0,%eax
  281479:	09 d8                	or     %ebx,%eax
  28147b:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  28147e:	c1 e9 18             	shr    $0x18,%ecx
  281481:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  281484:	5b                   	pop    %ebx
  281485:	5e                   	pop    %esi
  281486:	5f                   	pop    %edi
  281487:	5d                   	pop    %ebp
  281488:	c3                   	ret    

00281489 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  281489:	55                   	push   %ebp
  28148a:	89 e5                	mov    %esp,%ebp
  28148c:	53                   	push   %ebx
  28148d:	8b 45 08             	mov    0x8(%ebp),%eax
  281490:	8b 55 0c             	mov    0xc(%ebp),%edx
  281493:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  281496:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  281499:	8b 5d 10             	mov    0x10(%ebp),%ebx
  28149c:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2814a0:	89 cb                	mov    %ecx,%ebx
  2814a2:	c1 fb 08             	sar    $0x8,%ebx
  2814a5:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  2814a8:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2814ab:	c1 ea 10             	shr    $0x10,%edx
  2814ae:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  2814b2:	5b                   	pop    %ebx
  2814b3:	5d                   	pop    %ebp
  2814b4:	c3                   	ret    

002814b5 <init_gdtidt>:

void init_gdtidt(void)
{
  2814b5:	55                   	push   %ebp
  2814b6:	89 e5                	mov    %esp,%ebp
  2814b8:	53                   	push   %ebx
  2814b9:	83 ec 04             	sub    $0x4,%esp
  2814bc:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  2814c1:	6a 00                	push   $0x0
  2814c3:	6a 00                	push   $0x0
  2814c5:	6a 00                	push   $0x0
  2814c7:	53                   	push   %ebx
  2814c8:	e8 65 ff ff ff       	call   281432 <set_segmdesc>
  2814cd:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  2814d0:	83 c4 10             	add    $0x10,%esp
  2814d3:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  2814d9:	75 e6                	jne    2814c1 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  2814db:	68 92 40 00 00       	push   $0x4092
  2814e0:	6a 00                	push   $0x0
  2814e2:	6a ff                	push   $0xffffffff
  2814e4:	68 08 00 27 00       	push   $0x270008
  2814e9:	e8 44 ff ff ff       	call   281432 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  2814ee:	68 9a 40 00 00       	push   $0x409a
  2814f3:	6a 00                	push   $0x0
  2814f5:	68 ff ff 0f 00       	push   $0xfffff
  2814fa:	68 10 00 27 00       	push   $0x270010
  2814ff:	e8 2e ff ff ff       	call   281432 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281504:	83 c4 20             	add    $0x20,%esp
  281507:	68 9a 40 00 00       	push   $0x409a
  28150c:	68 00 00 28 00       	push   $0x280000
  281511:	68 ff ff 07 00       	push   $0x7ffff
  281516:	68 18 00 27 00       	push   $0x270018
  28151b:	e8 12 ff ff ff       	call   281432 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281520:	83 c4 08             	add    $0x8,%esp
  281523:	68 00 00 27 00       	push   $0x270000
  281528:	68 ff ff 00 00       	push   $0xffff
  28152d:	e8 bd f5 ff ff       	call   280aef <load_gdtr>
  281532:	83 c4 10             	add    $0x10,%esp
  281535:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28153a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28153f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281545:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  281549:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28154d:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281553:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  281556:	3d 00 00 27 00       	cmp    $0x270000,%eax
  28155b:	75 dd                	jne    28153a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  28155d:	b8 fe 17 00 00       	mov    $0x17fe,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281562:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  281568:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  28156f:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281571:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  281578:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  28157f:	c1 e8 10             	shr    $0x10,%eax
  281582:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  281588:	b8 d0 17 00 00       	mov    $0x17d0,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28158d:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  281593:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  28159a:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28159c:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  2815a3:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  2815aa:	c1 e8 10             	shr    $0x10,%eax
  2815ad:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  2815b3:	b8 e7 17 00 00       	mov    $0x17e7,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815b8:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  2815be:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  2815c5:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815c7:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  2815ce:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  2815d5:	c1 e8 10             	shr    $0x10,%eax
  2815d8:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  2815de:	b8 15 18 00 00       	mov    $0x1815,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815e3:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  2815e9:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  2815f0:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815f2:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  2815f9:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281600:	c1 e8 10             	shr    $0x10,%eax
  281603:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  281609:	b8 36 18 00 00       	mov    $0x1836,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28160e:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281614:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  28161b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28161d:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281624:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28162b:	c1 e8 10             	shr    $0x10,%eax
  28162e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281634:	b8 56 18 00 00       	mov    $0x1856,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281639:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28163f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  281646:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281648:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  28164f:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  281656:	c1 e8 10             	shr    $0x10,%eax
  281659:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  28165f:	83 ec 08             	sub    $0x8,%esp
  281662:	68 00 f8 26 00       	push   $0x26f800
  281667:	68 ff 07 00 00       	push   $0x7ff
  28166c:	e8 8e f4 ff ff       	call   280aff <load_idtr>

	return;
  281671:	83 c4 10             	add    $0x10,%esp
}
  281674:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281677:	c9                   	leave  
  281678:	c3                   	ret    

00281679 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  281679:	55                   	push   %ebp
  28167a:	89 e5                	mov    %esp,%ebp
  28167c:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  28167f:	68 ff 00 00 00       	push   $0xff
  281684:	6a 21                	push   $0x21
  281686:	e8 3b f4 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  28168b:	83 c4 08             	add    $0x8,%esp
  28168e:	68 ff 00 00 00       	push   $0xff
  281693:	68 a1 00 00 00       	push   $0xa1
  281698:	e8 29 f4 ff ff       	call   280ac6 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  28169d:	83 c4 08             	add    $0x8,%esp
  2816a0:	6a 11                	push   $0x11
  2816a2:	6a 20                	push   $0x20
  2816a4:	e8 1d f4 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  2816a9:	83 c4 08             	add    $0x8,%esp
  2816ac:	6a 20                	push   $0x20
  2816ae:	6a 21                	push   $0x21
  2816b0:	e8 11 f4 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  2816b5:	83 c4 08             	add    $0x8,%esp
  2816b8:	6a 04                	push   $0x4
  2816ba:	6a 21                	push   $0x21
  2816bc:	e8 05 f4 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  2816c1:	83 c4 08             	add    $0x8,%esp
  2816c4:	6a 01                	push   $0x1
  2816c6:	6a 21                	push   $0x21
  2816c8:	e8 f9 f3 ff ff       	call   280ac6 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  2816cd:	83 c4 08             	add    $0x8,%esp
  2816d0:	6a 11                	push   $0x11
  2816d2:	68 a0 00 00 00       	push   $0xa0
  2816d7:	e8 ea f3 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  2816dc:	83 c4 08             	add    $0x8,%esp
  2816df:	6a 28                	push   $0x28
  2816e1:	68 a1 00 00 00       	push   $0xa1
  2816e6:	e8 db f3 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC1_ICW3, 2);
  2816eb:	83 c4 08             	add    $0x8,%esp
  2816ee:	6a 02                	push   $0x2
  2816f0:	68 a1 00 00 00       	push   $0xa1
  2816f5:	e8 cc f3 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  2816fa:	83 c4 08             	add    $0x8,%esp
  2816fd:	6a 01                	push   $0x1
  2816ff:	68 a1 00 00 00       	push   $0xa1
  281704:	e8 bd f3 ff ff       	call   280ac6 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  281709:	83 c4 08             	add    $0x8,%esp
  28170c:	68 fb 00 00 00       	push   $0xfb
  281711:	6a 21                	push   $0x21
  281713:	e8 ae f3 ff ff       	call   280ac6 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  281718:	83 c4 08             	add    $0x8,%esp
  28171b:	68 ff 00 00 00       	push   $0xff
  281720:	68 a1 00 00 00       	push   $0xa1
  281725:	e8 9c f3 ff ff       	call   280ac6 <io_out8>
}
  28172a:	83 c4 10             	add    $0x10,%esp
  28172d:	c9                   	leave  
  28172e:	c3                   	ret    

0028172f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28172f:	55                   	push   %ebp
  281730:	89 e5                	mov    %esp,%ebp
  281732:	57                   	push   %edi
  281733:	56                   	push   %esi
  281734:	53                   	push   %ebx
  281735:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281738:	e8 32 17 00 00       	call   282e6f <task_now>
  28173d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28173f:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  281745:	83 ec 08             	sub    $0x8,%esp
  281748:	68 80 4f 28 00       	push   $0x284f80
  28174d:	56                   	push   %esi
  28174e:	e8 42 25 00 00       	call   283c95 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281753:	83 c4 0c             	add    $0xc,%esp
  281756:	8b 45 08             	mov    0x8(%ebp),%eax
  281759:	ff 70 2c             	pushl  0x2c(%eax)
  28175c:	68 a8 4f 28 00       	push   $0x284fa8
  281761:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281764:	57                   	push   %edi
  281765:	e8 33 02 00 00       	call   28199d <sprintf>
	cons_putstr0(cons,s);
  28176a:	83 c4 08             	add    $0x8,%esp
  28176d:	57                   	push   %edi
  28176e:	56                   	push   %esi
  28176f:	e8 21 25 00 00       	call   283c95 <cons_putstr0>
	return &(task->tss.esp0);
  281774:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281777:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28177a:	5b                   	pop    %ebx
  28177b:	5e                   	pop    %esi
  28177c:	5f                   	pop    %edi
  28177d:	5d                   	pop    %ebp
  28177e:	c3                   	ret    

0028177f <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  28177f:	55                   	push   %ebp
  281780:	89 e5                	mov    %esp,%ebp
  281782:	57                   	push   %edi
  281783:	56                   	push   %esi
  281784:	53                   	push   %ebx
  281785:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281788:	e8 e2 16 00 00       	call   282e6f <task_now>
  28178d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28178f:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  281795:	83 ec 08             	sub    $0x8,%esp
  281798:	68 b0 4f 28 00       	push   $0x284fb0
  28179d:	56                   	push   %esi
  28179e:	e8 f2 24 00 00       	call   283c95 <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2817a3:	83 c4 0c             	add    $0xc,%esp
  2817a6:	8b 45 08             	mov    0x8(%ebp),%eax
  2817a9:	ff 70 2c             	pushl  0x2c(%eax)
  2817ac:	68 a8 4f 28 00       	push   $0x284fa8
  2817b1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2817b4:	57                   	push   %edi
  2817b5:	e8 e3 01 00 00       	call   28199d <sprintf>
	cons_putstr0(cons,s);
  2817ba:	83 c4 08             	add    $0x8,%esp
  2817bd:	57                   	push   %edi
  2817be:	56                   	push   %esi
  2817bf:	e8 d1 24 00 00       	call   283c95 <cons_putstr0>
	return &(task->tss.esp0);
  2817c4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2817c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2817ca:	5b                   	pop    %ebx
  2817cb:	5e                   	pop    %esi
  2817cc:	5f                   	pop    %edi
  2817cd:	5d                   	pop    %ebp
  2817ce:	c3                   	ret    
  2817cf:	90                   	nop

002817d0 <asm_inthandler21>:
  2817d0:	06                   	push   %es
  2817d1:	1e                   	push   %ds
  2817d2:	60                   	pusha  
  2817d3:	89 e0                	mov    %esp,%eax
  2817d5:	50                   	push   %eax
  2817d6:	66 8c d0             	mov    %ss,%ax
  2817d9:	8e d8                	mov    %eax,%ds
  2817db:	8e c0                	mov    %eax,%es
  2817dd:	e8 ed 05 00 00       	call   281dcf <inthandler21>
  2817e2:	58                   	pop    %eax
  2817e3:	61                   	popa   
  2817e4:	1f                   	pop    %ds
  2817e5:	07                   	pop    %es
  2817e6:	cf                   	iret   

002817e7 <asm_inthandler2c>:
  2817e7:	06                   	push   %es
  2817e8:	1e                   	push   %ds
  2817e9:	60                   	pusha  
  2817ea:	89 e0                	mov    %esp,%eax
  2817ec:	50                   	push   %eax
  2817ed:	66 8c d0             	mov    %ss,%ax
  2817f0:	8e d8                	mov    %eax,%ds
  2817f2:	8e c0                	mov    %eax,%es
  2817f4:	e8 3c 05 00 00       	call   281d35 <inthandler2c>
  2817f9:	58                   	pop    %eax
  2817fa:	61                   	popa   
  2817fb:	1f                   	pop    %ds
  2817fc:	07                   	pop    %es
  2817fd:	cf                   	iret   

002817fe <asm_inthandler20>:
  2817fe:	06                   	push   %es
  2817ff:	1e                   	push   %ds
  281800:	60                   	pusha  
  281801:	89 e0                	mov    %esp,%eax
  281803:	50                   	push   %eax
  281804:	66 8c d0             	mov    %ss,%ax
  281807:	8e d8                	mov    %eax,%ds
  281809:	8e c0                	mov    %eax,%es
  28180b:	e8 c1 13 00 00       	call   282bd1 <inthandler20>
  281810:	58                   	pop    %eax
  281811:	61                   	popa   
  281812:	1f                   	pop    %ds
  281813:	07                   	pop    %es
  281814:	cf                   	iret   

00281815 <asm_sys_api>:
  281815:	fb                   	sti    
  281816:	1e                   	push   %ds
  281817:	06                   	push   %es
  281818:	60                   	pusha  
  281819:	60                   	pusha  
  28181a:	66 8c d0             	mov    %ss,%ax
  28181d:	8e d8                	mov    %eax,%ds
  28181f:	8e c0                	mov    %eax,%es
  281821:	e8 f8 2b 00 00       	call   28441e <sys_api>
  281826:	83 f8 00             	cmp    $0x0,%eax
  281829:	75 07                	jne    281832 <end_app>
  28182b:	83 c4 20             	add    $0x20,%esp
  28182e:	61                   	popa   
  28182f:	07                   	pop    %es
  281830:	1f                   	pop    %ds
  281831:	cf                   	iret   

00281832 <end_app>:
  281832:	8b 20                	mov    (%eax),%esp
  281834:	61                   	popa   
  281835:	c3                   	ret    

00281836 <asm_inthandler0d>:
  281836:	fb                   	sti    
  281837:	06                   	push   %es
  281838:	1e                   	push   %ds
  281839:	60                   	pusha  
  28183a:	89 e0                	mov    %esp,%eax
  28183c:	50                   	push   %eax
  28183d:	66 8c d0             	mov    %ss,%ax
  281840:	8e d8                	mov    %eax,%ds
  281842:	8e c0                	mov    %eax,%es
  281844:	e8 e6 fe ff ff       	call   28172f <inthandler0d>
  281849:	83 f8 00             	cmp    $0x0,%eax
  28184c:	75 e4                	jne    281832 <end_app>
  28184e:	58                   	pop    %eax
  28184f:	61                   	popa   
  281850:	1f                   	pop    %ds
  281851:	07                   	pop    %es
  281852:	83 c4 04             	add    $0x4,%esp
  281855:	cf                   	iret   

00281856 <asm_inthandler0c>:
  281856:	fb                   	sti    
  281857:	06                   	push   %es
  281858:	1e                   	push   %ds
  281859:	60                   	pusha  
  28185a:	89 e0                	mov    %esp,%eax
  28185c:	50                   	push   %eax
  28185d:	66 8c d0             	mov    %ss,%ax
  281860:	8e d8                	mov    %eax,%ds
  281862:	8e c0                	mov    %eax,%es
  281864:	e8 16 ff ff ff       	call   28177f <inthandler0c>
  281869:	83 f8 00             	cmp    $0x0,%eax
  28186c:	75 c4                	jne    281832 <end_app>
  28186e:	58                   	pop    %eax
  28186f:	61                   	popa   
  281870:	1f                   	pop    %ds
  281871:	07                   	pop    %es
  281872:	83 c4 04             	add    $0x4,%esp
  281875:	cf                   	iret   

00281876 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  281876:	55                   	push   %ebp
  281877:	89 e5                	mov    %esp,%ebp
  281879:	57                   	push   %edi
  28187a:	56                   	push   %esi
  28187b:	53                   	push   %ebx
  28187c:	83 ec 10             	sub    $0x10,%esp
  28187f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281882:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  281885:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  28188c:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  281893:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  281899:	85 c9                	test   %ecx,%ecx
  28189b:	79 08                	jns    2818a5 <itoa+0x2f>
		*buf++ = '-';
  28189d:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  2818a0:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  2818a2:	8d 7f 01             	lea    0x1(%edi),%edi
  2818a5:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  2818a8:	be 67 66 66 66       	mov    $0x66666667,%esi
  2818ad:	83 c3 01             	add    $0x1,%ebx
  2818b0:	89 c8                	mov    %ecx,%eax
  2818b2:	f7 ee                	imul   %esi
  2818b4:	c1 fa 02             	sar    $0x2,%edx
  2818b7:	89 c8                	mov    %ecx,%eax
  2818b9:	c1 f8 1f             	sar    $0x1f,%eax
  2818bc:	29 c2                	sub    %eax,%edx
  2818be:	8d 04 92             	lea    (%edx,%edx,4),%eax
  2818c1:	01 c0                	add    %eax,%eax
  2818c3:	29 c1                	sub    %eax,%ecx
  2818c5:	83 c1 30             	add    $0x30,%ecx
  2818c8:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  2818cb:	89 d1                	mov    %edx,%ecx
	}while(value);
  2818cd:	85 d2                	test   %edx,%edx
  2818cf:	75 dc                	jne    2818ad <itoa+0x37>
	while(tmp_buf != tbp--)
  2818d1:	8d 73 ff             	lea    -0x1(%ebx),%esi
  2818d4:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2818d7:	39 c3                	cmp    %eax,%ebx
  2818d9:	74 20                	je     2818fb <itoa+0x85>
  2818db:	89 f0                	mov    %esi,%eax
  2818dd:	89 fa                	mov    %edi,%edx
  2818df:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  2818e2:	83 c2 01             	add    $0x1,%edx
  2818e5:	0f b6 08             	movzbl (%eax),%ecx
  2818e8:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  2818eb:	83 e8 01             	sub    $0x1,%eax
  2818ee:	39 d8                	cmp    %ebx,%eax
  2818f0:	75 f0                	jne    2818e2 <itoa+0x6c>
  2818f2:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2818f5:	29 c6                	sub    %eax,%esi
  2818f7:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  2818fb:	c6 07 00             	movb   $0x0,(%edi)
}
  2818fe:	83 c4 10             	add    $0x10,%esp
  281901:	5b                   	pop    %ebx
  281902:	5e                   	pop    %esi
  281903:	5f                   	pop    %edi
  281904:	5d                   	pop    %ebp
  281905:	c3                   	ret    

00281906 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281906:	55                   	push   %ebp
  281907:	89 e5                	mov    %esp,%ebp
  281909:	57                   	push   %edi
  28190a:	56                   	push   %esi
  28190b:	53                   	push   %ebx
  28190c:	83 ec 20             	sub    $0x20,%esp
  28190f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281912:	bb 00 00 00 00       	mov    $0x0,%ebx
  281917:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28191e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281925:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28192a:	ba 00 00 00 00       	mov    $0x0,%edx
  28192f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281933:	83 c2 04             	add    $0x4,%edx
  281936:	39 ca                	cmp    %ecx,%edx
  281938:	72 f5                	jb     28192f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28193a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28193d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281940:	83 c6 02             	add    $0x2,%esi
  281943:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281946:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28194a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28194d:	83 c3 01             	add    $0x1,%ebx
  281950:	89 c1                	mov    %eax,%ecx
  281952:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281955:	8d 79 37             	lea    0x37(%ecx),%edi
  281958:	8d 51 30             	lea    0x30(%ecx),%edx
  28195b:	83 f9 0a             	cmp    $0xa,%ecx
  28195e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281961:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  281964:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  281967:	85 c0                	test   %eax,%eax
  281969:	75 e2                	jne    28194d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  28196b:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28196e:	39 c3                	cmp    %eax,%ebx
  281970:	74 20                	je     281992 <xtoa+0x8c>
  281972:	89 d8                	mov    %ebx,%eax
  281974:	89 f1                	mov    %esi,%ecx
  281976:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  281979:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  28197c:	83 c1 01             	add    $0x1,%ecx
  28197f:	0f b6 10             	movzbl (%eax),%edx
  281982:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  281985:	39 f8                	cmp    %edi,%eax
  281987:	75 f0                	jne    281979 <xtoa+0x73>
  281989:	8d 45 f4             	lea    -0xc(%ebp),%eax
  28198c:	29 c3                	sub    %eax,%ebx
  28198e:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  281992:	c6 06 00             	movb   $0x0,(%esi)
}
  281995:	83 c4 20             	add    $0x20,%esp
  281998:	5b                   	pop    %ebx
  281999:	5e                   	pop    %esi
  28199a:	5f                   	pop    %edi
  28199b:	5d                   	pop    %ebp
  28199c:	c3                   	ret    

0028199d <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  28199d:	55                   	push   %ebp
  28199e:	89 e5                	mov    %esp,%ebp
  2819a0:	57                   	push   %edi
  2819a1:	56                   	push   %esi
  2819a2:	53                   	push   %ebx
  2819a3:	83 ec 10             	sub    $0x10,%esp
  2819a6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  2819a9:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2819ac:	e9 a8 00 00 00       	jmp    281a59 <sprintf+0xbc>
		if(*format!='%'){
  2819b1:	3c 25                	cmp    $0x25,%al
  2819b3:	74 10                	je     2819c5 <sprintf+0x28>
			*str++=*format++;
  2819b5:	83 c6 01             	add    $0x1,%esi
  2819b8:	89 75 0c             	mov    %esi,0xc(%ebp)
  2819bb:	88 03                	mov    %al,(%ebx)
  2819bd:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  2819c0:	e9 94 00 00 00       	jmp    281a59 <sprintf+0xbc>
		}
		else{
			format++;
  2819c5:	8d 46 01             	lea    0x1(%esi),%eax
  2819c8:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  2819cb:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  2819cf:	3c 73                	cmp    $0x73,%al
  2819d1:	74 5e                	je     281a31 <sprintf+0x94>
  2819d3:	3c 78                	cmp    $0x78,%al
  2819d5:	74 2f                	je     281a06 <sprintf+0x69>
  2819d7:	3c 64                	cmp    $0x64,%al
  2819d9:	75 75                	jne    281a50 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  2819db:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2819de:	50                   	push   %eax
  2819df:	ff 37                	pushl  (%edi)
  2819e1:	e8 90 fe ff ff       	call   281876 <itoa>
  2819e6:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  2819ea:	83 c4 08             	add    $0x8,%esp
  2819ed:	84 c0                	test   %al,%al
  2819ef:	74 5f                	je     281a50 <sprintf+0xb3>
  2819f1:	8d 55 ea             	lea    -0x16(%ebp),%edx
  2819f4:	83 c3 01             	add    $0x1,%ebx
  2819f7:	83 c2 01             	add    $0x1,%edx
  2819fa:	88 43 ff             	mov    %al,-0x1(%ebx)
  2819fd:	0f b6 02             	movzbl (%edx),%eax
  281a00:	84 c0                	test   %al,%al
  281a02:	75 f0                	jne    2819f4 <sprintf+0x57>
  281a04:	eb 4a                	jmp    281a50 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281a06:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281a09:	50                   	push   %eax
  281a0a:	ff 37                	pushl  (%edi)
  281a0c:	e8 f5 fe ff ff       	call   281906 <xtoa>
  281a11:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281a15:	83 c4 08             	add    $0x8,%esp
  281a18:	84 c0                	test   %al,%al
  281a1a:	74 34                	je     281a50 <sprintf+0xb3>
  281a1c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281a1f:	83 c3 01             	add    $0x1,%ebx
  281a22:	83 c2 01             	add    $0x1,%edx
  281a25:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a28:	0f b6 02             	movzbl (%edx),%eax
  281a2b:	84 c0                	test   %al,%al
  281a2d:	75 f0                	jne    281a1f <sprintf+0x82>
  281a2f:	eb 1f                	jmp    281a50 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281a31:	8b 0f                	mov    (%edi),%ecx
  281a33:	0f b6 11             	movzbl (%ecx),%edx
  281a36:	84 d2                	test   %dl,%dl
  281a38:	74 16                	je     281a50 <sprintf+0xb3>
  281a3a:	89 d8                	mov    %ebx,%eax
  281a3c:	83 c0 01             	add    $0x1,%eax
  281a3f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281a42:	89 c2                	mov    %eax,%edx
  281a44:	29 da                	sub    %ebx,%edx
  281a46:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  281a4a:	84 d2                	test   %dl,%dl
  281a4c:	75 ee                	jne    281a3c <sprintf+0x9f>
  281a4e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281a50:	83 c7 04             	add    $0x4,%edi
			format++;
  281a53:	83 c6 02             	add    $0x2,%esi
  281a56:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281a59:	8b 75 0c             	mov    0xc(%ebp),%esi
  281a5c:	0f b6 06             	movzbl (%esi),%eax
  281a5f:	84 c0                	test   %al,%al
  281a61:	0f 85 4a ff ff ff    	jne    2819b1 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281a67:	c6 03 00             	movb   $0x0,(%ebx)
}
  281a6a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281a6d:	5b                   	pop    %ebx
  281a6e:	5e                   	pop    %esi
  281a6f:	5f                   	pop    %edi
  281a70:	5d                   	pop    %ebp
  281a71:	c3                   	ret    

00281a72 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281a72:	55                   	push   %ebp
  281a73:	89 e5                	mov    %esp,%ebp
  281a75:	57                   	push   %edi
  281a76:	56                   	push   %esi
  281a77:	53                   	push   %ebx
  281a78:	8b 7d 08             	mov    0x8(%ebp),%edi
  281a7b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a7e:	0f b6 17             	movzbl (%edi),%edx
  281a81:	be 00 00 00 00       	mov    $0x0,%esi
  281a86:	84 d2                	test   %dl,%dl
  281a88:	74 40                	je     281aca <strcmp+0x58>
  281a8a:	eb 1d                	jmp    281aa9 <strcmp+0x37>
	{
		if(c1==c2) i++;
  281a8c:	38 ca                	cmp    %cl,%dl
  281a8e:	75 0f                	jne    281a9f <strcmp+0x2d>
  281a90:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a93:	89 c6                	mov    %eax,%esi
  281a95:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  281a99:	84 d2                	test   %dl,%dl
  281a9b:	75 1e                	jne    281abb <strcmp+0x49>
  281a9d:	eb 2b                	jmp    281aca <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  281a9f:	0f be c2             	movsbl %dl,%eax
  281aa2:	0f be c9             	movsbl %cl,%ecx
  281aa5:	29 c8                	sub    %ecx,%eax
  281aa7:	eb 2a                	jmp    281ad3 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281aa9:	0f b6 0b             	movzbl (%ebx),%ecx
  281aac:	84 c9                	test   %cl,%cl
  281aae:	74 15                	je     281ac5 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281ab0:	b8 00 00 00 00       	mov    $0x0,%eax
  281ab5:	38 ca                	cmp    %cl,%dl
  281ab7:	74 d7                	je     281a90 <strcmp+0x1e>
  281ab9:	eb e4                	jmp    281a9f <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281abb:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281abf:	84 c9                	test   %cl,%cl
  281ac1:	75 c9                	jne    281a8c <strcmp+0x1a>
  281ac3:	eb 05                	jmp    281aca <strcmp+0x58>
  281ac5:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281aca:	0f be c2             	movsbl %dl,%eax
  281acd:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281ad1:	29 d0                	sub    %edx,%eax
}
  281ad3:	5b                   	pop    %ebx
  281ad4:	5e                   	pop    %esi
  281ad5:	5f                   	pop    %edi
  281ad6:	5d                   	pop    %ebp
  281ad7:	c3                   	ret    

00281ad8 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281ad8:	55                   	push   %ebp
  281ad9:	89 e5                	mov    %esp,%ebp
  281adb:	57                   	push   %edi
  281adc:	56                   	push   %esi
  281add:	53                   	push   %ebx
  281ade:	8b 75 08             	mov    0x8(%ebp),%esi
  281ae1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281ae4:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281ae7:	b8 00 00 00 00       	mov    $0x0,%eax
  281aec:	85 ff                	test   %edi,%edi
  281aee:	74 63                	je     281b53 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281af0:	83 ef 01             	sub    $0x1,%edi
  281af3:	89 fa                	mov    %edi,%edx
  281af5:	74 52                	je     281b49 <strncmp+0x71>
  281af7:	eb 19                	jmp    281b12 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281af9:	38 c8                	cmp    %cl,%al
  281afb:	75 0b                	jne    281b08 <strncmp+0x30>
  281afd:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b00:	39 fa                	cmp    %edi,%edx
  281b02:	75 27                	jne    281b2b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281b04:	89 fa                	mov    %edi,%edx
  281b06:	eb 41                	jmp    281b49 <strncmp+0x71>
		else return c1-c2;
  281b08:	0f be c0             	movsbl %al,%eax
  281b0b:	0f be c9             	movsbl %cl,%ecx
  281b0e:	29 c8                	sub    %ecx,%eax
  281b10:	eb 41                	jmp    281b53 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b12:	0f b6 06             	movzbl (%esi),%eax
  281b15:	84 c0                	test   %al,%al
  281b17:	74 24                	je     281b3d <strncmp+0x65>
  281b19:	0f b6 0b             	movzbl (%ebx),%ecx
  281b1c:	84 c9                	test   %cl,%cl
  281b1e:	74 24                	je     281b44 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281b20:	ba 00 00 00 00       	mov    $0x0,%edx
  281b25:	38 c8                	cmp    %cl,%al
  281b27:	74 d4                	je     281afd <strncmp+0x25>
  281b29:	eb dd                	jmp    281b08 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b2b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281b2f:	84 c0                	test   %al,%al
  281b31:	74 16                	je     281b49 <strncmp+0x71>
  281b33:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281b37:	84 c9                	test   %cl,%cl
  281b39:	75 be                	jne    281af9 <strncmp+0x21>
  281b3b:	eb 0c                	jmp    281b49 <strncmp+0x71>
  281b3d:	ba 00 00 00 00       	mov    $0x0,%edx
  281b42:	eb 05                	jmp    281b49 <strncmp+0x71>
  281b44:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281b49:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281b4d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281b51:	29 d0                	sub    %edx,%eax
}
  281b53:	5b                   	pop    %ebx
  281b54:	5e                   	pop    %esi
  281b55:	5f                   	pop    %edi
  281b56:	5d                   	pop    %ebp
  281b57:	c3                   	ret    

00281b58 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281b58:	55                   	push   %ebp
  281b59:	89 e5                	mov    %esp,%ebp
  281b5b:	8b 45 08             	mov    0x8(%ebp),%eax
  281b5e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281b61:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281b64:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281b67:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281b69:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281b6c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281b73:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281b7a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281b81:	8b 55 14             	mov    0x14(%ebp),%edx
  281b84:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281b87:	5d                   	pop    %ebp
  281b88:	c3                   	ret    

00281b89 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281b89:	55                   	push   %ebp
  281b8a:	89 e5                	mov    %esp,%ebp
  281b8c:	53                   	push   %ebx
  281b8d:	83 ec 04             	sub    $0x4,%esp
  281b90:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281b93:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281b97:	75 0b                	jne    281ba4 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281b99:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281b9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281ba2:	eb 52                	jmp    281bf6 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281ba4:	8b 48 04             	mov    0x4(%eax),%ecx
  281ba7:	8b 10                	mov    (%eax),%edx
  281ba9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281bac:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281baf:	8b 48 04             	mov    0x4(%eax),%ecx
  281bb2:	8d 51 01             	lea    0x1(%ecx),%edx
  281bb5:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281bb8:	3b 50 0c             	cmp    0xc(%eax),%edx
  281bbb:	75 07                	jne    281bc4 <fifo32_put+0x3b>
		fifo->p = 0;
  281bbd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281bc4:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281bc8:	8b 50 18             	mov    0x18(%eax),%edx
  281bcb:	85 d2                	test   %edx,%edx
  281bcd:	74 22                	je     281bf1 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281bcf:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281bd4:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281bd8:	74 1c                	je     281bf6 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281bda:	83 ec 04             	sub    $0x4,%esp
  281bdd:	6a 00                	push   $0x0
  281bdf:	6a ff                	push   $0xffffffff
  281be1:	52                   	push   %edx
  281be2:	e8 7d 13 00 00       	call   282f64 <task_run>
  281be7:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281bea:	b8 00 00 00 00       	mov    $0x0,%eax
  281bef:	eb 05                	jmp    281bf6 <fifo32_put+0x6d>
  281bf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281bf6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281bf9:	c9                   	leave  
  281bfa:	c3                   	ret    

00281bfb <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281bfb:	55                   	push   %ebp
  281bfc:	89 e5                	mov    %esp,%ebp
  281bfe:	56                   	push   %esi
  281bff:	53                   	push   %ebx
  281c00:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281c03:	8b 59 10             	mov    0x10(%ecx),%ebx
  281c06:	8b 71 0c             	mov    0xc(%ecx),%esi
  281c09:	39 f3                	cmp    %esi,%ebx
  281c0b:	74 20                	je     281c2d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281c0d:	8b 51 08             	mov    0x8(%ecx),%edx
  281c10:	8b 01                	mov    (%ecx),%eax
  281c12:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281c15:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281c18:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281c1a:	be 00 00 00 00       	mov    $0x0,%esi
  281c1f:	0f 44 d6             	cmove  %esi,%edx
  281c22:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281c25:	83 c3 01             	add    $0x1,%ebx
  281c28:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281c2b:	eb 05                	jmp    281c32 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281c32:	5b                   	pop    %ebx
  281c33:	5e                   	pop    %esi
  281c34:	5d                   	pop    %ebp
  281c35:	c3                   	ret    

00281c36 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281c36:	55                   	push   %ebp
  281c37:	89 e5                	mov    %esp,%ebp
  281c39:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281c3c:	8b 42 0c             	mov    0xc(%edx),%eax
  281c3f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281c42:	5d                   	pop    %ebp
  281c43:	c3                   	ret    

00281c44 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281c44:	55                   	push   %ebp
  281c45:	89 e5                	mov    %esp,%ebp
  281c47:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281c4a:	8b 45 08             	mov    0x8(%ebp),%eax
  281c4d:	a3 c4 7a 28 00       	mov    %eax,0x287ac4
	mousedata0 = data0;
  281c52:	8b 45 0c             	mov    0xc(%ebp),%eax
  281c55:	a3 c0 7a 28 00       	mov    %eax,0x287ac0

	wait_KBC_sendready();
  281c5a:	e8 1a 01 00 00       	call   281d79 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281c5f:	83 ec 08             	sub    $0x8,%esp
  281c62:	68 d4 00 00 00       	push   $0xd4
  281c67:	6a 64                	push   $0x64
  281c69:	e8 58 ee ff ff       	call   280ac6 <io_out8>
	wait_KBC_sendready();
  281c6e:	e8 06 01 00 00       	call   281d79 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281c73:	83 c4 08             	add    $0x8,%esp
  281c76:	68 f4 00 00 00       	push   $0xf4
  281c7b:	6a 60                	push   $0x60
  281c7d:	e8 44 ee ff ff       	call   280ac6 <io_out8>
	mdec->phase = 0;
  281c82:	8b 45 10             	mov    0x10(%ebp),%eax
  281c85:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281c89:	83 c4 10             	add    $0x10,%esp
}
  281c8c:	c9                   	leave  
  281c8d:	c3                   	ret    

00281c8e <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281c8e:	55                   	push   %ebp
  281c8f:	89 e5                	mov    %esp,%ebp
  281c91:	56                   	push   %esi
  281c92:	53                   	push   %ebx
  281c93:	8b 55 08             	mov    0x8(%ebp),%edx
  281c96:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281c99:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281c9d:	84 c0                	test   %al,%al
  281c9f:	75 14                	jne    281cb5 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281ca1:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281ca6:	80 f9 fa             	cmp    $0xfa,%cl
  281ca9:	0f 85 82 00 00 00    	jne    281d31 <mouse_decode+0xa3>
			mdec->phase = 1;
  281caf:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281cb3:	eb 7c                	jmp    281d31 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281cb5:	3c 01                	cmp    $0x1,%al
  281cb7:	75 17                	jne    281cd0 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281cb9:	89 cb                	mov    %ecx,%ebx
  281cbb:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281cbe:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281cc3:	80 fb 08             	cmp    $0x8,%bl
  281cc6:	75 69                	jne    281d31 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281cc8:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281cca:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281cce:	eb 61                	jmp    281d31 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281cd0:	3c 02                	cmp    $0x2,%al
  281cd2:	75 0e                	jne    281ce2 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281cd4:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281cd7:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281cdb:	b8 00 00 00 00       	mov    $0x0,%eax
  281ce0:	eb 4f                	jmp    281d31 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281ce2:	3c 03                	cmp    $0x3,%al
  281ce4:	75 46                	jne    281d2c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281ce6:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281ce9:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281ced:	0f b6 02             	movzbl (%edx),%eax
  281cf0:	89 c3                	mov    %eax,%ebx
  281cf2:	83 e3 07             	and    $0x7,%ebx
  281cf5:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281cf8:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281cfc:	0f b6 f3             	movzbl %bl,%esi
  281cff:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281d02:	0f b6 f1             	movzbl %cl,%esi
  281d05:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281d08:	a8 10                	test   $0x10,%al
  281d0a:	74 09                	je     281d15 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281d0c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281d12:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281d15:	a8 20                	test   $0x20,%al
  281d17:	74 09                	je     281d22 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281d19:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281d1f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281d22:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281d25:	b8 01 00 00 00       	mov    $0x1,%eax
  281d2a:	eb 05                	jmp    281d31 <mouse_decode+0xa3>
	}
	return -1;
  281d2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281d31:	5b                   	pop    %ebx
  281d32:	5e                   	pop    %esi
  281d33:	5d                   	pop    %ebp
  281d34:	c3                   	ret    

00281d35 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281d35:	55                   	push   %ebp
  281d36:	89 e5                	mov    %esp,%ebp
  281d38:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281d3b:	6a 64                	push   $0x64
  281d3d:	68 a0 00 00 00       	push   $0xa0
  281d42:	e8 7f ed ff ff       	call   280ac6 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281d47:	83 c4 08             	add    $0x8,%esp
  281d4a:	6a 62                	push   $0x62
  281d4c:	6a 20                	push   $0x20
  281d4e:	e8 73 ed ff ff       	call   280ac6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d53:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d5a:	e8 45 ed ff ff       	call   280aa4 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281d5f:	83 c4 08             	add    $0x8,%esp
  281d62:	03 05 c0 7a 28 00    	add    0x287ac0,%eax
  281d68:	50                   	push   %eax
  281d69:	ff 35 c4 7a 28 00    	pushl  0x287ac4
  281d6f:	e8 15 fe ff ff       	call   281b89 <fifo32_put>
	return;
  281d74:	83 c4 10             	add    $0x10,%esp
}
  281d77:	c9                   	leave  
  281d78:	c3                   	ret    

00281d79 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281d79:	55                   	push   %ebp
  281d7a:	89 e5                	mov    %esp,%ebp
  281d7c:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281d7f:	83 ec 0c             	sub    $0xc,%esp
  281d82:	6a 64                	push   $0x64
  281d84:	e8 1b ed ff ff       	call   280aa4 <io_in8>
  281d89:	83 c4 10             	add    $0x10,%esp
  281d8c:	a8 02                	test   $0x2,%al
  281d8e:	75 ef                	jne    281d7f <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281d90:	c9                   	leave  
  281d91:	c3                   	ret    

00281d92 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281d92:	55                   	push   %ebp
  281d93:	89 e5                	mov    %esp,%ebp
  281d95:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281d98:	8b 45 08             	mov    0x8(%ebp),%eax
  281d9b:	a3 c8 7a 28 00       	mov    %eax,0x287ac8
	keydata0 = data0;
  281da0:	8b 45 0c             	mov    0xc(%ebp),%eax
  281da3:	a3 cc 7a 28 00       	mov    %eax,0x287acc
	wait_KBC_sendready();
  281da8:	e8 cc ff ff ff       	call   281d79 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281dad:	83 ec 08             	sub    $0x8,%esp
  281db0:	6a 60                	push   $0x60
  281db2:	6a 64                	push   $0x64
  281db4:	e8 0d ed ff ff       	call   280ac6 <io_out8>
	wait_KBC_sendready();
  281db9:	e8 bb ff ff ff       	call   281d79 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281dbe:	83 c4 08             	add    $0x8,%esp
  281dc1:	6a 47                	push   $0x47
  281dc3:	6a 60                	push   $0x60
  281dc5:	e8 fc ec ff ff       	call   280ac6 <io_out8>
	return;
  281dca:	83 c4 10             	add    $0x10,%esp
}
  281dcd:	c9                   	leave  
  281dce:	c3                   	ret    

00281dcf <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281dcf:	55                   	push   %ebp
  281dd0:	89 e5                	mov    %esp,%ebp
  281dd2:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281dd5:	6a 61                	push   $0x61
  281dd7:	6a 20                	push   $0x20
  281dd9:	e8 e8 ec ff ff       	call   280ac6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281dde:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281de5:	e8 ba ec ff ff       	call   280aa4 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281dea:	83 c4 08             	add    $0x8,%esp
  281ded:	03 05 cc 7a 28 00    	add    0x287acc,%eax
  281df3:	50                   	push   %eax
  281df4:	ff 35 c8 7a 28 00    	pushl  0x287ac8
  281dfa:	e8 8a fd ff ff       	call   281b89 <fifo32_put>
	return;
  281dff:	83 c4 10             	add    $0x10,%esp
}
  281e02:	c9                   	leave  
  281e03:	c3                   	ret    

00281e04 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281e04:	55                   	push   %ebp
  281e05:	89 e5                	mov    %esp,%ebp
  281e07:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281e0a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281e0f:	83 fa 7f             	cmp    $0x7f,%edx
  281e12:	77 16                	ja     281e2a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281e14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281e18:	75 09                	jne    281e23 <key_char+0x1f>
  281e1a:	0f b6 82 60 50 28 00 	movzbl 0x285060(%edx),%eax
  281e21:	eb 07                	jmp    281e2a <key_char+0x26>
		else return keytable1[key];
  281e23:	0f b6 82 e0 4f 28 00 	movzbl 0x284fe0(%edx),%eax
	}
	else return 0;
}
  281e2a:	5d                   	pop    %ebp
  281e2b:	c3                   	ret    

00281e2c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281e2c:	55                   	push   %ebp
  281e2d:	89 e5                	mov    %esp,%ebp
  281e2f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281e32:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281e36:	e8 aa ec ff ff       	call   280ae5 <io_load_eflags>
  281e3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e41:	83 ec 0c             	sub    $0xc,%esp
  281e44:	50                   	push   %eax
  281e45:	e8 9e ec ff ff       	call   280ae8 <io_store_eflags>
  281e4a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281e4d:	e8 93 ec ff ff       	call   280ae5 <io_load_eflags>
  281e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e58:	25 00 00 04 00       	and    $0x40000,%eax
  281e5d:	85 c0                	test   %eax,%eax
  281e5f:	74 04                	je     281e65 <memtest+0x39>
		flg486 = 1;
  281e61:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281e65:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e6f:	83 ec 0c             	sub    $0xc,%esp
  281e72:	50                   	push   %eax
  281e73:	e8 70 ec ff ff       	call   280ae8 <io_store_eflags>
  281e78:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281e7b:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281e7f:	74 1d                	je     281e9e <memtest+0x72>
	{
		cr0 = load_cr0;
  281e81:	c7 45 ec 0f 0b 28 00 	movl   $0x280b0f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281e88:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281e8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281e92:	83 ec 0c             	sub    $0xc,%esp
  281e95:	50                   	push   %eax
  281e96:	e8 78 ec ff ff       	call   280b13 <store_cr0>
  281e9b:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281e9e:	83 ec 08             	sub    $0x8,%esp
  281ea1:	ff 75 0c             	pushl  0xc(%ebp)
  281ea4:	ff 75 08             	pushl  0x8(%ebp)
  281ea7:	e8 6f ec ff ff       	call   280b1b <_memtest_sub>
  281eac:	83 c4 10             	add    $0x10,%esp
  281eaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281eb2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281eb6:	74 1e                	je     281ed6 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281eb8:	e8 52 ec ff ff       	call   280b0f <load_cr0>
  281ebd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281ec0:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281eca:	83 ec 0c             	sub    $0xc,%esp
  281ecd:	50                   	push   %eax
  281ece:	e8 40 ec ff ff       	call   280b13 <store_cr0>
  281ed3:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281ed6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281ed9:	c9                   	leave  
  281eda:	c3                   	ret    

00281edb <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281edb:	55                   	push   %ebp
  281edc:	89 e5                	mov    %esp,%ebp
  281ede:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281ee1:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281ee8:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281eef:	8b 45 08             	mov    0x8(%ebp),%eax
  281ef2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281ef5:	eb 67                	jmp    281f5e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281ef7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281efa:	05 fc 0f 00 00       	add    $0xffc,%eax
  281eff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281f02:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f05:	8b 00                	mov    (%eax),%eax
  281f07:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281f0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f0d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f10:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281f12:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f15:	8b 00                	mov    (%eax),%eax
  281f17:	f7 d0                	not    %eax
  281f19:	89 c2                	mov    %eax,%edx
  281f1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f1e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281f20:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f23:	8b 00                	mov    (%eax),%eax
  281f25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281f28:	74 0d                	je     281f37 <memtest_sub+0x5c>
  281f2a:	eb 01                	jmp    281f2d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281f2c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281f2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f30:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f33:	89 10                	mov    %edx,(%eax)
			break;
  281f35:	eb 2f                	jmp    281f66 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281f37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f3a:	8b 00                	mov    (%eax),%eax
  281f3c:	f7 d0                	not    %eax
  281f3e:	89 c2                	mov    %eax,%edx
  281f40:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f43:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281f45:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f48:	8b 00                	mov    (%eax),%eax
  281f4a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281f4d:	75 dd                	jne    281f2c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281f4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f52:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f55:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281f57:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281f5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281f61:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f64:	76 91                	jbe    281ef7 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281f66:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281f69:	c9                   	leave  
  281f6a:	c3                   	ret    

00281f6b <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281f6b:	55                   	push   %ebp
  281f6c:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281f6e:	8b 45 08             	mov    0x8(%ebp),%eax
  281f71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281f77:	8b 45 08             	mov    0x8(%ebp),%eax
  281f7a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281f81:	8b 45 08             	mov    0x8(%ebp),%eax
  281f84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281f8b:	8b 45 08             	mov    0x8(%ebp),%eax
  281f8e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281f95:	90                   	nop
}
  281f96:	5d                   	pop    %ebp
  281f97:	c3                   	ret    

00281f98 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281f98:	55                   	push   %ebp
  281f99:	89 e5                	mov    %esp,%ebp
  281f9b:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281f9e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281fa5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281fac:	eb 14                	jmp    281fc2 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281fae:	8b 45 08             	mov    0x8(%ebp),%eax
  281fb1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281fb4:	83 c2 02             	add    $0x2,%edx
  281fb7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281fbb:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281fbe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281fc2:	8b 45 08             	mov    0x8(%ebp),%eax
  281fc5:	8b 00                	mov    (%eax),%eax
  281fc7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281fca:	77 e2                	ja     281fae <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281fcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281fcf:	c9                   	leave  
  281fd0:	c3                   	ret    

00281fd1 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281fd1:	55                   	push   %ebp
  281fd2:	89 e5                	mov    %esp,%ebp
  281fd4:	53                   	push   %ebx
  281fd5:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281fd8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281fdf:	e9 bd 00 00 00       	jmp    2820a1 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  281fe4:	8b 45 08             	mov    0x8(%ebp),%eax
  281fe7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281fea:	83 c2 02             	add    $0x2,%edx
  281fed:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281ff4:	0f 82 a3 00 00 00    	jb     28209d <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  281ffa:	8b 45 08             	mov    0x8(%ebp),%eax
  281ffd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282000:	83 c2 02             	add    $0x2,%edx
  282003:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282006:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  282009:	8b 45 08             	mov    0x8(%ebp),%eax
  28200c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28200f:	83 c2 02             	add    $0x2,%edx
  282012:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282015:	8b 45 0c             	mov    0xc(%ebp),%eax
  282018:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28201b:	8b 45 08             	mov    0x8(%ebp),%eax
  28201e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282021:	83 c2 02             	add    $0x2,%edx
  282024:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  282027:	8b 45 08             	mov    0x8(%ebp),%eax
  28202a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28202d:	83 c2 02             	add    $0x2,%edx
  282030:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282034:	2b 45 0c             	sub    0xc(%ebp),%eax
  282037:	89 c2                	mov    %eax,%edx
  282039:	8b 45 08             	mov    0x8(%ebp),%eax
  28203c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  28203f:	83 c1 02             	add    $0x2,%ecx
  282042:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  282046:	8b 45 08             	mov    0x8(%ebp),%eax
  282049:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28204c:	83 c2 02             	add    $0x2,%edx
  28204f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282053:	85 c0                	test   %eax,%eax
  282055:	75 41                	jne    282098 <memman_alloc+0xc7>
			{
				man->frees--;
  282057:	8b 45 08             	mov    0x8(%ebp),%eax
  28205a:	8b 00                	mov    (%eax),%eax
  28205c:	8d 50 ff             	lea    -0x1(%eax),%edx
  28205f:	8b 45 08             	mov    0x8(%ebp),%eax
  282062:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  282064:	eb 28                	jmp    28208e <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  282066:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282069:	8d 50 01             	lea    0x1(%eax),%edx
  28206c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28206f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282072:	8d 58 02             	lea    0x2(%eax),%ebx
  282075:	8b 45 08             	mov    0x8(%ebp),%eax
  282078:	83 c2 02             	add    $0x2,%edx
  28207b:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  28207e:	8b 02                	mov    (%edx),%eax
  282080:	8b 52 04             	mov    0x4(%edx),%edx
  282083:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  282086:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  28208a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28208e:	8b 45 08             	mov    0x8(%ebp),%eax
  282091:	8b 00                	mov    (%eax),%eax
  282093:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282096:	77 ce                	ja     282066 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  282098:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28209b:	eb 17                	jmp    2820b4 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  28209d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820a1:	8b 45 08             	mov    0x8(%ebp),%eax
  2820a4:	8b 00                	mov    (%eax),%eax
  2820a6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820a9:	0f 87 35 ff ff ff    	ja     281fe4 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  2820af:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2820b4:	83 c4 10             	add    $0x10,%esp
  2820b7:	5b                   	pop    %ebx
  2820b8:	5d                   	pop    %ebp
  2820b9:	c3                   	ret    

002820ba <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  2820ba:	55                   	push   %ebp
  2820bb:	89 e5                	mov    %esp,%ebp
  2820bd:	53                   	push   %ebx
  2820be:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820c1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2820c8:	eb 15                	jmp    2820df <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  2820ca:	8b 45 08             	mov    0x8(%ebp),%eax
  2820cd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820d0:	83 c2 02             	add    $0x2,%edx
  2820d3:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2820d6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2820d9:	77 10                	ja     2820eb <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820db:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820df:	8b 45 08             	mov    0x8(%ebp),%eax
  2820e2:	8b 00                	mov    (%eax),%eax
  2820e4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820e7:	7f e1                	jg     2820ca <memman_free+0x10>
  2820e9:	eb 01                	jmp    2820ec <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  2820eb:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  2820ec:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  2820f0:	0f 8e f2 00 00 00    	jle    2821e8 <memman_free+0x12e>
  2820f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820f9:	8d 50 ff             	lea    -0x1(%eax),%edx
  2820fc:	8b 45 08             	mov    0x8(%ebp),%eax
  2820ff:	83 c2 02             	add    $0x2,%edx
  282102:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282105:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282108:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28210b:	8b 45 08             	mov    0x8(%ebp),%eax
  28210e:	83 c1 02             	add    $0x2,%ecx
  282111:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282115:	01 d0                	add    %edx,%eax
  282117:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28211a:	0f 85 c8 00 00 00    	jne    2821e8 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282120:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282123:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282126:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282129:	8d 50 ff             	lea    -0x1(%eax),%edx
  28212c:	8b 45 08             	mov    0x8(%ebp),%eax
  28212f:	83 c2 02             	add    $0x2,%edx
  282132:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282136:	8b 45 10             	mov    0x10(%ebp),%eax
  282139:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28213c:	8b 45 08             	mov    0x8(%ebp),%eax
  28213f:	8d 53 02             	lea    0x2(%ebx),%edx
  282142:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282146:	8b 45 08             	mov    0x8(%ebp),%eax
  282149:	8b 00                	mov    (%eax),%eax
  28214b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28214e:	0f 8e 8a 00 00 00    	jle    2821de <memman_free+0x124>
  282154:	8b 55 0c             	mov    0xc(%ebp),%edx
  282157:	8b 45 10             	mov    0x10(%ebp),%eax
  28215a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28215d:	8b 45 08             	mov    0x8(%ebp),%eax
  282160:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282163:	83 c2 02             	add    $0x2,%edx
  282166:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282169:	39 c1                	cmp    %eax,%ecx
  28216b:	75 71                	jne    2821de <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  28216d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282170:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282173:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282176:	8d 50 ff             	lea    -0x1(%eax),%edx
  282179:	8b 45 08             	mov    0x8(%ebp),%eax
  28217c:	83 c2 02             	add    $0x2,%edx
  28217f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282183:	8b 45 08             	mov    0x8(%ebp),%eax
  282186:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  282189:	83 c1 02             	add    $0x2,%ecx
  28218c:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282190:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282193:	8b 45 08             	mov    0x8(%ebp),%eax
  282196:	8d 53 02             	lea    0x2(%ebx),%edx
  282199:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  28219d:	eb 28                	jmp    2821c7 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  28219f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821a2:	8d 50 01             	lea    0x1(%eax),%edx
  2821a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2821a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2821ab:	8d 58 02             	lea    0x2(%eax),%ebx
  2821ae:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b1:	83 c2 02             	add    $0x2,%edx
  2821b4:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2821b7:	8b 02                	mov    (%edx),%eax
  2821b9:	8b 52 04             	mov    0x4(%edx),%edx
  2821bc:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2821bf:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  2821c3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2821c7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ca:	8b 00                	mov    (%eax),%eax
  2821cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821cf:	7f ce                	jg     28219f <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  2821d1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821d4:	8b 00                	mov    (%eax),%eax
  2821d6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2821d9:	8b 45 08             	mov    0x8(%ebp),%eax
  2821dc:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  2821de:	b8 00 00 00 00       	mov    $0x0,%eax
  2821e3:	e9 1f 01 00 00       	jmp    282307 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  2821e8:	8b 45 08             	mov    0x8(%ebp),%eax
  2821eb:	8b 00                	mov    (%eax),%eax
  2821ed:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821f0:	7e 52                	jle    282244 <memman_free+0x18a>
  2821f2:	8b 55 0c             	mov    0xc(%ebp),%edx
  2821f5:	8b 45 10             	mov    0x10(%ebp),%eax
  2821f8:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2821fb:	8b 45 08             	mov    0x8(%ebp),%eax
  2821fe:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282201:	83 c2 02             	add    $0x2,%edx
  282204:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282207:	39 c1                	cmp    %eax,%ecx
  282209:	75 39                	jne    282244 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28220b:	8b 45 08             	mov    0x8(%ebp),%eax
  28220e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282211:	8d 4a 02             	lea    0x2(%edx),%ecx
  282214:	8b 55 0c             	mov    0xc(%ebp),%edx
  282217:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28221a:	8b 45 08             	mov    0x8(%ebp),%eax
  28221d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282220:	83 c2 02             	add    $0x2,%edx
  282223:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282227:	8b 45 10             	mov    0x10(%ebp),%eax
  28222a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28222d:	8b 45 08             	mov    0x8(%ebp),%eax
  282230:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282233:	83 c2 02             	add    $0x2,%edx
  282236:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28223a:	b8 00 00 00 00       	mov    $0x0,%eax
  28223f:	e9 c3 00 00 00       	jmp    282307 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282244:	8b 45 08             	mov    0x8(%ebp),%eax
  282247:	8b 00                	mov    (%eax),%eax
  282249:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28224e:	0f 8f 8a 00 00 00    	jg     2822de <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282254:	8b 45 08             	mov    0x8(%ebp),%eax
  282257:	8b 00                	mov    (%eax),%eax
  282259:	83 e8 01             	sub    $0x1,%eax
  28225c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28225f:	eb 28                	jmp    282289 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  282261:	8b 45 f4             	mov    -0xc(%ebp),%eax
  282264:	83 c0 01             	add    $0x1,%eax
  282267:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28226a:	8d 58 02             	lea    0x2(%eax),%ebx
  28226d:	8b 45 08             	mov    0x8(%ebp),%eax
  282270:	8b 55 f4             	mov    -0xc(%ebp),%edx
  282273:	83 c2 02             	add    $0x2,%edx
  282276:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282279:	8b 02                	mov    (%edx),%eax
  28227b:	8b 52 04             	mov    0x4(%edx),%edx
  28227e:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  282281:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  282285:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  282289:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28228c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28228f:	7d d0                	jge    282261 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  282291:	8b 45 08             	mov    0x8(%ebp),%eax
  282294:	8b 50 04             	mov    0x4(%eax),%edx
  282297:	8b 45 08             	mov    0x8(%ebp),%eax
  28229a:	8b 00                	mov    (%eax),%eax
  28229c:	39 c2                	cmp    %eax,%edx
  28229e:	7d 0b                	jge    2822ab <memman_free+0x1f1>
  2822a0:	8b 45 08             	mov    0x8(%ebp),%eax
  2822a3:	8b 10                	mov    (%eax),%edx
  2822a5:	8b 45 08             	mov    0x8(%ebp),%eax
  2822a8:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  2822ab:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ae:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822b1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822b4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2822b7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  2822ba:	8b 45 08             	mov    0x8(%ebp),%eax
  2822bd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822c0:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822c3:	8b 55 10             	mov    0x10(%ebp),%edx
  2822c6:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  2822ca:	8b 45 08             	mov    0x8(%ebp),%eax
  2822cd:	8b 00                	mov    (%eax),%eax
  2822cf:	8d 50 01             	lea    0x1(%eax),%edx
  2822d2:	8b 45 08             	mov    0x8(%ebp),%eax
  2822d5:	89 10                	mov    %edx,(%eax)
		return 0;
  2822d7:	b8 00 00 00 00       	mov    $0x0,%eax
  2822dc:	eb 29                	jmp    282307 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  2822de:	8b 45 08             	mov    0x8(%ebp),%eax
  2822e1:	8b 40 0c             	mov    0xc(%eax),%eax
  2822e4:	8d 50 01             	lea    0x1(%eax),%edx
  2822e7:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ea:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  2822ed:	8b 45 08             	mov    0x8(%ebp),%eax
  2822f0:	8b 40 08             	mov    0x8(%eax),%eax
  2822f3:	89 c2                	mov    %eax,%edx
  2822f5:	8b 45 10             	mov    0x10(%ebp),%eax
  2822f8:	01 d0                	add    %edx,%eax
  2822fa:	89 c2                	mov    %eax,%edx
  2822fc:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ff:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282302:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282307:	83 c4 10             	add    $0x10,%esp
  28230a:	5b                   	pop    %ebx
  28230b:	5d                   	pop    %ebp
  28230c:	c3                   	ret    

0028230d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28230d:	55                   	push   %ebp
  28230e:	89 e5                	mov    %esp,%ebp
  282310:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282313:	8b 45 0c             	mov    0xc(%ebp),%eax
  282316:	05 ff 0f 00 00       	add    $0xfff,%eax
  28231b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282320:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282323:	ff 75 0c             	pushl  0xc(%ebp)
  282326:	ff 75 08             	pushl  0x8(%ebp)
  282329:	e8 a3 fc ff ff       	call   281fd1 <memman_alloc>
  28232e:	83 c4 08             	add    $0x8,%esp
  282331:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282334:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282337:	c9                   	leave  
  282338:	c3                   	ret    

00282339 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282339:	55                   	push   %ebp
  28233a:	89 e5                	mov    %esp,%ebp
  28233c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28233f:	8b 45 10             	mov    0x10(%ebp),%eax
  282342:	05 ff 0f 00 00       	add    $0xfff,%eax
  282347:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28234c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28234f:	ff 75 10             	pushl  0x10(%ebp)
  282352:	ff 75 0c             	pushl  0xc(%ebp)
  282355:	ff 75 08             	pushl  0x8(%ebp)
  282358:	e8 5d fd ff ff       	call   2820ba <memman_free>
  28235d:	83 c4 0c             	add    $0xc,%esp
  282360:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  282363:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282366:	c9                   	leave  
  282367:	c3                   	ret    

00282368 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  282368:	55                   	push   %ebp
  282369:	89 e5                	mov    %esp,%ebp
  28236b:	57                   	push   %edi
  28236c:	56                   	push   %esi
  28236d:	53                   	push   %ebx
  28236e:	83 ec 14             	sub    $0x14,%esp
  282371:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  282374:	68 14 2c 00 00       	push   $0x2c14
  282379:	57                   	push   %edi
  28237a:	e8 8e ff ff ff       	call   28230d <memman_alloc_4k>
  28237f:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  282381:	83 c4 10             	add    $0x10,%esp
  282384:	85 c0                	test   %eax,%eax
  282386:	74 6a                	je     2823f2 <shtctl_init+0x8a>
  282388:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  28238a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28238d:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  28238f:	83 ec 08             	sub    $0x8,%esp
  282392:	8b 45 10             	mov    0x10(%ebp),%eax
  282395:	0f af 45 14          	imul   0x14(%ebp),%eax
  282399:	50                   	push   %eax
  28239a:	57                   	push   %edi
  28239b:	e8 6d ff ff ff       	call   28230d <memman_alloc_4k>
  2823a0:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  2823a3:	83 c4 10             	add    $0x10,%esp
  2823a6:	85 c0                	test   %eax,%eax
  2823a8:	75 19                	jne    2823c3 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  2823aa:	83 ec 04             	sub    $0x4,%esp
  2823ad:	68 14 2c 00 00       	push   $0x2c14
  2823b2:	56                   	push   %esi
  2823b3:	57                   	push   %edi
  2823b4:	e8 80 ff ff ff       	call   282339 <memman_free_4k>
		ctl = 0;
		goto err;
  2823b9:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  2823bc:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  2823c1:	eb 2f                	jmp    2823f2 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  2823c3:	8b 45 10             	mov    0x10(%ebp),%eax
  2823c6:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  2823c9:	8b 45 14             	mov    0x14(%ebp),%eax
  2823cc:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  2823cf:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  2823d6:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  2823dc:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  2823e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  2823e8:	89 70 04             	mov    %esi,0x4(%eax)
  2823eb:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  2823ee:	39 d8                	cmp    %ebx,%eax
  2823f0:	75 f0                	jne    2823e2 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
err:
	return ctl;
}
  2823f2:	89 f0                	mov    %esi,%eax
  2823f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2823f7:	5b                   	pop    %ebx
  2823f8:	5e                   	pop    %esi
  2823f9:	5f                   	pop    %edi
  2823fa:	5d                   	pop    %ebp
  2823fb:	c3                   	ret    

002823fc <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  2823fc:	55                   	push   %ebp
  2823fd:	89 e5                	mov    %esp,%ebp
  2823ff:	56                   	push   %esi
  282400:	53                   	push   %ebx
  282401:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282404:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28240b:	74 12                	je     28241f <sheet_alloc+0x23>
  28240d:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282413:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282418:	83 3a 00             	cmpl   $0x0,(%edx)
  28241b:	75 3c                	jne    282459 <sheet_alloc+0x5d>
  28241d:	eb 05                	jmp    282424 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28241f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282424:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28242b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28242e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282431:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282438:	00 00 00 
			sht->height = -1;
  28243b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  282442:	ff ff ff 
			sht->task = 0;
  282445:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  28244c:	00 00 00 00 
			return sht;
  282450:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  282457:	eb 12                	jmp    28246b <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282459:	83 c0 01             	add    $0x1,%eax
  28245c:	83 c2 28             	add    $0x28,%edx
  28245f:	3d 00 01 00 00       	cmp    $0x100,%eax
  282464:	75 b2                	jne    282418 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  282466:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28246b:	5b                   	pop    %ebx
  28246c:	5e                   	pop    %esi
  28246d:	5d                   	pop    %ebp
  28246e:	c3                   	ret    

0028246f <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  28246f:	55                   	push   %ebp
  282470:	89 e5                	mov    %esp,%ebp
  282472:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  282475:	8b 55 0c             	mov    0xc(%ebp),%edx
  282478:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  28247a:	8b 55 10             	mov    0x10(%ebp),%edx
  28247d:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  282480:	8b 55 14             	mov    0x14(%ebp),%edx
  282483:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  282486:	8b 55 18             	mov    0x18(%ebp),%edx
  282489:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  28248c:	5d                   	pop    %ebp
  28248d:	c3                   	ret    

0028248e <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  28248e:	55                   	push   %ebp
  28248f:	89 e5                	mov    %esp,%ebp
  282491:	57                   	push   %edi
  282492:	56                   	push   %esi
  282493:	53                   	push   %ebx
  282494:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  282497:	8b 45 08             	mov    0x8(%ebp),%eax
  28249a:	8b 00                	mov    (%eax),%eax
  28249c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28249f:	8b 45 08             	mov    0x8(%ebp),%eax
  2824a2:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2824a6:	0f 88 80 00 00 00    	js     28252c <sheet_refresh_ob+0x9e>
  2824ac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  2824b3:	8b 45 08             	mov    0x8(%ebp),%eax
  2824b6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2824b9:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2824bd:	8b 02                	mov    (%edx),%eax
  2824bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  2824c2:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  2824c6:	7e 55                	jle    28251d <sheet_refresh_ob+0x8f>
  2824c8:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  2824cd:	89 f8                	mov    %edi,%eax
  2824cf:	03 42 10             	add    0x10(%edx),%eax
  2824d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  2824d5:	8b 4a 04             	mov    0x4(%edx),%ecx
  2824d8:	85 c9                	test   %ecx,%ecx
  2824da:	7e 39                	jle    282515 <sheet_refresh_ob+0x87>
  2824dc:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  2824e1:	0f af cf             	imul   %edi,%ecx
  2824e4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  2824e7:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2824ea:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  2824ee:	0f b6 cb             	movzbl %bl,%ecx
  2824f1:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2824f4:	74 15                	je     28250b <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  2824f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2824f9:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2824fc:	0f af 71 08          	imul   0x8(%ecx),%esi
  282500:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282503:	01 c1                	add    %eax,%ecx
  282505:	03 4a 0c             	add    0xc(%edx),%ecx
  282508:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28250b:	83 c0 01             	add    $0x1,%eax
  28250e:	8b 4a 04             	mov    0x4(%edx),%ecx
  282511:	39 c1                	cmp    %eax,%ecx
  282513:	7f cc                	jg     2824e1 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282515:	83 c7 01             	add    $0x1,%edi
  282518:	39 7a 08             	cmp    %edi,0x8(%edx)
  28251b:	7f b0                	jg     2824cd <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28251d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282521:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282524:	8b 7d 08             	mov    0x8(%ebp),%edi
  282527:	39 47 10             	cmp    %eax,0x10(%edi)
  28252a:	7d 87                	jge    2824b3 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28252c:	83 c4 10             	add    $0x10,%esp
  28252f:	5b                   	pop    %ebx
  282530:	5e                   	pop    %esi
  282531:	5f                   	pop    %edi
  282532:	5d                   	pop    %ebp
  282533:	c3                   	ret    

00282534 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282534:	55                   	push   %ebp
  282535:	89 e5                	mov    %esp,%ebp
  282537:	57                   	push   %edi
  282538:	56                   	push   %esi
  282539:	53                   	push   %ebx
  28253a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28253d:	8b 45 08             	mov    0x8(%ebp),%eax
  282540:	8b 00                	mov    (%eax),%eax
  282542:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282545:	8b 45 08             	mov    0x8(%ebp),%eax
  282548:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  28254c:	0f 88 a7 00 00 00    	js     2825f9 <sheet_refreshsub1+0xc5>
  282552:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  282559:	8b 45 08             	mov    0x8(%ebp),%eax
  28255c:	8b 7d e0             	mov    -0x20(%ebp),%edi
  28255f:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282563:	8b 01                	mov    (%ecx),%eax
  282565:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  282568:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  28256c:	7e 78                	jle    2825e6 <sheet_refreshsub1+0xb2>
  28256e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  282575:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  282578:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  28257b:	8b 71 04             	mov    0x4(%ecx),%esi
  28257e:	85 f6                	test   %esi,%esi
  282580:	7e 58                	jle    2825da <sheet_refreshsub1+0xa6>
  282582:	b8 00 00 00 00       	mov    $0x0,%eax
  282587:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  28258a:	89 c2                	mov    %eax,%edx
  28258c:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  28258f:	3b 55 0c             	cmp    0xc(%ebp),%edx
  282592:	7c 3c                	jl     2825d0 <sheet_refreshsub1+0x9c>
  282594:	3b 55 14             	cmp    0x14(%ebp),%edx
  282597:	7d 37                	jge    2825d0 <sheet_refreshsub1+0x9c>
  282599:	8b 7d f0             	mov    -0x10(%ebp),%edi
  28259c:	3b 7d 10             	cmp    0x10(%ebp),%edi
  28259f:	7c 2f                	jl     2825d0 <sheet_refreshsub1+0x9c>
  2825a1:	3b 7d 18             	cmp    0x18(%ebp),%edi
  2825a4:	7d 2a                	jge    2825d0 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  2825a6:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  2825aa:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  2825ad:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  2825b0:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  2825b4:	89 f3                	mov    %esi,%ebx
  2825b6:	0f b6 fb             	movzbl %bl,%edi
  2825b9:	3b 79 14             	cmp    0x14(%ecx),%edi
  2825bc:	74 12                	je     2825d0 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  2825be:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2825c1:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2825c4:	0f af 7b 08          	imul   0x8(%ebx),%edi
  2825c8:	03 55 e4             	add    -0x1c(%ebp),%edx
  2825cb:	89 f3                	mov    %esi,%ebx
  2825cd:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  2825d0:	83 c0 01             	add    $0x1,%eax
  2825d3:	8b 71 04             	mov    0x4(%ecx),%esi
  2825d6:	39 c6                	cmp    %eax,%esi
  2825d8:	7f b0                	jg     28258a <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  2825da:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  2825de:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2825e1:	39 41 08             	cmp    %eax,0x8(%ecx)
  2825e4:	7f 8f                	jg     282575 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2825e6:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  2825ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
  2825ed:	8b 7d 08             	mov    0x8(%ebp),%edi
  2825f0:	39 47 10             	cmp    %eax,0x10(%edi)
  2825f3:	0f 8d 60 ff ff ff    	jge    282559 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  2825f9:	83 c4 14             	add    $0x14,%esp
  2825fc:	5b                   	pop    %ebx
  2825fd:	5e                   	pop    %esi
  2825fe:	5f                   	pop    %edi
  2825ff:	5d                   	pop    %ebp
  282600:	c3                   	ret    

00282601 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282601:	55                   	push   %ebp
  282602:	89 e5                	mov    %esp,%ebp
  282604:	57                   	push   %edi
  282605:	56                   	push   %esi
  282606:	53                   	push   %ebx
  282607:	83 ec 34             	sub    $0x34,%esp
  28260a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28260d:	8b 55 10             	mov    0x10(%ebp),%edx
  282610:	8b 75 14             	mov    0x14(%ebp),%esi
  282613:	8b 7d 18             	mov    0x18(%ebp),%edi
  282616:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  282619:	8b 45 08             	mov    0x8(%ebp),%eax
  28261c:	8b 00                	mov    (%eax),%eax
  28261e:	89 45 c0             	mov    %eax,-0x40(%ebp)
  282621:	8b 45 08             	mov    0x8(%ebp),%eax
  282624:	8b 40 04             	mov    0x4(%eax),%eax
  282627:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28262a:	b8 00 00 00 00       	mov    $0x0,%eax
  28262f:	85 c9                	test   %ecx,%ecx
  282631:	0f 48 c8             	cmovs  %eax,%ecx
  282634:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  282637:	85 d2                	test   %edx,%edx
  282639:	0f 48 d0             	cmovs  %eax,%edx
  28263c:	89 55 c8             	mov    %edx,-0x38(%ebp)
	struct SHEET *sht;

	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28263f:	8b 55 08             	mov    0x8(%ebp),%edx
  282642:	8b 52 08             	mov    0x8(%edx),%edx
  282645:	39 f2                	cmp    %esi,%edx
  282647:	0f 4e f2             	cmovle %edx,%esi
  28264a:	89 75 d0             	mov    %esi,-0x30(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  28264d:	8b 55 08             	mov    0x8(%ebp),%edx
  282650:	8b 52 0c             	mov    0xc(%edx),%edx
  282653:	39 fa                	cmp    %edi,%edx
  282655:	0f 4e fa             	cmovle %edx,%edi
  282658:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28265b:	85 db                	test   %ebx,%ebx
  28265d:	0f 49 c3             	cmovns %ebx,%eax
  282660:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282663:	8b 7d 08             	mov    0x8(%ebp),%edi
  282666:	3b 47 10             	cmp    0x10(%edi),%eax
  282669:	0f 8f 9c 01 00 00    	jg     28280b <sheet_refreshsub2+0x20a>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  28266f:	8b 45 08             	mov    0x8(%ebp),%eax
  282672:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  282675:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  282679:	8b 02                	mov    (%edx),%eax
  28267b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  28267e:	8b 72 0c             	mov    0xc(%edx),%esi
		by0 = vy0 - sht->vy0;
  282681:	8b 7a 10             	mov    0x10(%edx),%edi
		bx1 = vx1 - sht->vx0;
  282684:	8b 45 d0             	mov    -0x30(%ebp),%eax
  282687:	29 f0                	sub    %esi,%eax
		by1 = vy1 - sht->vy0;
  282689:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  28268c:	89 7d f0             	mov    %edi,-0x10(%ebp)
  28268f:	29 fb                	sub    %edi,%ebx
  282691:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  282694:	29 f1                	sub    %esi,%ecx
  282696:	bf 00 00 00 00       	mov    $0x0,%edi
  28269b:	0f 48 cf             	cmovs  %edi,%ecx
  28269e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  2826a1:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2826a4:	2b 4d f0             	sub    -0x10(%ebp),%ecx
  2826a7:	0f 49 f9             	cmovns %ecx,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  2826aa:	8b 4a 04             	mov    0x4(%edx),%ecx
  2826ad:	39 c8                	cmp    %ecx,%eax
  2826af:	0f 4e c8             	cmovle %eax,%ecx
  2826b2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  2826b5:	8b 42 08             	mov    0x8(%edx),%eax
  2826b8:	39 c3                	cmp    %eax,%ebx
  2826ba:	0f 4e c3             	cmovle %ebx,%eax
  2826bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(sht->col_inv == -1)
  2826c0:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  2826c4:	74 0d                	je     2826d3 <sheet_refreshsub2+0xd2>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  2826c6:	39 f8                	cmp    %edi,%eax
  2826c8:	0f 8f dd 00 00 00    	jg     2827ab <sheet_refreshsub2+0x1aa>
  2826ce:	e9 25 01 00 00       	jmp    2827f8 <sheet_refreshsub2+0x1f7>
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
  2826d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826d6:	09 f0                	or     %esi,%eax
  2826d8:	a8 03                	test   $0x3,%al
  2826da:	75 06                	jne    2826e2 <sheet_refreshsub2+0xe1>
  2826dc:	f6 45 f0 03          	testb  $0x3,-0x10(%ebp)
  2826e0:	74 0c                	je     2826ee <sheet_refreshsub2+0xed>
  2826e2:	89 fe                	mov    %edi,%esi
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  2826e4:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  2826e7:	7f 71                	jg     28275a <sheet_refreshsub2+0x159>
  2826e9:	e9 0a 01 00 00       	jmp    2827f8 <sheet_refreshsub2+0x1f7>
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
  2826ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826f1:	01 c6                	add    %eax,%esi
  2826f3:	89 75 e4             	mov    %esi,-0x1c(%ebp)
				bx1 = (bx1-bx0)/4;
  2826f6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  2826f9:	29 c3                	sub    %eax,%ebx
  2826fb:	89 d8                	mov    %ebx,%eax
  2826fd:	8d 4b 03             	lea    0x3(%ebx),%ecx
  282700:	85 db                	test   %ebx,%ebx
  282702:	0f 48 c1             	cmovs  %ecx,%eax
  282705:	c1 f8 02             	sar    $0x2,%eax
  282708:	89 c6                	mov    %eax,%esi
				for(by=by0;by<by1;by++)
  28270a:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  28270d:	0f 8e e5 00 00 00    	jle    2827f8 <sheet_refreshsub2+0x1f7>
				{

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
  282713:	89 f9                	mov    %edi,%ecx
  282715:	03 4a 10             	add    0x10(%edx),%ecx
  282718:	8b 45 08             	mov    0x8(%ebp),%eax
  28271b:	0f af 48 08          	imul   0x8(%eax),%ecx
  28271f:	03 4d e4             	add    -0x1c(%ebp),%ecx
					int *q = (int *) &buf[by*sht->bxsize+bx0];
  282722:	89 fb                	mov    %edi,%ebx
  282724:	0f af 5a 04          	imul   0x4(%edx),%ebx
  282728:	03 5d d8             	add    -0x28(%ebp),%ebx

					for(bx=0;bx<bx1;bx++)
  28272b:	85 f6                	test   %esi,%esi
  28272d:	7e 1e                	jle    28274d <sheet_refreshsub2+0x14c>
  28272f:	b8 00 00 00 00       	mov    $0x0,%eax
					{
						p[bx]=q[bx];
  282734:	03 5d ec             	add    -0x14(%ebp),%ebx
  282737:	03 4d e8             	add    -0x18(%ebp),%ecx
  28273a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28273d:	8b 14 83             	mov    (%ebx,%eax,4),%edx
  282740:	89 14 81             	mov    %edx,(%ecx,%eax,4)

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
					int *q = (int *) &buf[by*sht->bxsize+bx0];

					for(bx=0;bx<bx1;bx++)
  282743:	83 c0 01             	add    $0x1,%eax
  282746:	39 c6                	cmp    %eax,%esi
  282748:	75 f3                	jne    28273d <sheet_refreshsub2+0x13c>
  28274a:	8b 55 f0             	mov    -0x10(%ebp),%edx
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
				bx1 = (bx1-bx0)/4;
				for(by=by0;by<by1;by++)
  28274d:	83 c7 01             	add    $0x1,%edi
  282750:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282753:	75 be                	jne    282713 <sheet_refreshsub2+0x112>
  282755:	e9 9e 00 00 00       	jmp    2827f8 <sheet_refreshsub2+0x1f7>
			}
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
  28275a:	89 f7                	mov    %esi,%edi
  28275c:	03 7a 10             	add    0x10(%edx),%edi
					for(bx=bx0;bx<bx1;bx++)
  28275f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282762:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282765:	7e 3a                	jle    2827a1 <sheet_refreshsub2+0x1a0>
  282767:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  28276a:	89 7d e0             	mov    %edi,-0x20(%ebp)
					{
						vx = sht->vx0+bx;
						map[vy*ctl->xsize+vx] = buf[by*sht->bxsize+bx];
  28276d:	89 f1                	mov    %esi,%ecx
  28276f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  282772:	0f af 4f 04          	imul   0x4(%edi),%ecx
  282776:	8b 55 ec             	mov    -0x14(%ebp),%edx
  282779:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  28277c:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
  282780:	89 da                	mov    %ebx,%edx
  282782:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282785:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  282788:	0f af 59 08          	imul   0x8(%ecx),%ebx
  28278c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  28278f:	01 c1                	add    %eax,%ecx
  282791:	03 4f 0c             	add    0xc(%edi),%ecx
  282794:	88 14 19             	mov    %dl,(%ecx,%ebx,1)
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
					for(bx=bx0;bx<bx1;bx++)
  282797:	83 c0 01             	add    $0x1,%eax
  28279a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  28279d:	75 ce                	jne    28276d <sheet_refreshsub2+0x16c>
  28279f:	89 fa                	mov    %edi,%edx
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  2827a1:	83 c6 01             	add    $0x1,%esi
  2827a4:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  2827a7:	75 b1                	jne    28275a <sheet_refreshsub2+0x159>
  2827a9:	eb 4d                	jmp    2827f8 <sheet_refreshsub2+0x1f7>
		}
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
  2827ab:	89 f8                	mov    %edi,%eax
  2827ad:	03 42 10             	add    0x10(%edx),%eax
  2827b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				for(bx=bx0;bx<bx1;bx++)
  2827b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2827b6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2827b9:	7e 35                	jle    2827f0 <sheet_refreshsub2+0x1ef>
				{
					vx = sht->vx0+bx;
					c  = buf[by*sht->bxsize+bx];
  2827bb:	89 f9                	mov    %edi,%ecx
  2827bd:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2827c1:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2827c4:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2827c7:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
					if(c!=sht->col_inv)
  2827cb:	0f b6 cb             	movzbl %bl,%ecx
  2827ce:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2827d1:	74 15                	je     2827e8 <sheet_refreshsub2+0x1e7>
						map[vy*ctl->xsize+vx] = c;
  2827d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2827d6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  2827d9:	0f af 71 08          	imul   0x8(%ecx),%esi
  2827dd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2827e0:	01 c1                	add    %eax,%ecx
  2827e2:	03 4a 0c             	add    0xc(%edx),%ecx
  2827e5:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
				for(bx=bx0;bx<bx1;bx++)
  2827e8:	83 c0 01             	add    $0x1,%eax
  2827eb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  2827ee:	75 cb                	jne    2827bb <sheet_refreshsub2+0x1ba>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  2827f0:	83 c7 01             	add    $0x1,%edi
  2827f3:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  2827f6:	75 b3                	jne    2827ab <sheet_refreshsub2+0x1aa>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  2827f8:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
  2827fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2827ff:	8b 7d 08             	mov    0x8(%ebp),%edi
  282802:	39 47 10             	cmp    %eax,0x10(%edi)
  282805:	0f 8d 64 fe ff ff    	jge    28266f <sheet_refreshsub2+0x6e>
				}
			}
		}

	}
	if(((vx1-vx0)&3)==0)
  28280b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  28280e:	2b 45 c4             	sub    -0x3c(%ebp),%eax
  282811:	a8 03                	test   $0x3,%al
  282813:	74 0d                	je     282822 <sheet_refreshsub2+0x221>
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  282815:	8b 7d c8             	mov    -0x38(%ebp),%edi
  282818:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  28281b:	7f 79                	jg     282896 <sheet_refreshsub2+0x295>
  28281d:	e9 8c 00 00 00       	jmp    2828ae <sheet_refreshsub2+0x2ad>
		}

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
  282822:	8d 50 03             	lea    0x3(%eax),%edx
  282825:	85 c0                	test   %eax,%eax
  282827:	0f 48 c2             	cmovs  %edx,%eax
  28282a:	c1 f8 02             	sar    $0x2,%eax
  28282d:	89 c3                	mov    %eax,%ebx
		for(vy=vy0;vy<vy1;vy++)
  28282f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282832:	39 45 cc             	cmp    %eax,-0x34(%ebp)
  282835:	7e 77                	jle    2828ae <sheet_refreshsub2+0x2ad>
  282837:	89 c1                	mov    %eax,%ecx
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
  282839:	8b 45 08             	mov    0x8(%ebp),%eax
  28283c:	89 ca                	mov    %ecx,%edx
  28283e:	0f af 50 08          	imul   0x8(%eax),%edx
  282842:	03 55 c4             	add    -0x3c(%ebp),%edx
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  282845:	85 db                	test   %ebx,%ebx
  282847:	7e 1b                	jle    282864 <sheet_refreshsub2+0x263>
  282849:	b8 00 00 00 00       	mov    $0x0,%eax
				d[vx] = s[vx];
  28284e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  282851:	8d 34 17             	lea    (%edi,%edx,1),%esi
  282854:	03 55 c0             	add    -0x40(%ebp),%edx
  282857:	8b 3c 86             	mov    (%esi,%eax,4),%edi
  28285a:	89 3c 82             	mov    %edi,(%edx,%eax,4)
		for(vy=vy0;vy<vy1;vy++)
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  28285d:	83 c0 01             	add    $0x1,%eax
  282860:	39 c3                	cmp    %eax,%ebx
  282862:	75 f3                	jne    282857 <sheet_refreshsub2+0x256>

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
		for(vy=vy0;vy<vy1;vy++)
  282864:	83 c1 01             	add    $0x1,%ecx
  282867:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28286a:	75 cd                	jne    282839 <sheet_refreshsub2+0x238>
  28286c:	eb 40                	jmp    2828ae <sheet_refreshsub2+0x2ad>
  28286e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  282871:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282874:	0f af 47 08          	imul   0x8(%edi),%eax
  282878:	01 d0                	add    %edx,%eax
  28287a:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  28287e:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
  282881:	83 c2 01             	add    $0x1,%edx
  282884:	3b 55 d0             	cmp    -0x30(%ebp),%edx
  282887:	75 e8                	jne    282871 <sheet_refreshsub2+0x270>
  282889:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  28288c:	83 c1 01             	add    $0x1,%ecx
  28288f:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  282892:	74 1a                	je     2828ae <sheet_refreshsub2+0x2ad>
  282894:	eb 0c                	jmp    2828a2 <sheet_refreshsub2+0x2a1>
  282896:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  282899:	8b 75 e8             	mov    -0x18(%ebp),%esi
  28289c:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  28289f:	8b 7d 08             	mov    0x8(%ebp),%edi
			for(vx=vx0;vx<vx1;vx++)
  2828a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  2828a5:	89 c2                	mov    %eax,%edx
  2828a7:	39 45 d0             	cmp    %eax,-0x30(%ebp)
  2828aa:	7f c2                	jg     28286e <sheet_refreshsub2+0x26d>
  2828ac:	eb de                	jmp    28288c <sheet_refreshsub2+0x28b>
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
	}
}
  2828ae:	83 c4 34             	add    $0x34,%esp
  2828b1:	5b                   	pop    %ebx
  2828b2:	5e                   	pop    %esi
  2828b3:	5f                   	pop    %edi
  2828b4:	5d                   	pop    %ebp
  2828b5:	c3                   	ret    

002828b6 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  2828b6:	55                   	push   %ebp
  2828b7:	89 e5                	mov    %esp,%ebp
  2828b9:	53                   	push   %ebx
  2828ba:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
	struct SHTCTL *ctl = sht->ctl;
	sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  2828bd:	8b 48 10             	mov    0x10(%eax),%ecx
  2828c0:	8b 50 0c             	mov    0xc(%eax),%edx
  2828c3:	ff 70 18             	pushl  0x18(%eax)
  2828c6:	89 cb                	mov    %ecx,%ebx
  2828c8:	03 5d 18             	add    0x18(%ebp),%ebx
  2828cb:	53                   	push   %ebx
  2828cc:	89 d3                	mov    %edx,%ebx
  2828ce:	03 5d 14             	add    0x14(%ebp),%ebx
  2828d1:	53                   	push   %ebx
  2828d2:	03 4d 10             	add    0x10(%ebp),%ecx
  2828d5:	51                   	push   %ecx
  2828d6:	03 55 0c             	add    0xc(%ebp),%edx
  2828d9:	52                   	push   %edx
  2828da:	ff 70 20             	pushl  0x20(%eax)
  2828dd:	e8 1f fd ff ff       	call   282601 <sheet_refreshsub2>
	//}
	return;
  2828e2:	83 c4 18             	add    $0x18,%esp
}
  2828e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2828e8:	c9                   	leave  
  2828e9:	c3                   	ret    

002828ea <sheet_updown>:
}


//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  2828ea:	55                   	push   %ebp
  2828eb:	89 e5                	mov    %esp,%ebp
  2828ed:	57                   	push   %edi
  2828ee:	56                   	push   %esi
  2828ef:	53                   	push   %ebx
  2828f0:	8b 75 08             	mov    0x8(%ebp),%esi
  2828f3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  2828f6:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  2828f9:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  2828fc:	8b 79 10             	mov    0x10(%ecx),%edi
  2828ff:	8d 57 01             	lea    0x1(%edi),%edx
  282902:	39 da                	cmp    %ebx,%edx
  282904:	0f 4f d3             	cmovg  %ebx,%edx
  282907:	85 d2                	test   %edx,%edx
  282909:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  28290e:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282911:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282914:	39 d8                	cmp    %ebx,%eax
  282916:	7e 59                	jle    282971 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282918:	85 db                	test   %ebx,%ebx
  28291a:	79 09                	jns    282925 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28291c:	8b 59 10             	mov    0x10(%ecx),%ebx
  28291f:	39 d8                	cmp    %ebx,%eax
  282921:	7c 1c                	jl     28293f <sheet_updown+0x55>
  282923:	eb 31                	jmp    282956 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282925:	8d 50 ff             	lea    -0x1(%eax),%edx
  282928:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28292c:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282930:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282933:	89 d0                	mov    %edx,%eax
  282935:	39 d3                	cmp    %edx,%ebx
  282937:	75 ec                	jne    282925 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282939:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28293d:	eb 1d                	jmp    28295c <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28293f:	8d 50 01             	lea    0x1(%eax),%edx
  282942:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282946:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28294a:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28294d:	8b 59 10             	mov    0x10(%ecx),%ebx
  282950:	89 d0                	mov    %edx,%eax
  282952:	39 d3                	cmp    %edx,%ebx
  282954:	7f e9                	jg     28293f <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282956:	83 eb 01             	sub    $0x1,%ebx
  282959:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28295c:	ff 76 08             	pushl  0x8(%esi)
  28295f:	ff 76 04             	pushl  0x4(%esi)
  282962:	6a 00                	push   $0x0
  282964:	6a 00                	push   $0x0
  282966:	56                   	push   %esi
  282967:	e8 4a ff ff ff       	call   2828b6 <sheet_refresh>
  28296c:	83 c4 14             	add    $0x14,%esp
  28296f:	eb 5a                	jmp    2829cb <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282971:	39 d8                	cmp    %ebx,%eax
  282973:	7d 56                	jge    2829cb <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282975:	85 c0                	test   %eax,%eax
  282977:	78 1a                	js     282993 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282979:	8d 50 01             	lea    0x1(%eax),%edx
  28297c:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282980:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282984:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  282987:	89 d0                	mov    %edx,%eax
  282989:	39 d3                	cmp    %edx,%ebx
  28298b:	75 ec                	jne    282979 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  28298d:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282991:	eb 25                	jmp    2829b8 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  282993:	8b 41 10             	mov    0x10(%ecx),%eax
  282996:	8d 50 01             	lea    0x1(%eax),%edx
  282999:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  28299c:	39 d3                	cmp    %edx,%ebx
  28299e:	7d 14                	jge    2829b4 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  2829a0:	8d 42 ff             	lea    -0x1(%edx),%eax
  2829a3:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  2829a7:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  2829ab:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  2829ae:	89 c2                	mov    %eax,%edx
  2829b0:	39 c3                	cmp    %eax,%ebx
  2829b2:	75 ec                	jne    2829a0 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2829b4:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  2829b8:	ff 76 08             	pushl  0x8(%esi)
  2829bb:	ff 76 04             	pushl  0x4(%esi)
  2829be:	6a 00                	push   $0x0
  2829c0:	6a 00                	push   $0x0
  2829c2:	56                   	push   %esi
  2829c3:	e8 ee fe ff ff       	call   2828b6 <sheet_refresh>
  2829c8:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  2829cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2829ce:	5b                   	pop    %ebx
  2829cf:	5e                   	pop    %esi
  2829d0:	5f                   	pop    %edi
  2829d1:	5d                   	pop    %ebp
  2829d2:	c3                   	ret    

002829d3 <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  2829d3:	55                   	push   %ebp
  2829d4:	89 e5                	mov    %esp,%ebp
  2829d6:	57                   	push   %edi
  2829d7:	56                   	push   %esi
  2829d8:	53                   	push   %ebx
  2829d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2829dc:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  2829df:	8b 43 0c             	mov    0xc(%ebx),%eax
  2829e2:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  2829e5:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2829e8:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  2829eb:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  2829ee:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  2829f2:	78 36                	js     282a2a <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  2829f4:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  2829f7:	6a 00                	push   $0x0
  2829f9:	89 d1                	mov    %edx,%ecx
  2829fb:	03 4b 08             	add    0x8(%ebx),%ecx
  2829fe:	51                   	push   %ecx
  2829ff:	89 c1                	mov    %eax,%ecx
  282a01:	03 4b 04             	add    0x4(%ebx),%ecx
  282a04:	51                   	push   %ecx
  282a05:	52                   	push   %edx
  282a06:	50                   	push   %eax
  282a07:	57                   	push   %edi
  282a08:	e8 f4 fb ff ff       	call   282601 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  282a0d:	ff 73 18             	pushl  0x18(%ebx)
  282a10:	89 f0                	mov    %esi,%eax
  282a12:	03 43 08             	add    0x8(%ebx),%eax
  282a15:	50                   	push   %eax
  282a16:	8b 45 0c             	mov    0xc(%ebp),%eax
  282a19:	03 43 04             	add    0x4(%ebx),%eax
  282a1c:	50                   	push   %eax
  282a1d:	56                   	push   %esi
  282a1e:	ff 75 0c             	pushl  0xc(%ebp)
  282a21:	57                   	push   %edi
  282a22:	e8 da fb ff ff       	call   282601 <sheet_refreshsub2>
  282a27:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  282a2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282a2d:	5b                   	pop    %ebx
  282a2e:	5e                   	pop    %esi
  282a2f:	5f                   	pop    %edi
  282a30:	5d                   	pop    %ebp
  282a31:	c3                   	ret    

00282a32 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282a32:	55                   	push   %ebp
  282a33:	89 e5                	mov    %esp,%ebp
  282a35:	53                   	push   %ebx
  282a36:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282a39:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a3d:	78 0b                	js     282a4a <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282a3f:	6a ff                	push   $0xffffffff
  282a41:	53                   	push   %ebx
  282a42:	e8 a3 fe ff ff       	call   2828ea <sheet_updown>
  282a47:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  282a4a:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282a51:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282a54:	c9                   	leave  
  282a55:	c3                   	ret    

00282a56 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282a56:	55                   	push   %ebp
  282a57:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  282a59:	80 3d f0 7a 28 00 00 	cmpb   $0x0,0x287af0
  282a60:	74 11                	je     282a73 <timer_alloc+0x1d>
  282a62:	ba 04 7b 28 00       	mov    $0x287b04,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a67:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  282a6c:	80 3a 00             	cmpb   $0x0,(%edx)
  282a6f:	75 2b                	jne    282a9c <timer_alloc+0x46>
  282a71:	eb 05                	jmp    282a78 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a73:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282a78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282a7f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282a82:	8d 0c 8d e0 7a 28 00 	lea    0x287ae0(,%ecx,4),%ecx
  282a89:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  282a8d:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  282a91:	01 d0                	add    %edx,%eax
  282a93:	8d 04 85 e8 7a 28 00 	lea    0x287ae8(,%eax,4),%eax
  282a9a:	eb 12                	jmp    282aae <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a9c:	83 c0 01             	add    $0x1,%eax
  282a9f:	83 c2 14             	add    $0x14,%edx
  282aa2:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282aa7:	75 c3                	jne    282a6c <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282aa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282aae:	5d                   	pop    %ebp
  282aaf:	c3                   	ret    

00282ab0 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282ab0:	55                   	push   %ebp
  282ab1:	89 e5                	mov    %esp,%ebp
  282ab3:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282ab6:	6a 34                	push   $0x34
  282ab8:	6a 43                	push   $0x43
  282aba:	e8 07 e0 ff ff       	call   280ac6 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282abf:	83 c4 08             	add    $0x8,%esp
  282ac2:	68 9c 00 00 00       	push   $0x9c
  282ac7:	6a 40                	push   $0x40
  282ac9:	e8 f8 df ff ff       	call   280ac6 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282ace:	83 c4 08             	add    $0x8,%esp
  282ad1:	6a 2e                	push   $0x2e
  282ad3:	6a 40                	push   $0x40
  282ad5:	e8 ec df ff ff       	call   280ac6 <io_out8>
  282ada:	b8 f0 7a 28 00       	mov    $0x287af0,%eax
  282adf:	ba 00 a2 28 00       	mov    $0x28a200,%edx
  282ae4:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282ae7:	c6 00 00             	movb   $0x0,(%eax)
  282aea:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282aed:	39 d0                	cmp    %edx,%eax
  282aef:	75 f6                	jne    282ae7 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282af1:	e8 60 ff ff ff       	call   282a56 <timer_alloc>
	t->next = 0;
  282af6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282afc:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282b03:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282b07:	a3 f8 a1 28 00       	mov    %eax,0x28a1f8
	timerctl.next = 0xffffffff;
  282b0c:	c7 05 e4 7a 28 00 ff 	movl   $0xffffffff,0x287ae4
  282b13:	ff ff ff 
	return;
}
  282b16:	c9                   	leave  
  282b17:	c3                   	ret    

00282b18 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282b18:	55                   	push   %ebp
  282b19:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282b1b:	8b 45 08             	mov    0x8(%ebp),%eax
  282b1e:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282b22:	5d                   	pop    %ebp
  282b23:	c3                   	ret    

00282b24 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282b24:	55                   	push   %ebp
  282b25:	89 e5                	mov    %esp,%ebp
  282b27:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282b2a:	8b 55 0c             	mov    0xc(%ebp),%edx
  282b2d:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282b30:	8b 55 10             	mov    0x10(%ebp),%edx
  282b33:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282b36:	5d                   	pop    %ebp
  282b37:	c3                   	ret    

00282b38 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282b38:	55                   	push   %ebp
  282b39:	89 e5                	mov    %esp,%ebp
  282b3b:	57                   	push   %edi
  282b3c:	56                   	push   %esi
  282b3d:	53                   	push   %ebx
  282b3e:	83 ec 0c             	sub    $0xc,%esp
  282b41:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282b44:	a1 e0 7a 28 00       	mov    0x287ae0,%eax
  282b49:	03 45 0c             	add    0xc(%ebp),%eax
  282b4c:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282b4f:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282b53:	e8 8d df ff ff       	call   280ae5 <io_load_eflags>
  282b58:	89 c6                	mov    %eax,%esi
	io_cli();
  282b5a:	e8 33 df ff ff       	call   280a92 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282b5f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282b62:	8b 3d f8 a1 28 00    	mov    0x28a1f8,%edi
  282b68:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282b6b:	77 1e                	ja     282b8b <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282b6d:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282b6f:	89 1d f8 a1 28 00    	mov    %ebx,0x28a1f8
		timerctl.next = timer->timeout;
  282b75:	8b 43 04             	mov    0x4(%ebx),%eax
  282b78:	a3 e4 7a 28 00       	mov    %eax,0x287ae4
		io_store_eflags(e);
  282b7d:	83 ec 0c             	sub    $0xc,%esp
  282b80:	56                   	push   %esi
  282b81:	e8 62 df ff ff       	call   280ae8 <io_store_eflags>
		return;
  282b86:	83 c4 10             	add    $0x10,%esp
  282b89:	eb 3e                	jmp    282bc9 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282b8b:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282b8d:	85 d2                	test   %edx,%edx
  282b8f:	74 2c                	je     282bbd <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282b91:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282b94:	77 21                	ja     282bb7 <timer_settime+0x7f>
  282b96:	eb 07                	jmp    282b9f <timer_settime+0x67>
  282b98:	3b 48 04             	cmp    0x4(%eax),%ecx
  282b9b:	77 18                	ja     282bb5 <timer_settime+0x7d>
  282b9d:	eb 04                	jmp    282ba3 <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282b9f:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282ba1:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282ba3:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282ba5:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282ba7:	83 ec 0c             	sub    $0xc,%esp
  282baa:	56                   	push   %esi
  282bab:	e8 38 df ff ff       	call   280ae8 <io_store_eflags>
			return;
  282bb0:	83 c4 10             	add    $0x10,%esp
  282bb3:	eb 14                	jmp    282bc9 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282bb5:	89 c2                	mov    %eax,%edx
  282bb7:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282bb9:	85 c0                	test   %eax,%eax
  282bbb:	75 db                	jne    282b98 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282bbd:	83 ec 0c             	sub    $0xc,%esp
  282bc0:	56                   	push   %esi
  282bc1:	e8 22 df ff ff       	call   280ae8 <io_store_eflags>
	return;
  282bc6:	83 c4 10             	add    $0x10,%esp
}
  282bc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282bcc:	5b                   	pop    %ebx
  282bcd:	5e                   	pop    %esi
  282bce:	5f                   	pop    %edi
  282bcf:	5d                   	pop    %ebp
  282bd0:	c3                   	ret    

00282bd1 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282bd1:	55                   	push   %ebp
  282bd2:	89 e5                	mov    %esp,%ebp
  282bd4:	56                   	push   %esi
  282bd5:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282bd6:	83 ec 08             	sub    $0x8,%esp
  282bd9:	6a 60                	push   $0x60
  282bdb:	6a 20                	push   $0x20
  282bdd:	e8 e4 de ff ff       	call   280ac6 <io_out8>
	timerctl.count ++;
  282be2:	a1 e0 7a 28 00       	mov    0x287ae0,%eax
  282be7:	8d 50 01             	lea    0x1(%eax),%edx
  282bea:	89 15 e0 7a 28 00    	mov    %edx,0x287ae0
	
	if(timerctl.count >= timerctl.next)
  282bf0:	83 c4 10             	add    $0x10,%esp
  282bf3:	3b 15 e4 7a 28 00    	cmp    0x287ae4,%edx
  282bf9:	72 69                	jb     282c64 <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282bfb:	8b 1d f8 a1 28 00    	mov    0x28a1f8,%ebx
		while(t)
  282c01:	85 db                	test   %ebx,%ebx
  282c03:	75 46                	jne    282c4b <inthandler20+0x7a>
  282c05:	eb 5d                	jmp    282c64 <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282c07:	8b 43 04             	mov    0x4(%ebx),%eax
  282c0a:	3b 05 e0 7a 28 00    	cmp    0x287ae0,%eax
  282c10:	77 2c                	ja     282c3e <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282c12:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282c16:	39 1d 00 a2 28 00    	cmp    %ebx,0x28a200
  282c1c:	74 13                	je     282c31 <inthandler20+0x60>
  282c1e:	83 ec 08             	sub    $0x8,%esp
  282c21:	ff 73 10             	pushl  0x10(%ebx)
  282c24:	ff 73 0c             	pushl  0xc(%ebx)
  282c27:	e8 5d ef ff ff       	call   281b89 <fifo32_put>
  282c2c:	83 c4 10             	add    $0x10,%esp
  282c2f:	eb 05                	jmp    282c36 <inthandler20+0x65>
				else ts=1;
  282c31:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282c36:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282c38:	85 db                	test   %ebx,%ebx
  282c3a:	75 cb                	jne    282c07 <inthandler20+0x36>
  282c3c:	eb 1b                	jmp    282c59 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282c3e:	a3 e4 7a 28 00       	mov    %eax,0x287ae4
				timerctl.t0 = t;
  282c43:	89 1d f8 a1 28 00    	mov    %ebx,0x28a1f8
				break;
  282c49:	eb 0e                	jmp    282c59 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282c4b:	8b 43 04             	mov    0x4(%ebx),%eax
  282c4e:	be 00 00 00 00       	mov    $0x0,%esi
  282c53:	39 c2                	cmp    %eax,%edx
  282c55:	73 bb                	jae    282c12 <inthandler20+0x41>
  282c57:	eb e5                	jmp    282c3e <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282c59:	89 f0                	mov    %esi,%eax
  282c5b:	84 c0                	test   %al,%al
  282c5d:	74 05                	je     282c64 <inthandler20+0x93>
  282c5f:	e8 ef 04 00 00       	call   283153 <task_switch>
	return;
}
  282c64:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282c67:	5b                   	pop    %ebx
  282c68:	5e                   	pop    %esi
  282c69:	5d                   	pop    %ebp
  282c6a:	c3                   	ret    

00282c6b <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282c6b:	55                   	push   %ebp
  282c6c:	89 e5                	mov    %esp,%ebp
  282c6e:	56                   	push   %esi
  282c6f:	53                   	push   %ebx
  282c70:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282c73:	e8 6d de ff ff       	call   280ae5 <io_load_eflags>
  282c78:	89 c6                	mov    %eax,%esi
	io_cli();
  282c7a:	e8 13 de ff ff       	call   280a92 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282c7f:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282c83:	75 3e                	jne    282cc3 <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282c85:	8b 15 f8 a1 28 00    	mov    0x28a1f8,%edx
  282c8b:	39 d3                	cmp    %edx,%ebx
  282c8d:	75 13                	jne    282ca2 <timer_cancel+0x37>
		{
			t = timer->next;
  282c8f:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282c91:	a3 f8 a1 28 00       	mov    %eax,0x28a1f8
			timerctl.next = t->timeout;
  282c96:	8b 40 04             	mov    0x4(%eax),%eax
  282c99:	a3 e4 7a 28 00       	mov    %eax,0x287ae4
  282c9e:	eb 0c                	jmp    282cac <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282ca0:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282ca2:	8b 02                	mov    (%edx),%eax
  282ca4:	39 c3                	cmp    %eax,%ebx
  282ca6:	75 f8                	jne    282ca0 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282ca8:	8b 03                	mov    (%ebx),%eax
  282caa:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282cac:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282cb0:	83 ec 0c             	sub    $0xc,%esp
  282cb3:	56                   	push   %esi
  282cb4:	e8 2f de ff ff       	call   280ae8 <io_store_eflags>
		return 1;
  282cb9:	83 c4 10             	add    $0x10,%esp
  282cbc:	b8 01 00 00 00       	mov    $0x1,%eax
  282cc1:	eb 11                	jmp    282cd4 <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282cc3:	83 ec 0c             	sub    $0xc,%esp
  282cc6:	56                   	push   %esi
  282cc7:	e8 1c de ff ff       	call   280ae8 <io_store_eflags>
	return 0;
  282ccc:	83 c4 10             	add    $0x10,%esp
  282ccf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282cd4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282cd7:	5b                   	pop    %ebx
  282cd8:	5e                   	pop    %esi
  282cd9:	5d                   	pop    %ebp
  282cda:	c3                   	ret    

00282cdb <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282cdb:	55                   	push   %ebp
  282cdc:	89 e5                	mov    %esp,%ebp
  282cde:	57                   	push   %edi
  282cdf:	56                   	push   %esi
  282ce0:	53                   	push   %ebx
  282ce1:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282ce4:	e8 fc dd ff ff       	call   280ae5 <io_load_eflags>
  282ce9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282cec:	e8 a1 dd ff ff       	call   280a92 <io_cli>
  282cf1:	bb e8 7a 28 00       	mov    $0x287ae8,%ebx
  282cf6:	bf f8 a1 28 00       	mov    $0x28a1f8,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282cfb:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282cff:	74 1e                	je     282d1f <timer_cancelall+0x44>
  282d01:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282d05:	74 18                	je     282d1f <timer_cancelall+0x44>
  282d07:	8b 45 08             	mov    0x8(%ebp),%eax
  282d0a:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282d0d:	75 10                	jne    282d1f <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282d0f:	83 ec 0c             	sub    $0xc,%esp
  282d12:	53                   	push   %ebx
  282d13:	e8 53 ff ff ff       	call   282c6b <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282d18:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282d1c:	83 c4 10             	add    $0x10,%esp
  282d1f:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282d22:	39 fb                	cmp    %edi,%ebx
  282d24:	75 d5                	jne    282cfb <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282d26:	83 ec 0c             	sub    $0xc,%esp
  282d29:	ff 75 e4             	pushl  -0x1c(%ebp)
  282d2c:	e8 b7 dd ff ff       	call   280ae8 <io_store_eflags>
	return;
  282d31:	83 c4 10             	add    $0x10,%esp
}
  282d34:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282d37:	5b                   	pop    %ebx
  282d38:	5e                   	pop    %esi
  282d39:	5f                   	pop    %edi
  282d3a:	5d                   	pop    %ebp
  282d3b:	c3                   	ret    
  282d3c:	66 90                	xchg   %ax,%ax
  282d3e:	66 90                	xchg   %ax,%ax

00282d40 <load_tr>:
  282d40:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282d45:	c3                   	ret    

00282d46 <farjmp>:
  282d46:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282d4a:	c3                   	ret    

00282d4b <farcall>:
  282d4b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282d4f:	c3                   	ret    

00282d50 <asm_end_app>:
  282d50:	8b 20                	mov    (%eax),%esp
  282d52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282d59:	61                   	popa   
  282d5a:	c3                   	ret    

00282d5b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282d5b:	55                   	push   %ebp
  282d5c:	89 e5                	mov    %esp,%ebp
  282d5e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282d61:	e8 2a dd ff ff       	call   280a90 <io_hlt>
  282d66:	eb f9                	jmp    282d61 <task_idle+0x6>

00282d68 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282d68:	55                   	push   %ebp
  282d69:	89 e5                	mov    %esp,%ebp
  282d6b:	56                   	push   %esi
  282d6c:	53                   	push   %ebx
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282d6d:	8b 0d fc a1 28 00    	mov    0x28a1fc,%ecx
  282d73:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282d7a:	74 16                	je     282d92 <task_alloc+0x2a>
  282d7c:	8d 91 9c 10 00 00    	lea    0x109c(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282d82:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282d87:	83 3a 00             	cmpl   $0x0,(%edx)
  282d8a:	0f 85 c2 00 00 00    	jne    282e52 <task_alloc+0xea>
  282d90:	eb 05                	jmp    282d97 <task_alloc+0x2f>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282d92:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282d97:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
  282d9e:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  282da1:	c1 e3 05             	shl    $0x5,%ebx
			task->flags = 1;
  282da4:	89 da                	mov    %ebx,%edx
  282da6:	01 ca                	add    %ecx,%edx
  282da8:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282daf:	00 00 00 
			task->tss.eflags = 0x202;
  282db2:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282db9:	02 00 00 
			task->tss.eax = 0;
  282dbc:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282dc3:	00 00 00 
			task->tss.ecx = 0;
  282dc6:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282dcd:	00 00 00 
			task->tss.edx = 0;
  282dd0:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282dd7:	00 00 00 
			task->tss.ebx = 0;
  282dda:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282de1:	00 00 00 
			task->tss.ebp = 0;
  282de4:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282deb:	00 00 00 
			task->tss.esi = 0;
  282dee:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282df5:	00 00 00 
			task->tss.edi = 0;
  282df8:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282dff:	00 00 00 
			task->tss.es  = 0;
  282e02:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282e09:	00 00 00 
			task->tss.ds  = 0;
  282e0c:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282e13:	00 00 00 
			task->tss.fs  = 0;
  282e16:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282e1d:	00 00 00 
			task->tss.gs  = 0;
  282e20:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282e27:	00 00 00 
			task->tss.ldtr= 0;
  282e2a:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282e31:	00 00 00 
			task->tss.iomap = 0x40000000;
  282e34:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282e3b:	00 00 40 
			task->tss.ss0 = 0;
  282e3e:	c7 84 19 2c 10 00 00 	movl   $0x0,0x102c(%ecx,%ebx,1)
  282e45:	00 00 00 00 
			return task;
  282e49:	8d 84 19 f8 0f 00 00 	lea    0xff8(%ecx,%ebx,1),%eax
  282e50:	eb 19                	jmp    282e6b <task_alloc+0x103>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e52:	83 c0 01             	add    $0x1,%eax
  282e55:	81 c2 a0 00 00 00    	add    $0xa0,%edx
  282e5b:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282e60:	0f 85 21 ff ff ff    	jne    282d87 <task_alloc+0x1f>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282e66:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282e6b:	5b                   	pop    %ebx
  282e6c:	5e                   	pop    %esi
  282e6d:	5d                   	pop    %ebp
  282e6e:	c3                   	ret    

00282e6f <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282e6f:	55                   	push   %ebp
  282e70:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282e72:	8b 15 fc a1 28 00    	mov    0x28a1fc,%edx
  282e78:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282e7a:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282e80:	6b c0 66             	imul   $0x66,%eax,%eax
  282e83:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282e87:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282e8b:	5d                   	pop    %ebp
  282e8c:	c3                   	ret    

00282e8d <task_add>:

void task_add(struct TASK *task)
{
  282e8d:	55                   	push   %ebp
  282e8e:	89 e5                	mov    %esp,%ebp
  282e90:	56                   	push   %esi
  282e91:	53                   	push   %ebx
  282e92:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282e95:	8b 35 fc a1 28 00    	mov    0x28a1fc,%esi
  282e9b:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282e9e:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282ea4:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282ea6:	8b 50 08             	mov    0x8(%eax),%edx
  282ea9:	83 fa 64             	cmp    $0x64,%edx
  282eac:	74 14                	je     282ec2 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282eae:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282eb1:	01 ca                	add    %ecx,%edx
  282eb3:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282eb7:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282ebb:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282ec2:	5b                   	pop    %ebx
  282ec3:	5e                   	pop    %esi
  282ec4:	5d                   	pop    %ebp
  282ec5:	c3                   	ret    

00282ec6 <task_remove>:

void task_remove(struct TASK *task)
{
  282ec6:	55                   	push   %ebp
  282ec7:	89 e5                	mov    %esp,%ebp
  282ec9:	57                   	push   %edi
  282eca:	56                   	push   %esi
  282ecb:	53                   	push   %ebx
  282ecc:	83 ec 04             	sub    $0x4,%esp
  282ecf:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282ed2:	8b 3d fc a1 28 00    	mov    0x28a1fc,%edi
  282ed8:	8b 43 08             	mov    0x8(%ebx),%eax
  282edb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282ede:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282ee4:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282ee6:	8b 4a 08             	mov    0x8(%edx),%ecx
  282ee9:	85 c9                	test   %ecx,%ecx
  282eeb:	7e 1d                	jle    282f0a <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282eed:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282ef0:	74 1f                	je     282f11 <task_remove+0x4b>
  282ef2:	b8 00 00 00 00       	mov    $0x0,%eax
  282ef7:	eb 06                	jmp    282eff <task_remove+0x39>
  282ef9:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282efd:	74 17                	je     282f16 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282eff:	83 c0 01             	add    $0x1,%eax
  282f02:	39 c8                	cmp    %ecx,%eax
  282f04:	75 f3                	jne    282ef9 <task_remove+0x33>
  282f06:	89 c8                	mov    %ecx,%eax
  282f08:	eb 0c                	jmp    282f16 <task_remove+0x50>
  282f0a:	b8 00 00 00 00       	mov    $0x0,%eax
  282f0f:	eb 05                	jmp    282f16 <task_remove+0x50>
  282f11:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282f16:	83 e9 01             	sub    $0x1,%ecx
  282f19:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282f1c:	8b 72 0c             	mov    0xc(%edx),%esi
  282f1f:	39 c6                	cmp    %eax,%esi
  282f21:	7e 06                	jle    282f29 <task_remove+0x63>
	{
		tl->now--;
  282f23:	83 ee 01             	sub    $0x1,%esi
  282f26:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282f29:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282f2c:	7f 07                	jg     282f35 <task_remove+0x6f>
	{
		tl->now = 0;
  282f2e:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282f35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282f3c:	39 42 08             	cmp    %eax,0x8(%edx)
  282f3f:	7e 1b                	jle    282f5c <task_remove+0x96>
  282f41:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282f45:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282f49:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282f4c:	83 c0 01             	add    $0x1,%eax
  282f4f:	8b 19                	mov    (%ecx),%ebx
  282f51:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282f54:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282f57:	39 42 08             	cmp    %eax,0x8(%edx)
  282f5a:	7f f0                	jg     282f4c <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282f5c:	83 c4 04             	add    $0x4,%esp
  282f5f:	5b                   	pop    %ebx
  282f60:	5e                   	pop    %esi
  282f61:	5f                   	pop    %edi
  282f62:	5d                   	pop    %ebp
  282f63:	c3                   	ret    

00282f64 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282f64:	55                   	push   %ebp
  282f65:	89 e5                	mov    %esp,%ebp
  282f67:	56                   	push   %esi
  282f68:	53                   	push   %ebx
  282f69:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282f6c:	8b 75 0c             	mov    0xc(%ebp),%esi
  282f6f:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282f72:	85 f6                	test   %esi,%esi
  282f74:	79 03                	jns    282f79 <task_run+0x15>
  282f76:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282f79:	85 c0                	test   %eax,%eax
  282f7b:	7e 03                	jle    282f80 <task_run+0x1c>
  282f7d:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282f80:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f84:	75 14                	jne    282f9a <task_run+0x36>
  282f86:	3b 73 08             	cmp    0x8(%ebx),%esi
  282f89:	74 1b                	je     282fa6 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282f8b:	53                   	push   %ebx
  282f8c:	e8 35 ff ff ff       	call   282ec6 <task_remove>
	}
	if(task->flags != 2)
  282f91:	83 c4 04             	add    $0x4,%esp
  282f94:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f98:	74 0c                	je     282fa6 <task_run+0x42>
	{
		task->level = level;
  282f9a:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282f9d:	53                   	push   %ebx
  282f9e:	e8 ea fe ff ff       	call   282e8d <task_add>
  282fa3:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282fa6:	a1 fc a1 28 00       	mov    0x28a1fc,%eax
  282fab:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282faf:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282fb2:	5b                   	pop    %ebx
  282fb3:	5e                   	pop    %esi
  282fb4:	5d                   	pop    %ebp
  282fb5:	c3                   	ret    

00282fb6 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282fb6:	55                   	push   %ebp
  282fb7:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282fb9:	8b 0d fc a1 28 00    	mov    0x28a1fc,%ecx
  282fbf:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282fc3:	7f 20                	jg     282fe5 <task_switchsub+0x2f>
  282fc5:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fcb:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282fd0:	83 3a 00             	cmpl   $0x0,(%edx)
  282fd3:	7f 15                	jg     282fea <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fd5:	83 c0 01             	add    $0x1,%eax
  282fd8:	81 c2 98 01 00 00    	add    $0x198,%edx
  282fde:	83 f8 0a             	cmp    $0xa,%eax
  282fe1:	75 ed                	jne    282fd0 <task_switchsub+0x1a>
  282fe3:	eb 05                	jmp    282fea <task_switchsub+0x34>
  282fe5:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282fea:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282fec:	a1 fc a1 28 00       	mov    0x28a1fc,%eax
  282ff1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282ff5:	5d                   	pop    %ebp
  282ff6:	c3                   	ret    

00282ff7 <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  282ff7:	55                   	push   %ebp
  282ff8:	89 e5                	mov    %esp,%ebp
  282ffa:	57                   	push   %edi
  282ffb:	56                   	push   %esi
  282ffc:	53                   	push   %ebx
  282ffd:	83 ec 14             	sub    $0x14,%esp
  283000:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  283003:	68 f8 80 02 00       	push   $0x280f8
  283008:	57                   	push   %edi
  283009:	e8 ff f2 ff ff       	call   28230d <memman_alloc_4k>
  28300e:	a3 fc a1 28 00       	mov    %eax,0x28a1fc
  283013:	83 c4 10             	add    $0x10,%esp
  283016:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  28301b:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  283020:	8b 15 fc a1 28 00    	mov    0x28a1fc,%edx
  283026:	8d 04 9d 00 00 00 00 	lea    0x0(,%ebx,4),%eax
  28302d:	8d 0c 18             	lea    (%eax,%ebx,1),%ecx
  283030:	c1 e1 05             	shl    $0x5,%ecx
  283033:	01 d1                	add    %edx,%ecx
  283035:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  28303c:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  28303f:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  283045:	68 89 00 00 00       	push   $0x89
  28304a:	01 d8                	add    %ebx,%eax
  28304c:	c1 e0 05             	shl    $0x5,%eax
  28304f:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  283056:	50                   	push   %eax
  283057:	6a 67                	push   $0x67
  283059:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  28305f:	50                   	push   %eax
  283060:	e8 cd e3 ff ff       	call   281432 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  283065:	83 c3 01             	add    $0x1,%ebx
  283068:	83 c6 08             	add    $0x8,%esi
  28306b:	83 c4 10             	add    $0x10,%esp
  28306e:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  283074:	75 aa                	jne    283020 <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  283076:	8b 15 fc a1 28 00    	mov    0x28a1fc,%edx
  28307c:	8d 42 08             	lea    0x8(%edx),%eax
  28307f:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  283085:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  28308b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  283092:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  283097:	39 d0                	cmp    %edx,%eax
  283099:	75 ea                	jne    283085 <task_init+0x8e>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  28309b:	e8 c8 fc ff ff       	call   282d68 <task_alloc>
  2830a0:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  2830a2:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  2830a9:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  2830b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  2830b7:	83 ec 0c             	sub    $0xc,%esp
  2830ba:	50                   	push   %eax
  2830bb:	e8 cd fd ff ff       	call   282e8d <task_add>
	
	task_switchsub();
  2830c0:	e8 f1 fe ff ff       	call   282fb6 <task_switchsub>
	load_tr(task->sel);
  2830c5:	83 c4 04             	add    $0x4,%esp
  2830c8:	ff 36                	pushl  (%esi)
  2830ca:	e8 71 fc ff ff       	call   282d40 <load_tr>
	task_timer = timer_alloc();
  2830cf:	e8 82 f9 ff ff       	call   282a56 <timer_alloc>
  2830d4:	a3 00 a2 28 00       	mov    %eax,0x28a200
	timer_settime(task_timer,task->priority);
  2830d9:	83 c4 08             	add    $0x8,%esp
  2830dc:	ff 76 0c             	pushl  0xc(%esi)
  2830df:	50                   	push   %eax
  2830e0:	e8 53 fa ff ff       	call   282b38 <timer_settime>

	struct TASK *idle = task_alloc();
  2830e5:	e8 7e fc ff ff       	call   282d68 <task_alloc>
  2830ea:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  2830ec:	83 c4 08             	add    $0x8,%esp
  2830ef:	68 00 00 01 00       	push   $0x10000
  2830f4:	57                   	push   %edi
  2830f5:	e8 d7 ee ff ff       	call   281fd1 <memman_alloc>
  2830fa:	05 00 00 01 00       	add    $0x10000,%eax
  2830ff:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  283102:	c7 43 4c 5b 2d 00 00 	movl   $0x2d5b,0x4c(%ebx)
	idle->tss.es = 1*8;
  283109:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  283110:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  283117:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  28311e:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283125:	00 00 00 
	idle->tss.fs = 1*8;
  283128:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28312f:	00 00 00 
	idle->tss.gs = 1*8;
  283132:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283139:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  28313c:	83 c4 0c             	add    $0xc,%esp
  28313f:	6a 01                	push   $0x1
  283141:	6a 09                	push   $0x9
  283143:	53                   	push   %ebx
  283144:	e8 1b fe ff ff       	call   282f64 <task_run>
	return task;
}
  283149:	89 f0                	mov    %esi,%eax
  28314b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28314e:	5b                   	pop    %ebx
  28314f:	5e                   	pop    %esi
  283150:	5f                   	pop    %edi
  283151:	5d                   	pop    %ebp
  283152:	c3                   	ret    

00283153 <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  283153:	55                   	push   %ebp
  283154:	89 e5                	mov    %esp,%ebp
  283156:	56                   	push   %esi
  283157:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  283158:	8b 0d fc a1 28 00    	mov    0x28a1fc,%ecx
  28315e:	8b 31                	mov    (%ecx),%esi
  283160:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  283166:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  283168:	8b 50 0c             	mov    0xc(%eax),%edx
  28316b:	6b de 66             	imul   $0x66,%esi,%ebx
  28316e:	01 d3                	add    %edx,%ebx
  283170:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  283174:	83 c2 01             	add    $0x1,%edx
  283177:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  28317a:	3b 50 08             	cmp    0x8(%eax),%edx
  28317d:	75 07                	jne    283186 <task_switch+0x33>
	{
		tl->now = 0;
  28317f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  283186:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  28318a:	75 0c                	jne    283198 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  28318c:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  283192:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  283196:	eb 14                	jmp    2831ac <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  283198:	e8 19 fe ff ff       	call   282fb6 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  28319d:	a1 fc a1 28 00       	mov    0x28a1fc,%eax
  2831a2:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  2831a8:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  2831ac:	8b 50 04             	mov    0x4(%eax),%edx
  2831af:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  2831b3:	83 ec 08             	sub    $0x8,%esp
  2831b6:	ff 76 0c             	pushl  0xc(%esi)
  2831b9:	ff 35 00 a2 28 00    	pushl  0x28a200
  2831bf:	e8 74 f9 ff ff       	call   282b38 <timer_settime>
	if(new_task != now_task)
  2831c4:	83 c4 10             	add    $0x10,%esp
  2831c7:	39 f3                	cmp    %esi,%ebx
  2831c9:	74 0f                	je     2831da <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  2831cb:	83 ec 08             	sub    $0x8,%esp
  2831ce:	ff 36                	pushl  (%esi)
  2831d0:	6a 00                	push   $0x0
  2831d2:	e8 6f fb ff ff       	call   282d46 <farjmp>
  2831d7:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  2831da:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2831dd:	5b                   	pop    %ebx
  2831de:	5e                   	pop    %esi
  2831df:	5d                   	pop    %ebp
  2831e0:	c3                   	ret    

002831e1 <task_sleep>:

void task_sleep(struct TASK *task)
{
  2831e1:	55                   	push   %ebp
  2831e2:	89 e5                	mov    %esp,%ebp
  2831e4:	56                   	push   %esi
  2831e5:	53                   	push   %ebx
  2831e6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  2831e9:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  2831ed:	75 2d                	jne    28321c <task_sleep+0x3b>
	{
		now_task = task_now();
  2831ef:	e8 7b fc ff ff       	call   282e6f <task_now>
  2831f4:	89 c6                	mov    %eax,%esi
		task_remove(task);
  2831f6:	53                   	push   %ebx
  2831f7:	e8 ca fc ff ff       	call   282ec6 <task_remove>
		if(task == now_task)
  2831fc:	83 c4 04             	add    $0x4,%esp
  2831ff:	39 f3                	cmp    %esi,%ebx
  283201:	75 19                	jne    28321c <task_sleep+0x3b>
		{
			task_switchsub();
  283203:	e8 ae fd ff ff       	call   282fb6 <task_switchsub>
			now_task = task_now();
  283208:	e8 62 fc ff ff       	call   282e6f <task_now>
			farjmp(0,now_task->sel);
  28320d:	83 ec 08             	sub    $0x8,%esp
  283210:	ff 30                	pushl  (%eax)
  283212:	6a 00                	push   $0x0
  283214:	e8 2d fb ff ff       	call   282d46 <farjmp>
  283219:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  28321c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28321f:	5b                   	pop    %ebx
  283220:	5e                   	pop    %esi
  283221:	5d                   	pop    %ebp
  283222:	c3                   	ret    

00283223 <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  283223:	55                   	push   %ebp
  283224:	89 e5                	mov    %esp,%ebp
  283226:	57                   	push   %edi
  283227:	56                   	push   %esi
  283228:	53                   	push   %ebx
  283229:	83 ec 5c             	sub    $0x5c,%esp
  28322c:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  28322f:	e8 3b fc ff ff       	call   282e6f <task_now>
  283234:	89 c6                	mov    %eax,%esi
  283236:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  283239:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  28323c:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  283243:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  28324a:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	//*((int *)0x0fec) = (int)&cons; //for api
	task->cons = &cons;
  283251:	8d 5d b4             	lea    -0x4c(%ebp),%ebx
  283254:	89 98 94 00 00 00    	mov    %ebx,0x94(%eax)

	int i;
	cons.timer = timer_alloc();
  28325a:	e8 f7 f7 ff ff       	call   282a56 <timer_alloc>
  28325f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  283262:	83 c6 10             	add    $0x10,%esi
  283265:	83 ec 04             	sub    $0x4,%esp
  283268:	6a 01                	push   $0x1
  28326a:	56                   	push   %esi
  28326b:	50                   	push   %eax
  28326c:	e8 b3 f8 ff ff       	call   282b24 <timer_init>
	timer_settime(cons.timer,50);
  283271:	83 c4 08             	add    $0x8,%esp
  283274:	6a 32                	push   $0x32
  283276:	ff 75 c4             	pushl  -0x3c(%ebp)
  283279:	e8 ba f8 ff ff       	call   282b38 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  28327e:	83 c4 08             	add    $0x8,%esp
  283281:	68 00 2d 00 00       	push   $0x2d00
  283286:	68 00 00 3c 00       	push   $0x3c0000
  28328b:	e8 7d f0 ff ff       	call   28230d <memman_alloc_4k>
  283290:	89 45 a0             	mov    %eax,-0x60(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  283293:	83 c4 08             	add    $0x8,%esp
  283296:	68 00 02 10 00       	push   $0x100200
  28329b:	50                   	push   %eax
  28329c:	e8 59 02 00 00       	call   2834fa <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  2832a1:	83 c4 0c             	add    $0xc,%esp
  2832a4:	6a 01                	push   $0x1
  2832a6:	6a 3e                	push   $0x3e
  2832a8:	53                   	push   %ebx
  2832a9:	e8 ed 05 00 00       	call   28389b <cons_putchar>
  2832ae:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  2832b1:	e8 dc d7 ff ff       	call   280a92 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  2832b6:	83 ec 0c             	sub    $0xc,%esp
  2832b9:	56                   	push   %esi
  2832ba:	e8 77 e9 ff ff       	call   281c36 <fifo32_status>
  2832bf:	83 c4 10             	add    $0x10,%esp
  2832c2:	85 c0                	test   %eax,%eax
  2832c4:	75 15                	jne    2832db <console_task+0xb8>
		{
			task_sleep(task);
  2832c6:	83 ec 0c             	sub    $0xc,%esp
  2832c9:	ff 75 a4             	pushl  -0x5c(%ebp)
  2832cc:	e8 10 ff ff ff       	call   2831e1 <task_sleep>
			io_sti();
  2832d1:	e8 be d7 ff ff       	call   280a94 <io_sti>
  2832d6:	83 c4 10             	add    $0x10,%esp
  2832d9:	eb d6                	jmp    2832b1 <console_task+0x8e>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  2832db:	83 ec 0c             	sub    $0xc,%esp
  2832de:	56                   	push   %esi
  2832df:	e8 17 e9 ff ff       	call   281bfb <fifo32_get>
  2832e4:	89 c3                	mov    %eax,%ebx
			io_sti();
  2832e6:	e8 a9 d7 ff ff       	call   280a94 <io_sti>
			if(i<=1) //for cursor
  2832eb:	83 c4 10             	add    $0x10,%esp
  2832ee:	83 fb 01             	cmp    $0x1,%ebx
  2832f1:	7f 57                	jg     28334a <console_task+0x127>
			{
				if(i!=0)
  2832f3:	85 db                	test   %ebx,%ebx
  2832f5:	74 20                	je     283317 <console_task+0xf4>
				{
					timer_init(cons.timer,&task->fifo,0);
  2832f7:	83 ec 04             	sub    $0x4,%esp
  2832fa:	6a 00                	push   $0x0
  2832fc:	56                   	push   %esi
  2832fd:	ff 75 c4             	pushl  -0x3c(%ebp)
  283300:	e8 1f f8 ff ff       	call   282b24 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  283305:	83 c4 10             	add    $0x10,%esp
  283308:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  28330c:	78 27                	js     283335 <console_task+0x112>
  28330e:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  283315:	eb 1e                	jmp    283335 <console_task+0x112>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  283317:	83 ec 04             	sub    $0x4,%esp
  28331a:	6a 01                	push   $0x1
  28331c:	56                   	push   %esi
  28331d:	ff 75 c4             	pushl  -0x3c(%ebp)
  283320:	e8 ff f7 ff ff       	call   282b24 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  283325:	83 c4 10             	add    $0x10,%esp
  283328:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  28332c:	78 07                	js     283335 <console_task+0x112>
  28332e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  283335:	83 ec 08             	sub    $0x8,%esp
  283338:	6a 32                	push   $0x32
  28333a:	ff 75 c4             	pushl  -0x3c(%ebp)
  28333d:	e8 f6 f7 ff ff       	call   282b38 <timer_settime>
  283342:	83 c4 10             	add    $0x10,%esp
  283345:	e9 5c 01 00 00       	jmp    2834a6 <console_task+0x283>
							
			}
			else if(i == 2) //get show_cursor msg
  28334a:	83 fb 02             	cmp    $0x2,%ebx
  28334d:	75 19                	jne    283368 <console_task+0x145>
			{
				cons.cur_c = COL8_FFFFFF;
  28334f:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
					}
				}
			}
			if(sheet != 0)
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283356:	b8 07 00 00 00       	mov    $0x7,%eax
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(sheet != 0)
  28335b:	85 ff                	test   %edi,%edi
  28335d:	0f 85 52 01 00 00    	jne    2834b5 <console_task+0x292>
  283363:	e9 49 ff ff ff       	jmp    2832b1 <console_task+0x8e>
			}
			else if(i == 2) //get show_cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide_cursor msg
  283368:	83 fb 03             	cmp    $0x3,%ebx
  28336b:	75 36                	jne    2833a3 <console_task+0x180>
			{
				cons.cur_c = -1;
  28336d:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				if(sheet != 0)boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283374:	85 ff                	test   %edi,%edi
  283376:	0f 84 35 ff ff ff    	je     2832b1 <console_task+0x8e>
  28337c:	8b 55 bc             	mov    -0x44(%ebp),%edx
  28337f:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283382:	83 ec 04             	sub    $0x4,%esp
  283385:	8d 4a 0f             	lea    0xf(%edx),%ecx
  283388:	51                   	push   %ecx
  283389:	8d 48 07             	lea    0x7(%eax),%ecx
  28338c:	51                   	push   %ecx
  28338d:	52                   	push   %edx
  28338e:	50                   	push   %eax
  28338f:	6a 00                	push   $0x0
  283391:	ff 77 04             	pushl  0x4(%edi)
  283394:	ff 37                	pushl  (%edi)
  283396:	e8 e6 d8 ff ff       	call   280c81 <boxfill8>
  28339b:	83 c4 20             	add    $0x20,%esp
  28339e:	e9 0b 01 00 00       	jmp    2834ae <console_task+0x28b>
			}
			else if(i == 4) //close button clicked
  2833a3:	83 fb 04             	cmp    $0x4,%ebx
  2833a6:	75 17                	jne    2833bf <console_task+0x19c>
			{
				cmd_exit(&cons,fat);
  2833a8:	83 ec 08             	sub    $0x8,%esp
  2833ab:	ff 75 a0             	pushl  -0x60(%ebp)
  2833ae:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2833b1:	50                   	push   %eax
  2833b2:	e8 2d 08 00 00       	call   283be4 <cmd_exit>
  2833b7:	83 c4 10             	add    $0x10,%esp
  2833ba:	e9 e7 00 00 00       	jmp    2834a6 <console_task+0x283>
			}
			else if(256<=i && i<=511)
  2833bf:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  2833c5:	3d ff 00 00 00       	cmp    $0xff,%eax
  2833ca:	0f 87 d6 00 00 00    	ja     2834a6 <console_task+0x283>
			{
				if(i == 8+256) //back key
  2833d0:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  2833d6:	75 26                	jne    2833fe <console_task+0x1db>
				{
					if(cons.cur_x > 16)
  2833d8:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  2833dc:	0f 8e c4 00 00 00    	jle    2834a6 <console_task+0x283>
					{
						cons_putchar(&cons,' ',0);
  2833e2:	83 ec 04             	sub    $0x4,%esp
  2833e5:	6a 00                	push   $0x0
  2833e7:	6a 20                	push   $0x20
  2833e9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2833ec:	50                   	push   %eax
  2833ed:	e8 a9 04 00 00       	call   28389b <cons_putchar>
						cons.cur_x -= 8;
  2833f2:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  2833f6:	83 c4 10             	add    $0x10,%esp
  2833f9:	e9 a8 00 00 00       	jmp    2834a6 <console_task+0x283>
					}
				}
				else if(i == 10+256) //return key
  2833fe:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  283404:	75 6f                	jne    283475 <console_task+0x252>
				{
					cons_putchar(&cons,' ',0);
  283406:	83 ec 04             	sub    $0x4,%esp
  283409:	6a 00                	push   $0x0
  28340b:	6a 20                	push   $0x20
  28340d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283410:	50                   	push   %eax
  283411:	e8 85 04 00 00       	call   28389b <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  283416:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283419:	8d 42 07             	lea    0x7(%edx),%eax
  28341c:	85 d2                	test   %edx,%edx
  28341e:	0f 49 c2             	cmovns %edx,%eax
  283421:	c1 f8 03             	sar    $0x3,%eax
  283424:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  283429:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28342c:	89 04 24             	mov    %eax,(%esp)
  28342f:	e8 95 03 00 00       	call   2837c9 <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  283434:	ff 75 0c             	pushl  0xc(%ebp)
  283437:	ff 75 a0             	pushl  -0x60(%ebp)
  28343a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28343d:	50                   	push   %eax
  28343e:	8d 45 ca             	lea    -0x36(%ebp),%eax
  283441:	50                   	push   %eax
  283442:	e8 1d 0e 00 00       	call   284264 <cons_runcmd>
					if(sheet == 0)
  283447:	83 c4 20             	add    $0x20,%esp
  28344a:	85 ff                	test   %edi,%edi
  28344c:	75 12                	jne    283460 <console_task+0x23d>
						cmd_exit(&cons,fat);
  28344e:	83 ec 08             	sub    $0x8,%esp
  283451:	ff 75 a0             	pushl  -0x60(%ebp)
  283454:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283457:	50                   	push   %eax
  283458:	e8 87 07 00 00       	call   283be4 <cmd_exit>
  28345d:	83 c4 10             	add    $0x10,%esp
					cons_putchar(&cons,'>',1);
  283460:	83 ec 04             	sub    $0x4,%esp
  283463:	6a 01                	push   $0x1
  283465:	6a 3e                	push   $0x3e
  283467:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28346a:	50                   	push   %eax
  28346b:	e8 2b 04 00 00       	call   28389b <cons_putchar>
  283470:	83 c4 10             	add    $0x10,%esp
  283473:	eb 31                	jmp    2834a6 <console_task+0x283>
				}
				else
				{
					if(cons.cur_x<240)
  283475:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283478:	3d ef 00 00 00       	cmp    $0xef,%eax
  28347d:	7f 27                	jg     2834a6 <console_task+0x283>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  28347f:	8d 50 07             	lea    0x7(%eax),%edx
  283482:	85 c0                	test   %eax,%eax
  283484:	0f 48 c2             	cmovs  %edx,%eax
  283487:	c1 f8 03             	sar    $0x3,%eax
  28348a:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  28348e:	83 ec 04             	sub    $0x4,%esp
  283491:	6a 01                	push   $0x1
  283493:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  283499:	53                   	push   %ebx
  28349a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28349d:	50                   	push   %eax
  28349e:	e8 f8 03 00 00       	call   28389b <cons_putchar>
  2834a3:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(sheet != 0)
  2834a6:	85 ff                	test   %edi,%edi
  2834a8:	0f 84 03 fe ff ff    	je     2832b1 <console_task+0x8e>
			{
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2834ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
  2834b1:	85 c0                	test   %eax,%eax
  2834b3:	78 24                	js     2834d9 <console_task+0x2b6>
  2834b5:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  2834b8:	8b 55 b8             	mov    -0x48(%ebp),%edx
  2834bb:	83 ec 04             	sub    $0x4,%esp
  2834be:	8d 59 0f             	lea    0xf(%ecx),%ebx
  2834c1:	53                   	push   %ebx
  2834c2:	8d 5a 07             	lea    0x7(%edx),%ebx
  2834c5:	53                   	push   %ebx
  2834c6:	51                   	push   %ecx
  2834c7:	52                   	push   %edx
  2834c8:	0f b6 c0             	movzbl %al,%eax
  2834cb:	50                   	push   %eax
  2834cc:	ff 77 04             	pushl  0x4(%edi)
  2834cf:	ff 37                	pushl  (%edi)
  2834d1:	e8 ab d7 ff ff       	call   280c81 <boxfill8>
  2834d6:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  2834d9:	8b 55 bc             	mov    -0x44(%ebp),%edx
  2834dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
  2834df:	83 ec 0c             	sub    $0xc,%esp
  2834e2:	8d 4a 10             	lea    0x10(%edx),%ecx
  2834e5:	51                   	push   %ecx
  2834e6:	8d 48 08             	lea    0x8(%eax),%ecx
  2834e9:	51                   	push   %ecx
  2834ea:	52                   	push   %edx
  2834eb:	50                   	push   %eax
  2834ec:	57                   	push   %edi
  2834ed:	e8 c4 f3 ff ff       	call   2828b6 <sheet_refresh>
  2834f2:	83 c4 20             	add    $0x20,%esp
  2834f5:	e9 b7 fd ff ff       	jmp    2832b1 <console_task+0x8e>

002834fa <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2834fa:	55                   	push   %ebp
  2834fb:	89 e5                	mov    %esp,%ebp
  2834fd:	53                   	push   %ebx
  2834fe:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  283501:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  283508:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28350f:	e9 87 00 00 00       	jmp    28359b <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  283514:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283517:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28351e:	8b 45 08             	mov    0x8(%ebp),%eax
  283521:	01 d0                	add    %edx,%eax
  283523:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  283526:	8b 55 0c             	mov    0xc(%ebp),%edx
  283529:	01 ca                	add    %ecx,%edx
  28352b:	0f b6 12             	movzbl (%edx),%edx
  28352e:	0f b6 d2             	movzbl %dl,%edx
  283531:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  283534:	8d 59 01             	lea    0x1(%ecx),%ebx
  283537:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28353a:	01 d9                	add    %ebx,%ecx
  28353c:	0f b6 09             	movzbl (%ecx),%ecx
  28353f:	0f b6 c9             	movzbl %cl,%ecx
  283542:	c1 e1 08             	shl    $0x8,%ecx
  283545:	09 ca                	or     %ecx,%edx
  283547:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  28354d:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  28354f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283552:	83 c0 01             	add    $0x1,%eax
  283555:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28355c:	8b 45 08             	mov    0x8(%ebp),%eax
  28355f:	01 d0                	add    %edx,%eax
  283561:	8b 55 f4             	mov    -0xc(%ebp),%edx
  283564:	8d 4a 01             	lea    0x1(%edx),%ecx
  283567:	8b 55 0c             	mov    0xc(%ebp),%edx
  28356a:	01 ca                	add    %ecx,%edx
  28356c:	0f b6 12             	movzbl (%edx),%edx
  28356f:	c0 ea 04             	shr    $0x4,%dl
  283572:	0f b6 d2             	movzbl %dl,%edx
  283575:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  283578:	8d 59 02             	lea    0x2(%ecx),%ebx
  28357b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28357e:	01 d9                	add    %ebx,%ecx
  283580:	0f b6 09             	movzbl (%ecx),%ecx
  283583:	0f b6 c9             	movzbl %cl,%ecx
  283586:	c1 e1 04             	shl    $0x4,%ecx
  283589:	09 ca                	or     %ecx,%edx
  28358b:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283591:	89 10                	mov    %edx,(%eax)
		j+=3;
  283593:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  283597:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  28359b:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  2835a2:	0f 8e 6c ff ff ff    	jle    283514 <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  2835a8:	90                   	nop
}
  2835a9:	83 c4 10             	add    $0x10,%esp
  2835ac:	5b                   	pop    %ebx
  2835ad:	5d                   	pop    %ebp
  2835ae:	c3                   	ret    

002835af <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  2835af:	55                   	push   %ebp
  2835b0:	89 e5                	mov    %esp,%ebp
  2835b2:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  2835b5:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  2835bc:	7f 38                	jg     2835f6 <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  2835be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2835c5:	eb 25                	jmp    2835ec <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  2835c7:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2835ca:	8b 45 10             	mov    0x10(%ebp),%eax
  2835cd:	01 c2                	add    %eax,%edx
  2835cf:	8b 45 08             	mov    0x8(%ebp),%eax
  2835d2:	c1 e0 09             	shl    $0x9,%eax
  2835d5:	89 c1                	mov    %eax,%ecx
  2835d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2835da:	01 c8                	add    %ecx,%eax
  2835dc:	89 c1                	mov    %eax,%ecx
  2835de:	8b 45 18             	mov    0x18(%ebp),%eax
  2835e1:	01 c8                	add    %ecx,%eax
  2835e3:	0f b6 00             	movzbl (%eax),%eax
  2835e6:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  2835e8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2835ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2835ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2835f2:	7c d3                	jl     2835c7 <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  2835f4:	eb 5e                	jmp    283654 <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2835f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2835fd:	eb 25                	jmp    283624 <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2835ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283602:	8b 45 10             	mov    0x10(%ebp),%eax
  283605:	01 c2                	add    %eax,%edx
  283607:	8b 45 08             	mov    0x8(%ebp),%eax
  28360a:	c1 e0 09             	shl    $0x9,%eax
  28360d:	89 c1                	mov    %eax,%ecx
  28360f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283612:	01 c8                	add    %ecx,%eax
  283614:	89 c1                	mov    %eax,%ecx
  283616:	8b 45 18             	mov    0x18(%ebp),%eax
  283619:	01 c8                	add    %ecx,%eax
  28361b:	0f b6 00             	movzbl (%eax),%eax
  28361e:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  283620:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283624:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  28362b:	7e d2                	jle    2835ff <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  28362d:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  283634:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  28363b:	8b 45 08             	mov    0x8(%ebp),%eax
  28363e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283645:	8b 45 14             	mov    0x14(%ebp),%eax
  283648:	01 d0                	add    %edx,%eax
  28364a:	8b 00                	mov    (%eax),%eax
  28364c:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  28364f:	e9 61 ff ff ff       	jmp    2835b5 <file_loadfile+0x6>
	return;
}
  283654:	c9                   	leave  
  283655:	c3                   	ret    

00283656 <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  283656:	55                   	push   %ebp
  283657:	89 e5                	mov    %esp,%ebp
  283659:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  28365c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283663:	eb 0f                	jmp    283674 <file_search+0x1e>
	{
		s[j] = ' ';
  283665:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283668:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28366b:	01 d0                	add    %edx,%eax
  28366d:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283670:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283674:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283678:	7e eb                	jle    283665 <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  28367a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283681:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283688:	e9 83 00 00 00       	jmp    283710 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  28368d:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283691:	7e 0a                	jle    28369d <file_search+0x47>
  283693:	b8 00 00 00 00       	mov    $0x0,%eax
  283698:	e9 2a 01 00 00       	jmp    2837c7 <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  28369d:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2836a0:	8b 45 08             	mov    0x8(%ebp),%eax
  2836a3:	01 d0                	add    %edx,%eax
  2836a5:	0f b6 00             	movzbl (%eax),%eax
  2836a8:	3c 2e                	cmp    $0x2e,%al
  2836aa:	75 0f                	jne    2836bb <file_search+0x65>
  2836ac:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  2836b0:	7f 09                	jg     2836bb <file_search+0x65>
			j = 8;
  2836b2:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  2836b9:	eb 51                	jmp    28370c <file_search+0xb6>
		else
		{
			s[j] = name[i];
  2836bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2836be:	8b 45 08             	mov    0x8(%ebp),%eax
  2836c1:	01 d0                	add    %edx,%eax
  2836c3:	0f b6 00             	movzbl (%eax),%eax
  2836c6:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  2836c9:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2836cc:	01 ca                	add    %ecx,%edx
  2836ce:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  2836d0:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2836d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2836d6:	01 d0                	add    %edx,%eax
  2836d8:	0f b6 00             	movzbl (%eax),%eax
  2836db:	3c 60                	cmp    $0x60,%al
  2836dd:	7e 29                	jle    283708 <file_search+0xb2>
  2836df:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2836e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2836e5:	01 d0                	add    %edx,%eax
  2836e7:	0f b6 00             	movzbl (%eax),%eax
  2836ea:	3c 7a                	cmp    $0x7a,%al
  2836ec:	7f 1a                	jg     283708 <file_search+0xb2>
				s[j] -= 0x20;
  2836ee:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2836f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2836f4:	01 d0                	add    %edx,%eax
  2836f6:	0f b6 00             	movzbl (%eax),%eax
  2836f9:	83 e8 20             	sub    $0x20,%eax
  2836fc:	89 c1                	mov    %eax,%ecx
  2836fe:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283701:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283704:	01 d0                	add    %edx,%eax
  283706:	88 08                	mov    %cl,(%eax)
			j++;
  283708:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  28370c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283710:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283713:	8b 45 08             	mov    0x8(%ebp),%eax
  283716:	01 d0                	add    %edx,%eax
  283718:	0f b6 00             	movzbl (%eax),%eax
  28371b:	84 c0                	test   %al,%al
  28371d:	0f 85 6a ff ff ff    	jne    28368d <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  283723:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28372a:	e9 84 00 00 00       	jmp    2837b3 <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  28372f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283732:	c1 e0 06             	shl    $0x6,%eax
  283735:	89 c2                	mov    %eax,%edx
  283737:	8b 45 0c             	mov    0xc(%ebp),%eax
  28373a:	01 d0                	add    %edx,%eax
  28373c:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  283740:	84 c0                	test   %al,%al
  283742:	74 7d                	je     2837c1 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  283744:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283747:	c1 e0 06             	shl    $0x6,%eax
  28374a:	89 c2                	mov    %eax,%edx
  28374c:	8b 45 0c             	mov    0xc(%ebp),%eax
  28374f:	01 d0                	add    %edx,%eax
  283751:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  283755:	0f b6 c0             	movzbl %al,%eax
  283758:	83 e0 18             	and    $0x18,%eax
  28375b:	85 c0                	test   %eax,%eax
  28375d:	75 50                	jne    2837af <file_search+0x159>
		{
			for(j=0;j<11;j++)
  28375f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283766:	eb 31                	jmp    283799 <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  283768:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28376b:	c1 e0 06             	shl    $0x6,%eax
  28376e:	89 c2                	mov    %eax,%edx
  283770:	8b 45 0c             	mov    0xc(%ebp),%eax
  283773:	01 c2                	add    %eax,%edx
  283775:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283778:	01 d0                	add    %edx,%eax
  28377a:	83 c0 20             	add    $0x20,%eax
  28377d:	0f b6 00             	movzbl (%eax),%eax
  283780:	0f b6 d0             	movzbl %al,%edx
  283783:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283786:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283789:	01 c8                	add    %ecx,%eax
  28378b:	0f b6 00             	movzbl (%eax),%eax
  28378e:	0f be c0             	movsbl %al,%eax
  283791:	39 c2                	cmp    %eax,%edx
  283793:	75 19                	jne    2837ae <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  283795:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283799:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28379d:	7e c9                	jle    283768 <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  28379f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837a2:	c1 e0 06             	shl    $0x6,%eax
  2837a5:	89 c2                	mov    %eax,%edx
  2837a7:	8b 45 0c             	mov    0xc(%ebp),%eax
  2837aa:	01 d0                	add    %edx,%eax
  2837ac:	eb 19                	jmp    2837c7 <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  2837ae:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  2837af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2837b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2837b6:	3b 45 10             	cmp    0x10(%ebp),%eax
  2837b9:	0f 8c 70 ff ff ff    	jl     28372f <file_search+0xd9>
  2837bf:	eb 01                	jmp    2837c2 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  2837c1:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  2837c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2837c7:	c9                   	leave  
  2837c8:	c3                   	ret    

002837c9 <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2837c9:	55                   	push   %ebp
  2837ca:	89 e5                	mov    %esp,%ebp
  2837cc:	57                   	push   %edi
  2837cd:	56                   	push   %esi
  2837ce:	53                   	push   %ebx
  2837cf:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  2837d2:	8b 45 08             	mov    0x8(%ebp),%eax
  2837d5:	8b 40 08             	mov    0x8(%eax),%eax
  2837d8:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  2837dd:	7f 0e                	jg     2837ed <cons_newline+0x24>
	{
		cons->cur_y += 16;
  2837df:	83 c0 10             	add    $0x10,%eax
  2837e2:	8b 7d 08             	mov    0x8(%ebp),%edi
  2837e5:	89 47 08             	mov    %eax,0x8(%edi)
  2837e8:	e9 9c 00 00 00       	jmp    283889 <cons_newline+0xc0>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  2837ed:	8b 45 08             	mov    0x8(%ebp),%eax
  2837f0:	8b 18                	mov    (%eax),%ebx
  2837f2:	bf 1c 00 00 00       	mov    $0x1c,%edi
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
  2837f7:	85 db                	test   %ebx,%ebx
  2837f9:	75 3a                	jne    283835 <cons_newline+0x6c>
  2837fb:	e9 89 00 00 00       	jmp    283889 <cons_newline+0xc0>
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  283800:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  283803:	8b 43 04             	mov    0x4(%ebx),%eax
  283806:	8b 75 e0             	mov    -0x20(%ebp),%esi
  283809:	0f af f0             	imul   %eax,%esi
  28380c:	89 d1                	mov    %edx,%ecx
  28380e:	03 0b                	add    (%ebx),%ecx
  283810:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  283814:	0f af c7             	imul   %edi,%eax
  283817:	89 f3                	mov    %esi,%ebx
  283819:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  28381c:	83 c2 01             	add    $0x1,%edx
  28381f:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  283825:	75 d9                	jne    283800 <cons_newline+0x37>
  283827:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
  28382a:	83 c7 01             	add    $0x1,%edi
  28382d:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  283833:	74 33                	je     283868 <cons_newline+0x9f>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  283835:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  28383a:	8d 47 10             	lea    0x10(%edi),%eax
  28383d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  283840:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  283843:	eb bb                	jmp    283800 <cons_newline+0x37>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283845:	89 fa                	mov    %edi,%edx
  283847:	0f af 53 04          	imul   0x4(%ebx),%edx
  28384b:	89 c1                	mov    %eax,%ecx
  28384d:	03 0b                	add    (%ebx),%ecx
  28384f:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  283853:	83 c0 01             	add    $0x1,%eax
  283856:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28385b:	75 e8                	jne    283845 <cons_newline+0x7c>
	else if(sheet != 0)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  28385d:	83 c7 01             	add    $0x1,%edi
  283860:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283866:	74 07                	je     28386f <cons_newline+0xa6>
  283868:	b8 08 00 00 00       	mov    $0x8,%eax
  28386d:	eb d6                	jmp    283845 <cons_newline+0x7c>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  28386f:	83 ec 0c             	sub    $0xc,%esp
  283872:	68 9c 00 00 00       	push   $0x9c
  283877:	68 f8 00 00 00       	push   $0xf8
  28387c:	6a 1c                	push   $0x1c
  28387e:	6a 08                	push   $0x8
  283880:	53                   	push   %ebx
  283881:	e8 30 f0 ff ff       	call   2828b6 <sheet_refresh>
  283886:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  283889:	8b 45 08             	mov    0x8(%ebp),%eax
  28388c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283893:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283896:	5b                   	pop    %ebx
  283897:	5e                   	pop    %esi
  283898:	5f                   	pop    %edi
  283899:	5d                   	pop    %ebp
  28389a:	c3                   	ret    

0028389b <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28389b:	55                   	push   %ebp
  28389c:	89 e5                	mov    %esp,%ebp
  28389e:	56                   	push   %esi
  28389f:	53                   	push   %ebx
  2838a0:	83 ec 10             	sub    $0x10,%esp
  2838a3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2838a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2838a9:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  2838ac:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  2838af:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  2838b3:	3c 09                	cmp    $0x9,%al
  2838b5:	75 4b                	jne    283902 <cons_putchar+0x67>
	{
		//tab
		for(;;)
		{
			if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  2838b7:	8b 03                	mov    (%ebx),%eax
  2838b9:	85 c0                	test   %eax,%eax
  2838bb:	74 1d                	je     2838da <cons_putchar+0x3f>
  2838bd:	83 ec 04             	sub    $0x4,%esp
  2838c0:	6a 01                	push   $0x1
  2838c2:	68 4b 51 28 00       	push   $0x28514b
  2838c7:	6a 00                	push   $0x0
  2838c9:	6a 07                	push   $0x7
  2838cb:	ff 73 08             	pushl  0x8(%ebx)
  2838ce:	ff 73 04             	pushl  0x4(%ebx)
  2838d1:	50                   	push   %eax
  2838d2:	e8 09 d8 ff ff       	call   2810e0 <putfonts8_asc_sht>
  2838d7:	83 c4 20             	add    $0x20,%esp
			cons->cur_x += 8;
  2838da:	8b 43 04             	mov    0x4(%ebx),%eax
  2838dd:	83 c0 08             	add    $0x8,%eax
  2838e0:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  2838e3:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2838e8:	75 0c                	jne    2838f6 <cons_putchar+0x5b>
				cons_newline(cons);
  2838ea:	83 ec 0c             	sub    $0xc,%esp
  2838ed:	53                   	push   %ebx
  2838ee:	e8 d6 fe ff ff       	call   2837c9 <cons_newline>
  2838f3:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  2838f6:	8b 43 04             	mov    0x4(%ebx),%eax
  2838f9:	83 e8 08             	sub    $0x8,%eax
  2838fc:	a8 1f                	test   $0x1f,%al
  2838fe:	75 b7                	jne    2838b7 <cons_putchar+0x1c>
  283900:	eb 5a                	jmp    28395c <cons_putchar+0xc1>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  283902:	3c 0a                	cmp    $0xa,%al
  283904:	75 0e                	jne    283914 <cons_putchar+0x79>
		cons_newline(cons);
  283906:	83 ec 0c             	sub    $0xc,%esp
  283909:	53                   	push   %ebx
  28390a:	e8 ba fe ff ff       	call   2837c9 <cons_newline>
  28390f:	83 c4 10             	add    $0x10,%esp
  283912:	eb 48                	jmp    28395c <cons_putchar+0xc1>
	else if(s[0] == 0x0d) 
  283914:	3c 0d                	cmp    $0xd,%al
  283916:	74 44                	je     28395c <cons_putchar+0xc1>
		;//todo
	else
	{
		if(cons->sht!=0)	putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  283918:	8b 03                	mov    (%ebx),%eax
  28391a:	85 c0                	test   %eax,%eax
  28391c:	74 1c                	je     28393a <cons_putchar+0x9f>
  28391e:	83 ec 04             	sub    $0x4,%esp
  283921:	6a 01                	push   $0x1
  283923:	8d 55 f6             	lea    -0xa(%ebp),%edx
  283926:	52                   	push   %edx
  283927:	6a 00                	push   $0x0
  283929:	6a 07                	push   $0x7
  28392b:	ff 73 08             	pushl  0x8(%ebx)
  28392e:	ff 73 04             	pushl  0x4(%ebx)
  283931:	50                   	push   %eax
  283932:	e8 a9 d7 ff ff       	call   2810e0 <putfonts8_asc_sht>
  283937:	83 c4 20             	add    $0x20,%esp
		if(move != 0)
  28393a:	89 f0                	mov    %esi,%eax
  28393c:	84 c0                	test   %al,%al
  28393e:	74 1c                	je     28395c <cons_putchar+0xc1>
		{
			cons->cur_x += 8;
  283940:	8b 43 04             	mov    0x4(%ebx),%eax
  283943:	83 c0 08             	add    $0x8,%eax
  283946:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  283949:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28394e:	75 0c                	jne    28395c <cons_putchar+0xc1>
				cons_newline(cons);
  283950:	83 ec 0c             	sub    $0xc,%esp
  283953:	53                   	push   %ebx
  283954:	e8 70 fe ff ff       	call   2837c9 <cons_newline>
  283959:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  28395c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  28395f:	5b                   	pop    %ebx
  283960:	5e                   	pop    %esi
  283961:	5d                   	pop    %ebp
  283962:	c3                   	ret    

00283963 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283963:	55                   	push   %ebp
  283964:	89 e5                	mov    %esp,%ebp
  283966:	56                   	push   %esi
  283967:	53                   	push   %ebx
  283968:	83 ec 24             	sub    $0x24,%esp
  28396b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  28396e:	8b 45 0c             	mov    0xc(%ebp),%eax
  283971:	c1 e8 14             	shr    $0x14,%eax
  283974:	50                   	push   %eax
  283975:	68 e0 50 28 00       	push   $0x2850e0
  28397a:	8d 75 da             	lea    -0x26(%ebp),%esi
  28397d:	56                   	push   %esi
  28397e:	e8 1a e0 ff ff       	call   28199d <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283983:	83 c4 0c             	add    $0xc,%esp
  283986:	6a 1e                	push   $0x1e
  283988:	56                   	push   %esi
  283989:	6a 00                	push   $0x0
  28398b:	6a 07                	push   $0x7
  28398d:	ff 73 08             	pushl  0x8(%ebx)
  283990:	6a 08                	push   $0x8
  283992:	ff 33                	pushl  (%ebx)
  283994:	e8 47 d7 ff ff       	call   2810e0 <putfonts8_asc_sht>
	cons_newline(cons);
  283999:	83 c4 14             	add    $0x14,%esp
  28399c:	53                   	push   %ebx
  28399d:	e8 27 fe ff ff       	call   2837c9 <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  2839a2:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  2839a9:	e8 ea e5 ff ff       	call   281f98 <memman_total>
  2839ae:	83 c4 0c             	add    $0xc,%esp
  2839b1:	c1 e8 0a             	shr    $0xa,%eax
  2839b4:	50                   	push   %eax
  2839b5:	68 eb 50 28 00       	push   $0x2850eb
  2839ba:	56                   	push   %esi
  2839bb:	e8 dd df ff ff       	call   28199d <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  2839c0:	83 c4 0c             	add    $0xc,%esp
  2839c3:	6a 1e                	push   $0x1e
  2839c5:	56                   	push   %esi
  2839c6:	6a 00                	push   $0x0
  2839c8:	6a 07                	push   $0x7
  2839ca:	ff 73 08             	pushl  0x8(%ebx)
  2839cd:	6a 08                	push   $0x8
  2839cf:	ff 33                	pushl  (%ebx)
  2839d1:	e8 0a d7 ff ff       	call   2810e0 <putfonts8_asc_sht>
	cons_newline(cons);
  2839d6:	83 c4 14             	add    $0x14,%esp
  2839d9:	53                   	push   %ebx
  2839da:	e8 ea fd ff ff       	call   2837c9 <cons_newline>
	cons_newline(cons);
  2839df:	89 1c 24             	mov    %ebx,(%esp)
  2839e2:	e8 e2 fd ff ff       	call   2837c9 <cons_newline>
	return;
  2839e7:	83 c4 10             	add    $0x10,%esp
}
  2839ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2839ed:	5b                   	pop    %ebx
  2839ee:	5e                   	pop    %esi
  2839ef:	5d                   	pop    %ebp
  2839f0:	c3                   	ret    

002839f1 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  2839f1:	55                   	push   %ebp
  2839f2:	89 e5                	mov    %esp,%ebp
  2839f4:	57                   	push   %edi
  2839f5:	56                   	push   %esi
  2839f6:	53                   	push   %ebx
  2839f7:	83 ec 0c             	sub    $0xc,%esp
  2839fa:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  2839fd:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  2839ff:	be 1c 00 00 00       	mov    $0x1c,%esi
  283a04:	eb 23                	jmp    283a29 <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283a06:	89 f1                	mov    %esi,%ecx
  283a08:	0f af 4a 04          	imul   0x4(%edx),%ecx
  283a0c:	89 c3                	mov    %eax,%ebx
  283a0e:	03 1a                	add    (%edx),%ebx
  283a10:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  283a14:	83 c0 01             	add    $0x1,%eax
  283a17:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283a1c:	75 e8                	jne    283a06 <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283a1e:	83 c6 01             	add    $0x1,%esi
  283a21:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  283a27:	74 07                	je     283a30 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  283a29:	b8 08 00 00 00       	mov    $0x8,%eax
  283a2e:	eb d6                	jmp    283a06 <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283a30:	83 ec 0c             	sub    $0xc,%esp
  283a33:	68 9c 00 00 00       	push   $0x9c
  283a38:	68 f8 00 00 00       	push   $0xf8
  283a3d:	6a 1c                	push   $0x1c
  283a3f:	6a 08                	push   $0x8
  283a41:	52                   	push   %edx
  283a42:	e8 6f ee ff ff       	call   2828b6 <sheet_refresh>
	cons->cur_y = 28;
  283a47:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283a4e:	83 c4 20             	add    $0x20,%esp
}
  283a51:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283a54:	5b                   	pop    %ebx
  283a55:	5e                   	pop    %esi
  283a56:	5f                   	pop    %edi
  283a57:	5d                   	pop    %ebp
  283a58:	c3                   	ret    

00283a59 <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  283a59:	55                   	push   %ebp
  283a5a:	89 e5                	mov    %esp,%ebp
  283a5c:	57                   	push   %edi
  283a5d:	56                   	push   %esi
  283a5e:	53                   	push   %ebx
  283a5f:	83 ec 2c             	sub    $0x2c,%esp
  283a62:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283a65:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283a6c:	84 c0                	test   %al,%al
  283a6e:	0f 84 87 00 00 00    	je     283afb <cmd_dir+0xa2>
  283a74:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283a79:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283a7c:	eb 0b                	jmp    283a89 <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283a7e:	83 c3 40             	add    $0x40,%ebx
  283a81:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283a85:	84 c0                	test   %al,%al
  283a87:	74 72                	je     283afb <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283a89:	3c e5                	cmp    $0xe5,%al
  283a8b:	74 66                	je     283af3 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283a8d:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283a91:	75 60                	jne    283af3 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283a93:	83 ec 04             	sub    $0x4,%esp
  283a96:	ff 73 3c             	pushl  0x3c(%ebx)
  283a99:	68 f5 50 28 00       	push   $0x2850f5
  283a9e:	56                   	push   %esi
  283a9f:	e8 f9 de ff ff       	call   28199d <sprintf>
  283aa4:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283aa7:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283aac:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283ab1:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283ab4:	83 c0 01             	add    $0x1,%eax
  283ab7:	83 f8 08             	cmp    $0x8,%eax
  283aba:	75 f0                	jne    283aac <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  283abc:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283ac0:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283ac3:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283ac7:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  283aca:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  283ace:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283ad1:	83 ec 04             	sub    $0x4,%esp
  283ad4:	6a 1e                	push   $0x1e
  283ad6:	56                   	push   %esi
  283ad7:	6a 00                	push   $0x0
  283ad9:	6a 07                	push   $0x7
  283adb:	ff 77 08             	pushl  0x8(%edi)
  283ade:	6a 08                	push   $0x8
  283ae0:	ff 37                	pushl  (%edi)
  283ae2:	e8 f9 d5 ff ff       	call   2810e0 <putfonts8_asc_sht>
				cons_newline(cons);
  283ae7:	83 c4 14             	add    $0x14,%esp
  283aea:	57                   	push   %edi
  283aeb:	e8 d9 fc ff ff       	call   2837c9 <cons_newline>
  283af0:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283af3:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283af9:	75 83                	jne    283a7e <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  283afb:	83 ec 0c             	sub    $0xc,%esp
  283afe:	57                   	push   %edi
  283aff:	e8 c5 fc ff ff       	call   2837c9 <cons_newline>
	return;
  283b04:	83 c4 10             	add    $0x10,%esp
}
  283b07:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283b0a:	5b                   	pop    %ebx
  283b0b:	5e                   	pop    %esi
  283b0c:	5f                   	pop    %edi
  283b0d:	5d                   	pop    %ebp
  283b0e:	c3                   	ret    

00283b0f <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283b0f:	55                   	push   %ebp
  283b10:	89 e5                	mov    %esp,%ebp
  283b12:	57                   	push   %edi
  283b13:	56                   	push   %esi
  283b14:	53                   	push   %ebx
  283b15:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  283b18:	68 e0 00 00 00       	push   $0xe0
  283b1d:	68 00 26 10 00       	push   $0x102600
  283b22:	8b 45 10             	mov    0x10(%ebp),%eax
  283b25:	83 c0 05             	add    $0x5,%eax
  283b28:	50                   	push   %eax
  283b29:	e8 28 fb ff ff       	call   283656 <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283b2e:	83 c4 10             	add    $0x10,%esp
  283b31:	85 c0                	test   %eax,%eax
  283b33:	74 6e                	je     283ba3 <cmd_type+0x94>
  283b35:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283b37:	83 ec 08             	sub    $0x8,%esp
  283b3a:	ff 70 3c             	pushl  0x3c(%eax)
  283b3d:	68 00 00 3c 00       	push   $0x3c0000
  283b42:	e8 c6 e7 ff ff       	call   28230d <memman_alloc_4k>
  283b47:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283b49:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283b50:	ff 75 0c             	pushl  0xc(%ebp)
  283b53:	50                   	push   %eax
  283b54:	ff 76 3c             	pushl  0x3c(%esi)
  283b57:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283b5b:	50                   	push   %eax
  283b5c:	e8 4e fa ff ff       	call   2835af <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283b61:	8b 46 3c             	mov    0x3c(%esi),%eax
  283b64:	83 c4 20             	add    $0x20,%esp
  283b67:	85 c0                	test   %eax,%eax
  283b69:	74 24                	je     283b8f <cmd_type+0x80>
  283b6b:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283b70:	83 ec 04             	sub    $0x4,%esp
  283b73:	6a 01                	push   $0x1
  283b75:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283b79:	50                   	push   %eax
  283b7a:	ff 75 08             	pushl  0x8(%ebp)
  283b7d:	e8 19 fd ff ff       	call   28389b <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283b82:	83 c3 01             	add    $0x1,%ebx
  283b85:	8b 46 3c             	mov    0x3c(%esi),%eax
  283b88:	83 c4 10             	add    $0x10,%esp
  283b8b:	39 d8                	cmp    %ebx,%eax
  283b8d:	77 e1                	ja     283b70 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283b8f:	83 ec 04             	sub    $0x4,%esp
  283b92:	50                   	push   %eax
  283b93:	57                   	push   %edi
  283b94:	68 00 00 3c 00       	push   $0x3c0000
  283b99:	e8 9b e7 ff ff       	call   282339 <memman_free_4k>
  283b9e:	83 c4 10             	add    $0x10,%esp
  283ba1:	eb 2b                	jmp    283bce <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283ba3:	83 ec 04             	sub    $0x4,%esp
  283ba6:	6a 0f                	push   $0xf
  283ba8:	68 05 51 28 00       	push   $0x285105
  283bad:	6a 00                	push   $0x0
  283baf:	6a 07                	push   $0x7
  283bb1:	8b 45 08             	mov    0x8(%ebp),%eax
  283bb4:	ff 70 08             	pushl  0x8(%eax)
  283bb7:	6a 08                	push   $0x8
  283bb9:	ff 30                	pushl  (%eax)
  283bbb:	e8 20 d5 ff ff       	call   2810e0 <putfonts8_asc_sht>
		cons_newline(cons);
  283bc0:	83 c4 14             	add    $0x14,%esp
  283bc3:	ff 75 08             	pushl  0x8(%ebp)
  283bc6:	e8 fe fb ff ff       	call   2837c9 <cons_newline>
  283bcb:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283bce:	83 ec 0c             	sub    $0xc,%esp
  283bd1:	ff 75 08             	pushl  0x8(%ebp)
  283bd4:	e8 f0 fb ff ff       	call   2837c9 <cons_newline>
	return;
  283bd9:	83 c4 10             	add    $0x10,%esp
}
  283bdc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283bdf:	5b                   	pop    %ebx
  283be0:	5e                   	pop    %esi
  283be1:	5f                   	pop    %edi
  283be2:	5d                   	pop    %ebp
  283be3:	c3                   	ret    

00283be4 <cmd_exit>:
	}
	return 0;
}

void cmd_exit(struct CONSOLE *cons,int *fat)
{
  283be4:	55                   	push   %ebp
  283be5:	89 e5                	mov    %esp,%ebp
  283be7:	57                   	push   %edi
  283be8:	56                   	push   %esi
  283be9:	53                   	push   %ebx
  283bea:	83 ec 0c             	sub    $0xc,%esp
	extern struct TASKCTL *taskctl;
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_now();
  283bed:	e8 7d f2 ff ff       	call   282e6f <task_now>
  283bf2:	89 c3                	mov    %eax,%ebx
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283bf4:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct FIFO32 *fifo = (struct FIFO32 *) *((int *)0x0fec);
  283bfa:	8b 35 ec 0f 00 00    	mov    0xfec,%esi
	timer_cancel(cons->timer);
  283c00:	83 ec 0c             	sub    $0xc,%esp
  283c03:	8b 45 08             	mov    0x8(%ebp),%eax
  283c06:	ff 70 10             	pushl  0x10(%eax)
  283c09:	e8 5d f0 ff ff       	call   282c6b <timer_cancel>
	memman_free_4k(memman,(int)fat,4*2880);
  283c0e:	83 c4 0c             	add    $0xc,%esp
  283c11:	68 00 2d 00 00       	push   $0x2d00
  283c16:	ff 75 0c             	pushl  0xc(%ebp)
  283c19:	68 00 00 3c 00       	push   $0x3c0000
  283c1e:	e8 16 e7 ff ff       	call   282339 <memman_free_4k>
	io_cli();
  283c23:	e8 6a ce ff ff       	call   280a92 <io_cli>
	if(cons->sht != 0)
  283c28:	8b 45 08             	mov    0x8(%ebp),%eax
  283c2b:	8b 00                	mov    (%eax),%eax
  283c2d:	83 c4 10             	add    $0x10,%esp
  283c30:	85 c0                	test   %eax,%eax
  283c32:	74 25                	je     283c59 <cmd_exit+0x75>
		fifo32_put(fifo,cons->sht - shtctl->sheets0 + 768);
  283c34:	83 ec 08             	sub    $0x8,%esp
  283c37:	81 c7 14 04 00 00    	add    $0x414,%edi
  283c3d:	29 f8                	sub    %edi,%eax
  283c3f:	c1 f8 03             	sar    $0x3,%eax
  283c42:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  283c48:	05 00 03 00 00       	add    $0x300,%eax
  283c4d:	50                   	push   %eax
  283c4e:	56                   	push   %esi
  283c4f:	e8 35 df ff ff       	call   281b89 <fifo32_put>
  283c54:	83 c4 10             	add    $0x10,%esp
  283c57:	eb 29                	jmp    283c82 <cmd_exit+0x9e>
	else
		fifo32_put(fifo,task - taskctl->tasks0 + 1024 );
  283c59:	83 ec 08             	sub    $0x8,%esp
  283c5c:	89 d8                	mov    %ebx,%eax
  283c5e:	2b 05 fc a1 28 00    	sub    0x28a1fc,%eax
  283c64:	8d 80 08 f0 ff ff    	lea    -0xff8(%eax),%eax
  283c6a:	c1 f8 05             	sar    $0x5,%eax
  283c6d:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  283c73:	05 00 04 00 00       	add    $0x400,%eax
  283c78:	50                   	push   %eax
  283c79:	56                   	push   %esi
  283c7a:	e8 0a df ff ff       	call   281b89 <fifo32_put>
  283c7f:	83 c4 10             	add    $0x10,%esp
	io_sti();
  283c82:	e8 0d ce ff ff       	call   280a94 <io_sti>
	for(;;)
	{
		task_sleep(task);
  283c87:	83 ec 0c             	sub    $0xc,%esp
  283c8a:	53                   	push   %ebx
  283c8b:	e8 51 f5 ff ff       	call   2831e1 <task_sleep>
  283c90:	83 c4 10             	add    $0x10,%esp
  283c93:	eb f2                	jmp    283c87 <cmd_exit+0xa3>

00283c95 <cons_putstr0>:
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283c95:	55                   	push   %ebp
  283c96:	89 e5                	mov    %esp,%ebp
  283c98:	56                   	push   %esi
  283c99:	53                   	push   %ebx
  283c9a:	8b 75 08             	mov    0x8(%ebp),%esi
  283c9d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283ca0:	0f b6 03             	movzbl (%ebx),%eax
  283ca3:	84 c0                	test   %al,%al
  283ca5:	74 1c                	je     283cc3 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283ca7:	83 ec 04             	sub    $0x4,%esp
  283caa:	6a 01                	push   $0x1
  283cac:	0f be c0             	movsbl %al,%eax
  283caf:	50                   	push   %eax
  283cb0:	56                   	push   %esi
  283cb1:	e8 e5 fb ff ff       	call   28389b <cons_putchar>
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283cb6:	83 c3 01             	add    $0x1,%ebx
  283cb9:	0f b6 03             	movzbl (%ebx),%eax
  283cbc:	83 c4 10             	add    $0x10,%esp
  283cbf:	84 c0                	test   %al,%al
  283cc1:	75 e4                	jne    283ca7 <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283cc3:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283cc6:	5b                   	pop    %ebx
  283cc7:	5e                   	pop    %esi
  283cc8:	5d                   	pop    %ebp
  283cc9:	c3                   	ret    

00283cca <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283cca:	55                   	push   %ebp
  283ccb:	89 e5                	mov    %esp,%ebp
  283ccd:	57                   	push   %edi
  283cce:	56                   	push   %esi
  283ccf:	53                   	push   %ebx
  283cd0:	83 ec 4c             	sub    $0x4c,%esp
  283cd3:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283cd6:	e8 94 f1 ff ff       	call   282e6f <task_now>
  283cdb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283cde:	0f b6 06             	movzbl (%esi),%eax
  283ce1:	3c 20                	cmp    $0x20,%al
  283ce3:	0f 8f 6d 02 00 00    	jg     283f56 <cmd_app+0x28c>
  283ce9:	eb 16                	jmp    283d01 <cmd_app+0x37>
  283ceb:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283cef:	3c 20                	cmp    $0x20,%al
  283cf1:	7e 13                	jle    283d06 <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283cf3:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283cf7:	83 c3 01             	add    $0x1,%ebx
  283cfa:	83 fb 0d             	cmp    $0xd,%ebx
  283cfd:	75 ec                	jne    283ceb <cmd_app+0x21>
  283cff:	eb 05                	jmp    283d06 <cmd_app+0x3c>
  283d01:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283d06:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283d0b:	83 ec 04             	sub    $0x4,%esp
  283d0e:	68 e0 00 00 00       	push   $0xe0
  283d13:	68 00 26 10 00       	push   $0x102600
  283d18:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283d1b:	50                   	push   %eax
  283d1c:	e8 35 f9 ff ff       	call   283656 <file_search>
  283d21:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283d24:	83 c4 10             	add    $0x10,%esp
  283d27:	85 c0                	test   %eax,%eax
  283d29:	75 48                	jne    283d73 <cmd_app+0xa9>
  283d2b:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283d30:	0f 84 2d 02 00 00    	je     283f63 <cmd_app+0x299>
	{
		name[i  ] = '.';
  283d36:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283d3b:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283d40:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283d45:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283d4a:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283d4f:	83 ec 04             	sub    $0x4,%esp
  283d52:	68 e0 00 00 00       	push   $0xe0
  283d57:	68 00 26 10 00       	push   $0x102600
  283d5c:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283d5f:	50                   	push   %eax
  283d60:	e8 f1 f8 ff ff       	call   283656 <file_search>
  283d65:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283d68:	83 c4 10             	add    $0x10,%esp
  283d6b:	85 c0                	test   %eax,%eax
  283d6d:	0f 84 dc 01 00 00    	je     283f4f <cmd_app+0x285>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283d73:	83 ec 08             	sub    $0x8,%esp
  283d76:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283d79:	ff 77 3c             	pushl  0x3c(%edi)
  283d7c:	68 00 00 3c 00       	push   $0x3c0000
  283d81:	e8 87 e5 ff ff       	call   28230d <memman_alloc_4k>
  283d86:	89 c6                	mov    %eax,%esi
  283d88:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283d8b:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283d92:	ff 75 0c             	pushl  0xc(%ebp)
  283d95:	50                   	push   %eax
  283d96:	ff 77 3c             	pushl  0x3c(%edi)
  283d99:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283d9d:	50                   	push   %eax
  283d9e:	e8 0c f8 ff ff       	call   2835af <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283da3:	83 c4 20             	add    $0x20,%esp
  283da6:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283daa:	0f 86 61 01 00 00    	jbe    283f11 <cmd_app+0x247>
  283db0:	83 ec 04             	sub    $0x4,%esp
  283db3:	6a 04                	push   $0x4
  283db5:	68 15 51 28 00       	push   $0x285115
  283dba:	89 f0                	mov    %esi,%eax
  283dbc:	83 c0 04             	add    $0x4,%eax
  283dbf:	50                   	push   %eax
  283dc0:	e8 13 dd ff ff       	call   281ad8 <strncmp>
  283dc5:	83 c4 10             	add    $0x10,%esp
  283dc8:	85 c0                	test   %eax,%eax
  283dca:	0f 85 41 01 00 00    	jne    283f11 <cmd_app+0x247>
  283dd0:	80 3e 00             	cmpb   $0x0,(%esi)
  283dd3:	0f 85 38 01 00 00    	jne    283f11 <cmd_app+0x247>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283dd9:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283ddc:	8b 08                	mov    (%eax),%ecx
			int esp		=	*((int *)(p+0x000c));
  283dde:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283de1:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283de4:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283de7:	83 ec 08             	sub    $0x8,%esp
  283dea:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  283ded:	51                   	push   %ecx
  283dee:	68 00 00 3c 00       	push   $0x3c0000
  283df3:	e8 15 e5 ff ff       	call   28230d <memman_alloc_4k>
  283df8:	89 c2                	mov    %eax,%edx
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
  283dfa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  283dfd:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  283e00:	89 91 98 00 00 00    	mov    %edx,0x98(%ecx)
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283e06:	68 fa 40 00 00       	push   $0x40fa
  283e0b:	ff 75 bc             	pushl  -0x44(%ebp)
  283e0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283e11:	8b 40 3c             	mov    0x3c(%eax),%eax
  283e14:	83 e8 01             	sub    $0x1,%eax
  283e17:	50                   	push   %eax
  283e18:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  283e1b:	8b 11                	mov    (%ecx),%edx
  283e1d:	8d 42 07             	lea    0x7(%edx),%eax
  283e20:	85 d2                	test   %edx,%edx
  283e22:	0f 49 c2             	cmovns %edx,%eax
  283e25:	c1 f8 03             	sar    $0x3,%eax
  283e28:	8d 04 c5 40 1f 27 00 	lea    0x271f40(,%eax,8),%eax
  283e2f:	50                   	push   %eax
  283e30:	e8 fd d5 ff ff       	call   281432 <set_segmdesc>
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
  283e35:	83 c4 20             	add    $0x20,%esp
  283e38:	68 f2 40 00 00       	push   $0x40f2
  283e3d:	ff 75 b4             	pushl  -0x4c(%ebp)
  283e40:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  283e43:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283e46:	50                   	push   %eax
  283e47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283e4a:	8b 10                	mov    (%eax),%edx
  283e4c:	8d 42 07             	lea    0x7(%edx),%eax
  283e4f:	85 d2                	test   %edx,%edx
  283e51:	0f 49 c2             	cmovns %edx,%eax
  283e54:	c1 f8 03             	sar    $0x3,%eax
  283e57:	8d 04 c5 80 3e 27 00 	lea    0x273e80(,%eax,8),%eax
  283e5e:	50                   	push   %eax
  283e5f:	e8 ce d5 ff ff       	call   281432 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283e64:	83 c4 10             	add    $0x10,%esp
  283e67:	85 db                	test   %ebx,%ebx
  283e69:	7e 1b                	jle    283e86 <cmd_app+0x1bc>
  283e6b:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283e70:	03 7d bc             	add    -0x44(%ebp),%edi
  283e73:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283e76:	01 f2                	add    %esi,%edx
  283e78:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283e7c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			q = (char *)memman_alloc_4k(memman,segsiz);
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283e7f:	83 c0 01             	add    $0x1,%eax
  283e82:	39 c3                	cmp    %eax,%ebx
  283e84:	75 f2                	jne    283e78 <cmd_app+0x1ae>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
  283e86:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  283e89:	8b 02                	mov    (%edx),%eax
  283e8b:	83 ec 0c             	sub    $0xc,%esp
  283e8e:	83 c2 30             	add    $0x30,%edx
  283e91:	52                   	push   %edx
  283e92:	8d 90 80 3e 00 00    	lea    0x3e80(%eax),%edx
  283e98:	52                   	push   %edx
  283e99:	56                   	push   %esi
  283e9a:	05 40 1f 00 00       	add    $0x1f40,%eax
  283e9f:	50                   	push   %eax
  283ea0:	6a 1b                	push   $0x1b
  283ea2:	e8 49 05 00 00       	call   2843f0 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283ea7:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283ead:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283eb3:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283eb9:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283ebf:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283ec2:	8b 03                	mov    (%ebx),%eax
  283ec4:	83 e0 11             	and    $0x11,%eax
  283ec7:	83 f8 11             	cmp    $0x11,%eax
  283eca:	75 14                	jne    283ee0 <cmd_app+0x216>
  283ecc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283ecf:	3b 43 08             	cmp    0x8(%ebx),%eax
  283ed2:	75 0c                	jne    283ee0 <cmd_app+0x216>
					sheet_free(sht);
  283ed4:	83 ec 0c             	sub    $0xc,%esp
  283ed7:	56                   	push   %esi
  283ed8:	e8 55 eb ff ff       	call   282a32 <sheet_free>
  283edd:	83 c4 10             	add    $0x10,%esp
  283ee0:	83 c3 28             	add    $0x28,%ebx
  283ee3:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283ee6:	39 f7                	cmp    %esi,%edi
  283ee8:	75 d8                	jne    283ec2 <cmd_app+0x1f8>
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			timer_cancelall(&task->fifo);
  283eea:	83 ec 0c             	sub    $0xc,%esp
  283eed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283ef0:	83 c0 10             	add    $0x10,%eax
  283ef3:	50                   	push   %eax
  283ef4:	e8 e2 ed ff ff       	call   282cdb <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283ef9:	83 c4 0c             	add    $0xc,%esp
  283efc:	ff 75 b8             	pushl  -0x48(%ebp)
  283eff:	ff 75 b4             	pushl  -0x4c(%ebp)
  283f02:	68 00 00 3c 00       	push   $0x3c0000
  283f07:	e8 2d e4 ff ff       	call   282339 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283f0c:	83 c4 10             	add    $0x10,%esp
  283f0f:	eb 13                	jmp    283f24 <cmd_app+0x25a>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283f11:	83 ec 08             	sub    $0x8,%esp
  283f14:	68 1a 51 28 00       	push   $0x28511a
  283f19:	ff 75 08             	pushl  0x8(%ebp)
  283f1c:	e8 74 fd ff ff       	call   283c95 <cons_putstr0>
  283f21:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283f24:	83 ec 04             	sub    $0x4,%esp
  283f27:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283f2a:	ff 70 3c             	pushl  0x3c(%eax)
  283f2d:	ff 75 bc             	pushl  -0x44(%ebp)
  283f30:	68 00 00 3c 00       	push   $0x3c0000
  283f35:	e8 ff e3 ff ff       	call   282339 <memman_free_4k>
		cons_newline(cons);
  283f3a:	83 c4 04             	add    $0x4,%esp
  283f3d:	ff 75 08             	pushl  0x8(%ebp)
  283f40:	e8 84 f8 ff ff       	call   2837c9 <cons_newline>
		return 1;
  283f45:	83 c4 10             	add    $0x10,%esp
  283f48:	b8 01 00 00 00       	mov    $0x1,%eax
  283f4d:	eb 14                	jmp    283f63 <cmd_app+0x299>
	}
	return 0;
  283f4f:	b8 00 00 00 00       	mov    $0x0,%eax
  283f54:	eb 0d                	jmp    283f63 <cmd_app+0x299>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283f56:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283f59:	bb 01 00 00 00       	mov    $0x1,%ebx
  283f5e:	e9 88 fd ff ff       	jmp    283ceb <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283f63:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283f66:	5b                   	pop    %ebx
  283f67:	5e                   	pop    %esi
  283f68:	5f                   	pop    %edi
  283f69:	5d                   	pop    %ebp
  283f6a:	c3                   	ret    

00283f6b <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  283f6b:	55                   	push   %ebp
  283f6c:	89 e5                	mov    %esp,%ebp
  283f6e:	57                   	push   %edi
  283f6f:	56                   	push   %esi
  283f70:	53                   	push   %ebx
  283f71:	83 ec 0c             	sub    $0xc,%esp
  283f74:	8b 7d 08             	mov    0x8(%ebp),%edi
  283f77:	8b 75 0c             	mov    0xc(%ebp),%esi
  283f7a:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  283f7d:	85 c0                	test   %eax,%eax
  283f7f:	7e 1d                	jle    283f9e <cons_putstr1+0x33>
  283f81:	89 f3                	mov    %esi,%ebx
  283f83:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  283f85:	83 ec 04             	sub    $0x4,%esp
  283f88:	6a 01                	push   $0x1
  283f8a:	0f be 03             	movsbl (%ebx),%eax
  283f8d:	50                   	push   %eax
  283f8e:	57                   	push   %edi
  283f8f:	e8 07 f9 ff ff       	call   28389b <cons_putchar>
  283f94:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  283f97:	83 c4 10             	add    $0x10,%esp
  283f9a:	39 f3                	cmp    %esi,%ebx
  283f9c:	75 e7                	jne    283f85 <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  283f9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283fa1:	5b                   	pop    %ebx
  283fa2:	5e                   	pop    %esi
  283fa3:	5f                   	pop    %edi
  283fa4:	5d                   	pop    %ebp
  283fa5:	c3                   	ret    

00283fa6 <open_constask>:

struct TASK *open_constask(struct SHEET *sht,unsigned int memtotal)
{
  283fa6:	55                   	push   %ebp
  283fa7:	89 e5                	mov    %esp,%ebp
  283fa9:	53                   	push   %ebx
  283faa:	83 ec 04             	sub    $0x4,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_alloc();
  283fad:	e8 b6 ed ff ff       	call   282d68 <task_alloc>
  283fb2:	89 c3                	mov    %eax,%ebx
	task->cons_stack = memman_alloc_4k(memman,64*1024);
  283fb4:	83 ec 08             	sub    $0x8,%esp
  283fb7:	68 00 00 01 00       	push   $0x10000
  283fbc:	68 00 00 3c 00       	push   $0x3c0000
  283fc1:	e8 47 e3 ff ff       	call   28230d <memman_alloc_4k>
  283fc6:	89 83 9c 00 00 00    	mov    %eax,0x9c(%ebx)
	task->tss.esp = task->cons_stack+64*1024-12;
  283fcc:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
  283fd2:	89 53 64             	mov    %edx,0x64(%ebx)
	task->tss.eip = (int)&console_task - 0x280000;
  283fd5:	c7 43 4c 23 32 00 00 	movl   $0x3223,0x4c(%ebx)
	task->tss.es = 1*8;
  283fdc:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	task->tss.cs = 3*8;
  283fe3:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	task->tss.ss = 1*8;
  283fea:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	task->tss.ds = 1*8;
  283ff1:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283ff8:	00 00 00 
	task->tss.fs = 1*8;
  283ffb:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  284002:	00 00 00 
	task->tss.gs = 1*8;
  284005:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  28400c:	00 00 00 
	*((int *)(task->tss.esp + 4)) = sht;
  28400f:	8b 55 08             	mov    0x8(%ebp),%edx
  284012:	89 90 f8 ff 00 00    	mov    %edx,0xfff8(%eax)
	*((int *)(task->tss.esp + 8)) = memtotal;
  284018:	8b 43 64             	mov    0x64(%ebx),%eax
  28401b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28401e:	89 50 08             	mov    %edx,0x8(%eax)
	task_run(task,2,2);
  284021:	83 c4 0c             	add    $0xc,%esp
  284024:	6a 02                	push   $0x2
  284026:	6a 02                	push   $0x2
  284028:	53                   	push   %ebx
  284029:	e8 36 ef ff ff       	call   282f64 <task_run>
	int *cons_fifo = memman_alloc_4k(memman,128*4);
  28402e:	83 c4 08             	add    $0x8,%esp
  284031:	68 00 02 00 00       	push   $0x200
  284036:	68 00 00 3c 00       	push   $0x3c0000
  28403b:	e8 cd e2 ff ff       	call   28230d <memman_alloc_4k>
	fifo32_init(&task->fifo,128,cons_fifo,task);
  284040:	53                   	push   %ebx
  284041:	50                   	push   %eax
  284042:	68 80 00 00 00       	push   $0x80
  284047:	8d 43 10             	lea    0x10(%ebx),%eax
  28404a:	50                   	push   %eax
  28404b:	e8 08 db ff ff       	call   281b58 <fifo32_init>
	return task;
}
  284050:	89 d8                	mov    %ebx,%eax
  284052:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284055:	c9                   	leave  
  284056:	c3                   	ret    

00284057 <open_console>:

struct SHEET *open_console(struct SHTCTL *shtctl,unsigned int memtotal)
{
  284057:	55                   	push   %ebp
  284058:	89 e5                	mov    %esp,%ebp
  28405a:	56                   	push   %esi
  28405b:	53                   	push   %ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct SHEET *sht = sheet_alloc(shtctl);
  28405c:	83 ec 0c             	sub    $0xc,%esp
  28405f:	ff 75 08             	pushl  0x8(%ebp)
  284062:	e8 95 e3 ff ff       	call   2823fc <sheet_alloc>
  284067:	89 c3                	mov    %eax,%ebx
	unsigned char *buf = (unsigned char *)memman_alloc_4k(memman,256*165);
  284069:	83 c4 08             	add    $0x8,%esp
  28406c:	68 00 a5 00 00       	push   $0xa500
  284071:	68 00 00 3c 00       	push   $0x3c0000
  284076:	e8 92 e2 ff ff       	call   28230d <memman_alloc_4k>
  28407b:	89 c6                	mov    %eax,%esi
	sheet_setbuf(sht,buf,256,165,-1);
  28407d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  284084:	68 a5 00 00 00       	push   $0xa5
  284089:	68 00 01 00 00       	push   $0x100
  28408e:	50                   	push   %eax
  28408f:	53                   	push   %ebx
  284090:	e8 da e3 ff ff       	call   28246f <sheet_setbuf>
	make_window8(buf,256,165,"console",0);
  284095:	83 c4 14             	add    $0x14,%esp
  284098:	6a 00                	push   $0x0
  28409a:	68 33 51 28 00       	push   $0x285133
  28409f:	68 a5 00 00 00       	push   $0xa5
  2840a4:	68 00 01 00 00       	push   $0x100
  2840a9:	56                   	push   %esi
  2840aa:	e8 d3 ce ff ff       	call   280f82 <make_window8>
	make_textbox8(sht,8,28,240,128,COL8_000000);
  2840af:	83 c4 18             	add    $0x18,%esp
  2840b2:	6a 00                	push   $0x0
  2840b4:	68 80 00 00 00       	push   $0x80
  2840b9:	68 f0 00 00 00       	push   $0xf0
  2840be:	6a 1c                	push   $0x1c
  2840c0:	6a 08                	push   $0x8
  2840c2:	53                   	push   %ebx
  2840c3:	e8 7d d0 ff ff       	call   281145 <make_textbox8>
	sht->task = open_constask(sht,memtotal);
  2840c8:	83 c4 18             	add    $0x18,%esp
  2840cb:	ff 75 0c             	pushl  0xc(%ebp)
  2840ce:	53                   	push   %ebx
  2840cf:	e8 d2 fe ff ff       	call   283fa6 <open_constask>
  2840d4:	89 43 24             	mov    %eax,0x24(%ebx)
	sht->flags |= 0x20;
  2840d7:	83 4b 1c 20          	orl    $0x20,0x1c(%ebx)
	return sht;
}
  2840db:	89 d8                	mov    %ebx,%eax
  2840dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2840e0:	5b                   	pop    %ebx
  2840e1:	5e                   	pop    %esi
  2840e2:	5d                   	pop    %ebp
  2840e3:	c3                   	ret    

002840e4 <close_constask>:

void close_constask(struct TASK *task)
{
  2840e4:	55                   	push   %ebp
  2840e5:	89 e5                	mov    %esp,%ebp
  2840e7:	53                   	push   %ebx
  2840e8:	83 ec 10             	sub    $0x10,%esp
  2840eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	task_sleep(task);
  2840ee:	53                   	push   %ebx
  2840ef:	e8 ed f0 ff ff       	call   2831e1 <task_sleep>
	memman_free_4k(memman,task->cons_stack,64 * 1024);
  2840f4:	83 c4 0c             	add    $0xc,%esp
  2840f7:	68 00 00 01 00       	push   $0x10000
  2840fc:	ff b3 9c 00 00 00    	pushl  0x9c(%ebx)
  284102:	68 00 00 3c 00       	push   $0x3c0000
  284107:	e8 2d e2 ff ff       	call   282339 <memman_free_4k>
	memman_free_4k(memman,(int)task->fifo.buf,128*4);
  28410c:	83 c4 0c             	add    $0xc,%esp
  28410f:	68 00 02 00 00       	push   $0x200
  284114:	ff 73 10             	pushl  0x10(%ebx)
  284117:	68 00 00 3c 00       	push   $0x3c0000
  28411c:	e8 18 e2 ff ff       	call   282339 <memman_free_4k>
	task->flags = 0;
  284121:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
	return;
  284128:	83 c4 10             	add    $0x10,%esp
}
  28412b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28412e:	c9                   	leave  
  28412f:	c3                   	ret    

00284130 <close_console>:

void close_console(struct SHEET *sht)
{
  284130:	55                   	push   %ebp
  284131:	89 e5                	mov    %esp,%ebp
  284133:	56                   	push   %esi
  284134:	53                   	push   %ebx
  284135:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = sht->task;
  284138:	8b 73 24             	mov    0x24(%ebx),%esi
	memman_free_4k(memman,(int)sht->buf,256*165);
  28413b:	83 ec 04             	sub    $0x4,%esp
  28413e:	68 00 a5 00 00       	push   $0xa500
  284143:	ff 33                	pushl  (%ebx)
  284145:	68 00 00 3c 00       	push   $0x3c0000
  28414a:	e8 ea e1 ff ff       	call   282339 <memman_free_4k>
	sheet_free(sht);
  28414f:	89 1c 24             	mov    %ebx,(%esp)
  284152:	e8 db e8 ff ff       	call   282a32 <sheet_free>
	close_constask(task);
  284157:	89 34 24             	mov    %esi,(%esp)
  28415a:	e8 85 ff ff ff       	call   2840e4 <close_constask>
	return;
  28415f:	83 c4 10             	add    $0x10,%esp
}
  284162:	8d 65 f8             	lea    -0x8(%ebp),%esp
  284165:	5b                   	pop    %ebx
  284166:	5e                   	pop    %esi
  284167:	5d                   	pop    %ebp
  284168:	c3                   	ret    

00284169 <cmd_start>:

void cmd_start(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  284169:	55                   	push   %ebp
  28416a:	89 e5                	mov    %esp,%ebp
  28416c:	57                   	push   %edi
  28416d:	56                   	push   %esi
  28416e:	53                   	push   %ebx
  28416f:	83 ec 14             	sub    $0x14,%esp
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
  284172:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct SHEET *sht = open_console(shtctl,memtotal);
  284178:	ff 75 10             	pushl  0x10(%ebp)
  28417b:	57                   	push   %edi
  28417c:	e8 d6 fe ff ff       	call   284057 <open_console>
  284181:	89 c6                	mov    %eax,%esi
	struct FIFO32 *fifo = &sht->task->fifo;
  284183:	8b 40 24             	mov    0x24(%eax),%eax
  284186:	8d 58 10             	lea    0x10(%eax),%ebx
	int i;
	sheet_slide(sht,32,4);
  284189:	83 c4 0c             	add    $0xc,%esp
  28418c:	6a 04                	push   $0x4
  28418e:	6a 20                	push   $0x20
  284190:	56                   	push   %esi
  284191:	e8 3d e8 ff ff       	call   2829d3 <sheet_slide>
	sheet_updown(sht,shtctl->top);
  284196:	83 c4 08             	add    $0x8,%esp
  284199:	ff 77 10             	pushl  0x10(%edi)
  28419c:	56                   	push   %esi
  28419d:	e8 48 e7 ff ff       	call   2828ea <sheet_updown>
	for(i = 6;cmdline[i]!=0;i++)
  2841a2:	8b 45 0c             	mov    0xc(%ebp),%eax
  2841a5:	0f b6 40 06          	movzbl 0x6(%eax),%eax
  2841a9:	83 c4 10             	add    $0x10,%esp
  2841ac:	84 c0                	test   %al,%al
  2841ae:	74 26                	je     2841d6 <cmd_start+0x6d>
  2841b0:	8b 55 0c             	mov    0xc(%ebp),%edx
  2841b3:	8d 72 07             	lea    0x7(%edx),%esi
	{
		fifo32_put(fifo,cmdline[i] + 256);
  2841b6:	83 ec 08             	sub    $0x8,%esp
  2841b9:	0f be c0             	movsbl %al,%eax
  2841bc:	05 00 01 00 00       	add    $0x100,%eax
  2841c1:	50                   	push   %eax
  2841c2:	53                   	push   %ebx
  2841c3:	e8 c1 d9 ff ff       	call   281b89 <fifo32_put>
  2841c8:	83 c6 01             	add    $0x1,%esi
	struct SHEET *sht = open_console(shtctl,memtotal);
	struct FIFO32 *fifo = &sht->task->fifo;
	int i;
	sheet_slide(sht,32,4);
	sheet_updown(sht,shtctl->top);
	for(i = 6;cmdline[i]!=0;i++)
  2841cb:	0f b6 46 ff          	movzbl -0x1(%esi),%eax
  2841cf:	83 c4 10             	add    $0x10,%esp
  2841d2:	84 c0                	test   %al,%al
  2841d4:	75 e0                	jne    2841b6 <cmd_start+0x4d>
	{
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  2841d6:	83 ec 08             	sub    $0x8,%esp
  2841d9:	68 0a 01 00 00       	push   $0x10a
  2841de:	53                   	push   %ebx
  2841df:	e8 a5 d9 ff ff       	call   281b89 <fifo32_put>
	cons_newline(cons);
  2841e4:	83 c4 04             	add    $0x4,%esp
  2841e7:	ff 75 08             	pushl  0x8(%ebp)
  2841ea:	e8 da f5 ff ff       	call   2837c9 <cons_newline>
	return;
  2841ef:	83 c4 10             	add    $0x10,%esp
}
  2841f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2841f5:	5b                   	pop    %ebx
  2841f6:	5e                   	pop    %esi
  2841f7:	5f                   	pop    %edi
  2841f8:	5d                   	pop    %ebp
  2841f9:	c3                   	ret    

002841fa <cmd_ncst>:

void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  2841fa:	55                   	push   %ebp
  2841fb:	89 e5                	mov    %esp,%ebp
  2841fd:	56                   	push   %esi
  2841fe:	53                   	push   %ebx
  2841ff:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct TASK *task = open_constask(0,memtotal);
  284202:	83 ec 08             	sub    $0x8,%esp
  284205:	ff 75 10             	pushl  0x10(%ebp)
  284208:	6a 00                	push   $0x0
  28420a:	e8 97 fd ff ff       	call   283fa6 <open_constask>
	struct FIFO32 *fifo = &task->fifo;
  28420f:	8d 70 10             	lea    0x10(%eax),%esi
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  284212:	0f b6 53 05          	movzbl 0x5(%ebx),%edx
  284216:	83 c4 10             	add    $0x10,%esp
  284219:	84 d2                	test   %dl,%dl
  28421b:	74 24                	je     284241 <cmd_ncst+0x47>
  28421d:	83 c3 06             	add    $0x6,%ebx
		fifo32_put(fifo,cmdline[i] + 256);
  284220:	83 ec 08             	sub    $0x8,%esp
  284223:	0f be d2             	movsbl %dl,%edx
  284226:	81 c2 00 01 00 00    	add    $0x100,%edx
  28422c:	52                   	push   %edx
  28422d:	56                   	push   %esi
  28422e:	e8 56 d9 ff ff       	call   281b89 <fifo32_put>
  284233:	83 c3 01             	add    $0x1,%ebx
void cmd_ncst(struct CONSOLE *cons,char *cmdline,int memtotal)
{
	struct TASK *task = open_constask(0,memtotal);
	struct FIFO32 *fifo = &task->fifo;
	int i;
	for(i=5;cmdline[i]!=0;i++) {
  284236:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
  28423a:	83 c4 10             	add    $0x10,%esp
  28423d:	84 d2                	test   %dl,%dl
  28423f:	75 df                	jne    284220 <cmd_ncst+0x26>
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  284241:	83 ec 08             	sub    $0x8,%esp
  284244:	68 0a 01 00 00       	push   $0x10a
  284249:	56                   	push   %esi
  28424a:	e8 3a d9 ff ff       	call   281b89 <fifo32_put>
	cons_newline(cons);
  28424f:	83 c4 04             	add    $0x4,%esp
  284252:	ff 75 08             	pushl  0x8(%ebp)
  284255:	e8 6f f5 ff ff       	call   2837c9 <cons_newline>
	return;
  28425a:	83 c4 10             	add    $0x10,%esp
}
  28425d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  284260:	5b                   	pop    %ebx
  284261:	5e                   	pop    %esi
  284262:	5d                   	pop    %ebp
  284263:	c3                   	ret    

00284264 <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  284264:	55                   	push   %ebp
  284265:	89 e5                	mov    %esp,%ebp
  284267:	53                   	push   %ebx
  284268:	83 ec 0c             	sub    $0xc,%esp
  28426b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  28426e:	68 3b 51 28 00       	push   $0x28513b
  284273:	53                   	push   %ebx
  284274:	e8 f9 d7 ff ff       	call   281a72 <strcmp>
  284279:	83 c4 10             	add    $0x10,%esp
  28427c:	85 c0                	test   %eax,%eax
  28427e:	75 16                	jne    284296 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  284280:	83 ec 08             	sub    $0x8,%esp
  284283:	ff 75 14             	pushl  0x14(%ebp)
  284286:	ff 75 0c             	pushl  0xc(%ebp)
  284289:	e8 d5 f6 ff ff       	call   283963 <cmd_mem>
  28428e:	83 c4 10             	add    $0x10,%esp
  284291:	e9 48 01 00 00       	jmp    2843de <cons_runcmd+0x17a>
	else if(strcmp(cmdline,"cls") == 0)
  284296:	83 ec 08             	sub    $0x8,%esp
  284299:	68 3f 51 28 00       	push   $0x28513f
  28429e:	53                   	push   %ebx
  28429f:	e8 ce d7 ff ff       	call   281a72 <strcmp>
  2842a4:	83 c4 10             	add    $0x10,%esp
  2842a7:	85 c0                	test   %eax,%eax
  2842a9:	75 13                	jne    2842be <cons_runcmd+0x5a>
		cmd_cls(cons);
  2842ab:	83 ec 0c             	sub    $0xc,%esp
  2842ae:	ff 75 0c             	pushl  0xc(%ebp)
  2842b1:	e8 3b f7 ff ff       	call   2839f1 <cmd_cls>
  2842b6:	83 c4 10             	add    $0x10,%esp
  2842b9:	e9 20 01 00 00       	jmp    2843de <cons_runcmd+0x17a>
	else if(strcmp(cmdline,"dir") == 0)
  2842be:	83 ec 08             	sub    $0x8,%esp
  2842c1:	68 43 51 28 00       	push   $0x285143
  2842c6:	53                   	push   %ebx
  2842c7:	e8 a6 d7 ff ff       	call   281a72 <strcmp>
  2842cc:	83 c4 10             	add    $0x10,%esp
  2842cf:	85 c0                	test   %eax,%eax
  2842d1:	75 13                	jne    2842e6 <cons_runcmd+0x82>
		cmd_dir(cons);
  2842d3:	83 ec 0c             	sub    $0xc,%esp
  2842d6:	ff 75 0c             	pushl  0xc(%ebp)
  2842d9:	e8 7b f7 ff ff       	call   283a59 <cmd_dir>
  2842de:	83 c4 10             	add    $0x10,%esp
  2842e1:	e9 f8 00 00 00       	jmp    2843de <cons_runcmd+0x17a>
	else if(strncmp(cmdline,"type ",5) == 0)
  2842e6:	83 ec 04             	sub    $0x4,%esp
  2842e9:	6a 05                	push   $0x5
  2842eb:	68 47 51 28 00       	push   $0x285147
  2842f0:	53                   	push   %ebx
  2842f1:	e8 e2 d7 ff ff       	call   281ad8 <strncmp>
  2842f6:	83 c4 10             	add    $0x10,%esp
  2842f9:	85 c0                	test   %eax,%eax
  2842fb:	75 17                	jne    284314 <cons_runcmd+0xb0>
		cmd_type(cons,fat,cmdline);
  2842fd:	83 ec 04             	sub    $0x4,%esp
  284300:	53                   	push   %ebx
  284301:	ff 75 10             	pushl  0x10(%ebp)
  284304:	ff 75 0c             	pushl  0xc(%ebp)
  284307:	e8 03 f8 ff ff       	call   283b0f <cmd_type>
  28430c:	83 c4 10             	add    $0x10,%esp
  28430f:	e9 ca 00 00 00       	jmp    2843de <cons_runcmd+0x17a>
	else if(strcmp(cmdline,"exit") == 0)
  284314:	83 ec 08             	sub    $0x8,%esp
  284317:	68 4d 51 28 00       	push   $0x28514d
  28431c:	53                   	push   %ebx
  28431d:	e8 50 d7 ff ff       	call   281a72 <strcmp>
  284322:	83 c4 10             	add    $0x10,%esp
  284325:	85 c0                	test   %eax,%eax
  284327:	75 0e                	jne    284337 <cons_runcmd+0xd3>
		cmd_exit(cons,fat);
  284329:	83 ec 08             	sub    $0x8,%esp
  28432c:	ff 75 10             	pushl  0x10(%ebp)
  28432f:	ff 75 0c             	pushl  0xc(%ebp)
  284332:	e8 ad f8 ff ff       	call   283be4 <cmd_exit>
	else if(strncmp(cmdline,"start ",6) == 0)
  284337:	83 ec 04             	sub    $0x4,%esp
  28433a:	6a 06                	push   $0x6
  28433c:	68 52 51 28 00       	push   $0x285152
  284341:	53                   	push   %ebx
  284342:	e8 91 d7 ff ff       	call   281ad8 <strncmp>
  284347:	83 c4 10             	add    $0x10,%esp
  28434a:	85 c0                	test   %eax,%eax
  28434c:	75 14                	jne    284362 <cons_runcmd+0xfe>
		cmd_start(cons,cmdline,memtotal);
  28434e:	83 ec 04             	sub    $0x4,%esp
  284351:	ff 75 14             	pushl  0x14(%ebp)
  284354:	53                   	push   %ebx
  284355:	ff 75 0c             	pushl  0xc(%ebp)
  284358:	e8 0c fe ff ff       	call   284169 <cmd_start>
  28435d:	83 c4 10             	add    $0x10,%esp
  284360:	eb 7c                	jmp    2843de <cons_runcmd+0x17a>
	else if(strncmp(cmdline,"ncst ",5) == 0)
  284362:	83 ec 04             	sub    $0x4,%esp
  284365:	6a 05                	push   $0x5
  284367:	68 59 51 28 00       	push   $0x285159
  28436c:	53                   	push   %ebx
  28436d:	e8 66 d7 ff ff       	call   281ad8 <strncmp>
  284372:	83 c4 10             	add    $0x10,%esp
  284375:	85 c0                	test   %eax,%eax
  284377:	75 14                	jne    28438d <cons_runcmd+0x129>
		cmd_ncst(cons,cmdline,memtotal);
  284379:	83 ec 04             	sub    $0x4,%esp
  28437c:	ff 75 14             	pushl  0x14(%ebp)
  28437f:	53                   	push   %ebx
  284380:	ff 75 0c             	pushl  0xc(%ebp)
  284383:	e8 72 fe ff ff       	call   2841fa <cmd_ncst>
  284388:	83 c4 10             	add    $0x10,%esp
  28438b:	eb 51                	jmp    2843de <cons_runcmd+0x17a>
	else if(cmdline[0] != 0)
  28438d:	80 3b 00             	cmpb   $0x0,(%ebx)
  284390:	74 4c                	je     2843de <cons_runcmd+0x17a>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  284392:	83 ec 04             	sub    $0x4,%esp
  284395:	53                   	push   %ebx
  284396:	ff 75 10             	pushl  0x10(%ebp)
  284399:	ff 75 0c             	pushl  0xc(%ebp)
  28439c:	e8 29 f9 ff ff       	call   283cca <cmd_app>
  2843a1:	83 c4 10             	add    $0x10,%esp
  2843a4:	85 c0                	test   %eax,%eax
  2843a6:	75 36                	jne    2843de <cons_runcmd+0x17a>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  2843a8:	83 ec 04             	sub    $0x4,%esp
  2843ab:	6a 0c                	push   $0xc
  2843ad:	68 5f 51 28 00       	push   $0x28515f
  2843b2:	6a 00                	push   $0x0
  2843b4:	6a 07                	push   $0x7
  2843b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2843b9:	ff 70 08             	pushl  0x8(%eax)
  2843bc:	6a 08                	push   $0x8
  2843be:	ff 30                	pushl  (%eax)
  2843c0:	e8 1b cd ff ff       	call   2810e0 <putfonts8_asc_sht>
			cons_newline(cons);
  2843c5:	83 c4 14             	add    $0x14,%esp
  2843c8:	ff 75 0c             	pushl  0xc(%ebp)
  2843cb:	e8 f9 f3 ff ff       	call   2837c9 <cons_newline>
			cons_newline(cons);
  2843d0:	83 c4 04             	add    $0x4,%esp
  2843d3:	ff 75 0c             	pushl  0xc(%ebp)
  2843d6:	e8 ee f3 ff ff       	call   2837c9 <cons_newline>
  2843db:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2843de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2843e1:	c9                   	leave  
  2843e2:	c3                   	ret    
  2843e3:	66 90                	xchg   %ax,%ax
  2843e5:	66 90                	xchg   %ax,%ax
  2843e7:	66 90                	xchg   %ax,%ax
  2843e9:	66 90                	xchg   %ax,%ax
  2843eb:	66 90                	xchg   %ax,%ax
  2843ed:	66 90                	xchg   %ax,%ax
  2843ef:	90                   	nop

002843f0 <start_app>:
  2843f0:	60                   	pusha  
  2843f1:	8b 44 24 24          	mov    0x24(%esp),%eax
  2843f5:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  2843f9:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  2843fd:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  284401:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  284405:	89 65 00             	mov    %esp,0x0(%ebp)
  284408:	8c 55 04             	mov    %ss,0x4(%ebp)
  28440b:	8e c3                	mov    %ebx,%es
  28440d:	8e db                	mov    %ebx,%ds
  28440f:	8e e3                	mov    %ebx,%fs
  284411:	8e eb                	mov    %ebx,%gs
  284413:	83 c9 03             	or     $0x3,%ecx
  284416:	83 cb 03             	or     $0x3,%ebx
  284419:	53                   	push   %ebx
  28441a:	52                   	push   %edx
  28441b:	51                   	push   %ecx
  28441c:	50                   	push   %eax
  28441d:	cb                   	lret   

0028441e <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  28441e:	55                   	push   %ebp
  28441f:	89 e5                	mov    %esp,%ebp
  284421:	53                   	push   %ebx
  284422:	83 ec 34             	sub    $0x34,%esp
	struct TASK *task = task_now();
  284425:	e8 45 ea ff ff       	call   282e6f <task_now>
  28442a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct CONSOLE *cons = task->cons;
  28442d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284430:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
  284436:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int ds_base = task->ds_base;
  284439:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28443c:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
  284442:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  284445:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  28444a:	8b 00                	mov    (%eax),%eax
  28444c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  28444f:	8d 45 24             	lea    0x24(%ebp),%eax
  284452:	83 c0 04             	add    $0x4,%eax
  284455:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	   reg[0] = 1st_edi; reg[1] = 1st_esi ... reg[7] = 1st_eax
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	 */

	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  284458:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  28445c:	75 1c                	jne    28447a <sys_api+0x5c>
  28445e:	8b 45 24             	mov    0x24(%ebp),%eax
  284461:	0f b6 c0             	movzbl %al,%eax
  284464:	83 ec 04             	sub    $0x4,%esp
  284467:	6a 01                	push   $0x1
  284469:	50                   	push   %eax
  28446a:	ff 75 f0             	pushl  -0x10(%ebp)
  28446d:	e8 29 f4 ff ff       	call   28389b <cons_putchar>
  284472:	83 c4 10             	add    $0x10,%esp
  284475:	e9 fb 05 00 00       	jmp    284a75 <sys_api+0x657>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  28447a:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  28447e:	75 1c                	jne    28449c <sys_api+0x7e>
  284480:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284483:	8b 45 18             	mov    0x18(%ebp),%eax
  284486:	01 d0                	add    %edx,%eax
  284488:	83 ec 08             	sub    $0x8,%esp
  28448b:	50                   	push   %eax
  28448c:	ff 75 f0             	pushl  -0x10(%ebp)
  28448f:	e8 01 f8 ff ff       	call   283c95 <cons_putstr0>
  284494:	83 c4 10             	add    $0x10,%esp
  284497:	e9 d9 05 00 00       	jmp    284a75 <sys_api+0x657>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  28449c:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  2844a0:	75 1f                	jne    2844c1 <sys_api+0xa3>
  2844a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2844a5:	8b 45 18             	mov    0x18(%ebp),%eax
  2844a8:	01 d0                	add    %edx,%eax
  2844aa:	83 ec 04             	sub    $0x4,%esp
  2844ad:	ff 75 20             	pushl  0x20(%ebp)
  2844b0:	50                   	push   %eax
  2844b1:	ff 75 f0             	pushl  -0x10(%ebp)
  2844b4:	e8 b2 fa ff ff       	call   283f6b <cons_putstr1>
  2844b9:	83 c4 10             	add    $0x10,%esp
  2844bc:	e9 b4 05 00 00       	jmp    284a75 <sys_api+0x657>
	else if(edx == 4)
  2844c1:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  2844c5:	75 0b                	jne    2844d2 <sys_api+0xb4>
	{
		//exit app
		return &(task->tss.esp0);
  2844c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2844ca:	83 c0 30             	add    $0x30,%eax
  2844cd:	e9 a8 05 00 00       	jmp    284a7a <sys_api+0x65c>
	}
	else if(edx == 5)
  2844d2:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  2844d6:	0f 85 d1 00 00 00    	jne    2845ad <sys_api+0x18f>
	{
		sht = sheet_alloc(shtctl);
  2844dc:	83 ec 0c             	sub    $0xc,%esp
  2844df:	ff 75 e8             	pushl  -0x18(%ebp)
  2844e2:	e8 15 df ff ff       	call   2823fc <sheet_alloc>
  2844e7:	83 c4 10             	add    $0x10,%esp
  2844ea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->task = task;
  2844ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2844f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2844f3:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  2844f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2844f9:	8b 40 1c             	mov    0x1c(%eax),%eax
  2844fc:	83 c8 11             	or     $0x11,%eax
  2844ff:	89 c2                	mov    %eax,%edx
  284501:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284504:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  284507:	8b 45 24             	mov    0x24(%ebp),%eax
  28450a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  28450d:	8b 55 18             	mov    0x18(%ebp),%edx
  284510:	01 ca                	add    %ecx,%edx
  284512:	83 ec 0c             	sub    $0xc,%esp
  284515:	50                   	push   %eax
  284516:	ff 75 08             	pushl  0x8(%ebp)
  284519:	ff 75 0c             	pushl  0xc(%ebp)
  28451c:	52                   	push   %edx
  28451d:	ff 75 d4             	pushl  -0x2c(%ebp)
  284520:	e8 4a df ff ff       	call   28246f <sheet_setbuf>
  284525:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  284528:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28452b:	8b 45 20             	mov    0x20(%ebp),%eax
  28452e:	01 d0                	add    %edx,%eax
  284530:	89 c1                	mov    %eax,%ecx
  284532:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284535:	8b 45 18             	mov    0x18(%ebp),%eax
  284538:	01 d0                	add    %edx,%eax
  28453a:	83 ec 0c             	sub    $0xc,%esp
  28453d:	6a 00                	push   $0x0
  28453f:	51                   	push   %ecx
  284540:	ff 75 08             	pushl  0x8(%ebp)
  284543:	ff 75 0c             	pushl  0xc(%ebp)
  284546:	50                   	push   %eax
  284547:	e8 36 ca ff ff       	call   280f82 <make_window8>
  28454c:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,((shtctl->xsize - esi)/2)&~3,(shtctl->ysize - edi)/2);
  28454f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284552:	8b 40 0c             	mov    0xc(%eax),%eax
  284555:	2b 45 08             	sub    0x8(%ebp),%eax
  284558:	89 c2                	mov    %eax,%edx
  28455a:	c1 ea 1f             	shr    $0x1f,%edx
  28455d:	01 d0                	add    %edx,%eax
  28455f:	d1 f8                	sar    %eax
  284561:	89 c1                	mov    %eax,%ecx
  284563:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284566:	8b 40 08             	mov    0x8(%eax),%eax
  284569:	2b 45 0c             	sub    0xc(%ebp),%eax
  28456c:	89 c2                	mov    %eax,%edx
  28456e:	c1 ea 1f             	shr    $0x1f,%edx
  284571:	01 d0                	add    %edx,%eax
  284573:	d1 f8                	sar    %eax
  284575:	83 e0 fc             	and    $0xfffffffc,%eax
  284578:	83 ec 04             	sub    $0x4,%esp
  28457b:	51                   	push   %ecx
  28457c:	50                   	push   %eax
  28457d:	ff 75 d4             	pushl  -0x2c(%ebp)
  284580:	e8 4e e4 ff ff       	call   2829d3 <sheet_slide>
  284585:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  284588:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28458b:	8b 40 10             	mov    0x10(%eax),%eax
  28458e:	83 ec 08             	sub    $0x8,%esp
  284591:	50                   	push   %eax
  284592:	ff 75 d4             	pushl  -0x2c(%ebp)
  284595:	e8 50 e3 ff ff       	call   2828ea <sheet_updown>
  28459a:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  28459d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2845a0:	8d 50 1c             	lea    0x1c(%eax),%edx
  2845a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2845a6:	89 02                	mov    %eax,(%edx)
  2845a8:	e9 c8 04 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 6)
  2845ad:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  2845b1:	75 74                	jne    284627 <sys_api+0x209>
	{
		sht = (struct SHEET *)ebx;
  2845b3:	8b 45 18             	mov    0x18(%ebp),%eax
  2845b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  2845b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2845bc:	8b 45 10             	mov    0x10(%ebp),%eax
  2845bf:	01 d0                	add    %edx,%eax
  2845c1:	89 c3                	mov    %eax,%ebx
  2845c3:	8b 45 24             	mov    0x24(%ebp),%eax
  2845c6:	0f be c8             	movsbl %al,%ecx
  2845c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2845cc:	8b 50 04             	mov    0x4(%eax),%edx
  2845cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2845d2:	8b 00                	mov    (%eax),%eax
  2845d4:	83 ec 08             	sub    $0x8,%esp
  2845d7:	53                   	push   %ebx
  2845d8:	51                   	push   %ecx
  2845d9:	ff 75 08             	pushl  0x8(%ebp)
  2845dc:	ff 75 0c             	pushl  0xc(%ebp)
  2845df:	52                   	push   %edx
  2845e0:	50                   	push   %eax
  2845e1:	e8 fe cd ff ff       	call   2813e4 <putfonts8_asc>
  2845e6:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2845e9:	8b 45 18             	mov    0x18(%ebp),%eax
  2845ec:	83 e0 01             	and    $0x1,%eax
  2845ef:	85 c0                	test   %eax,%eax
  2845f1:	0f 85 7e 04 00 00    	jne    284a75 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  2845f7:	8b 45 08             	mov    0x8(%ebp),%eax
  2845fa:	8d 50 10             	lea    0x10(%eax),%edx
  2845fd:	8b 45 20             	mov    0x20(%ebp),%eax
  284600:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  284607:	8b 45 0c             	mov    0xc(%ebp),%eax
  28460a:	01 c8                	add    %ecx,%eax
  28460c:	83 ec 0c             	sub    $0xc,%esp
  28460f:	52                   	push   %edx
  284610:	50                   	push   %eax
  284611:	ff 75 08             	pushl  0x8(%ebp)
  284614:	ff 75 0c             	pushl  0xc(%ebp)
  284617:	ff 75 d4             	pushl  -0x2c(%ebp)
  28461a:	e8 97 e2 ff ff       	call   2828b6 <sheet_refresh>
  28461f:	83 c4 20             	add    $0x20,%esp
  284622:	e9 4e 04 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 7)
  284627:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  28462b:	75 68                	jne    284695 <sys_api+0x277>
	{
		sht = (struct SHEET *)ebx;
  28462d:	8b 45 18             	mov    0x18(%ebp),%eax
  284630:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  284633:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284636:	8b 45 10             	mov    0x10(%ebp),%eax
  284639:	0f b6 c8             	movzbl %al,%ecx
  28463c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28463f:	8b 50 04             	mov    0x4(%eax),%edx
  284642:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284645:	8b 00                	mov    (%eax),%eax
  284647:	83 ec 04             	sub    $0x4,%esp
  28464a:	ff 75 08             	pushl  0x8(%ebp)
  28464d:	ff 75 0c             	pushl  0xc(%ebp)
  284650:	ff 75 20             	pushl  0x20(%ebp)
  284653:	53                   	push   %ebx
  284654:	51                   	push   %ecx
  284655:	52                   	push   %edx
  284656:	50                   	push   %eax
  284657:	e8 25 c6 ff ff       	call   280c81 <boxfill8>
  28465c:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  28465f:	8b 45 18             	mov    0x18(%ebp),%eax
  284662:	83 e0 01             	and    $0x1,%eax
  284665:	85 c0                	test   %eax,%eax
  284667:	0f 85 08 04 00 00    	jne    284a75 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  28466d:	8b 45 08             	mov    0x8(%ebp),%eax
  284670:	8d 48 01             	lea    0x1(%eax),%ecx
  284673:	8b 45 0c             	mov    0xc(%ebp),%eax
  284676:	8d 50 01             	lea    0x1(%eax),%edx
  284679:	8b 45 24             	mov    0x24(%ebp),%eax
  28467c:	83 ec 0c             	sub    $0xc,%esp
  28467f:	51                   	push   %ecx
  284680:	52                   	push   %edx
  284681:	ff 75 20             	pushl  0x20(%ebp)
  284684:	50                   	push   %eax
  284685:	ff 75 d4             	pushl  -0x2c(%ebp)
  284688:	e8 29 e2 ff ff       	call   2828b6 <sheet_refresh>
  28468d:	83 c4 20             	add    $0x20,%esp
  284690:	e9 e0 03 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 8)
  284695:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284699:	75 3b                	jne    2846d6 <sys_api+0x2b8>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  28469b:	8b 55 18             	mov    0x18(%ebp),%edx
  28469e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2846a1:	01 d0                	add    %edx,%eax
  2846a3:	83 ec 0c             	sub    $0xc,%esp
  2846a6:	50                   	push   %eax
  2846a7:	e8 bf d8 ff ff       	call   281f6b <memman_init>
  2846ac:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  2846af:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  2846b3:	8b 45 20             	mov    0x20(%ebp),%eax
  2846b6:	8b 55 24             	mov    0x24(%ebp),%edx
  2846b9:	89 d3                	mov    %edx,%ebx
  2846bb:	8b 4d 18             	mov    0x18(%ebp),%ecx
  2846be:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2846c1:	01 ca                	add    %ecx,%edx
  2846c3:	83 ec 04             	sub    $0x4,%esp
  2846c6:	50                   	push   %eax
  2846c7:	53                   	push   %ebx
  2846c8:	52                   	push   %edx
  2846c9:	e8 ec d9 ff ff       	call   2820ba <memman_free>
  2846ce:	83 c4 10             	add    $0x10,%esp
  2846d1:	e9 9f 03 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 9)
  2846d6:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  2846da:	75 31                	jne    28470d <sys_api+0x2ef>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  2846dc:	8b 45 20             	mov    0x20(%ebp),%eax
  2846df:	83 c0 0f             	add    $0xf,%eax
  2846e2:	83 e0 f0             	and    $0xfffffff0,%eax
  2846e5:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  2846e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2846eb:	8d 58 1c             	lea    0x1c(%eax),%ebx
  2846ee:	8b 45 20             	mov    0x20(%ebp),%eax
  2846f1:	8b 4d 18             	mov    0x18(%ebp),%ecx
  2846f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2846f7:	01 ca                	add    %ecx,%edx
  2846f9:	83 ec 08             	sub    $0x8,%esp
  2846fc:	50                   	push   %eax
  2846fd:	52                   	push   %edx
  2846fe:	e8 ce d8 ff ff       	call   281fd1 <memman_alloc>
  284703:	83 c4 10             	add    $0x10,%esp
  284706:	89 03                	mov    %eax,(%ebx)
  284708:	e9 68 03 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 10)
  28470d:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  284711:	75 2f                	jne    284742 <sys_api+0x324>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  284713:	8b 45 20             	mov    0x20(%ebp),%eax
  284716:	83 c0 0f             	add    $0xf,%eax
  284719:	83 e0 f0             	and    $0xfffffff0,%eax
  28471c:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  28471f:	8b 45 20             	mov    0x20(%ebp),%eax
  284722:	8b 55 24             	mov    0x24(%ebp),%edx
  284725:	89 d3                	mov    %edx,%ebx
  284727:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  28472a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28472d:	01 ca                	add    %ecx,%edx
  28472f:	83 ec 04             	sub    $0x4,%esp
  284732:	50                   	push   %eax
  284733:	53                   	push   %ebx
  284734:	52                   	push   %edx
  284735:	e8 80 d9 ff ff       	call   2820ba <memman_free>
  28473a:	83 c4 10             	add    $0x10,%esp
  28473d:	e9 33 03 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 11)
  284742:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  284746:	75 58                	jne    2847a0 <sys_api+0x382>
	{
		sht = (struct SHEET *)ebx;
  284748:	8b 45 18             	mov    0x18(%ebp),%eax
  28474b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  28474e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284751:	8b 10                	mov    (%eax),%edx
  284753:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284756:	8b 40 04             	mov    0x4(%eax),%eax
  284759:	0f af 45 08          	imul   0x8(%ebp),%eax
  28475d:	89 c1                	mov    %eax,%ecx
  28475f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284762:	01 c8                	add    %ecx,%eax
  284764:	01 d0                	add    %edx,%eax
  284766:	8b 55 24             	mov    0x24(%ebp),%edx
  284769:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  28476b:	8b 45 18             	mov    0x18(%ebp),%eax
  28476e:	83 e0 01             	and    $0x1,%eax
  284771:	85 c0                	test   %eax,%eax
  284773:	0f 85 fc 02 00 00    	jne    284a75 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  284779:	8b 45 08             	mov    0x8(%ebp),%eax
  28477c:	8d 50 01             	lea    0x1(%eax),%edx
  28477f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284782:	83 c0 01             	add    $0x1,%eax
  284785:	83 ec 0c             	sub    $0xc,%esp
  284788:	52                   	push   %edx
  284789:	50                   	push   %eax
  28478a:	ff 75 08             	pushl  0x8(%ebp)
  28478d:	ff 75 0c             	pushl  0xc(%ebp)
  284790:	ff 75 d4             	pushl  -0x2c(%ebp)
  284793:	e8 1e e1 ff ff       	call   2828b6 <sheet_refresh>
  284798:	83 c4 20             	add    $0x20,%esp
  28479b:	e9 d5 02 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 12)
  2847a0:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  2847a4:	75 26                	jne    2847cc <sys_api+0x3ae>
	{
		sht = (struct SHEET *)ebx;
  2847a6:	8b 45 18             	mov    0x18(%ebp),%eax
  2847a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  2847ac:	8b 45 24             	mov    0x24(%ebp),%eax
  2847af:	83 ec 0c             	sub    $0xc,%esp
  2847b2:	ff 75 08             	pushl  0x8(%ebp)
  2847b5:	ff 75 0c             	pushl  0xc(%ebp)
  2847b8:	ff 75 20             	pushl  0x20(%ebp)
  2847bb:	50                   	push   %eax
  2847bc:	ff 75 d4             	pushl  -0x2c(%ebp)
  2847bf:	e8 f2 e0 ff ff       	call   2828b6 <sheet_refresh>
  2847c4:	83 c4 20             	add    $0x20,%esp
  2847c7:	e9 a9 02 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 13)
  2847cc:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  2847d0:	75 5d                	jne    28482f <sys_api+0x411>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  2847d2:	8b 45 18             	mov    0x18(%ebp),%eax
  2847d5:	83 e0 fe             	and    $0xfffffffe,%eax
  2847d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  2847db:	8b 45 24             	mov    0x24(%ebp),%eax
  2847de:	83 ec 08             	sub    $0x8,%esp
  2847e1:	ff 75 10             	pushl  0x10(%ebp)
  2847e4:	ff 75 08             	pushl  0x8(%ebp)
  2847e7:	ff 75 0c             	pushl  0xc(%ebp)
  2847ea:	ff 75 20             	pushl  0x20(%ebp)
  2847ed:	50                   	push   %eax
  2847ee:	ff 75 d4             	pushl  -0x2c(%ebp)
  2847f1:	e8 78 ca ff ff       	call   28126e <drawline8_sht>
  2847f6:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2847f9:	8b 45 18             	mov    0x18(%ebp),%eax
  2847fc:	83 e0 01             	and    $0x1,%eax
  2847ff:	85 c0                	test   %eax,%eax
  284801:	0f 85 6e 02 00 00    	jne    284a75 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  284807:	8b 45 08             	mov    0x8(%ebp),%eax
  28480a:	8d 48 01             	lea    0x1(%eax),%ecx
  28480d:	8b 45 0c             	mov    0xc(%ebp),%eax
  284810:	8d 50 01             	lea    0x1(%eax),%edx
  284813:	8b 45 24             	mov    0x24(%ebp),%eax
  284816:	83 ec 0c             	sub    $0xc,%esp
  284819:	51                   	push   %ecx
  28481a:	52                   	push   %edx
  28481b:	ff 75 20             	pushl  0x20(%ebp)
  28481e:	50                   	push   %eax
  28481f:	ff 75 d4             	pushl  -0x2c(%ebp)
  284822:	e8 8f e0 ff ff       	call   2828b6 <sheet_refresh>
  284827:	83 c4 20             	add    $0x20,%esp
  28482a:	e9 46 02 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 14)
  28482f:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  284833:	75 14                	jne    284849 <sys_api+0x42b>
	{
		sheet_free((struct SHEET *)ebx);
  284835:	8b 45 18             	mov    0x18(%ebp),%eax
  284838:	83 ec 0c             	sub    $0xc,%esp
  28483b:	50                   	push   %eax
  28483c:	e8 f1 e1 ff ff       	call   282a32 <sheet_free>
  284841:	83 c4 10             	add    $0x10,%esp
  284844:	e9 2c 02 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 15)
  284849:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  28484d:	0f 85 f3 00 00 00    	jne    284946 <sys_api+0x528>
	{
		for(;;)
		{
			io_cli();
  284853:	e8 3a c2 ff ff       	call   280a92 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  284858:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28485b:	83 c0 10             	add    $0x10,%eax
  28485e:	83 ec 0c             	sub    $0xc,%esp
  284861:	50                   	push   %eax
  284862:	e8 cf d3 ff ff       	call   281c36 <fifo32_status>
  284867:	83 c4 10             	add    $0x10,%esp
  28486a:	85 c0                	test   %eax,%eax
  28486c:	75 32                	jne    2848a0 <sys_api+0x482>
			{
				if(eax != 0)
  28486e:	8b 45 24             	mov    0x24(%ebp),%eax
  284871:	85 c0                	test   %eax,%eax
  284873:	74 10                	je     284885 <sys_api+0x467>
					task_sleep(task);
  284875:	83 ec 0c             	sub    $0xc,%esp
  284878:	ff 75 f4             	pushl  -0xc(%ebp)
  28487b:	e8 61 e9 ff ff       	call   2831e1 <task_sleep>
  284880:	83 c4 10             	add    $0x10,%esp
  284883:	eb 1b                	jmp    2848a0 <sys_api+0x482>
				else
				{
					io_sti();
  284885:	e8 0a c2 ff ff       	call   280a94 <io_sti>
					reg[7] = -1;
  28488a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28488d:	83 c0 1c             	add    $0x1c,%eax
  284890:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  284896:	b8 00 00 00 00       	mov    $0x0,%eax
  28489b:	e9 da 01 00 00       	jmp    284a7a <sys_api+0x65c>
				}
			}
			int i = fifo32_get(&task->fifo);
  2848a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2848a3:	83 c0 10             	add    $0x10,%eax
  2848a6:	83 ec 0c             	sub    $0xc,%esp
  2848a9:	50                   	push   %eax
  2848aa:	e8 4c d3 ff ff       	call   281bfb <fifo32_get>
  2848af:	83 c4 10             	add    $0x10,%esp
  2848b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
			io_sti();
  2848b5:	e8 da c1 ff ff       	call   280a94 <io_sti>
			if(i <= 1)
  2848ba:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
  2848be:	7f 34                	jg     2848f4 <sys_api+0x4d6>
			{
				timer_init(cons->timer,&task->fifo,1);
  2848c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2848c3:	8d 50 10             	lea    0x10(%eax),%edx
  2848c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2848c9:	8b 40 10             	mov    0x10(%eax),%eax
  2848cc:	83 ec 04             	sub    $0x4,%esp
  2848cf:	6a 01                	push   $0x1
  2848d1:	52                   	push   %edx
  2848d2:	50                   	push   %eax
  2848d3:	e8 4c e2 ff ff       	call   282b24 <timer_init>
  2848d8:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  2848db:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2848de:	8b 40 10             	mov    0x10(%eax),%eax
  2848e1:	83 ec 08             	sub    $0x8,%esp
  2848e4:	6a 32                	push   $0x32
  2848e6:	50                   	push   %eax
  2848e7:	e8 4c e2 ff ff       	call   282b38 <timer_settime>
  2848ec:	83 c4 10             	add    $0x10,%esp
  2848ef:	e9 5f ff ff ff       	jmp    284853 <sys_api+0x435>
			}
			else if(i == 2)
  2848f4:	83 7d e0 02          	cmpl   $0x2,-0x20(%ebp)
  2848f8:	75 0f                	jne    284909 <sys_api+0x4eb>
			{
				cons->cur_c = COL8_FFFFFF;
  2848fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2848fd:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  284904:	e9 4a ff ff ff       	jmp    284853 <sys_api+0x435>
			}
			else if(i == 3)
  284909:	83 7d e0 03          	cmpl   $0x3,-0x20(%ebp)
  28490d:	75 0f                	jne    28491e <sys_api+0x500>
			{
				cons->cur_c = -1;
  28490f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284912:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  284919:	e9 35 ff ff ff       	jmp    284853 <sys_api+0x435>
			}
			else if(i>=256)
  28491e:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%ebp)
  284925:	0f 8e 28 ff ff ff    	jle    284853 <sys_api+0x435>
			{
				reg[7] = i-256;
  28492b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28492e:	83 c0 1c             	add    $0x1c,%eax
  284931:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284934:	81 ea 00 01 00 00    	sub    $0x100,%edx
  28493a:	89 10                	mov    %edx,(%eax)
				return 0;
  28493c:	b8 00 00 00 00       	mov    $0x0,%eax
  284941:	e9 34 01 00 00       	jmp    284a7a <sys_api+0x65c>
			}
		}
	}
	else if(edx == 16)
  284946:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  28494a:	75 1e                	jne    28496a <sys_api+0x54c>
	{
		reg[7] = (int)timer_alloc();
  28494c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28494f:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284952:	e8 ff e0 ff ff       	call   282a56 <timer_alloc>
  284957:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  284959:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28495c:	83 c0 1c             	add    $0x1c,%eax
  28495f:	8b 00                	mov    (%eax),%eax
  284961:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  284965:	e9 0b 01 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 17)
  28496a:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  28496e:	75 25                	jne    284995 <sys_api+0x577>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  284970:	8b 45 24             	mov    0x24(%ebp),%eax
  284973:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  284979:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28497c:	8d 50 10             	lea    0x10(%eax),%edx
  28497f:	8b 45 18             	mov    0x18(%ebp),%eax
  284982:	83 ec 04             	sub    $0x4,%esp
  284985:	51                   	push   %ecx
  284986:	52                   	push   %edx
  284987:	50                   	push   %eax
  284988:	e8 97 e1 ff ff       	call   282b24 <timer_init>
  28498d:	83 c4 10             	add    $0x10,%esp
  284990:	e9 e0 00 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 18)
  284995:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284999:	75 1a                	jne    2849b5 <sys_api+0x597>
	{
		timer_settime((struct TIMER *)ebx,eax);
  28499b:	8b 45 24             	mov    0x24(%ebp),%eax
  28499e:	89 c2                	mov    %eax,%edx
  2849a0:	8b 45 18             	mov    0x18(%ebp),%eax
  2849a3:	83 ec 08             	sub    $0x8,%esp
  2849a6:	52                   	push   %edx
  2849a7:	50                   	push   %eax
  2849a8:	e8 8b e1 ff ff       	call   282b38 <timer_settime>
  2849ad:	83 c4 10             	add    $0x10,%esp
  2849b0:	e9 c0 00 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 19)
  2849b5:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  2849b9:	75 14                	jne    2849cf <sys_api+0x5b1>
	{
		timer_free((struct TIMER *)ebx);
  2849bb:	8b 45 18             	mov    0x18(%ebp),%eax
  2849be:	83 ec 0c             	sub    $0xc,%esp
  2849c1:	50                   	push   %eax
  2849c2:	e8 51 e1 ff ff       	call   282b18 <timer_free>
  2849c7:	83 c4 10             	add    $0x10,%esp
  2849ca:	e9 a6 00 00 00       	jmp    284a75 <sys_api+0x657>
	}
	else if(edx == 20)
  2849cf:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  2849d3:	0f 85 9c 00 00 00    	jne    284a75 <sys_api+0x657>
	{
		if(eax == 0)
  2849d9:	8b 45 24             	mov    0x24(%ebp),%eax
  2849dc:	85 c0                	test   %eax,%eax
  2849de:	75 26                	jne    284a06 <sys_api+0x5e8>
		{
			int i = io_in8(0x61);
  2849e0:	83 ec 0c             	sub    $0xc,%esp
  2849e3:	6a 61                	push   $0x61
  2849e5:	e8 ba c0 ff ff       	call   280aa4 <io_in8>
  2849ea:	83 c4 10             	add    $0x10,%esp
  2849ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
			io_out8(0x61,i&0x0d);
  2849f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2849f3:	83 e0 0d             	and    $0xd,%eax
  2849f6:	83 ec 08             	sub    $0x8,%esp
  2849f9:	50                   	push   %eax
  2849fa:	6a 61                	push   $0x61
  2849fc:	e8 c5 c0 ff ff       	call   280ac6 <io_out8>
  284a01:	83 c4 10             	add    $0x10,%esp
  284a04:	eb 6f                	jmp    284a75 <sys_api+0x657>
		}
		else
		{
			int i = 1193180000/eax;
  284a06:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284a09:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  284a0e:	99                   	cltd   
  284a0f:	f7 fb                	idiv   %ebx
  284a11:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x43,0xb6);
  284a14:	83 ec 08             	sub    $0x8,%esp
  284a17:	68 b6 00 00 00       	push   $0xb6
  284a1c:	6a 43                	push   $0x43
  284a1e:	e8 a3 c0 ff ff       	call   280ac6 <io_out8>
  284a23:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  284a26:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284a29:	0f b6 c0             	movzbl %al,%eax
  284a2c:	83 ec 08             	sub    $0x8,%esp
  284a2f:	50                   	push   %eax
  284a30:	6a 42                	push   $0x42
  284a32:	e8 8f c0 ff ff       	call   280ac6 <io_out8>
  284a37:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  284a3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284a3d:	c1 f8 08             	sar    $0x8,%eax
  284a40:	83 ec 08             	sub    $0x8,%esp
  284a43:	50                   	push   %eax
  284a44:	6a 42                	push   $0x42
  284a46:	e8 7b c0 ff ff       	call   280ac6 <io_out8>
  284a4b:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  284a4e:	83 ec 0c             	sub    $0xc,%esp
  284a51:	6a 61                	push   $0x61
  284a53:	e8 4c c0 ff ff       	call   280aa4 <io_in8>
  284a58:	83 c4 10             	add    $0x10,%esp
  284a5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  284a5e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284a61:	83 e0 0c             	and    $0xc,%eax
  284a64:	83 c8 03             	or     $0x3,%eax
  284a67:	83 ec 08             	sub    $0x8,%esp
  284a6a:	50                   	push   %eax
  284a6b:	6a 61                	push   $0x61
  284a6d:	e8 54 c0 ff ff       	call   280ac6 <io_out8>
  284a72:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  284a75:	b8 00 00 00 00       	mov    $0x0,%eax
}
  284a7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284a7d:	c9                   	leave  
  284a7e:	c3                   	ret    
  284a7f:	90                   	nop

00284a80 <api_putchar>:
  284a80:	ba 01 00 00 00       	mov    $0x1,%edx
  284a85:	8a 44 24 04          	mov    0x4(%esp),%al
  284a89:	cd 40                	int    $0x40
  284a8b:	c3                   	ret    

00284a8c <api_putstr>:
  284a8c:	ba 02 00 00 00       	mov    $0x2,%edx
  284a91:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284a95:	cd 40                	int    $0x40
  284a97:	c3                   	ret    

00284a98 <api_end>:
  284a98:	ba 04 00 00 00       	mov    $0x4,%edx
  284a9d:	cd 40                	int    $0x40

00284a9f <api_test>:
  284a9f:	05 80 00 00 00       	add    $0x80,%eax
  284aa4:	c3                   	ret    

00284aa5 <api_openwin>:
  284aa5:	57                   	push   %edi
  284aa6:	56                   	push   %esi
  284aa7:	53                   	push   %ebx
  284aa8:	ba 05 00 00 00       	mov    $0x5,%edx
  284aad:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284ab1:	8b 74 24 14          	mov    0x14(%esp),%esi
  284ab5:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284ab9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284abd:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  284ac1:	cd 40                	int    $0x40
  284ac3:	5b                   	pop    %ebx
  284ac4:	5e                   	pop    %esi
  284ac5:	5f                   	pop    %edi
  284ac6:	c3                   	ret    

00284ac7 <api_putstrwin>:
  284ac7:	57                   	push   %edi
  284ac8:	56                   	push   %esi
  284ac9:	55                   	push   %ebp
  284aca:	53                   	push   %ebx
  284acb:	ba 06 00 00 00       	mov    $0x6,%edx
  284ad0:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284ad4:	8b 74 24 18          	mov    0x18(%esp),%esi
  284ad8:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  284adc:	8b 44 24 20          	mov    0x20(%esp),%eax
  284ae0:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  284ae4:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284ae8:	cd 40                	int    $0x40
  284aea:	5b                   	pop    %ebx
  284aeb:	5d                   	pop    %ebp
  284aec:	5e                   	pop    %esi
  284aed:	5f                   	pop    %edi
  284aee:	c3                   	ret    

00284aef <api_boxfilwin>:
  284aef:	57                   	push   %edi
  284af0:	56                   	push   %esi
  284af1:	55                   	push   %ebp
  284af2:	53                   	push   %ebx
  284af3:	ba 07 00 00 00       	mov    $0x7,%edx
  284af8:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284afc:	8b 44 24 18          	mov    0x18(%esp),%eax
  284b00:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284b04:	8b 74 24 20          	mov    0x20(%esp),%esi
  284b08:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284b0c:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284b10:	cd 40                	int    $0x40
  284b12:	5b                   	pop    %ebx
  284b13:	5d                   	pop    %ebp
  284b14:	5e                   	pop    %esi
  284b15:	5f                   	pop    %edi
  284b16:	c3                   	ret    

00284b17 <api_initmalloc>:
  284b17:	53                   	push   %ebx
  284b18:	ba 08 00 00 00       	mov    $0x8,%edx
  284b1d:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284b24:	89 d8                	mov    %ebx,%eax
  284b26:	05 00 80 00 00       	add    $0x8000,%eax
  284b2b:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  284b32:	29 c1                	sub    %eax,%ecx
  284b34:	cd 40                	int    $0x40
  284b36:	5b                   	pop    %ebx
  284b37:	c3                   	ret    

00284b38 <api_malloc>:
  284b38:	53                   	push   %ebx
  284b39:	ba 09 00 00 00       	mov    $0x9,%edx
  284b3e:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  284b49:	cd 40                	int    $0x40
  284b4b:	5b                   	pop    %ebx
  284b4c:	c3                   	ret    

00284b4d <api_free>:
  284b4d:	53                   	push   %ebx
  284b4e:	ba 0a 00 00 00       	mov    $0xa,%edx
  284b53:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284b5a:	8b 44 24 08          	mov    0x8(%esp),%eax
  284b5e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284b62:	cd 40                	int    $0x40
  284b64:	5b                   	pop    %ebx
  284b65:	c3                   	ret    

00284b66 <api_pointwin>:
  284b66:	57                   	push   %edi
  284b67:	56                   	push   %esi
  284b68:	53                   	push   %ebx
  284b69:	ba 0b 00 00 00       	mov    $0xb,%edx
  284b6e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284b72:	8b 74 24 14          	mov    0x14(%esp),%esi
  284b76:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284b7a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284b7e:	cd 40                	int    $0x40
  284b80:	5b                   	pop    %ebx
  284b81:	5e                   	pop    %esi
  284b82:	5f                   	pop    %edi
  284b83:	c3                   	ret    

00284b84 <api_refreshwin>:
  284b84:	57                   	push   %edi
  284b85:	56                   	push   %esi
  284b86:	53                   	push   %ebx
  284b87:	ba 0c 00 00 00       	mov    $0xc,%edx
  284b8c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284b90:	8b 44 24 14          	mov    0x14(%esp),%eax
  284b94:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284b98:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  284b9c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284ba0:	cd 40                	int    $0x40
  284ba2:	5b                   	pop    %ebx
  284ba3:	5e                   	pop    %esi
  284ba4:	5f                   	pop    %edi
  284ba5:	c3                   	ret    

00284ba6 <api_linewin>:
  284ba6:	57                   	push   %edi
  284ba7:	56                   	push   %esi
  284ba8:	55                   	push   %ebp
  284ba9:	53                   	push   %ebx
  284baa:	ba 0d 00 00 00       	mov    $0xd,%edx
  284baf:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284bb3:	8b 44 24 18          	mov    0x18(%esp),%eax
  284bb7:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284bbb:	8b 74 24 20          	mov    0x20(%esp),%esi
  284bbf:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284bc3:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284bc7:	cd 40                	int    $0x40
  284bc9:	5b                   	pop    %ebx
  284bca:	5d                   	pop    %ebp
  284bcb:	5e                   	pop    %esi
  284bcc:	5f                   	pop    %edi
  284bcd:	c3                   	ret    

00284bce <api_closewin>:
  284bce:	53                   	push   %ebx
  284bcf:	ba 0e 00 00 00       	mov    $0xe,%edx
  284bd4:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284bd8:	cd 40                	int    $0x40
  284bda:	5b                   	pop    %ebx
  284bdb:	c3                   	ret    

00284bdc <api_getkey>:
  284bdc:	ba 0f 00 00 00       	mov    $0xf,%edx
  284be1:	8b 44 24 04          	mov    0x4(%esp),%eax
  284be5:	cd 40                	int    $0x40
  284be7:	c3                   	ret    

00284be8 <api_alloctimer>:
  284be8:	ba 10 00 00 00       	mov    $0x10,%edx
  284bed:	cd 40                	int    $0x40
  284bef:	c3                   	ret    

00284bf0 <api_inittimer>:
  284bf0:	53                   	push   %ebx
  284bf1:	ba 11 00 00 00       	mov    $0x11,%edx
  284bf6:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284bfa:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284bfe:	cd 40                	int    $0x40
  284c00:	5b                   	pop    %ebx
  284c01:	c3                   	ret    

00284c02 <api_settimer>:
  284c02:	53                   	push   %ebx
  284c03:	ba 12 00 00 00       	mov    $0x12,%edx
  284c08:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284c0c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284c10:	cd 40                	int    $0x40
  284c12:	5b                   	pop    %ebx
  284c13:	c3                   	ret    

00284c14 <api_freetimer>:
  284c14:	53                   	push   %ebx
  284c15:	ba 13 00 00 00       	mov    $0x13,%edx
  284c1a:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284c1e:	cd 40                	int    $0x40
  284c20:	5b                   	pop    %ebx
  284c21:	c3                   	ret    

00284c22 <api_beep>:
  284c22:	ba 14 00 00 00       	mov    $0x14,%edx
  284c27:	8b 44 24 04          	mov    0x4(%esp),%eax
  284c2b:	cd 40                	int    $0x40
  284c2d:	c3                   	ret    

00284c2e <change_wtitle8>:
	}
	return;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  284c2e:	55                   	push   %ebp
  284c2f:	89 e5                	mov    %esp,%ebp
  284c31:	57                   	push   %edi
  284c32:	56                   	push   %esi
  284c33:	53                   	push   %ebx
  284c34:	83 ec 2c             	sub    $0x2c,%esp
  284c37:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  284c3a:	8b 7d 08             	mov    0x8(%ebp),%edi
  284c3d:	8b 7f 04             	mov    0x4(%edi),%edi
  284c40:	89 fe                	mov    %edi,%esi
  284c42:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  284c45:	3c 01                	cmp    $0x1,%al
  284c47:	19 ff                	sbb    %edi,%edi
  284c49:	89 fb                	mov    %edi,%ebx
  284c4b:	83 e3 fd             	and    $0xfffffffd,%ebx
  284c4e:	83 c3 0f             	add    $0xf,%ebx
  284c51:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  284c54:	89 fb                	mov    %edi,%ebx
  284c56:	83 c3 08             	add    $0x8,%ebx
  284c59:	88 5d e7             	mov    %bl,-0x19(%ebp)
  284c5c:	83 e7 03             	and    $0x3,%edi
  284c5f:	83 c7 0c             	add    $0xc,%edi
  284c62:	3c 01                	cmp    $0x1,%al
  284c64:	19 c0                	sbb    %eax,%eax
  284c66:	f7 d0                	not    %eax
  284c68:	83 c0 08             	add    $0x8,%eax
  284c6b:	88 45 e5             	mov    %al,-0x1b(%ebp)
  284c6e:	89 f0                	mov    %esi,%eax
  284c70:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  284c73:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  284c76:	8b 5d 08             	mov    0x8(%ebp),%ebx
  284c79:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284c7b:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284c82:	8d 5e fc             	lea    -0x4(%esi),%ebx
  284c85:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  284c88:	83 e8 03             	sub    $0x3,%eax
  284c8b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  284c8e:	8d 46 ea             	lea    -0x16(%esi),%eax
  284c91:	89 45 dc             	mov    %eax,-0x24(%ebp)
  284c94:	eb 32                	jmp    284cc8 <change_wtitle8+0x9a>
  284c96:	89 ce                	mov    %ecx,%esi
  284c98:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  284c9a:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  284c9e:	38 45 e7             	cmp    %al,-0x19(%ebp)
  284ca1:	75 05                	jne    284ca8 <change_wtitle8+0x7a>
  284ca3:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  284ca6:	7d 08                	jge    284cb0 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284ca8:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  284cab:	0f 44 c7             	cmove  %edi,%eax
  284cae:	eb 04                	jmp    284cb4 <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  284cb0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  284cb4:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284cb7:	83 c2 01             	add    $0x1,%edx
  284cba:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  284cbd:	75 d7                	jne    284c96 <change_wtitle8+0x68>
  284cbf:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  284cc2:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  284cc6:	74 0d                	je     284cd5 <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  284cc8:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  284ccc:	7e f1                	jle    284cbf <change_wtitle8+0x91>
  284cce:	ba 03 00 00 00       	mov    $0x3,%edx
  284cd3:	eb c1                	jmp    284c96 <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  284cd5:	83 ec 0c             	sub    $0xc,%esp
  284cd8:	6a 15                	push   $0x15
  284cda:	ff 75 cc             	pushl  -0x34(%ebp)
  284cdd:	6a 03                	push   $0x3
  284cdf:	6a 03                	push   $0x3
  284ce1:	ff 75 08             	pushl  0x8(%ebp)
  284ce4:	e8 cd db ff ff       	call   2828b6 <sheet_refresh>
	return;
  284ce9:	83 c4 20             	add    $0x20,%esp
}
  284cec:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284cef:	5b                   	pop    %ebx
  284cf0:	5e                   	pop    %esi
  284cf1:	5f                   	pop    %edi
  284cf2:	5d                   	pop    %ebp
  284cf3:	c3                   	ret    

00284cf4 <keywin_off>:
#include "common.h"
#include "graphics.h"
#include "memory.h"
#include "task_console.h"
void keywin_off(struct SHEET *key_win)
{
  284cf4:	55                   	push   %ebp
  284cf5:	89 e5                	mov    %esp,%ebp
  284cf7:	53                   	push   %ebx
  284cf8:	83 ec 0c             	sub    $0xc,%esp
  284cfb:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  284cfe:	6a 00                	push   $0x0
  284d00:	53                   	push   %ebx
  284d01:	e8 28 ff ff ff       	call   284c2e <change_wtitle8>
	if((key_win->flags & 0x20))
  284d06:	83 c4 10             	add    $0x10,%esp
  284d09:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  284d0d:	74 14                	je     284d23 <keywin_off+0x2f>
	{
		fifo32_put(&key_win->task->fifo,3);
  284d0f:	83 ec 08             	sub    $0x8,%esp
  284d12:	6a 03                	push   $0x3
  284d14:	8b 43 24             	mov    0x24(%ebx),%eax
  284d17:	83 c0 10             	add    $0x10,%eax
  284d1a:	50                   	push   %eax
  284d1b:	e8 69 ce ff ff       	call   281b89 <fifo32_put>
  284d20:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284d23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284d26:	c9                   	leave  
  284d27:	c3                   	ret    

00284d28 <keywin_on>:

void keywin_on(struct SHEET *key_win)
{
  284d28:	55                   	push   %ebp
  284d29:	89 e5                	mov    %esp,%ebp
  284d2b:	53                   	push   %ebx
  284d2c:	83 ec 0c             	sub    $0xc,%esp
  284d2f:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  284d32:	6a 01                	push   $0x1
  284d34:	53                   	push   %ebx
  284d35:	e8 f4 fe ff ff       	call   284c2e <change_wtitle8>
	if((key_win->flags & 0x20))
  284d3a:	83 c4 10             	add    $0x10,%esp
  284d3d:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  284d41:	74 14                	je     284d57 <keywin_on+0x2f>
	{
		fifo32_put(&key_win->task->fifo,2);
  284d43:	83 ec 08             	sub    $0x8,%esp
  284d46:	6a 02                	push   $0x2
  284d48:	8b 43 24             	mov    0x24(%ebx),%eax
  284d4b:	83 c0 10             	add    $0x10,%eax
  284d4e:	50                   	push   %eax
  284d4f:	e8 35 ce ff ff       	call   281b89 <fifo32_put>
  284d54:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284d57:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284d5a:	c9                   	leave  
  284d5b:	c3                   	ret    

00284d5c <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  284d5c:	55                   	push   %ebp
  284d5d:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  284d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284d62:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  284d66:	5d                   	pop    %ebp
  284d67:	c3                   	ret    
