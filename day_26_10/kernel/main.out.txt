
main.out.o:     file format elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280013:	8d 9d fc fb ff ff    	lea    -0x404(%ebp),%ebx
#include "header.h"


int bootmain()
{
  280019:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  28001f:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280021:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  280027:	6a 00                	push   $0x0
  280029:	50                   	push   %eax
  28002a:	68 80 00 00 00       	push   $0x80
  28002f:	53                   	push   %ebx
  280030:	e8 83 1a 00 00       	call   281ab8 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280035:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  28003b:	6a 00                	push   $0x0
  28003d:	50                   	push   %eax
  28003e:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280044:	6a 20                	push   $0x20
  280046:	50                   	push   %eax
  280047:	e8 6c 1a 00 00       	call   281ab8 <fifo32_init>

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
  280054:	68 ed 00 00 00       	push   $0xed
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);

	int key_leds = (binfo->leds>>4)&7;
  280059:	c0 f8 04             	sar    $0x4,%al
  28005c:	83 e0 07             	and    $0x7,%eax
  28005f:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280065:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  28006b:	50                   	push   %eax
  28006c:	e8 78 1a 00 00       	call   281ae9 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	59                   	pop    %ecx
  280072:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
  280078:	5e                   	pop    %esi
  280079:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  28007f:	50                   	push   %eax
  280080:	e8 64 1a 00 00       	call   281ae9 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  280085:	e8 8b 13 00 00       	call   281415 <init_gdtidt>
	init_pic();
  28008a:	e8 4a 15 00 00       	call   2815d9 <init_pic>
	io_sti();
  28008f:	e8 60 09 00 00       	call   2809f4 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  280094:	5f                   	pop    %edi
  280095:	58                   	pop    %eax
  280096:	68 00 01 00 00       	push   $0x100
  28009b:	53                   	push   %ebx
  28009c:	e8 51 1c 00 00       	call   281cf2 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  2800a1:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800a7:	83 c4 0c             	add    $0xc,%esp
  2800aa:	50                   	push   %eax
  2800ab:	68 00 02 00 00       	push   $0x200
  2800b0:	53                   	push   %ebx
  2800b1:	e8 ee 1a 00 00       	call   281ba4 <enable_mouse>

	//init timer
	init_pit();
  2800b6:	e8 55 29 00 00       	call   282a10 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800bb:	58                   	pop    %eax
  2800bc:	5a                   	pop    %edx
  2800bd:	68 f8 00 00 00       	push   $0xf8
  2800c2:	6a 21                	push   $0x21
  2800c4:	e8 5d 09 00 00       	call   280a26 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800c9:	59                   	pop    %ecx
  2800ca:	5e                   	pop    %esi
  2800cb:	68 ef 00 00 00       	push   $0xef
  2800d0:	68 a1 00 00 00       	push   $0xa1
  2800d5:	e8 4c 09 00 00       	call   280a26 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800da:	5f                   	pop    %edi
  2800db:	58                   	pop    %eax
  2800dc:	68 ff ff ff bf       	push   $0xbfffffff
  2800e1:	68 00 00 40 00       	push   $0x400000
  2800e6:	e8 a1 1c 00 00       	call   281d8c <memtest>
	memman_init(memman);
  2800eb:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800f2:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
	memman_init(memman);
  2800f8:	e8 ce 1d 00 00       	call   281ecb <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  2800fd:	83 c4 0c             	add    $0xc,%esp
  280100:	68 00 e0 09 00       	push   $0x9e000
  280105:	68 00 10 00 00       	push   $0x1000
  28010a:	68 00 00 3c 00       	push   $0x3c0000
  28010f:	e8 06 1f 00 00       	call   28201a <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  280114:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
  28011a:	83 c4 0c             	add    $0xc,%esp
  28011d:	2d 00 00 40 00       	sub    $0x400000,%eax
  280122:	50                   	push   %eax
  280123:	68 00 00 40 00       	push   $0x400000
  280128:	68 00 00 3c 00       	push   $0x3c0000
  28012d:	e8 e8 1e 00 00       	call   28201a <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
  280132:	e8 24 0a 00 00       	call   280b5b <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280137:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  28013e:	50                   	push   %eax
  28013f:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280146:	50                   	push   %eax
  280147:	ff 35 f8 0f 00 00    	pushl  0xff8
  28014d:	68 00 00 3c 00       	push   $0x3c0000
  280152:	e8 71 21 00 00       	call   2822c8 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280157:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  28015a:	89 85 dc fb ff ff    	mov    %eax,-0x424(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  280160:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  280165:	68 00 00 3c 00       	push   $0x3c0000
  28016a:	e8 db 2d 00 00       	call   282f4a <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  28016f:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280172:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	fifo.task = task_a;
  280178:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  28017e:	6a 00                	push   $0x0
  280180:	6a 01                	push   $0x1
  280182:	50                   	push   %eax
  280183:	e8 2f 2d 00 00       	call   282eb7 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280188:	58                   	pop    %eax
  280189:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  28018f:	e8 c8 21 00 00       	call   28235c <sheet_alloc>
  280194:	89 85 b4 fb ff ff    	mov    %eax,-0x44c(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  28019a:	58                   	pop    %eax
  28019b:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801a2:	5a                   	pop    %edx
  2801a3:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801aa:	0f af c2             	imul   %edx,%eax
  2801ad:	50                   	push   %eax
  2801ae:	68 00 00 3c 00       	push   $0x3c0000
  2801b3:	e8 b5 20 00 00       	call   28226d <memman_alloc_4k>
  2801b8:	89 c7                	mov    %eax,%edi
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801ba:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801c1:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801c8:	50                   	push   %eax
  2801c9:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801d0:	50                   	push   %eax
  2801d1:	57                   	push   %edi
  2801d2:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2801d8:	e8 f2 21 00 00       	call   2823cf <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801dd:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801e4:	83 c4 1c             	add    $0x1c,%esp
  2801e7:	50                   	push   %eax
  2801e8:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801ef:	50                   	push   %eax
  2801f0:	57                   	push   %edi

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2801f1:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801f7:	e8 55 0a 00 00       	call   280c51 <init_screen8>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2801fc:	59                   	pop    %ecx
  2801fd:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  280203:	e8 54 21 00 00       	call   28235c <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280208:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  28020f:	6a 10                	push   $0x10
  280211:	6a 10                	push   $0x10
  280213:	57                   	push   %edi
  280214:	50                   	push   %eax
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  280215:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  28021b:	e8 af 21 00 00       	call   2823cf <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  280220:	83 c4 18             	add    $0x18,%esp
  280223:	6a 63                	push   $0x63
  280225:	57                   	push   %edi
  280226:	e8 95 0b 00 00       	call   280dc0 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  28022b:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280232:	b9 02 00 00 00       	mov    $0x2,%ecx
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280237:	5e                   	pop    %esi
  280238:	5f                   	pop    %edi
	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280239:	83 e8 10             	sub    $0x10,%eax
  28023c:	99                   	cltd   
  28023d:	f7 f9                	idiv   %ecx
  28023f:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	int my = (binfo->scrny-28-16)/2;
  280245:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  28024c:	ff b5 a8 fb ff ff    	pushl  -0x458(%ebp)
  280252:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
  280258:	83 e8 2c             	sub    $0x2c,%eax
  28025b:	99                   	cltd   
  28025c:	f7 f9                	idiv   %ecx
  28025e:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280264:	e8 e3 45 00 00       	call   28484c <open_console>
  280269:	89 c6                	mov    %eax,%esi
	keywin_on(key_win);
  28026b:	89 04 24             	mov    %eax,(%esp)
  28026e:	e8 a5 45 00 00       	call   284818 <keywin_on>

	sheet_slide(sht_bg,0,0);
  280273:	83 c4 0c             	add    $0xc,%esp
  280276:	6a 00                	push   $0x0
  280278:	6a 00                	push   $0x0
  28027a:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  280280:	e8 ae 26 00 00       	call   282933 <sheet_slide>
	sheet_slide(key_win,32,4);
  280285:	83 c4 0c             	add    $0xc,%esp
  280288:	6a 04                	push   $0x4
  28028a:	6a 20                	push   $0x20
  28028c:	56                   	push   %esi
  28028d:	e8 a1 26 00 00       	call   282933 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  280292:	83 c4 0c             	add    $0xc,%esp
  280295:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28029b:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2802a1:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802a7:	e8 87 26 00 00       	call   282933 <sheet_slide>
	sheet_updown(sht_bg,		0);
  2802ac:	58                   	pop    %eax
  2802ad:	5a                   	pop    %edx
  2802ae:	6a 00                	push   $0x0
  2802b0:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2802b6:	e8 8f 25 00 00       	call   28284a <sheet_updown>
	sheet_updown(key_win,1);
  2802bb:	59                   	pop    %ecx
  2802bc:	5f                   	pop    %edi
  2802bd:	6a 01                	push   $0x1
  2802bf:	56                   	push   %esi
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
  2802c0:	31 ff                	xor    %edi,%edi

	sheet_slide(sht_bg,0,0);
	sheet_slide(key_win,32,4);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,		0);
	sheet_updown(key_win,1);
  2802c2:	e8 83 25 00 00       	call   28284a <sheet_updown>
	sheet_updown(sht_mouse,		2);
  2802c7:	58                   	pop    %eax
  2802c8:	5a                   	pop    %edx
  2802c9:	6a 02                	push   $0x2
  2802cb:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802d1:	e8 74 25 00 00       	call   28284a <sheet_updown>
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  2802d6:	8d 85 18 fc ff ff    	lea    -0x3e8(%ebp),%eax
	sheet_slide(sht_bg,0,0);
	sheet_slide(key_win,32,4);
	sheet_slide(sht_mouse,mx,my);
	sheet_updown(sht_bg,		0);
	sheet_updown(key_win,1);
	sheet_updown(sht_mouse,		2);
  2802dc:	83 c4 10             	add    $0x10,%esp

	extern struct TIMERCTL timerctl;
	
	int key_shift = 0,keycmd_wait = -1;
  2802df:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  2802e6:	ff ff ff 
  2802e9:	c7 85 cc fb ff ff 00 	movl   $0x0,-0x434(%ebp)
  2802f0:	00 00 00 
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;
  2802f3:	c7 85 b8 fb ff ff 00 	movl   $0x0,-0x448(%ebp)
  2802fa:	00 00 00 
  2802fd:	c7 85 c4 fb ff ff ff 	movl   $0x7fffffff,-0x43c(%ebp)
  280304:	ff ff 7f 
  280307:	c7 85 e0 fb ff ff 00 	movl   $0x0,-0x420(%ebp)
  28030e:	00 00 00 
  280311:	c7 85 e4 fb ff ff ff 	movl   $0xffffffff,-0x41c(%ebp)
  280318:	ff ff ff 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
  28031b:	c7 85 a0 fb ff ff 00 	movl   $0x0,-0x460(%ebp)
  280322:	00 00 00 
  280325:	c7 85 ac fb ff ff ff 	movl   $0xffffffff,-0x454(%ebp)
  28032c:	ff ff ff 
  28032f:	c7 85 c0 fb ff ff ff 	movl   $0xffffffff,-0x440(%ebp)
  280336:	ff ff ff 
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280339:	89 85 c8 fb ff ff    	mov    %eax,-0x438(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  28033f:	89 9d 9c fb ff ff    	mov    %ebx,-0x464(%ebp)
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280345:	83 ec 0c             	sub    $0xc,%esp
  280348:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  28034e:	e8 43 18 00 00       	call   281b96 <fifo32_status>
  280353:	8b 8d bc fb ff ff    	mov    -0x444(%ebp),%ecx
  280359:	83 c4 10             	add    $0x10,%esp
  28035c:	c1 e9 1f             	shr    $0x1f,%ecx
  28035f:	74 2f                	je     280390 <bootmain+0x390>
  280361:	85 c0                	test   %eax,%eax
  280363:	7e 2b                	jle    280390 <bootmain+0x390>
		{
			keycmd_wait = fifo32_get(&keycmd);
  280365:	83 ec 0c             	sub    $0xc,%esp
  280368:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  28036e:	e8 e8 17 00 00       	call   281b5b <fifo32_get>
  280373:	89 85 bc fb ff ff    	mov    %eax,-0x444(%ebp)
			wait_KBC_sendready();
  280379:	e8 5b 19 00 00       	call   281cd9 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  28037e:	58                   	pop    %eax
  28037f:	5a                   	pop    %edx
  280380:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280386:	6a 60                	push   $0x60
  280388:	e8 99 06 00 00       	call   280a26 <io_out8>
  28038d:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  280390:	e8 5d 06 00 00       	call   2809f2 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280395:	83 ec 0c             	sub    $0xc,%esp
  280398:	ff b5 9c fb ff ff    	pushl  -0x464(%ebp)
  28039e:	e8 f3 17 00 00       	call   281b96 <fifo32_status>
  2803a3:	83 c4 10             	add    $0x10,%esp
  2803a6:	85 c0                	test   %eax,%eax
  2803a8:	0f 85 81 00 00 00    	jne    28042f <bootmain+0x42f>
		{	
			if(new_mx >= 0)
  2803ae:	83 bd e4 fb ff ff 00 	cmpl   $0x0,-0x41c(%ebp)
  2803b5:	78 2f                	js     2803e6 <bootmain+0x3e6>
			{
				io_sti();
  2803b7:	e8 38 06 00 00       	call   2809f4 <io_sti>
				sheet_slide(sht_mouse,new_mx,new_my);
  2803bc:	50                   	push   %eax
  2803bd:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2803c3:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  2803c9:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2803cf:	e8 5f 25 00 00       	call   282933 <sheet_slide>
  2803d4:	83 c4 10             	add    $0x10,%esp
				new_mx = -1;
  2803d7:	c7 85 e4 fb ff ff ff 	movl   $0xffffffff,-0x41c(%ebp)
  2803de:	ff ff ff 
  2803e1:	e9 5f ff ff ff       	jmp    280345 <bootmain+0x345>
			}
			else if(new_wx!=0x7fffffff)
  2803e6:	81 bd c4 fb ff ff ff 	cmpl   $0x7fffffff,-0x43c(%ebp)
  2803ed:	ff ff 7f 
  2803f0:	74 2a                	je     28041c <bootmain+0x41c>
			{
				io_sti();
  2803f2:	e8 fd 05 00 00       	call   2809f4 <io_sti>
				sheet_slide(sht,new_wx,new_wy);
  2803f7:	50                   	push   %eax
  2803f8:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  2803fe:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280404:	57                   	push   %edi
  280405:	e8 29 25 00 00       	call   282933 <sheet_slide>
  28040a:	83 c4 10             	add    $0x10,%esp
				new_wx = 0x7fffffff;
  28040d:	c7 85 c4 fb ff ff ff 	movl   $0x7fffffff,-0x43c(%ebp)
  280414:	ff ff 7f 
  280417:	e9 29 ff ff ff       	jmp    280345 <bootmain+0x345>
			}
			else
			{
				task_sleep(task_a);
  28041c:	83 ec 0c             	sub    $0xc,%esp
  28041f:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280425:	e8 ff 2c 00 00       	call   283129 <task_sleep>
  28042a:	e9 6d 02 00 00       	jmp    28069c <bootmain+0x69c>
				io_sti();
			}
		}
		else
		{
			int i = fifo32_get(&fifo);
  28042f:	83 ec 0c             	sub    $0xc,%esp
  280432:	ff b5 9c fb ff ff    	pushl  -0x464(%ebp)
  280438:	e8 1e 17 00 00       	call   281b5b <fifo32_get>
  28043d:	89 c3                	mov    %eax,%ebx
			io_sti();
  28043f:	e8 b0 05 00 00       	call   2809f4 <io_sti>
			if(key_win->flags == 0) //key_win already closed
  280444:	83 c4 10             	add    $0x10,%esp
  280447:	83 7e 1c 00          	cmpl   $0x0,0x1c(%esi)
  28044b:	75 1f                	jne    28046c <bootmain+0x46c>
			{
				key_win = shtctl->sheets[shtctl->top - 1];
  28044d:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280453:	8b 8d dc fb ff ff    	mov    -0x424(%ebp),%ecx
				keywin_on(key_win);
  280459:	83 ec 0c             	sub    $0xc,%esp
		{
			int i = fifo32_get(&fifo);
			io_sti();
			if(key_win->flags == 0) //key_win already closed
			{
				key_win = shtctl->sheets[shtctl->top - 1];
  28045c:	8b 40 10             	mov    0x10(%eax),%eax
  28045f:	8b 74 81 10          	mov    0x10(%ecx,%eax,4),%esi
				keywin_on(key_win);
  280463:	56                   	push   %esi
  280464:	e8 af 43 00 00       	call   284818 <keywin_on>
  280469:	83 c4 10             	add    $0x10,%esp
			}
			if(256<=i && i<=511)
  28046c:	8d 93 00 ff ff ff    	lea    -0x100(%ebx),%edx
  280472:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  280478:	0f 87 b2 02 00 00    	ja     280730 <bootmain+0x730>
			{
				xtoa(i-256,s);
  28047e:	50                   	push   %eax
  28047f:	50                   	push   %eax
  280480:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280486:	89 95 98 fb ff ff    	mov    %edx,-0x468(%ebp)
  28048c:	50                   	push   %eax
  28048d:	52                   	push   %edx
  28048e:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  280494:	e8 cd 13 00 00       	call   281866 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  280499:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
  28049f:	83 c4 0c             	add    $0xc,%esp
  2804a2:	6a 04                	push   $0x4
  2804a4:	50                   	push   %eax
  2804a5:	6a 00                	push   $0x0
  2804a7:	6a 07                	push   $0x7
  2804a9:	6a 10                	push   $0x10
  2804ab:	6a 00                	push   $0x0
  2804ad:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2804b3:	e8 88 0b 00 00       	call   281040 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2804b8:	8b 95 98 fb ff ff    	mov    -0x468(%ebp),%edx
  2804be:	83 c4 18             	add    $0x18,%esp
  2804c1:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  2804c7:	52                   	push   %edx
  2804c8:	e8 97 18 00 00       	call   281d64 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2804cd:	8d 50 bf             	lea    -0x41(%eax),%edx
  2804d0:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2804d3:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2804d9:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2804e0:	80 fa 19             	cmp    $0x19,%dl
  2804e3:	77 26                	ja     28050b <bootmain+0x50b>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2804e5:	f6 85 d0 fb ff ff 04 	testb  $0x4,-0x430(%ebp)
  2804ec:	75 0b                	jne    2804f9 <bootmain+0x4f9>
  2804ee:	83 bd cc fb ff ff 00 	cmpl   $0x0,-0x434(%ebp)
  2804f5:	75 0b                	jne    280502 <bootmain+0x502>
  2804f7:	eb 12                	jmp    28050b <bootmain+0x50b>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2804f9:	83 bd cc fb ff ff 00 	cmpl   $0x0,-0x434(%ebp)
  280500:	75 09                	jne    28050b <bootmain+0x50b>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280502:	83 c0 20             	add    $0x20,%eax
  280505:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0)//visible char,return key and back key
  28050b:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280512:	84 c0                	test   %al,%al
  280514:	74 17                	je     28052d <bootmain+0x52d>
				{
					fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  280516:	05 00 01 00 00       	add    $0x100,%eax
  28051b:	51                   	push   %ecx
  28051c:	51                   	push   %ecx
  28051d:	50                   	push   %eax
  28051e:	8b 46 24             	mov    0x24(%esi),%eax
  280521:	83 c0 10             	add    $0x10,%eax
  280524:	50                   	push   %eax
  280525:	e8 bf 15 00 00       	call   281ae9 <fifo32_put>
  28052a:	83 c4 10             	add    $0x10,%esp
				}
				if(i == 256 + 0x0f) //tab key
  28052d:	81 fb 0f 01 00 00    	cmp    $0x10f,%ebx
  280533:	75 35                	jne    28056a <bootmain+0x56a>
				{
					keywin_off(key_win);
  280535:	83 ec 0c             	sub    $0xc,%esp
  280538:	56                   	push   %esi
  280539:	e8 a6 42 00 00       	call   2847e4 <keywin_off>
					int j=key_win->height - 1;
  28053e:	8b 46 18             	mov    0x18(%esi),%eax
					if(j==0)
  280541:	83 c4 10             	add    $0x10,%esp
  280544:	48                   	dec    %eax
  280545:	75 10                	jne    280557 <bootmain+0x557>
					{
						j = shtctl->top-1;
  280547:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28054d:	8b 40 10             	mov    0x10(%eax),%eax
  280550:	89 85 98 fb ff ff    	mov    %eax,-0x468(%ebp)
  280556:	48                   	dec    %eax
					}
					key_win = shtctl->sheets[j];
  280557:	8b b5 dc fb ff ff    	mov    -0x424(%ebp),%esi
					keywin_on(key_win);
  28055d:	83 ec 0c             	sub    $0xc,%esp
					int j=key_win->height - 1;
					if(j==0)
					{
						j = shtctl->top-1;
					}
					key_win = shtctl->sheets[j];
  280560:	8b 74 86 14          	mov    0x14(%esi,%eax,4),%esi
					keywin_on(key_win);
  280564:	56                   	push   %esi
  280565:	e9 87 01 00 00       	jmp    2806f1 <bootmain+0x6f1>
				}
				else if(i == 256 + 0x2a)  //left shift on
  28056a:	81 fb 2a 01 00 00    	cmp    $0x12a,%ebx
  280570:	75 0c                	jne    28057e <bootmain+0x57e>
				{
					key_shift |= 1;
  280572:	83 8d cc fb ff ff 01 	orl    $0x1,-0x434(%ebp)
  280579:	e9 c7 fd ff ff       	jmp    280345 <bootmain+0x345>
				} 
				else if(i == 256 + 0x36) //right shift on
  28057e:	81 fb 36 01 00 00    	cmp    $0x136,%ebx
  280584:	75 0c                	jne    280592 <bootmain+0x592>
				{
					key_shift |= 2;
  280586:	83 8d cc fb ff ff 02 	orl    $0x2,-0x434(%ebp)
  28058d:	e9 b3 fd ff ff       	jmp    280345 <bootmain+0x345>
				}
				else if(i == 256 + 0xaa)  //left shift off
  280592:	81 fb aa 01 00 00    	cmp    $0x1aa,%ebx
  280598:	75 0c                	jne    2805a6 <bootmain+0x5a6>
				{
					key_shift &= ~1;
  28059a:	83 a5 cc fb ff ff fe 	andl   $0xfffffffe,-0x434(%ebp)
  2805a1:	e9 9f fd ff ff       	jmp    280345 <bootmain+0x345>
				} 
				else if(i == 256 + 0xb6) //right shift off
  2805a6:	81 fb b6 01 00 00    	cmp    $0x1b6,%ebx
  2805ac:	75 0c                	jne    2805ba <bootmain+0x5ba>
				{
					key_shift &= ~2;
  2805ae:	83 a5 cc fb ff ff fd 	andl   $0xfffffffd,-0x434(%ebp)
  2805b5:	e9 8b fd ff ff       	jmp    280345 <bootmain+0x345>
				}
				else if(i == 256 + 0x3a) //CapsLock
  2805ba:	81 fb 3a 01 00 00    	cmp    $0x13a,%ebx
  2805c0:	75 09                	jne    2805cb <bootmain+0x5cb>
				{
					key_leds ^= 4;
  2805c2:	83 b5 d0 fb ff ff 04 	xorl   $0x4,-0x430(%ebp)
  2805c9:	eb 20                	jmp    2805eb <bootmain+0x5eb>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2805cb:	81 fb 45 01 00 00    	cmp    $0x145,%ebx
  2805d1:	75 09                	jne    2805dc <bootmain+0x5dc>
				{
					key_leds ^= 2;
  2805d3:	83 b5 d0 fb ff ff 02 	xorl   $0x2,-0x430(%ebp)
  2805da:	eb 0f                	jmp    2805eb <bootmain+0x5eb>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2805dc:	81 fb 46 01 00 00    	cmp    $0x146,%ebx
  2805e2:	75 31                	jne    280615 <bootmain+0x615>
				{
					key_leds ^= 1;
  2805e4:	83 b5 d0 fb ff ff 01 	xorl   $0x1,-0x430(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2805eb:	50                   	push   %eax
  2805ec:	50                   	push   %eax
  2805ed:	68 ed 00 00 00       	push   $0xed
  2805f2:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2805f8:	e8 ec 14 00 00       	call   281ae9 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  2805fd:	58                   	pop    %eax
  2805fe:	5a                   	pop    %edx
  2805ff:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280605:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  28060b:	e8 d9 14 00 00       	call   281ae9 <fifo32_put>
  280610:	e9 13 01 00 00       	jmp    280728 <bootmain+0x728>
				}
				else if(i == 256 + 0xfa)
  280615:	81 fb fa 01 00 00    	cmp    $0x1fa,%ebx
  28061b:	75 0f                	jne    28062c <bootmain+0x62c>
				{
					keycmd_wait = -1;
  28061d:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280624:	ff ff ff 
  280627:	e9 19 fd ff ff       	jmp    280345 <bootmain+0x345>
				}
				else if(i == 256 + 0xfe)
  28062c:	81 fb fe 01 00 00    	cmp    $0x1fe,%ebx
  280632:	75 19                	jne    28064d <bootmain+0x64d>
				{
					wait_KBC_sendready();
  280634:	e8 a0 16 00 00       	call   281cd9 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  280639:	53                   	push   %ebx
  28063a:	53                   	push   %ebx
  28063b:	ff b5 bc fb ff ff    	pushl  -0x444(%ebp)
  280641:	6a 60                	push   $0x60
  280643:	e8 de 03 00 00       	call   280a26 <io_out8>
  280648:	e9 db 00 00 00       	jmp    280728 <bootmain+0x728>
				}
				else if(i == 256 + 0x3b && key_shift != 0)	//shift + F1
  28064d:	83 bd cc fb ff ff 00 	cmpl   $0x0,-0x434(%ebp)
  280654:	0f 95 c0             	setne  %al
  280657:	81 fb 3b 01 00 00    	cmp    $0x13b,%ebx
  28065d:	75 47                	jne    2806a6 <bootmain+0x6a6>
  28065f:	84 c0                	test   %al,%al
  280661:	74 43                	je     2806a6 <bootmain+0x6a6>
				{
					struct TASK *task = key_win->task;
  280663:	8b 5e 24             	mov    0x24(%esi),%ebx
					if(task!=0 && task->tss.ss0 != 0)
  280666:	85 db                	test   %ebx,%ebx
  280668:	0f 84 d7 fc ff ff    	je     280345 <bootmain+0x345>
  28066e:	83 7b 34 00          	cmpl   $0x0,0x34(%ebx)
  280672:	0f 84 cd fc ff ff    	je     280345 <bootmain+0x345>
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
  280678:	51                   	push   %ecx
  280679:	51                   	push   %ecx
  28067a:	68 80 49 28 00       	push   $0x284980
  28067f:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  280685:	e8 40 34 00 00       	call   283aca <cons_putstr0>
						io_cli();
  28068a:	e8 63 03 00 00       	call   2809f2 <io_cli>
						task->tss.eax = (int)&(task->tss.esp0);
  28068f:	8d 43 30             	lea    0x30(%ebx),%eax
						task->tss.eip = (int)asm_end_app - 0x280000;
  280692:	c7 43 4c b0 2c 00 00 	movl   $0x2cb0,0x4c(%ebx)
					if(task!=0 && task->tss.ss0 != 0)
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
						io_cli();
						task->tss.eax = (int)&(task->tss.esp0);
  280699:	89 43 54             	mov    %eax,0x54(%ebx)
						task->tss.eip = (int)asm_end_app - 0x280000;
						io_sti();
  28069c:	e8 53 03 00 00       	call   2809f4 <io_sti>
  2806a1:	e9 82 00 00 00       	jmp    280728 <bootmain+0x728>
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
  2806a6:	81 fb 3c 01 00 00    	cmp    $0x13c,%ebx
  2806ac:	75 4a                	jne    2806f8 <bootmain+0x6f8>
  2806ae:	84 c0                	test   %al,%al
  2806b0:	74 46                	je     2806f8 <bootmain+0x6f8>
				{
					keywin_off(key_win);
  2806b2:	83 ec 0c             	sub    $0xc,%esp
  2806b5:	56                   	push   %esi
  2806b6:	e8 29 41 00 00       	call   2847e4 <keywin_off>
					key_win = open_console(shtctl,memtotal);
  2806bb:	59                   	pop    %ecx
  2806bc:	5b                   	pop    %ebx
  2806bd:	ff b5 a8 fb ff ff    	pushl  -0x458(%ebp)
  2806c3:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2806c9:	e8 7e 41 00 00       	call   28484c <open_console>
					sheet_slide(key_win,32,4);
  2806ce:	83 c4 0c             	add    $0xc,%esp
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
				{
					keywin_off(key_win);
					key_win = open_console(shtctl,memtotal);
  2806d1:	89 c6                	mov    %eax,%esi
					sheet_slide(key_win,32,4);
  2806d3:	6a 04                	push   $0x4
  2806d5:	6a 20                	push   $0x20
  2806d7:	50                   	push   %eax
  2806d8:	e8 56 22 00 00       	call   282933 <sheet_slide>
					sheet_updown(key_win,shtctl->top);
  2806dd:	58                   	pop    %eax
  2806de:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2806e4:	5a                   	pop    %edx
  2806e5:	ff 70 10             	pushl  0x10(%eax)
  2806e8:	56                   	push   %esi
  2806e9:	e8 5c 21 00 00       	call   28284a <sheet_updown>
					keywin_on(key_win);
  2806ee:	89 34 24             	mov    %esi,(%esp)
  2806f1:	e8 22 41 00 00       	call   284818 <keywin_on>
  2806f6:	eb 30                	jmp    280728 <bootmain+0x728>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  2806f8:	81 fb 57 01 00 00    	cmp    $0x157,%ebx
  2806fe:	0f 85 41 fc ff ff    	jne    280345 <bootmain+0x345>
  280704:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28070a:	8b 40 10             	mov    0x10(%eax),%eax
  28070d:	83 f8 02             	cmp    $0x2,%eax
  280710:	0f 8e 2f fc ff ff    	jle    280345 <bootmain+0x345>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280716:	48                   	dec    %eax
  280717:	52                   	push   %edx
  280718:	52                   	push   %edx
  280719:	50                   	push   %eax
  28071a:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280720:	ff 70 18             	pushl  0x18(%eax)
  280723:	e8 22 21 00 00       	call   28284a <sheet_updown>
  280728:	83 c4 10             	add    $0x10,%esp
  28072b:	e9 15 fc ff ff       	jmp    280345 <bootmain+0x345>
				}

			}
			else if(512<=i && i<=767)
  280730:	8d 83 00 fe ff ff    	lea    -0x200(%ebx),%eax
  280736:	3d ff 00 00 00       	cmp    $0xff,%eax
  28073b:	0f 87 04 fc ff ff    	ja     280345 <bootmain+0x345>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  280741:	50                   	push   %eax
  280742:	50                   	push   %eax
  280743:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  280749:	0f b6 db             	movzbl %bl,%ebx
  28074c:	53                   	push   %ebx
  28074d:	50                   	push   %eax
  28074e:	e8 9b 14 00 00       	call   281bee <mouse_decode>
  280753:	83 c4 10             	add    $0x10,%esp
  280756:	85 c0                	test   %eax,%eax
  280758:	0f 84 e7 fb ff ff    	je     280345 <bootmain+0x345>
  28075e:	31 c9                	xor    %ecx,%ecx
  280760:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280766:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  28076c:	0f 48 c1             	cmovs  %ecx,%eax
  28076f:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%ebp)
  280775:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  28077b:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  280781:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  280784:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  28078b:	3b 85 e4 fb ff ff    	cmp    -0x41c(%ebp),%eax
  280791:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  280794:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  28079b:	0f 4f 95 e4 fb ff ff 	cmovg  -0x41c(%ebp),%edx
  2807a2:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807a8:	8d 50 ff             	lea    -0x1(%eax),%edx
  2807ab:	39 c8                	cmp    %ecx,%eax
  2807ad:	0f 4f d1             	cmovg  %ecx,%edx
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807b0:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807b7:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%ebp)
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807bd:	0f 84 bd 01 00 00    	je     280980 <bootmain+0x980>
					{
						if(mmx < 0) 
  2807c3:	83 bd c0 fb ff ff 00 	cmpl   $0x0,-0x440(%ebp)
  2807ca:	0f 89 5c 01 00 00    	jns    28092c <bootmain+0x92c>
						{
							for(int j=shtctl->top-1;j>0;j--)
  2807d0:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2807d6:	8b 40 10             	mov    0x10(%eax),%eax
  2807d9:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
  2807df:	48                   	dec    %eax
  2807e0:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2807e6:	85 c0                	test   %eax,%eax
  2807e8:	0f 8e 36 01 00 00    	jle    280924 <bootmain+0x924>
							{
								sht = shtctl->sheets[j];
  2807ee:	8b bd dc fb ff ff    	mov    -0x424(%ebp),%edi
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  2807f4:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  2807fa:	8b 7c 87 14          	mov    0x14(%edi,%eax,4),%edi
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  2807fe:	2b 4f 0c             	sub    0xc(%edi),%ecx
  280801:	89 8d d8 fb ff ff    	mov    %ecx,-0x428(%ebp)
  280807:	0f 88 11 01 00 00    	js     28091e <bootmain+0x91e>
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
								x = mx - sht->vx0;
								y = my - sht->vy0;
  28080d:	8b 9d e0 fb ff ff    	mov    -0x420(%ebp),%ebx
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280813:	8b 4f 04             	mov    0x4(%edi),%ecx
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
								x = mx - sht->vx0;
								y = my - sht->vy0;
  280816:	2b 5f 10             	sub    0x10(%edi),%ebx
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280819:	39 8d d8 fb ff ff    	cmp    %ecx,-0x428(%ebp)
  28081f:	0f 8d f9 00 00 00    	jge    28091e <bootmain+0x91e>
  280825:	89 da                	mov    %ebx,%edx
  280827:	83 ea 00             	sub    $0x0,%edx
  28082a:	0f 88 ee 00 00 00    	js     28091e <bootmain+0x91e>
  280830:	3b 5f 08             	cmp    0x8(%edi),%ebx
  280833:	0f 8d e5 00 00 00    	jge    28091e <bootmain+0x91e>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280839:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
  28083f:	03 17                	add    (%edi),%edx
  280841:	0f af cb             	imul   %ebx,%ecx
  280844:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  280848:	3b 4f 14             	cmp    0x14(%edi),%ecx
  28084b:	0f 84 cd 00 00 00    	je     28091e <bootmain+0x91e>
									{
										sheet_updown(sht,shtctl->top-1);
  280851:	51                   	push   %ecx
  280852:	51                   	push   %ecx
  280853:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280859:	57                   	push   %edi
  28085a:	e8 eb 1f 00 00       	call   28284a <sheet_updown>
										if(sht!=key_win)
  28085f:	83 c4 10             	add    $0x10,%esp
  280862:	39 fe                	cmp    %edi,%esi
  280864:	74 14                	je     28087a <bootmain+0x87a>
										{
											keywin_off(key_win);
  280866:	83 ec 0c             	sub    $0xc,%esp
  280869:	56                   	push   %esi
  28086a:	e8 75 3f 00 00       	call   2847e4 <keywin_off>
											key_win = sht;
											keywin_on(key_win);
  28086f:	89 3c 24             	mov    %edi,(%esp)
  280872:	e8 a1 3f 00 00       	call   284818 <keywin_on>
  280877:	83 c4 10             	add    $0x10,%esp
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  28087a:	83 bd d8 fb ff ff 02 	cmpl   $0x2,-0x428(%ebp)
  280881:	8b 47 04             	mov    0x4(%edi),%eax
  280884:	7e 3d                	jle    2808c3 <bootmain+0x8c3>
  280886:	8d 50 fd             	lea    -0x3(%eax),%edx
  280889:	39 95 d8 fb ff ff    	cmp    %edx,-0x428(%ebp)
  28088f:	7d 32                	jge    2808c3 <bootmain+0x8c3>
  280891:	8d 53 fd             	lea    -0x3(%ebx),%edx
  280894:	83 fa 11             	cmp    $0x11,%edx
  280897:	77 2a                	ja     2808c3 <bootmain+0x8c3>
										{
											mmx = mx;
											mmy = my;
											mmx2 = sht->vx0;
  280899:	8b 77 0c             	mov    0xc(%edi),%esi
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  28089c:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
											mmy = my;
											mmx2 = sht->vx0;
  2808a2:	89 b5 a0 fb ff ff    	mov    %esi,-0x460(%ebp)
											new_wy = sht->vy0;
  2808a8:	8b 77 10             	mov    0x10(%edi),%esi
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808ab:	89 8d c0 fb ff ff    	mov    %ecx,-0x440(%ebp)
											mmy = my;
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
  2808b1:	89 b5 b8 fb ff ff    	mov    %esi,-0x448(%ebp)
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
											mmy = my;
  2808b7:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
  2808bd:	89 b5 ac fb ff ff    	mov    %esi,-0x454(%ebp)
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19) //click the close button
  2808c3:	8d 50 eb             	lea    -0x15(%eax),%edx
  2808c6:	39 95 d8 fb ff ff    	cmp    %edx,-0x428(%ebp)
  2808cc:	7c 4c                	jl     28091a <bootmain+0x91a>
  2808ce:	83 e8 05             	sub    $0x5,%eax
  2808d1:	39 85 d8 fb ff ff    	cmp    %eax,-0x428(%ebp)
  2808d7:	7d 41                	jge    28091a <bootmain+0x91a>
  2808d9:	83 eb 05             	sub    $0x5,%ebx
  2808dc:	83 fb 0d             	cmp    $0xd,%ebx
  2808df:	77 39                	ja     28091a <bootmain+0x91a>
										{
											if(sht->flags & 0x10)
  2808e1:	f6 47 1c 10          	testb  $0x10,0x1c(%edi)
  2808e5:	74 33                	je     28091a <bootmain+0x91a>
											{
												if(sht->task != 0)
  2808e7:	8b 5f 24             	mov    0x24(%edi),%ebx
  2808ea:	85 db                	test   %ebx,%ebx
  2808ec:	74 2c                	je     28091a <bootmain+0x91a>
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  2808ee:	52                   	push   %edx
  2808ef:	52                   	push   %edx
  2808f0:	68 8e 49 28 00       	push   $0x28498e
  2808f5:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  2808fb:	e8 ca 31 00 00       	call   283aca <cons_putstr0>
													io_cli();
  280900:	e8 ed 00 00 00       	call   2809f2 <io_cli>
													task->tss.eax = (int)&(task->tss.esp0);
  280905:	8d 43 30             	lea    0x30(%ebx),%eax
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
  280908:	c7 43 4c b0 2c 00 00 	movl   $0x2cb0,0x4c(%ebx)
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task->tss.eax = (int)&(task->tss.esp0);
  28090f:	89 43 54             	mov    %eax,0x54(%ebx)
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
													io_sti();
  280912:	e8 dd 00 00 00       	call   2809f4 <io_sti>
  280917:	83 c4 10             	add    $0x10,%esp
  28091a:	89 fe                	mov    %edi,%esi
  28091c:	eb 06                	jmp    280924 <bootmain+0x924>
					new_my = my;
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  28091e:	48                   	dec    %eax
  28091f:	e9 c2 fe ff ff       	jmp    2807e6 <bootmain+0x7e6>
  280924:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  28092a:	eb 3d                	jmp    280969 <bootmain+0x969>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
  28092c:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280932:	2b 85 c0 fb ff ff    	sub    -0x440(%ebp),%eax
  280938:	8b 8d a0 fb ff ff    	mov    -0x460(%ebp),%ecx
  28093e:	8d 44 01 02          	lea    0x2(%ecx,%eax,1),%eax
  280942:	83 e0 fc             	and    $0xfffffffc,%eax
  280945:	89 85 c4 fb ff ff    	mov    %eax,-0x43c(%ebp)
							new_wy = new_wy+y;
  28094b:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280951:	2b 85 ac fb ff ff    	sub    -0x454(%ebp),%eax
  280957:	01 85 b8 fb ff ff    	add    %eax,-0x448(%ebp)
							//sheet_slide(sht,(mmx2+x+2)&~3,sht->vy0+y);
							mmy = my;
  28095d:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280963:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
							new_wy = new_wy+y;
  280969:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  28096f:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280975:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
  28097b:	e9 c5 f9 ff ff       	jmp    280345 <bootmain+0x345>
						}
					}
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
  280980:	81 bd c4 fb ff ff ff 	cmpl   $0x7fffffff,-0x43c(%ebp)
  280987:	ff ff 7f 
  28098a:	75 27                	jne    2809b3 <bootmain+0x9b3>
  28098c:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280992:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  280998:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  28099e:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  2809a4:	c7 85 c0 fb ff ff ff 	movl   $0xffffffff,-0x440(%ebp)
  2809ab:	ff ff ff 
  2809ae:	e9 92 f9 ff ff       	jmp    280345 <bootmain+0x345>
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  2809b3:	50                   	push   %eax
  2809b4:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  2809ba:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  2809c0:	57                   	push   %edi
  2809c1:	e8 6d 1f 00 00       	call   282933 <sheet_slide>
  2809c6:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809cc:	83 c4 10             	add    $0x10,%esp
							new_wx = 0x7fffffff;
  2809cf:	c7 85 c4 fb ff ff ff 	movl   $0x7fffffff,-0x43c(%ebp)
  2809d6:	ff ff 7f 
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  2809d9:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809df:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  2809e5:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
  2809eb:	eb b7                	jmp    2809a4 <bootmain+0x9a4>
  2809ed:	66 90                	xchg   %ax,%ax
  2809ef:	90                   	nop

002809f0 <io_hlt>:
  2809f0:	f4                   	hlt    
  2809f1:	c3                   	ret    

002809f2 <io_cli>:
  2809f2:	fa                   	cli    
  2809f3:	c3                   	ret    

002809f4 <io_sti>:
  2809f4:	fb                   	sti    
  2809f5:	c3                   	ret    

002809f6 <io_stihlt>:
  2809f6:	fb                   	sti    
  2809f7:	f4                   	hlt    
  2809f8:	c3                   	ret    

002809f9 <write_mem8>:
  2809f9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  2809fd:	8a 44 24 08          	mov    0x8(%esp),%al
  280a01:	88 01                	mov    %al,(%ecx)
  280a03:	c3                   	ret    

00280a04 <io_in8>:
  280a04:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a08:	b8 00 00 00 00       	mov    $0x0,%eax
  280a0d:	ec                   	in     (%dx),%al
  280a0e:	c3                   	ret    

00280a0f <io_in16>:
  280a0f:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a13:	b8 00 00 00 00       	mov    $0x0,%eax
  280a18:	66 ed                	in     (%dx),%ax
  280a1a:	c3                   	ret    

00280a1b <io_in32>:
  280a1b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a1f:	b8 00 00 00 00       	mov    $0x0,%eax
  280a24:	ed                   	in     (%dx),%eax
  280a25:	c3                   	ret    

00280a26 <io_out8>:
  280a26:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a2a:	8b 44 24 08          	mov    0x8(%esp),%eax
  280a2e:	ee                   	out    %al,(%dx)
  280a2f:	c3                   	ret    

00280a30 <io_out16>:
  280a30:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a34:	8b 44 24 08          	mov    0x8(%esp),%eax
  280a38:	66 ef                	out    %ax,(%dx)
  280a3a:	c3                   	ret    

00280a3b <io_out32>:
  280a3b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a3f:	8b 44 24 08          	mov    0x8(%esp),%eax
  280a43:	ef                   	out    %eax,(%dx)
  280a44:	c3                   	ret    

00280a45 <io_load_eflags>:
  280a45:	9c                   	pushf  
  280a46:	58                   	pop    %eax
  280a47:	c3                   	ret    

00280a48 <io_store_eflags>:
  280a48:	8b 44 24 04          	mov    0x4(%esp),%eax
  280a4c:	50                   	push   %eax
  280a4d:	9d                   	popf   
  280a4e:	c3                   	ret    

00280a4f <load_gdtr>:
  280a4f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280a54:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280a59:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280a5e:	c3                   	ret    

00280a5f <load_idtr>:
  280a5f:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280a64:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280a69:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280a6e:	c3                   	ret    

00280a6f <load_cr0>:
  280a6f:	0f 20 c0             	mov    %cr0,%eax
  280a72:	c3                   	ret    

00280a73 <store_cr0>:
  280a73:	8b 44 24 04          	mov    0x4(%esp),%eax
  280a77:	0f 22 c0             	mov    %eax,%cr0
  280a7a:	c3                   	ret    

00280a7b <_memtest_sub>:
  280a7b:	57                   	push   %edi
  280a7c:	56                   	push   %esi
  280a7d:	53                   	push   %ebx
  280a7e:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280a83:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280a88:	8b 44 24 10          	mov    0x10(%esp),%eax

00280a8c <mts_loop>:
  280a8c:	89 c3                	mov    %eax,%ebx
  280a8e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280a94:	8b 13                	mov    (%ebx),%edx
  280a96:	89 33                	mov    %esi,(%ebx)
  280a98:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280a9b:	3b 3b                	cmp    (%ebx),%edi
  280a9d:	75 18                	jne    280ab7 <mts_qit>
  280a9f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280aa2:	3b 33                	cmp    (%ebx),%esi
  280aa4:	75 11                	jne    280ab7 <mts_qit>
  280aa6:	89 13                	mov    %edx,(%ebx)
  280aa8:	05 00 10 00 00       	add    $0x1000,%eax
  280aad:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280ab1:	76 d9                	jbe    280a8c <mts_loop>

00280ab3 <mts_ret>:
  280ab3:	5b                   	pop    %ebx
  280ab4:	5e                   	pop    %esi
  280ab5:	5f                   	pop    %edi
  280ab6:	c3                   	ret    

00280ab7 <mts_qit>:
  280ab7:	89 13                	mov    %edx,(%ebx)
  280ab9:	5b                   	pop    %ebx
  280aba:	5e                   	pop    %esi
  280abb:	5f                   	pop    %edi
  280abc:	c3                   	ret    

00280abd <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280abd:	55                   	push   %ebp
  280abe:	89 e5                	mov    %esp,%ebp
  280ac0:	57                   	push   %edi
  280ac1:	56                   	push   %esi
  280ac2:	53                   	push   %ebx
  280ac3:	83 ec 1c             	sub    $0x1c,%esp
  280ac6:	8b 75 08             	mov    0x8(%ebp),%esi
  280ac9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280acc:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280acf:	e8 71 ff ff ff       	call   280a45 <io_load_eflags>
  280ad4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280ad7:	e8 16 ff ff ff       	call   2809f2 <io_cli>
	io_out8(0x03c8,start);
  280adc:	83 ec 08             	sub    $0x8,%esp
  280adf:	56                   	push   %esi
  280ae0:	68 c8 03 00 00       	push   $0x3c8
  280ae5:	e8 3c ff ff ff       	call   280a26 <io_out8>
	for(i=start;i<=end;i++)
  280aea:	83 c4 10             	add    $0x10,%esp
  280aed:	39 fe                	cmp    %edi,%esi
  280aef:	7f 54                	jg     280b45 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280af1:	83 ec 08             	sub    $0x8,%esp
  280af4:	0f b6 03             	movzbl (%ebx),%eax
  280af7:	c0 e8 02             	shr    $0x2,%al
  280afa:	0f b6 c0             	movzbl %al,%eax
  280afd:	50                   	push   %eax
  280afe:	68 c9 03 00 00       	push   $0x3c9
  280b03:	e8 1e ff ff ff       	call   280a26 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280b08:	83 c4 08             	add    $0x8,%esp
  280b0b:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280b0f:	c0 e8 02             	shr    $0x2,%al
  280b12:	0f b6 c0             	movzbl %al,%eax
  280b15:	50                   	push   %eax
  280b16:	68 c9 03 00 00       	push   $0x3c9
  280b1b:	e8 06 ff ff ff       	call   280a26 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280b20:	83 c4 08             	add    $0x8,%esp
  280b23:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280b27:	c0 e8 02             	shr    $0x2,%al
  280b2a:	0f b6 c0             	movzbl %al,%eax
  280b2d:	50                   	push   %eax
  280b2e:	68 c9 03 00 00       	push   $0x3c9
  280b33:	e8 ee fe ff ff       	call   280a26 <io_out8>
		rgb+=3;
  280b38:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280b3b:	83 c6 01             	add    $0x1,%esi
  280b3e:	83 c4 10             	add    $0x10,%esp
  280b41:	39 f7                	cmp    %esi,%edi
  280b43:	7d ac                	jge    280af1 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280b45:	83 ec 0c             	sub    $0xc,%esp
  280b48:	ff 75 e4             	pushl  -0x1c(%ebp)
  280b4b:	e8 f8 fe ff ff       	call   280a48 <io_store_eflags>
	return;
  280b50:	83 c4 10             	add    $0x10,%esp
}
  280b53:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280b56:	5b                   	pop    %ebx
  280b57:	5e                   	pop    %esi
  280b58:	5f                   	pop    %edi
  280b59:	5d                   	pop    %ebp
  280b5a:	c3                   	ret    

00280b5b <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280b5b:	55                   	push   %ebp
  280b5c:	89 e5                	mov    %esp,%ebp
  280b5e:	57                   	push   %edi
  280b5f:	56                   	push   %esi
  280b60:	53                   	push   %ebx
  280b61:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280b67:	68 a0 5b 28 00       	push   $0x285ba0
  280b6c:	6a 0f                	push   $0xf
  280b6e:	6a 00                	push   $0x0
  280b70:	e8 48 ff ff ff       	call   280abd <set_palette>
  280b75:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280b7b:	83 c4 10             	add    $0x10,%esp
  280b7e:	bb 00 00 00 00       	mov    $0x0,%ebx
  280b83:	eb 32                	jmp    280bb7 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280b85:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280b87:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280b8a:	88 58 02             	mov    %bl,0x2(%eax)
  280b8d:	83 c2 33             	add    $0x33,%edx
  280b90:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280b93:	80 fa 32             	cmp    $0x32,%dl
  280b96:	75 ed                	jne    280b85 <init_palette+0x2a>
  280b98:	83 c6 12             	add    $0x12,%esi
  280b9b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280b9e:	80 f9 32             	cmp    $0x32,%cl
  280ba1:	74 09                	je     280bac <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280ba3:	89 f0                	mov    %esi,%eax
  280ba5:	ba 00 00 00 00       	mov    $0x0,%edx
  280baa:	eb d9                	jmp    280b85 <init_palette+0x2a>
  280bac:	83 c3 33             	add    $0x33,%ebx
  280baf:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280bb2:	80 fb 32             	cmp    $0x32,%bl
  280bb5:	74 09                	je     280bc0 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280bb7:	89 fe                	mov    %edi,%esi
  280bb9:	b9 00 00 00 00       	mov    $0x0,%ecx
  280bbe:	eb e3                	jmp    280ba3 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280bc0:	83 ec 04             	sub    $0x4,%esp
  280bc3:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280bc9:	50                   	push   %eax
  280bca:	68 e7 00 00 00       	push   $0xe7
  280bcf:	6a 10                	push   $0x10
  280bd1:	e8 e7 fe ff ff       	call   280abd <set_palette>
	return;	
  280bd6:	83 c4 10             	add    $0x10,%esp
}
  280bd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280bdc:	5b                   	pop    %ebx
  280bdd:	5e                   	pop    %esi
  280bde:	5f                   	pop    %edi
  280bdf:	5d                   	pop    %ebp
  280be0:	c3                   	ret    

00280be1 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280be1:	55                   	push   %ebp
  280be2:	89 e5                	mov    %esp,%ebp
  280be4:	57                   	push   %edi
  280be5:	56                   	push   %esi
  280be6:	53                   	push   %ebx
  280be7:	83 ec 04             	sub    $0x4,%esp
  280bea:	8b 55 0c             	mov    0xc(%ebp),%edx
  280bed:	8b 7d 14             	mov    0x14(%ebp),%edi
  280bf0:	8b 75 18             	mov    0x18(%ebp),%esi
  280bf3:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280bf6:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280bfa:	3b 75 20             	cmp    0x20(%ebp),%esi
  280bfd:	7f 28                	jg     280c27 <boxfill8+0x46>
  280bff:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280c02:	0f af d6             	imul   %esi,%edx
  280c05:	03 55 08             	add    0x8(%ebp),%edx
  280c08:	eb 15                	jmp    280c1f <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280c0a:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280c0d:	83 c0 01             	add    $0x1,%eax
  280c10:	39 c1                	cmp    %eax,%ecx
  280c12:	7d f6                	jge    280c0a <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280c14:	83 c6 01             	add    $0x1,%esi
  280c17:	03 55 f0             	add    -0x10(%ebp),%edx
  280c1a:	39 75 20             	cmp    %esi,0x20(%ebp)
  280c1d:	7c 08                	jl     280c27 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280c1f:	89 f8                	mov    %edi,%eax
  280c21:	39 cf                	cmp    %ecx,%edi
  280c23:	7e e5                	jle    280c0a <boxfill8+0x29>
  280c25:	eb ed                	jmp    280c14 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280c27:	83 c4 04             	add    $0x4,%esp
  280c2a:	5b                   	pop    %ebx
  280c2b:	5e                   	pop    %esi
  280c2c:	5f                   	pop    %edi
  280c2d:	5d                   	pop    %ebp
  280c2e:	c3                   	ret    

00280c2f <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280c2f:	55                   	push   %ebp
  280c30:	89 e5                	mov    %esp,%ebp
  280c32:	53                   	push   %ebx
  280c33:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280c36:	8b 55 10             	mov    0x10(%ebp),%edx
  280c39:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280c3d:	85 d2                	test   %edx,%edx
  280c3f:	7e 0d                	jle    280c4e <boxfill8_test+0x1f>
  280c41:	89 d8                	mov    %ebx,%eax
  280c43:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280c45:	88 08                	mov    %cl,(%eax)
  280c47:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280c4a:	39 d0                	cmp    %edx,%eax
  280c4c:	75 f7                	jne    280c45 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280c4e:	5b                   	pop    %ebx
  280c4f:	5d                   	pop    %ebp
  280c50:	c3                   	ret    

00280c51 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280c51:	55                   	push   %ebp
  280c52:	89 e5                	mov    %esp,%ebp
  280c54:	57                   	push   %edi
  280c55:	56                   	push   %esi
  280c56:	53                   	push   %ebx
  280c57:	83 ec 14             	sub    $0x14,%esp
  280c5a:	8b 7d 08             	mov    0x8(%ebp),%edi
  280c5d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280c60:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280c63:	68 be 00 00 00       	push   $0xbe
  280c68:	68 36 01 00 00       	push   $0x136
  280c6d:	6a 00                	push   $0x0
  280c6f:	6a 00                	push   $0x0
  280c71:	6a 0e                	push   $0xe
  280c73:	68 36 01 00 00       	push   $0x136
  280c78:	57                   	push   %edi
  280c79:	e8 63 ff ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280c7e:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280c81:	89 c2                	mov    %eax,%edx
  280c83:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280c86:	50                   	push   %eax
  280c87:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280c8a:	52                   	push   %edx
  280c8b:	6a 00                	push   $0x0
  280c8d:	6a 00                	push   $0x0
  280c8f:	6a 0e                	push   $0xe
  280c91:	53                   	push   %ebx
  280c92:	57                   	push   %edi
  280c93:	e8 49 ff ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280c98:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280c9b:	83 c4 38             	add    $0x38,%esp
  280c9e:	50                   	push   %eax
  280c9f:	ff 75 f0             	pushl  -0x10(%ebp)
  280ca2:	50                   	push   %eax
  280ca3:	6a 00                	push   $0x0
  280ca5:	6a 08                	push   $0x8
  280ca7:	53                   	push   %ebx
  280ca8:	57                   	push   %edi
  280ca9:	e8 33 ff ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280cae:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280cb1:	50                   	push   %eax
  280cb2:	ff 75 f0             	pushl  -0x10(%ebp)
  280cb5:	50                   	push   %eax
  280cb6:	6a 00                	push   $0x0
  280cb8:	6a 07                	push   $0x7
  280cba:	53                   	push   %ebx
  280cbb:	57                   	push   %edi
  280cbc:	e8 20 ff ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280cc1:	83 c4 38             	add    $0x38,%esp
  280cc4:	8d 46 ff             	lea    -0x1(%esi),%eax
  280cc7:	50                   	push   %eax
  280cc8:	ff 75 f0             	pushl  -0x10(%ebp)
  280ccb:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280cce:	50                   	push   %eax
  280ccf:	6a 00                	push   $0x0
  280cd1:	6a 08                	push   $0x8
  280cd3:	53                   	push   %ebx
  280cd4:	57                   	push   %edi
  280cd5:	e8 07 ff ff ff       	call   280be1 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280cda:	8d 46 e8             	lea    -0x18(%esi),%eax
  280cdd:	50                   	push   %eax
  280cde:	6a 3b                	push   $0x3b
  280ce0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280ce3:	50                   	push   %eax
  280ce4:	6a 03                	push   $0x3
  280ce6:	6a 07                	push   $0x7
  280ce8:	53                   	push   %ebx
  280ce9:	57                   	push   %edi
  280cea:	e8 f2 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280cef:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280cf2:	83 c4 38             	add    $0x38,%esp
  280cf5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280cf8:	51                   	push   %ecx
  280cf9:	6a 02                	push   $0x2
  280cfb:	ff 75 f0             	pushl  -0x10(%ebp)
  280cfe:	6a 02                	push   $0x2
  280d00:	6a 07                	push   $0x7
  280d02:	53                   	push   %ebx
  280d03:	57                   	push   %edi
  280d04:	e8 d8 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280d09:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280d0c:	51                   	push   %ecx
  280d0d:	6a 3b                	push   $0x3b
  280d0f:	51                   	push   %ecx
  280d10:	6a 03                	push   $0x3
  280d12:	6a 0f                	push   $0xf
  280d14:	53                   	push   %ebx
  280d15:	57                   	push   %edi
  280d16:	e8 c6 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280d1b:	8d 56 e9             	lea    -0x17(%esi),%edx
  280d1e:	83 c4 38             	add    $0x38,%esp
  280d21:	8d 46 fb             	lea    -0x5(%esi),%eax
  280d24:	50                   	push   %eax
  280d25:	6a 3b                	push   $0x3b
  280d27:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280d2a:	52                   	push   %edx
  280d2b:	6a 3b                	push   $0x3b
  280d2d:	6a 0f                	push   $0xf
  280d2f:	53                   	push   %ebx
  280d30:	57                   	push   %edi
  280d31:	e8 ab fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280d36:	83 ee 03             	sub    $0x3,%esi
  280d39:	56                   	push   %esi
  280d3a:	6a 3b                	push   $0x3b
  280d3c:	56                   	push   %esi
  280d3d:	6a 02                	push   $0x2
  280d3f:	6a 00                	push   $0x0
  280d41:	53                   	push   %ebx
  280d42:	57                   	push   %edi
  280d43:	e8 99 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280d48:	83 c4 38             	add    $0x38,%esp
  280d4b:	56                   	push   %esi
  280d4c:	6a 3c                	push   $0x3c
  280d4e:	ff 75 f0             	pushl  -0x10(%ebp)
  280d51:	6a 3c                	push   $0x3c
  280d53:	6a 00                	push   $0x0
  280d55:	53                   	push   %ebx
  280d56:	57                   	push   %edi
  280d57:	e8 85 fe ff ff       	call   280be1 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280d5c:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280d5f:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280d65:	50                   	push   %eax
  280d66:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280d69:	51                   	push   %ecx
  280d6a:	50                   	push   %eax
  280d6b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280d6e:	52                   	push   %edx
  280d6f:	6a 0f                	push   $0xf
  280d71:	53                   	push   %ebx
  280d72:	57                   	push   %edi
  280d73:	e8 69 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280d78:	83 c4 38             	add    $0x38,%esp
  280d7b:	ff 75 ec             	pushl  -0x14(%ebp)
  280d7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280d81:	52                   	push   %edx
  280d82:	ff 75 e4             	pushl  -0x1c(%ebp)
  280d85:	52                   	push   %edx
  280d86:	6a 0f                	push   $0xf
  280d88:	53                   	push   %ebx
  280d89:	57                   	push   %edi
  280d8a:	e8 52 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280d8f:	56                   	push   %esi
  280d90:	ff 75 e0             	pushl  -0x20(%ebp)
  280d93:	56                   	push   %esi
  280d94:	ff 75 e8             	pushl  -0x18(%ebp)
  280d97:	6a 07                	push   $0x7
  280d99:	53                   	push   %ebx
  280d9a:	57                   	push   %edi
  280d9b:	e8 41 fe ff ff       	call   280be1 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280da0:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280da3:	83 c4 38             	add    $0x38,%esp
  280da6:	56                   	push   %esi
  280da7:	50                   	push   %eax
  280da8:	ff 75 f0             	pushl  -0x10(%ebp)
  280dab:	50                   	push   %eax
  280dac:	6a 07                	push   $0x7
  280dae:	53                   	push   %ebx
  280daf:	57                   	push   %edi
  280db0:	e8 2c fe ff ff       	call   280be1 <boxfill8>
}
  280db5:	83 c4 1c             	add    $0x1c,%esp
  280db8:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280dbb:	5b                   	pop    %ebx
  280dbc:	5e                   	pop    %esi
  280dbd:	5f                   	pop    %edi
  280dbe:	5d                   	pop    %ebp
  280dbf:	c3                   	ret    

00280dc0 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280dc0:	55                   	push   %ebp
  280dc1:	89 e5                	mov    %esp,%ebp
  280dc3:	57                   	push   %edi
  280dc4:	56                   	push   %esi
  280dc5:	53                   	push   %ebx
  280dc6:	83 ec 08             	sub    $0x8,%esp
  280dc9:	8b 75 08             	mov    0x8(%ebp),%esi
  280dcc:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280dd0:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280dd3:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280dd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280ddc:	eb 38                	jmp    280e16 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280dde:	0f b6 94 03 80 4a 28 	movzbl 0x284a80(%ebx,%eax,1),%edx
  280de5:	00 
  280de6:	80 fa 2a             	cmp    $0x2a,%dl
  280de9:	75 06                	jne    280df1 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280deb:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280def:	eb 15                	jmp    280e06 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280df1:	80 fa 4f             	cmp    $0x4f,%dl
  280df4:	75 06                	jne    280dfc <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280df6:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280dfa:	eb 0a                	jmp    280e06 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280dfc:	80 fa 2e             	cmp    $0x2e,%dl
  280dff:	75 05                	jne    280e06 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280e01:	89 fa                	mov    %edi,%edx
  280e03:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280e06:	83 c0 01             	add    $0x1,%eax
  280e09:	83 f8 10             	cmp    $0x10,%eax
  280e0c:	75 d0                	jne    280dde <init_mouse_cursor8+0x1e>
  280e0e:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280e11:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280e14:	74 0c                	je     280e22 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280e16:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e1b:	89 f3                	mov    %esi,%ebx
  280e1d:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280e20:	eb bc                	jmp    280dde <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280e22:	83 c4 08             	add    $0x8,%esp
  280e25:	5b                   	pop    %ebx
  280e26:	5e                   	pop    %esi
  280e27:	5f                   	pop    %edi
  280e28:	5d                   	pop    %ebp
  280e29:	c3                   	ret    

00280e2a <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280e2a:	55                   	push   %ebp
  280e2b:	89 e5                	mov    %esp,%ebp
  280e2d:	57                   	push   %edi
  280e2e:	56                   	push   %esi
  280e2f:	53                   	push   %ebx
  280e30:	83 ec 1c             	sub    $0x1c,%esp
  280e33:	8b 75 08             	mov    0x8(%ebp),%esi
  280e36:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280e39:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280e3c:	80 fa 01             	cmp    $0x1,%dl
  280e3f:	19 c0                	sbb    %eax,%eax
  280e41:	83 e0 03             	and    $0x3,%eax
  280e44:	83 c0 0c             	add    $0xc,%eax
  280e47:	80 fa 01             	cmp    $0x1,%dl
  280e4a:	19 ff                	sbb    %edi,%edi
  280e4c:	f7 d7                	not    %edi
  280e4e:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280e51:	6a 14                	push   $0x14
  280e53:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280e56:	52                   	push   %edx
  280e57:	6a 03                	push   $0x3
  280e59:	6a 03                	push   $0x3
  280e5b:	0f b6 c0             	movzbl %al,%eax
  280e5e:	50                   	push   %eax
  280e5f:	53                   	push   %ebx
  280e60:	56                   	push   %esi
  280e61:	e8 7b fd ff ff       	call   280be1 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280e66:	83 c4 04             	add    $0x4,%esp
  280e69:	ff 75 10             	pushl  0x10(%ebp)
  280e6c:	89 f8                	mov    %edi,%eax
  280e6e:	0f be f8             	movsbl %al,%edi
  280e71:	57                   	push   %edi
  280e72:	6a 04                	push   $0x4
  280e74:	6a 18                	push   $0x18
  280e76:	53                   	push   %ebx
  280e77:	56                   	push   %esi
  280e78:	e8 c7 04 00 00       	call   281344 <putfonts8_asc>
  280e7d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280e80:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280e83:	01 fb                	add    %edi,%ebx
  280e85:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280e88:	83 c4 30             	add    $0x30,%esp
  280e8b:	be 00 00 00 00       	mov    $0x0,%esi
  280e90:	eb 41                	jmp    280ed3 <make_wtitle8+0xa9>
  280e92:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280e94:	0f b6 9c 06 a0 49 28 	movzbl 0x2849a0(%esi,%eax,1),%ebx
  280e9b:	00 
			if(c == '@') c=COL8_000000;
  280e9c:	ba 00 00 00 00       	mov    $0x0,%edx
  280ea1:	80 fb 40             	cmp    $0x40,%bl
  280ea4:	74 13                	je     280eb9 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280ea6:	ba 0f 00 00 00       	mov    $0xf,%edx
  280eab:	80 fb 24             	cmp    $0x24,%bl
  280eae:	74 09                	je     280eb9 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280eb0:	80 fb 51             	cmp    $0x51,%bl
  280eb3:	0f 94 c2             	sete   %dl
  280eb6:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280eb9:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280ebd:	83 c0 01             	add    $0x1,%eax
  280ec0:	83 f8 10             	cmp    $0x10,%eax
  280ec3:	75 cd                	jne    280e92 <make_wtitle8+0x68>
  280ec5:	03 7d e4             	add    -0x1c(%ebp),%edi
  280ec8:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280ecb:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280ed1:	74 07                	je     280eda <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280ed3:	b8 00 00 00 00       	mov    $0x0,%eax
  280ed8:	eb b8                	jmp    280e92 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280eda:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280edd:	5b                   	pop    %ebx
  280ede:	5e                   	pop    %esi
  280edf:	5f                   	pop    %edi
  280ee0:	5d                   	pop    %ebp
  280ee1:	c3                   	ret    

00280ee2 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280ee2:	55                   	push   %ebp
  280ee3:	89 e5                	mov    %esp,%ebp
  280ee5:	57                   	push   %edi
  280ee6:	56                   	push   %esi
  280ee7:	53                   	push   %ebx
  280ee8:	83 ec 1c             	sub    $0x1c,%esp
  280eeb:	8b 75 08             	mov    0x8(%ebp),%esi
  280eee:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280ef1:	8b 45 18             	mov    0x18(%ebp),%eax
  280ef4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280ef7:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280efa:	6a 00                	push   $0x0
  280efc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280eff:	50                   	push   %eax
  280f00:	6a 00                	push   $0x0
  280f02:	6a 00                	push   $0x0
  280f04:	6a 08                	push   $0x8
  280f06:	53                   	push   %ebx
  280f07:	56                   	push   %esi
  280f08:	e8 d4 fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280f0d:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280f10:	6a 01                	push   $0x1
  280f12:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280f15:	52                   	push   %edx
  280f16:	6a 01                	push   $0x1
  280f18:	6a 01                	push   $0x1
  280f1a:	6a 07                	push   $0x7
  280f1c:	53                   	push   %ebx
  280f1d:	56                   	push   %esi
  280f1e:	e8 be fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  280f23:	8b 7d 10             	mov    0x10(%ebp),%edi
  280f26:	8d 4f ff             	lea    -0x1(%edi),%ecx
  280f29:	83 c4 38             	add    $0x38,%esp
  280f2c:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  280f2f:	51                   	push   %ecx
  280f30:	6a 00                	push   $0x0
  280f32:	6a 00                	push   $0x0
  280f34:	6a 00                	push   $0x0
  280f36:	6a 08                	push   $0x8
  280f38:	53                   	push   %ebx
  280f39:	56                   	push   %esi
  280f3a:	e8 a2 fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  280f3f:	8b 7d 10             	mov    0x10(%ebp),%edi
  280f42:	83 ef 02             	sub    $0x2,%edi
  280f45:	57                   	push   %edi
  280f46:	6a 01                	push   $0x1
  280f48:	6a 01                	push   $0x1
  280f4a:	6a 01                	push   $0x1
  280f4c:	6a 07                	push   $0x7
  280f4e:	53                   	push   %ebx
  280f4f:	56                   	push   %esi
  280f50:	e8 8c fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  280f55:	83 c4 38             	add    $0x38,%esp
  280f58:	57                   	push   %edi
  280f59:	8b 55 e0             	mov    -0x20(%ebp),%edx
  280f5c:	52                   	push   %edx
  280f5d:	6a 01                	push   $0x1
  280f5f:	52                   	push   %edx
  280f60:	6a 0f                	push   $0xf
  280f62:	53                   	push   %ebx
  280f63:	56                   	push   %esi
  280f64:	e8 78 fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  280f69:	ff 75 dc             	pushl  -0x24(%ebp)
  280f6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  280f6f:	50                   	push   %eax
  280f70:	6a 00                	push   $0x0
  280f72:	50                   	push   %eax
  280f73:	6a 00                	push   $0x0
  280f75:	53                   	push   %ebx
  280f76:	56                   	push   %esi
  280f77:	e8 65 fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  280f7c:	83 c4 38             	add    $0x38,%esp
  280f7f:	8b 55 10             	mov    0x10(%ebp),%edx
  280f82:	8d 42 fd             	lea    -0x3(%edx),%eax
  280f85:	50                   	push   %eax
  280f86:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280f89:	50                   	push   %eax
  280f8a:	6a 02                	push   $0x2
  280f8c:	6a 02                	push   $0x2
  280f8e:	6a 08                	push   $0x8
  280f90:	53                   	push   %ebx
  280f91:	56                   	push   %esi
  280f92:	e8 4a fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  280f97:	57                   	push   %edi
  280f98:	ff 75 e0             	pushl  -0x20(%ebp)
  280f9b:	57                   	push   %edi
  280f9c:	6a 01                	push   $0x1
  280f9e:	6a 0f                	push   $0xf
  280fa0:	53                   	push   %ebx
  280fa1:	56                   	push   %esi
  280fa2:	e8 3a fc ff ff       	call   280be1 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  280fa7:	83 c4 38             	add    $0x38,%esp
  280faa:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  280fad:	51                   	push   %ecx
  280fae:	ff 75 e4             	pushl  -0x1c(%ebp)
  280fb1:	51                   	push   %ecx
  280fb2:	6a 00                	push   $0x0
  280fb4:	6a 00                	push   $0x0
  280fb6:	53                   	push   %ebx
  280fb7:	56                   	push   %esi
  280fb8:	e8 24 fc ff ff       	call   280be1 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  280fbd:	83 c4 1c             	add    $0x1c,%esp
  280fc0:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  280fc4:	50                   	push   %eax
  280fc5:	ff 75 14             	pushl  0x14(%ebp)
  280fc8:	53                   	push   %ebx
  280fc9:	56                   	push   %esi
  280fca:	e8 5b fe ff ff       	call   280e2a <make_wtitle8>
	return;
  280fcf:	83 c4 10             	add    $0x10,%esp
}
  280fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280fd5:	5b                   	pop    %ebx
  280fd6:	5e                   	pop    %esi
  280fd7:	5f                   	pop    %edi
  280fd8:	5d                   	pop    %ebp
  280fd9:	c3                   	ret    

00280fda <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  280fda:	55                   	push   %ebp
  280fdb:	89 e5                	mov    %esp,%ebp
  280fdd:	57                   	push   %edi
  280fde:	56                   	push   %esi
  280fdf:	53                   	push   %ebx
  280fe0:	83 ec 04             	sub    $0x4,%esp
  280fe3:	8b 45 0c             	mov    0xc(%ebp),%eax
  280fe6:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  280fe9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  280fed:	7e 49                	jle    281038 <putblock8_8+0x5e>
  280fef:	8b 7d 24             	mov    0x24(%ebp),%edi
  280ff2:	8b 4d 20             	mov    0x20(%ebp),%ecx
  280ff5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280ff8:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  280ffc:	03 45 18             	add    0x18(%ebp),%eax
  280fff:	89 c2                	mov    %eax,%edx
  281001:	03 55 08             	add    0x8(%ebp),%edx
  281004:	be 00 00 00 00       	mov    $0x0,%esi
  281009:	eb 22                	jmp    28102d <putblock8_8+0x53>
  28100b:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  28100e:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  281012:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  281015:	83 c0 01             	add    $0x1,%eax
  281018:	39 45 10             	cmp    %eax,0x10(%ebp)
  28101b:	75 f1                	jne    28100e <putblock8_8+0x34>
  28101d:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  281020:	83 c6 01             	add    $0x1,%esi
  281023:	01 f9                	add    %edi,%ecx
  281025:	03 55 f0             	add    -0x10(%ebp),%edx
  281028:	39 75 14             	cmp    %esi,0x14(%ebp)
  28102b:	74 0b                	je     281038 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  28102d:	b8 00 00 00 00       	mov    $0x0,%eax
  281032:	85 db                	test   %ebx,%ebx
  281034:	7f d5                	jg     28100b <putblock8_8+0x31>
  281036:	eb e8                	jmp    281020 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  281038:	83 c4 04             	add    $0x4,%esp
  28103b:	5b                   	pop    %ebx
  28103c:	5e                   	pop    %esi
  28103d:	5f                   	pop    %edi
  28103e:	5d                   	pop    %ebp
  28103f:	c3                   	ret    

00281040 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  281040:	55                   	push   %ebp
  281041:	89 e5                	mov    %esp,%ebp
  281043:	57                   	push   %edi
  281044:	56                   	push   %esi
  281045:	53                   	push   %ebx
  281046:	83 ec 0c             	sub    $0xc,%esp
  281049:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28104c:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  28104f:	8b 45 20             	mov    0x20(%ebp),%eax
  281052:	8b 55 0c             	mov    0xc(%ebp),%edx
  281055:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  281058:	8d 46 0f             	lea    0xf(%esi),%eax
  28105b:	50                   	push   %eax
  28105c:	8d 47 ff             	lea    -0x1(%edi),%eax
  28105f:	50                   	push   %eax
  281060:	56                   	push   %esi
  281061:	52                   	push   %edx
  281062:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  281066:	50                   	push   %eax
  281067:	ff 73 04             	pushl  0x4(%ebx)
  28106a:	ff 33                	pushl  (%ebx)
  28106c:	e8 70 fb ff ff       	call   280be1 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  281071:	83 c4 04             	add    $0x4,%esp
  281074:	ff 75 1c             	pushl  0x1c(%ebp)
  281077:	ff 75 14             	pushl  0x14(%ebp)
  28107a:	56                   	push   %esi
  28107b:	ff 75 0c             	pushl  0xc(%ebp)
  28107e:	ff 73 04             	pushl  0x4(%ebx)
  281081:	ff 33                	pushl  (%ebx)
  281083:	e8 bc 02 00 00       	call   281344 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281088:	83 c4 24             	add    $0x24,%esp
  28108b:	8d 46 10             	lea    0x10(%esi),%eax
  28108e:	50                   	push   %eax
  28108f:	57                   	push   %edi
  281090:	56                   	push   %esi
  281091:	ff 75 0c             	pushl  0xc(%ebp)
  281094:	53                   	push   %ebx
  281095:	e8 7c 17 00 00       	call   282816 <sheet_refresh>
}
  28109a:	83 c4 20             	add    $0x20,%esp
  28109d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2810a0:	5b                   	pop    %ebx
  2810a1:	5e                   	pop    %esi
  2810a2:	5f                   	pop    %edi
  2810a3:	5d                   	pop    %ebp
  2810a4:	c3                   	ret    

002810a5 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  2810a5:	55                   	push   %ebp
  2810a6:	89 e5                	mov    %esp,%ebp
  2810a8:	57                   	push   %edi
  2810a9:	56                   	push   %esi
  2810aa:	53                   	push   %ebx
  2810ab:	83 ec 18             	sub    $0x18,%esp
  2810ae:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  2810b1:	8b 45 0c             	mov    0xc(%ebp),%eax
  2810b4:	03 45 14             	add    0x14(%ebp),%eax
  2810b7:	8b 55 10             	mov    0x10(%ebp),%edx
  2810ba:	03 55 18             	add    0x18(%ebp),%edx
  2810bd:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  2810bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
  2810c2:	8d 48 01             	lea    0x1(%eax),%ecx
  2810c5:	8b 75 10             	mov    0x10(%ebp),%esi
  2810c8:	83 ee 03             	sub    $0x3,%esi
  2810cb:	8b 55 0c             	mov    0xc(%ebp),%edx
  2810ce:	83 ea 02             	sub    $0x2,%edx
  2810d1:	56                   	push   %esi
  2810d2:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  2810d5:	51                   	push   %ecx
  2810d6:	56                   	push   %esi
  2810d7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  2810da:	52                   	push   %edx
  2810db:	6a 0f                	push   $0xf
  2810dd:	ff 73 04             	pushl  0x4(%ebx)
  2810e0:	ff 33                	pushl  (%ebx)
  2810e2:	e8 fa fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  2810e7:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  2810ea:	8d 7f 01             	lea    0x1(%edi),%edi
  2810ed:	89 f9                	mov    %edi,%ecx
  2810ef:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2810f2:	83 ef 03             	sub    $0x3,%edi
  2810f5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  2810f8:	51                   	push   %ecx
  2810f9:	57                   	push   %edi
  2810fa:	56                   	push   %esi
  2810fb:	57                   	push   %edi
  2810fc:	6a 0f                	push   $0xf
  2810fe:	ff 73 04             	pushl  0x4(%ebx)
  281101:	ff 33                	pushl  (%ebx)
  281103:	e8 d9 fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  281108:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  28110b:	8d 4a 02             	lea    0x2(%edx),%ecx
  28110e:	83 c4 38             	add    $0x38,%esp
  281111:	51                   	push   %ecx
  281112:	ff 75 e0             	pushl  -0x20(%ebp)
  281115:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  281118:	51                   	push   %ecx
  281119:	57                   	push   %edi
  28111a:	6a 07                	push   $0x7
  28111c:	ff 73 04             	pushl  0x4(%ebx)
  28111f:	ff 33                	pushl  (%ebx)
  281121:	e8 bb fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  281126:	8b 45 e8             	mov    -0x18(%ebp),%eax
  281129:	83 c0 02             	add    $0x2,%eax
  28112c:	ff 75 dc             	pushl  -0x24(%ebp)
  28112f:	50                   	push   %eax
  281130:	56                   	push   %esi
  281131:	50                   	push   %eax
  281132:	6a 07                	push   $0x7
  281134:	ff 73 04             	pushl  0x4(%ebx)
  281137:	ff 33                	pushl  (%ebx)
  281139:	e8 a3 fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  28113e:	8b 75 10             	mov    0x10(%ebp),%esi
  281141:	8d 7e fe             	lea    -0x2(%esi),%edi
  281144:	8b 75 0c             	mov    0xc(%ebp),%esi
  281147:	83 ee 01             	sub    $0x1,%esi
  28114a:	83 c4 38             	add    $0x38,%esp
  28114d:	57                   	push   %edi
  28114e:	ff 75 e8             	pushl  -0x18(%ebp)
  281151:	57                   	push   %edi
  281152:	56                   	push   %esi
  281153:	6a 00                	push   $0x0
  281155:	ff 73 04             	pushl  0x4(%ebx)
  281158:	ff 33                	pushl  (%ebx)
  28115a:	e8 82 fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  28115f:	ff 75 e4             	pushl  -0x1c(%ebp)
  281162:	8b 55 f0             	mov    -0x10(%ebp),%edx
  281165:	52                   	push   %edx
  281166:	57                   	push   %edi
  281167:	52                   	push   %edx
  281168:	6a 00                	push   $0x0
  28116a:	ff 73 04             	pushl  0x4(%ebx)
  28116d:	ff 33                	pushl  (%ebx)
  28116f:	e8 6d fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  281174:	83 c4 38             	add    $0x38,%esp
  281177:	8b 45 ec             	mov    -0x14(%ebp),%eax
  28117a:	50                   	push   %eax
  28117b:	ff 75 e8             	pushl  -0x18(%ebp)
  28117e:	50                   	push   %eax
  28117f:	ff 75 f0             	pushl  -0x10(%ebp)
  281182:	6a 08                	push   $0x8
  281184:	ff 73 04             	pushl  0x4(%ebx)
  281187:	ff 33                	pushl  (%ebx)
  281189:	e8 53 fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28118e:	ff 75 ec             	pushl  -0x14(%ebp)
  281191:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281194:	51                   	push   %ecx
  281195:	57                   	push   %edi
  281196:	51                   	push   %ecx
  281197:	6a 08                	push   $0x8
  281199:	ff 73 04             	pushl  0x4(%ebx)
  28119c:	ff 33                	pushl  (%ebx)
  28119e:	e8 3e fa ff ff       	call   280be1 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  2811a3:	83 c4 38             	add    $0x38,%esp
  2811a6:	ff 75 e4             	pushl  -0x1c(%ebp)
  2811a9:	ff 75 e8             	pushl  -0x18(%ebp)
  2811ac:	8b 45 10             	mov    0x10(%ebp),%eax
  2811af:	83 e8 01             	sub    $0x1,%eax
  2811b2:	50                   	push   %eax
  2811b3:	56                   	push   %esi
  2811b4:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  2811b8:	50                   	push   %eax
  2811b9:	ff 73 04             	pushl  0x4(%ebx)
  2811bc:	ff 33                	pushl  (%ebx)
  2811be:	e8 1e fa ff ff       	call   280be1 <boxfill8>
    return;
  2811c3:	83 c4 1c             	add    $0x1c,%esp
}
  2811c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2811c9:	5b                   	pop    %ebx
  2811ca:	5e                   	pop    %esi
  2811cb:	5f                   	pop    %edi
  2811cc:	5d                   	pop    %ebp
  2811cd:	c3                   	ret    

002811ce <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  2811ce:	55                   	push   %ebp
  2811cf:	89 e5                	mov    %esp,%ebp
  2811d1:	57                   	push   %edi
  2811d2:	56                   	push   %esi
  2811d3:	53                   	push   %ebx
  2811d4:	83 ec 10             	sub    $0x10,%esp
  2811d7:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  2811da:	8b 7d 14             	mov    0x14(%ebp),%edi
  2811dd:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  2811e0:	8b 45 18             	mov    0x18(%ebp),%eax
  2811e3:	2b 45 10             	sub    0x10(%ebp),%eax
  2811e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  2811e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2811ec:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  2811ef:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2811f2:	c1 e3 0a             	shl    $0xa,%ebx
  2811f5:	89 fa                	mov    %edi,%edx
  2811f7:	c1 fa 1f             	sar    $0x1f,%edx
  2811fa:	89 d0                	mov    %edx,%eax
  2811fc:	31 fa                	xor    %edi,%edx
  2811fe:	29 c2                	sub    %eax,%edx
  281200:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281203:	c1 f8 1f             	sar    $0x1f,%eax
  281206:	89 45 ec             	mov    %eax,-0x14(%ebp)
  281209:	33 45 f0             	xor    -0x10(%ebp),%eax
  28120c:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  28120f:	39 c2                	cmp    %eax,%edx
  281211:	7c 4a                	jl     28125d <drawline8_sht+0x8f>
	{
		len=dx+1;
  281213:	83 c2 01             	add    $0x1,%edx
  281216:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  281219:	8b 7d 0c             	mov    0xc(%ebp),%edi
  28121c:	39 7d 14             	cmp    %edi,0x14(%ebp)
  28121f:	b8 00 04 00 00       	mov    $0x400,%eax
  281224:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281229:	89 c7                	mov    %eax,%edi
  28122b:	0f 4c fa             	cmovl  %edx,%edi
  28122e:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  281231:	8b 7d 10             	mov    0x10(%ebp),%edi
  281234:	39 7d 18             	cmp    %edi,0x18(%ebp)
  281237:	7c 12                	jl     28124b <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  281239:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28123c:	83 c0 01             	add    $0x1,%eax
  28123f:	c1 e0 0a             	shl    $0xa,%eax
  281242:	99                   	cltd   
  281243:	f7 7d ec             	idivl  -0x14(%ebp)
  281246:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  281249:	eb 52                	jmp    28129d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  28124b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28124e:	83 e8 01             	sub    $0x1,%eax
  281251:	c1 e0 0a             	shl    $0xa,%eax
  281254:	99                   	cltd   
  281255:	f7 7d ec             	idivl  -0x14(%ebp)
  281258:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  28125b:	eb 40                	jmp    28129d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  28125d:	83 c0 01             	add    $0x1,%eax
  281260:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  281263:	8b 55 10             	mov    0x10(%ebp),%edx
  281266:	39 55 18             	cmp    %edx,0x18(%ebp)
  281269:	b8 00 04 00 00       	mov    $0x400,%eax
  28126e:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  281273:	0f 4c c2             	cmovl  %edx,%eax
  281276:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  281279:	8b 55 0c             	mov    0xc(%ebp),%edx
  28127c:	39 55 14             	cmp    %edx,0x14(%ebp)
  28127f:	7c 0f                	jl     281290 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281281:	8d 47 01             	lea    0x1(%edi),%eax
  281284:	c1 e0 0a             	shl    $0xa,%eax
  281287:	99                   	cltd   
  281288:	f7 7d ec             	idivl  -0x14(%ebp)
  28128b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28128e:	eb 0d                	jmp    28129d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281290:	8d 47 ff             	lea    -0x1(%edi),%eax
  281293:	c1 e0 0a             	shl    $0xa,%eax
  281296:	99                   	cltd   
  281297:	f7 7d ec             	idivl  -0x14(%ebp)
  28129a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28129d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  2812a1:	7e 31                	jle    2812d4 <drawline8_sht+0x106>
  2812a3:	ba 00 00 00 00       	mov    $0x0,%edx
  2812a8:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  2812ab:	89 d8                	mov    %ebx,%eax
  2812ad:	c1 f8 0a             	sar    $0xa,%eax
  2812b0:	0f af 46 04          	imul   0x4(%esi),%eax
  2812b4:	89 cf                	mov    %ecx,%edi
  2812b6:	c1 ff 0a             	sar    $0xa,%edi
  2812b9:	03 06                	add    (%esi),%eax
  2812bb:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  2812bf:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  2812c2:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  2812c5:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  2812c8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  2812cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812cf:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  2812d2:	75 d7                	jne    2812ab <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  2812d4:	83 c4 10             	add    $0x10,%esp
  2812d7:	5b                   	pop    %ebx
  2812d8:	5e                   	pop    %esi
  2812d9:	5f                   	pop    %edi
  2812da:	5d                   	pop    %ebp
  2812db:	c3                   	ret    

002812dc <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  2812dc:	55                   	push   %ebp
  2812dd:	89 e5                	mov    %esp,%ebp
  2812df:	57                   	push   %edi
  2812e0:	56                   	push   %esi
  2812e1:	53                   	push   %ebx
  2812e2:	83 ec 08             	sub    $0x8,%esp
  2812e5:	8b 45 0c             	mov    0xc(%ebp),%eax
  2812e8:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  2812eb:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  2812ef:	89 fb                	mov    %edi,%ebx
  2812f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  2812f4:	0f af 45 14          	imul   0x14(%ebp),%eax
  2812f8:	03 45 10             	add    0x10(%ebp),%eax
  2812fb:	89 c1                	mov    %eax,%ecx
  2812fd:	03 4d 08             	add    0x8(%ebp),%ecx
  281300:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  281303:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  281306:	b8 07 00 00 00       	mov    $0x7,%eax
  28130b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  28130e:	89 f1                	mov    %esi,%ecx
  281310:	89 de                	mov    %ebx,%esi
  281312:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  281314:	f6 c2 01             	test   $0x1,%dl
  281317:	74 06                	je     28131f <putfont8+0x43>
  281319:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  28131c:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  28131f:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  281321:	83 e8 01             	sub    $0x1,%eax
  281324:	83 f8 ff             	cmp    $0xffffffff,%eax
  281327:	75 eb                	jne    281314 <putfont8+0x38>
  281329:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  28132c:	89 d8                	mov    %ebx,%eax
  28132e:	89 f3                	mov    %esi,%ebx
  281330:	89 c6                	mov    %eax,%esi
  281332:	83 c3 01             	add    $0x1,%ebx
  281335:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  281338:	39 fb                	cmp    %edi,%ebx
  28133a:	75 c7                	jne    281303 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  28133c:	83 c4 08             	add    $0x8,%esp
  28133f:	5b                   	pop    %ebx
  281340:	5e                   	pop    %esi
  281341:	5f                   	pop    %edi
  281342:	5d                   	pop    %ebp
  281343:	c3                   	ret    

00281344 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  281344:	55                   	push   %ebp
  281345:	89 e5                	mov    %esp,%ebp
  281347:	57                   	push   %edi
  281348:	56                   	push   %esi
  281349:	53                   	push   %ebx
  28134a:	8b 75 10             	mov    0x10(%ebp),%esi
  28134d:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  281350:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  281354:	0f b6 03             	movzbl (%ebx),%eax
  281357:	84 c0                	test   %al,%al
  281359:	74 2f                	je     28138a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  28135b:	0f be fa             	movsbl %dl,%edi
  28135e:	0f b6 c0             	movzbl %al,%eax
  281361:	c1 e0 04             	shl    $0x4,%eax
  281364:	05 e0 5b 28 00       	add    $0x285be0,%eax
  281369:	50                   	push   %eax
  28136a:	57                   	push   %edi
  28136b:	ff 75 14             	pushl  0x14(%ebp)
  28136e:	56                   	push   %esi
  28136f:	ff 75 0c             	pushl  0xc(%ebp)
  281372:	ff 75 08             	pushl  0x8(%ebp)
  281375:	e8 62 ff ff ff       	call   2812dc <putfont8>
		x+=HKK_TABLE_COL;
  28137a:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  28137d:	83 c3 01             	add    $0x1,%ebx
  281380:	0f b6 03             	movzbl (%ebx),%eax
  281383:	83 c4 18             	add    $0x18,%esp
  281386:	84 c0                	test   %al,%al
  281388:	75 d4                	jne    28135e <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28138a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28138d:	5b                   	pop    %ebx
  28138e:	5e                   	pop    %esi
  28138f:	5f                   	pop    %edi
  281390:	5d                   	pop    %ebp
  281391:	c3                   	ret    

00281392 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281392:	55                   	push   %ebp
  281393:	89 e5                	mov    %esp,%ebp
  281395:	57                   	push   %edi
  281396:	56                   	push   %esi
  281397:	53                   	push   %ebx
  281398:	8b 55 08             	mov    0x8(%ebp),%edx
  28139b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28139e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  2813a1:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  2813a4:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  2813aa:	76 09                	jbe    2813b5 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  2813ac:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  2813b2:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  2813b5:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  2813b8:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  2813bc:	89 ce                	mov    %ecx,%esi
  2813be:	c1 fe 10             	sar    $0x10,%esi
  2813c1:	89 f0                	mov    %esi,%eax
  2813c3:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  2813c6:	89 f8                	mov    %edi,%eax
  2813c8:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  2813cb:	c1 eb 10             	shr    $0x10,%ebx
  2813ce:	83 e3 0f             	and    $0xf,%ebx
  2813d1:	89 f8                	mov    %edi,%eax
  2813d3:	c1 f8 08             	sar    $0x8,%eax
  2813d6:	83 e0 f0             	and    $0xfffffff0,%eax
  2813d9:	09 d8                	or     %ebx,%eax
  2813db:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  2813de:	c1 e9 18             	shr    $0x18,%ecx
  2813e1:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  2813e4:	5b                   	pop    %ebx
  2813e5:	5e                   	pop    %esi
  2813e6:	5f                   	pop    %edi
  2813e7:	5d                   	pop    %ebp
  2813e8:	c3                   	ret    

002813e9 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  2813e9:	55                   	push   %ebp
  2813ea:	89 e5                	mov    %esp,%ebp
  2813ec:	53                   	push   %ebx
  2813ed:	8b 45 08             	mov    0x8(%ebp),%eax
  2813f0:	8b 55 0c             	mov    0xc(%ebp),%edx
  2813f3:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  2813f6:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  2813f9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  2813fc:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281400:	89 cb                	mov    %ecx,%ebx
  281402:	c1 fb 08             	sar    $0x8,%ebx
  281405:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  281408:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28140b:	c1 ea 10             	shr    $0x10,%edx
  28140e:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  281412:	5b                   	pop    %ebx
  281413:	5d                   	pop    %ebp
  281414:	c3                   	ret    

00281415 <init_gdtidt>:

void init_gdtidt(void)
{
  281415:	55                   	push   %ebp
  281416:	89 e5                	mov    %esp,%ebp
  281418:	53                   	push   %ebx
  281419:	83 ec 04             	sub    $0x4,%esp
  28141c:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  281421:	6a 00                	push   $0x0
  281423:	6a 00                	push   $0x0
  281425:	6a 00                	push   $0x0
  281427:	53                   	push   %ebx
  281428:	e8 65 ff ff ff       	call   281392 <set_segmdesc>
  28142d:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  281430:	83 c4 10             	add    $0x10,%esp
  281433:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  281439:	75 e6                	jne    281421 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  28143b:	68 92 40 00 00       	push   $0x4092
  281440:	6a 00                	push   $0x0
  281442:	6a ff                	push   $0xffffffff
  281444:	68 08 00 27 00       	push   $0x270008
  281449:	e8 44 ff ff ff       	call   281392 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  28144e:	68 9a 40 00 00       	push   $0x409a
  281453:	6a 00                	push   $0x0
  281455:	68 ff ff 0f 00       	push   $0xfffff
  28145a:	68 10 00 27 00       	push   $0x270010
  28145f:	e8 2e ff ff ff       	call   281392 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  281464:	83 c4 20             	add    $0x20,%esp
  281467:	68 9a 40 00 00       	push   $0x409a
  28146c:	68 00 00 28 00       	push   $0x280000
  281471:	68 ff ff 07 00       	push   $0x7ffff
  281476:	68 18 00 27 00       	push   $0x270018
  28147b:	e8 12 ff ff ff       	call   281392 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281480:	83 c4 08             	add    $0x8,%esp
  281483:	68 00 00 27 00       	push   $0x270000
  281488:	68 ff ff 00 00       	push   $0xffff
  28148d:	e8 bd f5 ff ff       	call   280a4f <load_gdtr>
  281492:	83 c4 10             	add    $0x10,%esp
  281495:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28149a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28149f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  2814a5:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  2814a9:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  2814ad:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  2814b3:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  2814b6:	3d 00 00 27 00       	cmp    $0x270000,%eax
  2814bb:	75 dd                	jne    28149a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  2814bd:	b8 5e 17 00 00       	mov    $0x175e,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814c2:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  2814c8:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  2814cf:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814d1:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  2814d8:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  2814df:	c1 e8 10             	shr    $0x10,%eax
  2814e2:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  2814e8:	b8 30 17 00 00       	mov    $0x1730,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2814ed:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  2814f3:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  2814fa:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2814fc:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  281503:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  28150a:	c1 e8 10             	shr    $0x10,%eax
  28150d:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  281513:	b8 47 17 00 00       	mov    $0x1747,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281518:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  28151e:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  281525:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281527:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  28152e:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  281535:	c1 e8 10             	shr    $0x10,%eax
  281538:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  28153e:	b8 75 17 00 00       	mov    $0x1775,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281543:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  281549:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  281550:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281552:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  281559:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  281560:	c1 e8 10             	shr    $0x10,%eax
  281563:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  281569:	b8 96 17 00 00       	mov    $0x1796,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28156e:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  281574:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  28157b:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28157d:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281584:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28158b:	c1 e8 10             	shr    $0x10,%eax
  28158e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281594:	b8 b6 17 00 00       	mov    $0x17b6,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281599:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28159f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  2815a6:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815a8:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  2815af:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  2815b6:	c1 e8 10             	shr    $0x10,%eax
  2815b9:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  2815bf:	83 ec 08             	sub    $0x8,%esp
  2815c2:	68 00 f8 26 00       	push   $0x26f800
  2815c7:	68 ff 07 00 00       	push   $0x7ff
  2815cc:	e8 8e f4 ff ff       	call   280a5f <load_idtr>

	return;
  2815d1:	83 c4 10             	add    $0x10,%esp
}
  2815d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2815d7:	c9                   	leave  
  2815d8:	c3                   	ret    

002815d9 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  2815d9:	55                   	push   %ebp
  2815da:	89 e5                	mov    %esp,%ebp
  2815dc:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  2815df:	68 ff 00 00 00       	push   $0xff
  2815e4:	6a 21                	push   $0x21
  2815e6:	e8 3b f4 ff ff       	call   280a26 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  2815eb:	83 c4 08             	add    $0x8,%esp
  2815ee:	68 ff 00 00 00       	push   $0xff
  2815f3:	68 a1 00 00 00       	push   $0xa1
  2815f8:	e8 29 f4 ff ff       	call   280a26 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  2815fd:	83 c4 08             	add    $0x8,%esp
  281600:	6a 11                	push   $0x11
  281602:	6a 20                	push   $0x20
  281604:	e8 1d f4 ff ff       	call   280a26 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  281609:	83 c4 08             	add    $0x8,%esp
  28160c:	6a 20                	push   $0x20
  28160e:	6a 21                	push   $0x21
  281610:	e8 11 f4 ff ff       	call   280a26 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  281615:	83 c4 08             	add    $0x8,%esp
  281618:	6a 04                	push   $0x4
  28161a:	6a 21                	push   $0x21
  28161c:	e8 05 f4 ff ff       	call   280a26 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  281621:	83 c4 08             	add    $0x8,%esp
  281624:	6a 01                	push   $0x1
  281626:	6a 21                	push   $0x21
  281628:	e8 f9 f3 ff ff       	call   280a26 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  28162d:	83 c4 08             	add    $0x8,%esp
  281630:	6a 11                	push   $0x11
  281632:	68 a0 00 00 00       	push   $0xa0
  281637:	e8 ea f3 ff ff       	call   280a26 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  28163c:	83 c4 08             	add    $0x8,%esp
  28163f:	6a 28                	push   $0x28
  281641:	68 a1 00 00 00       	push   $0xa1
  281646:	e8 db f3 ff ff       	call   280a26 <io_out8>
	io_out8(PIC1_ICW3, 2);
  28164b:	83 c4 08             	add    $0x8,%esp
  28164e:	6a 02                	push   $0x2
  281650:	68 a1 00 00 00       	push   $0xa1
  281655:	e8 cc f3 ff ff       	call   280a26 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  28165a:	83 c4 08             	add    $0x8,%esp
  28165d:	6a 01                	push   $0x1
  28165f:	68 a1 00 00 00       	push   $0xa1
  281664:	e8 bd f3 ff ff       	call   280a26 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  281669:	83 c4 08             	add    $0x8,%esp
  28166c:	68 fb 00 00 00       	push   $0xfb
  281671:	6a 21                	push   $0x21
  281673:	e8 ae f3 ff ff       	call   280a26 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  281678:	83 c4 08             	add    $0x8,%esp
  28167b:	68 ff 00 00 00       	push   $0xff
  281680:	68 a1 00 00 00       	push   $0xa1
  281685:	e8 9c f3 ff ff       	call   280a26 <io_out8>
}
  28168a:	83 c4 10             	add    $0x10,%esp
  28168d:	c9                   	leave  
  28168e:	c3                   	ret    

0028168f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28168f:	55                   	push   %ebp
  281690:	89 e5                	mov    %esp,%ebp
  281692:	57                   	push   %edi
  281693:	56                   	push   %esi
  281694:	53                   	push   %ebx
  281695:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281698:	e8 25 17 00 00       	call   282dc2 <task_now>
  28169d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28169f:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  2816a5:	83 ec 08             	sub    $0x8,%esp
  2816a8:	68 80 4b 28 00       	push   $0x284b80
  2816ad:	56                   	push   %esi
  2816ae:	e8 17 24 00 00       	call   283aca <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  2816b3:	83 c4 0c             	add    $0xc,%esp
  2816b6:	8b 45 08             	mov    0x8(%ebp),%eax
  2816b9:	ff 70 2c             	pushl  0x2c(%eax)
  2816bc:	68 a8 4b 28 00       	push   $0x284ba8
  2816c1:	8d 7d ca             	lea    -0x36(%ebp),%edi
  2816c4:	57                   	push   %edi
  2816c5:	e8 33 02 00 00       	call   2818fd <sprintf>
	cons_putstr0(cons,s);
  2816ca:	83 c4 08             	add    $0x8,%esp
  2816cd:	57                   	push   %edi
  2816ce:	56                   	push   %esi
  2816cf:	e8 f6 23 00 00       	call   283aca <cons_putstr0>
	return &(task->tss.esp0);
  2816d4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2816d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2816da:	5b                   	pop    %ebx
  2816db:	5e                   	pop    %esi
  2816dc:	5f                   	pop    %edi
  2816dd:	5d                   	pop    %ebp
  2816de:	c3                   	ret    

002816df <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  2816df:	55                   	push   %ebp
  2816e0:	89 e5                	mov    %esp,%ebp
  2816e2:	57                   	push   %edi
  2816e3:	56                   	push   %esi
  2816e4:	53                   	push   %ebx
  2816e5:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  2816e8:	e8 d5 16 00 00       	call   282dc2 <task_now>
  2816ed:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  2816ef:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  2816f5:	83 ec 08             	sub    $0x8,%esp
  2816f8:	68 b0 4b 28 00       	push   $0x284bb0
  2816fd:	56                   	push   %esi
  2816fe:	e8 c7 23 00 00       	call   283aca <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281703:	83 c4 0c             	add    $0xc,%esp
  281706:	8b 45 08             	mov    0x8(%ebp),%eax
  281709:	ff 70 2c             	pushl  0x2c(%eax)
  28170c:	68 a8 4b 28 00       	push   $0x284ba8
  281711:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281714:	57                   	push   %edi
  281715:	e8 e3 01 00 00       	call   2818fd <sprintf>
	cons_putstr0(cons,s);
  28171a:	83 c4 08             	add    $0x8,%esp
  28171d:	57                   	push   %edi
  28171e:	56                   	push   %esi
  28171f:	e8 a6 23 00 00       	call   283aca <cons_putstr0>
	return &(task->tss.esp0);
  281724:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281727:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28172a:	5b                   	pop    %ebx
  28172b:	5e                   	pop    %esi
  28172c:	5f                   	pop    %edi
  28172d:	5d                   	pop    %ebp
  28172e:	c3                   	ret    
  28172f:	90                   	nop

00281730 <asm_inthandler21>:
  281730:	06                   	push   %es
  281731:	1e                   	push   %ds
  281732:	60                   	pusha  
  281733:	89 e0                	mov    %esp,%eax
  281735:	50                   	push   %eax
  281736:	66 8c d0             	mov    %ss,%ax
  281739:	8e d8                	mov    %eax,%ds
  28173b:	8e c0                	mov    %eax,%es
  28173d:	e8 ed 05 00 00       	call   281d2f <inthandler21>
  281742:	58                   	pop    %eax
  281743:	61                   	popa   
  281744:	1f                   	pop    %ds
  281745:	07                   	pop    %es
  281746:	cf                   	iret   

00281747 <asm_inthandler2c>:
  281747:	06                   	push   %es
  281748:	1e                   	push   %ds
  281749:	60                   	pusha  
  28174a:	89 e0                	mov    %esp,%eax
  28174c:	50                   	push   %eax
  28174d:	66 8c d0             	mov    %ss,%ax
  281750:	8e d8                	mov    %eax,%ds
  281752:	8e c0                	mov    %eax,%es
  281754:	e8 3c 05 00 00       	call   281c95 <inthandler2c>
  281759:	58                   	pop    %eax
  28175a:	61                   	popa   
  28175b:	1f                   	pop    %ds
  28175c:	07                   	pop    %es
  28175d:	cf                   	iret   

0028175e <asm_inthandler20>:
  28175e:	06                   	push   %es
  28175f:	1e                   	push   %ds
  281760:	60                   	pusha  
  281761:	89 e0                	mov    %esp,%eax
  281763:	50                   	push   %eax
  281764:	66 8c d0             	mov    %ss,%ax
  281767:	8e d8                	mov    %eax,%ds
  281769:	8e c0                	mov    %eax,%es
  28176b:	e8 c1 13 00 00       	call   282b31 <inthandler20>
  281770:	58                   	pop    %eax
  281771:	61                   	popa   
  281772:	1f                   	pop    %ds
  281773:	07                   	pop    %es
  281774:	cf                   	iret   

00281775 <asm_sys_api>:
  281775:	fb                   	sti    
  281776:	1e                   	push   %ds
  281777:	06                   	push   %es
  281778:	60                   	pusha  
  281779:	60                   	pusha  
  28177a:	66 8c d0             	mov    %ss,%ax
  28177d:	8e d8                	mov    %eax,%ds
  28177f:	8e c0                	mov    %eax,%es
  281781:	e8 88 27 00 00       	call   283f0e <sys_api>
  281786:	83 f8 00             	cmp    $0x0,%eax
  281789:	75 07                	jne    281792 <end_app>
  28178b:	83 c4 20             	add    $0x20,%esp
  28178e:	61                   	popa   
  28178f:	07                   	pop    %es
  281790:	1f                   	pop    %ds
  281791:	cf                   	iret   

00281792 <end_app>:
  281792:	8b 20                	mov    (%eax),%esp
  281794:	61                   	popa   
  281795:	c3                   	ret    

00281796 <asm_inthandler0d>:
  281796:	fb                   	sti    
  281797:	06                   	push   %es
  281798:	1e                   	push   %ds
  281799:	60                   	pusha  
  28179a:	89 e0                	mov    %esp,%eax
  28179c:	50                   	push   %eax
  28179d:	66 8c d0             	mov    %ss,%ax
  2817a0:	8e d8                	mov    %eax,%ds
  2817a2:	8e c0                	mov    %eax,%es
  2817a4:	e8 e6 fe ff ff       	call   28168f <inthandler0d>
  2817a9:	83 f8 00             	cmp    $0x0,%eax
  2817ac:	75 e4                	jne    281792 <end_app>
  2817ae:	58                   	pop    %eax
  2817af:	61                   	popa   
  2817b0:	1f                   	pop    %ds
  2817b1:	07                   	pop    %es
  2817b2:	83 c4 04             	add    $0x4,%esp
  2817b5:	cf                   	iret   

002817b6 <asm_inthandler0c>:
  2817b6:	fb                   	sti    
  2817b7:	06                   	push   %es
  2817b8:	1e                   	push   %ds
  2817b9:	60                   	pusha  
  2817ba:	89 e0                	mov    %esp,%eax
  2817bc:	50                   	push   %eax
  2817bd:	66 8c d0             	mov    %ss,%ax
  2817c0:	8e d8                	mov    %eax,%ds
  2817c2:	8e c0                	mov    %eax,%es
  2817c4:	e8 16 ff ff ff       	call   2816df <inthandler0c>
  2817c9:	83 f8 00             	cmp    $0x0,%eax
  2817cc:	75 c4                	jne    281792 <end_app>
  2817ce:	58                   	pop    %eax
  2817cf:	61                   	popa   
  2817d0:	1f                   	pop    %ds
  2817d1:	07                   	pop    %es
  2817d2:	83 c4 04             	add    $0x4,%esp
  2817d5:	cf                   	iret   

002817d6 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  2817d6:	55                   	push   %ebp
  2817d7:	89 e5                	mov    %esp,%ebp
  2817d9:	57                   	push   %edi
  2817da:	56                   	push   %esi
  2817db:	53                   	push   %ebx
  2817dc:	83 ec 10             	sub    $0x10,%esp
  2817df:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2817e2:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  2817e5:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  2817ec:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  2817f3:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  2817f9:	85 c9                	test   %ecx,%ecx
  2817fb:	79 08                	jns    281805 <itoa+0x2f>
		*buf++ = '-';
  2817fd:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  281800:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  281802:	8d 7f 01             	lea    0x1(%edi),%edi
  281805:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  281808:	be 67 66 66 66       	mov    $0x66666667,%esi
  28180d:	83 c3 01             	add    $0x1,%ebx
  281810:	89 c8                	mov    %ecx,%eax
  281812:	f7 ee                	imul   %esi
  281814:	c1 fa 02             	sar    $0x2,%edx
  281817:	89 c8                	mov    %ecx,%eax
  281819:	c1 f8 1f             	sar    $0x1f,%eax
  28181c:	29 c2                	sub    %eax,%edx
  28181e:	8d 04 92             	lea    (%edx,%edx,4),%eax
  281821:	01 c0                	add    %eax,%eax
  281823:	29 c1                	sub    %eax,%ecx
  281825:	83 c1 30             	add    $0x30,%ecx
  281828:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  28182b:	89 d1                	mov    %edx,%ecx
	}while(value);
  28182d:	85 d2                	test   %edx,%edx
  28182f:	75 dc                	jne    28180d <itoa+0x37>
	while(tmp_buf != tbp--)
  281831:	8d 73 ff             	lea    -0x1(%ebx),%esi
  281834:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281837:	39 c3                	cmp    %eax,%ebx
  281839:	74 20                	je     28185b <itoa+0x85>
  28183b:	89 f0                	mov    %esi,%eax
  28183d:	89 fa                	mov    %edi,%edx
  28183f:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  281842:	83 c2 01             	add    $0x1,%edx
  281845:	0f b6 08             	movzbl (%eax),%ecx
  281848:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  28184b:	83 e8 01             	sub    $0x1,%eax
  28184e:	39 d8                	cmp    %ebx,%eax
  281850:	75 f0                	jne    281842 <itoa+0x6c>
  281852:	8d 45 f4             	lea    -0xc(%ebp),%eax
  281855:	29 c6                	sub    %eax,%esi
  281857:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  28185b:	c6 07 00             	movb   $0x0,(%edi)
}
  28185e:	83 c4 10             	add    $0x10,%esp
  281861:	5b                   	pop    %ebx
  281862:	5e                   	pop    %esi
  281863:	5f                   	pop    %edi
  281864:	5d                   	pop    %ebp
  281865:	c3                   	ret    

00281866 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  281866:	55                   	push   %ebp
  281867:	89 e5                	mov    %esp,%ebp
  281869:	57                   	push   %edi
  28186a:	56                   	push   %esi
  28186b:	53                   	push   %ebx
  28186c:	83 ec 20             	sub    $0x20,%esp
  28186f:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  281872:	bb 00 00 00 00       	mov    $0x0,%ebx
  281877:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  28187e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281885:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28188a:	ba 00 00 00 00       	mov    $0x0,%edx
  28188f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281893:	83 c2 04             	add    $0x4,%edx
  281896:	39 ca                	cmp    %ecx,%edx
  281898:	72 f5                	jb     28188f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28189a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28189d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  2818a0:	83 c6 02             	add    $0x2,%esi
  2818a3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  2818a6:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  2818aa:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  2818ad:	83 c3 01             	add    $0x1,%ebx
  2818b0:	89 c1                	mov    %eax,%ecx
  2818b2:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  2818b5:	8d 79 37             	lea    0x37(%ecx),%edi
  2818b8:	8d 51 30             	lea    0x30(%ecx),%edx
  2818bb:	83 f9 0a             	cmp    $0xa,%ecx
  2818be:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  2818c1:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  2818c4:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  2818c7:	85 c0                	test   %eax,%eax
  2818c9:	75 e2                	jne    2818ad <xtoa+0x47>
    
    while(tmp_buf != tbp){
  2818cb:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  2818ce:	39 c3                	cmp    %eax,%ebx
  2818d0:	74 20                	je     2818f2 <xtoa+0x8c>
  2818d2:	89 d8                	mov    %ebx,%eax
  2818d4:	89 f1                	mov    %esi,%ecx
  2818d6:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  2818d9:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  2818dc:	83 c1 01             	add    $0x1,%ecx
  2818df:	0f b6 10             	movzbl (%eax),%edx
  2818e2:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  2818e5:	39 f8                	cmp    %edi,%eax
  2818e7:	75 f0                	jne    2818d9 <xtoa+0x73>
  2818e9:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2818ec:	29 c3                	sub    %eax,%ebx
  2818ee:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  2818f2:	c6 06 00             	movb   $0x0,(%esi)
}
  2818f5:	83 c4 20             	add    $0x20,%esp
  2818f8:	5b                   	pop    %ebx
  2818f9:	5e                   	pop    %esi
  2818fa:	5f                   	pop    %edi
  2818fb:	5d                   	pop    %ebp
  2818fc:	c3                   	ret    

002818fd <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  2818fd:	55                   	push   %ebp
  2818fe:	89 e5                	mov    %esp,%ebp
  281900:	57                   	push   %edi
  281901:	56                   	push   %esi
  281902:	53                   	push   %ebx
  281903:	83 ec 10             	sub    $0x10,%esp
  281906:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  281909:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  28190c:	e9 a8 00 00 00       	jmp    2819b9 <sprintf+0xbc>
		if(*format!='%'){
  281911:	3c 25                	cmp    $0x25,%al
  281913:	74 10                	je     281925 <sprintf+0x28>
			*str++=*format++;
  281915:	83 c6 01             	add    $0x1,%esi
  281918:	89 75 0c             	mov    %esi,0xc(%ebp)
  28191b:	88 03                	mov    %al,(%ebx)
  28191d:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  281920:	e9 94 00 00 00       	jmp    2819b9 <sprintf+0xbc>
		}
		else{
			format++;
  281925:	8d 46 01             	lea    0x1(%esi),%eax
  281928:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  28192b:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  28192f:	3c 73                	cmp    $0x73,%al
  281931:	74 5e                	je     281991 <sprintf+0x94>
  281933:	3c 78                	cmp    $0x78,%al
  281935:	74 2f                	je     281966 <sprintf+0x69>
  281937:	3c 64                	cmp    $0x64,%al
  281939:	75 75                	jne    2819b0 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  28193b:	8d 45 ea             	lea    -0x16(%ebp),%eax
  28193e:	50                   	push   %eax
  28193f:	ff 37                	pushl  (%edi)
  281941:	e8 90 fe ff ff       	call   2817d6 <itoa>
  281946:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  28194a:	83 c4 08             	add    $0x8,%esp
  28194d:	84 c0                	test   %al,%al
  28194f:	74 5f                	je     2819b0 <sprintf+0xb3>
  281951:	8d 55 ea             	lea    -0x16(%ebp),%edx
  281954:	83 c3 01             	add    $0x1,%ebx
  281957:	83 c2 01             	add    $0x1,%edx
  28195a:	88 43 ff             	mov    %al,-0x1(%ebx)
  28195d:	0f b6 02             	movzbl (%edx),%eax
  281960:	84 c0                	test   %al,%al
  281962:	75 f0                	jne    281954 <sprintf+0x57>
  281964:	eb 4a                	jmp    2819b0 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  281966:	8d 45 ea             	lea    -0x16(%ebp),%eax
  281969:	50                   	push   %eax
  28196a:	ff 37                	pushl  (%edi)
  28196c:	e8 f5 fe ff ff       	call   281866 <xtoa>
  281971:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  281975:	83 c4 08             	add    $0x8,%esp
  281978:	84 c0                	test   %al,%al
  28197a:	74 34                	je     2819b0 <sprintf+0xb3>
  28197c:	8d 55 ea             	lea    -0x16(%ebp),%edx
  28197f:	83 c3 01             	add    $0x1,%ebx
  281982:	83 c2 01             	add    $0x1,%edx
  281985:	88 43 ff             	mov    %al,-0x1(%ebx)
  281988:	0f b6 02             	movzbl (%edx),%eax
  28198b:	84 c0                	test   %al,%al
  28198d:	75 f0                	jne    28197f <sprintf+0x82>
  28198f:	eb 1f                	jmp    2819b0 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281991:	8b 0f                	mov    (%edi),%ecx
  281993:	0f b6 11             	movzbl (%ecx),%edx
  281996:	84 d2                	test   %dl,%dl
  281998:	74 16                	je     2819b0 <sprintf+0xb3>
  28199a:	89 d8                	mov    %ebx,%eax
  28199c:	83 c0 01             	add    $0x1,%eax
  28199f:	88 50 ff             	mov    %dl,-0x1(%eax)
  2819a2:	89 c2                	mov    %eax,%edx
  2819a4:	29 da                	sub    %ebx,%edx
  2819a6:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  2819aa:	84 d2                	test   %dl,%dl
  2819ac:	75 ee                	jne    28199c <sprintf+0x9f>
  2819ae:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  2819b0:	83 c7 04             	add    $0x4,%edi
			format++;
  2819b3:	83 c6 02             	add    $0x2,%esi
  2819b6:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  2819b9:	8b 75 0c             	mov    0xc(%ebp),%esi
  2819bc:	0f b6 06             	movzbl (%esi),%eax
  2819bf:	84 c0                	test   %al,%al
  2819c1:	0f 85 4a ff ff ff    	jne    281911 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  2819c7:	c6 03 00             	movb   $0x0,(%ebx)
}
  2819ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2819cd:	5b                   	pop    %ebx
  2819ce:	5e                   	pop    %esi
  2819cf:	5f                   	pop    %edi
  2819d0:	5d                   	pop    %ebp
  2819d1:	c3                   	ret    

002819d2 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  2819d2:	55                   	push   %ebp
  2819d3:	89 e5                	mov    %esp,%ebp
  2819d5:	57                   	push   %edi
  2819d6:	56                   	push   %esi
  2819d7:	53                   	push   %ebx
  2819d8:	8b 7d 08             	mov    0x8(%ebp),%edi
  2819db:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819de:	0f b6 17             	movzbl (%edi),%edx
  2819e1:	be 00 00 00 00       	mov    $0x0,%esi
  2819e6:	84 d2                	test   %dl,%dl
  2819e8:	74 40                	je     281a2a <strcmp+0x58>
  2819ea:	eb 1d                	jmp    281a09 <strcmp+0x37>
	{
		if(c1==c2) i++;
  2819ec:	38 ca                	cmp    %cl,%dl
  2819ee:	75 0f                	jne    2819ff <strcmp+0x2d>
  2819f0:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  2819f3:	89 c6                	mov    %eax,%esi
  2819f5:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  2819f9:	84 d2                	test   %dl,%dl
  2819fb:	75 1e                	jne    281a1b <strcmp+0x49>
  2819fd:	eb 2b                	jmp    281a2a <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  2819ff:	0f be c2             	movsbl %dl,%eax
  281a02:	0f be c9             	movsbl %cl,%ecx
  281a05:	29 c8                	sub    %ecx,%eax
  281a07:	eb 2a                	jmp    281a33 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a09:	0f b6 0b             	movzbl (%ebx),%ecx
  281a0c:	84 c9                	test   %cl,%cl
  281a0e:	74 15                	je     281a25 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281a10:	b8 00 00 00 00       	mov    $0x0,%eax
  281a15:	38 ca                	cmp    %cl,%dl
  281a17:	74 d7                	je     2819f0 <strcmp+0x1e>
  281a19:	eb e4                	jmp    2819ff <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a1b:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281a1f:	84 c9                	test   %cl,%cl
  281a21:	75 c9                	jne    2819ec <strcmp+0x1a>
  281a23:	eb 05                	jmp    281a2a <strcmp+0x58>
  281a25:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281a2a:	0f be c2             	movsbl %dl,%eax
  281a2d:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281a31:	29 d0                	sub    %edx,%eax
}
  281a33:	5b                   	pop    %ebx
  281a34:	5e                   	pop    %esi
  281a35:	5f                   	pop    %edi
  281a36:	5d                   	pop    %ebp
  281a37:	c3                   	ret    

00281a38 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281a38:	55                   	push   %ebp
  281a39:	89 e5                	mov    %esp,%ebp
  281a3b:	57                   	push   %edi
  281a3c:	56                   	push   %esi
  281a3d:	53                   	push   %ebx
  281a3e:	8b 75 08             	mov    0x8(%ebp),%esi
  281a41:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281a44:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281a47:	b8 00 00 00 00       	mov    $0x0,%eax
  281a4c:	85 ff                	test   %edi,%edi
  281a4e:	74 63                	je     281ab3 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a50:	83 ef 01             	sub    $0x1,%edi
  281a53:	89 fa                	mov    %edi,%edx
  281a55:	74 52                	je     281aa9 <strncmp+0x71>
  281a57:	eb 19                	jmp    281a72 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281a59:	38 c8                	cmp    %cl,%al
  281a5b:	75 0b                	jne    281a68 <strncmp+0x30>
  281a5d:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a60:	39 fa                	cmp    %edi,%edx
  281a62:	75 27                	jne    281a8b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281a64:	89 fa                	mov    %edi,%edx
  281a66:	eb 41                	jmp    281aa9 <strncmp+0x71>
		else return c1-c2;
  281a68:	0f be c0             	movsbl %al,%eax
  281a6b:	0f be c9             	movsbl %cl,%ecx
  281a6e:	29 c8                	sub    %ecx,%eax
  281a70:	eb 41                	jmp    281ab3 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a72:	0f b6 06             	movzbl (%esi),%eax
  281a75:	84 c0                	test   %al,%al
  281a77:	74 24                	je     281a9d <strncmp+0x65>
  281a79:	0f b6 0b             	movzbl (%ebx),%ecx
  281a7c:	84 c9                	test   %cl,%cl
  281a7e:	74 24                	je     281aa4 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281a80:	ba 00 00 00 00       	mov    $0x0,%edx
  281a85:	38 c8                	cmp    %cl,%al
  281a87:	74 d4                	je     281a5d <strncmp+0x25>
  281a89:	eb dd                	jmp    281a68 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281a8b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281a8f:	84 c0                	test   %al,%al
  281a91:	74 16                	je     281aa9 <strncmp+0x71>
  281a93:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281a97:	84 c9                	test   %cl,%cl
  281a99:	75 be                	jne    281a59 <strncmp+0x21>
  281a9b:	eb 0c                	jmp    281aa9 <strncmp+0x71>
  281a9d:	ba 00 00 00 00       	mov    $0x0,%edx
  281aa2:	eb 05                	jmp    281aa9 <strncmp+0x71>
  281aa4:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281aa9:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281aad:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281ab1:	29 d0                	sub    %edx,%eax
}
  281ab3:	5b                   	pop    %ebx
  281ab4:	5e                   	pop    %esi
  281ab5:	5f                   	pop    %edi
  281ab6:	5d                   	pop    %ebp
  281ab7:	c3                   	ret    

00281ab8 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281ab8:	55                   	push   %ebp
  281ab9:	89 e5                	mov    %esp,%ebp
  281abb:	8b 45 08             	mov    0x8(%ebp),%eax
  281abe:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281ac1:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281ac4:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281ac7:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281ac9:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281acc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281ad3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281ada:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281ae1:	8b 55 14             	mov    0x14(%ebp),%edx
  281ae4:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281ae7:	5d                   	pop    %ebp
  281ae8:	c3                   	ret    

00281ae9 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281ae9:	55                   	push   %ebp
  281aea:	89 e5                	mov    %esp,%ebp
  281aec:	53                   	push   %ebx
  281aed:	83 ec 04             	sub    $0x4,%esp
  281af0:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281af3:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281af7:	75 0b                	jne    281b04 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281af9:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281afd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281b02:	eb 52                	jmp    281b56 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281b04:	8b 48 04             	mov    0x4(%eax),%ecx
  281b07:	8b 10                	mov    (%eax),%edx
  281b09:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281b0c:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281b0f:	8b 48 04             	mov    0x4(%eax),%ecx
  281b12:	8d 51 01             	lea    0x1(%ecx),%edx
  281b15:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281b18:	3b 50 0c             	cmp    0xc(%eax),%edx
  281b1b:	75 07                	jne    281b24 <fifo32_put+0x3b>
		fifo->p = 0;
  281b1d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281b24:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281b28:	8b 50 18             	mov    0x18(%eax),%edx
  281b2b:	85 d2                	test   %edx,%edx
  281b2d:	74 22                	je     281b51 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281b2f:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281b34:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281b38:	74 1c                	je     281b56 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281b3a:	83 ec 04             	sub    $0x4,%esp
  281b3d:	6a 00                	push   $0x0
  281b3f:	6a ff                	push   $0xffffffff
  281b41:	52                   	push   %edx
  281b42:	e8 70 13 00 00       	call   282eb7 <task_run>
  281b47:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281b4a:	b8 00 00 00 00       	mov    $0x0,%eax
  281b4f:	eb 05                	jmp    281b56 <fifo32_put+0x6d>
  281b51:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281b56:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281b59:	c9                   	leave  
  281b5a:	c3                   	ret    

00281b5b <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281b5b:	55                   	push   %ebp
  281b5c:	89 e5                	mov    %esp,%ebp
  281b5e:	56                   	push   %esi
  281b5f:	53                   	push   %ebx
  281b60:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281b63:	8b 59 10             	mov    0x10(%ecx),%ebx
  281b66:	8b 71 0c             	mov    0xc(%ecx),%esi
  281b69:	39 f3                	cmp    %esi,%ebx
  281b6b:	74 20                	je     281b8d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281b6d:	8b 51 08             	mov    0x8(%ecx),%edx
  281b70:	8b 01                	mov    (%ecx),%eax
  281b72:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281b75:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281b78:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281b7a:	be 00 00 00 00       	mov    $0x0,%esi
  281b7f:	0f 44 d6             	cmove  %esi,%edx
  281b82:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281b85:	83 c3 01             	add    $0x1,%ebx
  281b88:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281b8b:	eb 05                	jmp    281b92 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281b8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281b92:	5b                   	pop    %ebx
  281b93:	5e                   	pop    %esi
  281b94:	5d                   	pop    %ebp
  281b95:	c3                   	ret    

00281b96 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281b96:	55                   	push   %ebp
  281b97:	89 e5                	mov    %esp,%ebp
  281b99:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281b9c:	8b 42 0c             	mov    0xc(%edx),%eax
  281b9f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281ba2:	5d                   	pop    %ebp
  281ba3:	c3                   	ret    

00281ba4 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281ba4:	55                   	push   %ebp
  281ba5:	89 e5                	mov    %esp,%ebp
  281ba7:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281baa:	8b 45 08             	mov    0x8(%ebp),%eax
  281bad:	a3 c4 75 28 00       	mov    %eax,0x2875c4
	mousedata0 = data0;
  281bb2:	8b 45 0c             	mov    0xc(%ebp),%eax
  281bb5:	a3 c0 75 28 00       	mov    %eax,0x2875c0

	wait_KBC_sendready();
  281bba:	e8 1a 01 00 00       	call   281cd9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281bbf:	83 ec 08             	sub    $0x8,%esp
  281bc2:	68 d4 00 00 00       	push   $0xd4
  281bc7:	6a 64                	push   $0x64
  281bc9:	e8 58 ee ff ff       	call   280a26 <io_out8>
	wait_KBC_sendready();
  281bce:	e8 06 01 00 00       	call   281cd9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281bd3:	83 c4 08             	add    $0x8,%esp
  281bd6:	68 f4 00 00 00       	push   $0xf4
  281bdb:	6a 60                	push   $0x60
  281bdd:	e8 44 ee ff ff       	call   280a26 <io_out8>
	mdec->phase = 0;
  281be2:	8b 45 10             	mov    0x10(%ebp),%eax
  281be5:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281be9:	83 c4 10             	add    $0x10,%esp
}
  281bec:	c9                   	leave  
  281bed:	c3                   	ret    

00281bee <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281bee:	55                   	push   %ebp
  281bef:	89 e5                	mov    %esp,%ebp
  281bf1:	56                   	push   %esi
  281bf2:	53                   	push   %ebx
  281bf3:	8b 55 08             	mov    0x8(%ebp),%edx
  281bf6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281bf9:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281bfd:	84 c0                	test   %al,%al
  281bff:	75 14                	jne    281c15 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281c01:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281c06:	80 f9 fa             	cmp    $0xfa,%cl
  281c09:	0f 85 82 00 00 00    	jne    281c91 <mouse_decode+0xa3>
			mdec->phase = 1;
  281c0f:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281c13:	eb 7c                	jmp    281c91 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281c15:	3c 01                	cmp    $0x1,%al
  281c17:	75 17                	jne    281c30 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281c19:	89 cb                	mov    %ecx,%ebx
  281c1b:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281c1e:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281c23:	80 fb 08             	cmp    $0x8,%bl
  281c26:	75 69                	jne    281c91 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281c28:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281c2a:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281c2e:	eb 61                	jmp    281c91 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281c30:	3c 02                	cmp    $0x2,%al
  281c32:	75 0e                	jne    281c42 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281c34:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281c37:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281c3b:	b8 00 00 00 00       	mov    $0x0,%eax
  281c40:	eb 4f                	jmp    281c91 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281c42:	3c 03                	cmp    $0x3,%al
  281c44:	75 46                	jne    281c8c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281c46:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281c49:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281c4d:	0f b6 02             	movzbl (%edx),%eax
  281c50:	89 c3                	mov    %eax,%ebx
  281c52:	83 e3 07             	and    $0x7,%ebx
  281c55:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281c58:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281c5c:	0f b6 f3             	movzbl %bl,%esi
  281c5f:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281c62:	0f b6 f1             	movzbl %cl,%esi
  281c65:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281c68:	a8 10                	test   $0x10,%al
  281c6a:	74 09                	je     281c75 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281c6c:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281c72:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281c75:	a8 20                	test   $0x20,%al
  281c77:	74 09                	je     281c82 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281c79:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281c7f:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281c82:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281c85:	b8 01 00 00 00       	mov    $0x1,%eax
  281c8a:	eb 05                	jmp    281c91 <mouse_decode+0xa3>
	}
	return -1;
  281c8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281c91:	5b                   	pop    %ebx
  281c92:	5e                   	pop    %esi
  281c93:	5d                   	pop    %ebp
  281c94:	c3                   	ret    

00281c95 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281c95:	55                   	push   %ebp
  281c96:	89 e5                	mov    %esp,%ebp
  281c98:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281c9b:	6a 64                	push   $0x64
  281c9d:	68 a0 00 00 00       	push   $0xa0
  281ca2:	e8 7f ed ff ff       	call   280a26 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281ca7:	83 c4 08             	add    $0x8,%esp
  281caa:	6a 62                	push   $0x62
  281cac:	6a 20                	push   $0x20
  281cae:	e8 73 ed ff ff       	call   280a26 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281cb3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281cba:	e8 45 ed ff ff       	call   280a04 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281cbf:	83 c4 08             	add    $0x8,%esp
  281cc2:	03 05 c0 75 28 00    	add    0x2875c0,%eax
  281cc8:	50                   	push   %eax
  281cc9:	ff 35 c4 75 28 00    	pushl  0x2875c4
  281ccf:	e8 15 fe ff ff       	call   281ae9 <fifo32_put>
	return;
  281cd4:	83 c4 10             	add    $0x10,%esp
}
  281cd7:	c9                   	leave  
  281cd8:	c3                   	ret    

00281cd9 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281cd9:	55                   	push   %ebp
  281cda:	89 e5                	mov    %esp,%ebp
  281cdc:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281cdf:	83 ec 0c             	sub    $0xc,%esp
  281ce2:	6a 64                	push   $0x64
  281ce4:	e8 1b ed ff ff       	call   280a04 <io_in8>
  281ce9:	83 c4 10             	add    $0x10,%esp
  281cec:	a8 02                	test   $0x2,%al
  281cee:	75 ef                	jne    281cdf <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281cf0:	c9                   	leave  
  281cf1:	c3                   	ret    

00281cf2 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281cf2:	55                   	push   %ebp
  281cf3:	89 e5                	mov    %esp,%ebp
  281cf5:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281cf8:	8b 45 08             	mov    0x8(%ebp),%eax
  281cfb:	a3 c8 75 28 00       	mov    %eax,0x2875c8
	keydata0 = data0;
  281d00:	8b 45 0c             	mov    0xc(%ebp),%eax
  281d03:	a3 cc 75 28 00       	mov    %eax,0x2875cc
	wait_KBC_sendready();
  281d08:	e8 cc ff ff ff       	call   281cd9 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281d0d:	83 ec 08             	sub    $0x8,%esp
  281d10:	6a 60                	push   $0x60
  281d12:	6a 64                	push   $0x64
  281d14:	e8 0d ed ff ff       	call   280a26 <io_out8>
	wait_KBC_sendready();
  281d19:	e8 bb ff ff ff       	call   281cd9 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281d1e:	83 c4 08             	add    $0x8,%esp
  281d21:	6a 47                	push   $0x47
  281d23:	6a 60                	push   $0x60
  281d25:	e8 fc ec ff ff       	call   280a26 <io_out8>
	return;
  281d2a:	83 c4 10             	add    $0x10,%esp
}
  281d2d:	c9                   	leave  
  281d2e:	c3                   	ret    

00281d2f <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281d2f:	55                   	push   %ebp
  281d30:	89 e5                	mov    %esp,%ebp
  281d32:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281d35:	6a 61                	push   $0x61
  281d37:	6a 20                	push   $0x20
  281d39:	e8 e8 ec ff ff       	call   280a26 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d3e:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d45:	e8 ba ec ff ff       	call   280a04 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281d4a:	83 c4 08             	add    $0x8,%esp
  281d4d:	03 05 cc 75 28 00    	add    0x2875cc,%eax
  281d53:	50                   	push   %eax
  281d54:	ff 35 c8 75 28 00    	pushl  0x2875c8
  281d5a:	e8 8a fd ff ff       	call   281ae9 <fifo32_put>
	return;
  281d5f:	83 c4 10             	add    $0x10,%esp
}
  281d62:	c9                   	leave  
  281d63:	c3                   	ret    

00281d64 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281d64:	55                   	push   %ebp
  281d65:	89 e5                	mov    %esp,%ebp
  281d67:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281d6a:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281d6f:	83 fa 7f             	cmp    $0x7f,%edx
  281d72:	77 16                	ja     281d8a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281d74:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281d78:	75 09                	jne    281d83 <key_char+0x1f>
  281d7a:	0f b6 82 60 4c 28 00 	movzbl 0x284c60(%edx),%eax
  281d81:	eb 07                	jmp    281d8a <key_char+0x26>
		else return keytable1[key];
  281d83:	0f b6 82 e0 4b 28 00 	movzbl 0x284be0(%edx),%eax
	}
	else return 0;
}
  281d8a:	5d                   	pop    %ebp
  281d8b:	c3                   	ret    

00281d8c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281d8c:	55                   	push   %ebp
  281d8d:	89 e5                	mov    %esp,%ebp
  281d8f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281d92:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281d96:	e8 aa ec ff ff       	call   280a45 <io_load_eflags>
  281d9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281da1:	83 ec 0c             	sub    $0xc,%esp
  281da4:	50                   	push   %eax
  281da5:	e8 9e ec ff ff       	call   280a48 <io_store_eflags>
  281daa:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281dad:	e8 93 ec ff ff       	call   280a45 <io_load_eflags>
  281db2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281db5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281db8:	25 00 00 04 00       	and    $0x40000,%eax
  281dbd:	85 c0                	test   %eax,%eax
  281dbf:	74 04                	je     281dc5 <memtest+0x39>
		flg486 = 1;
  281dc1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281dc5:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281dcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281dcf:	83 ec 0c             	sub    $0xc,%esp
  281dd2:	50                   	push   %eax
  281dd3:	e8 70 ec ff ff       	call   280a48 <io_store_eflags>
  281dd8:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281ddb:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281ddf:	74 1d                	je     281dfe <memtest+0x72>
	{
		cr0 = load_cr0;
  281de1:	c7 45 ec 6f 0a 28 00 	movl   $0x280a6f,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281de8:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281def:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281df2:	83 ec 0c             	sub    $0xc,%esp
  281df5:	50                   	push   %eax
  281df6:	e8 78 ec ff ff       	call   280a73 <store_cr0>
  281dfb:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281dfe:	83 ec 08             	sub    $0x8,%esp
  281e01:	ff 75 0c             	pushl  0xc(%ebp)
  281e04:	ff 75 08             	pushl  0x8(%ebp)
  281e07:	e8 6f ec ff ff       	call   280a7b <_memtest_sub>
  281e0c:	83 c4 10             	add    $0x10,%esp
  281e0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281e12:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281e16:	74 1e                	je     281e36 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281e18:	e8 52 ec ff ff       	call   280a6f <load_cr0>
  281e1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281e20:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281e27:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281e2a:	83 ec 0c             	sub    $0xc,%esp
  281e2d:	50                   	push   %eax
  281e2e:	e8 40 ec ff ff       	call   280a73 <store_cr0>
  281e33:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281e36:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281e39:	c9                   	leave  
  281e3a:	c3                   	ret    

00281e3b <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281e3b:	55                   	push   %ebp
  281e3c:	89 e5                	mov    %esp,%ebp
  281e3e:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281e41:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281e48:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281e4f:	8b 45 08             	mov    0x8(%ebp),%eax
  281e52:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281e55:	eb 67                	jmp    281ebe <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281e57:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281e5a:	05 fc 0f 00 00       	add    $0xffc,%eax
  281e5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e65:	8b 00                	mov    (%eax),%eax
  281e67:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e6d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281e70:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e75:	8b 00                	mov    (%eax),%eax
  281e77:	f7 d0                	not    %eax
  281e79:	89 c2                	mov    %eax,%edx
  281e7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e7e:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281e80:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e83:	8b 00                	mov    (%eax),%eax
  281e85:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281e88:	74 0d                	je     281e97 <memtest_sub+0x5c>
  281e8a:	eb 01                	jmp    281e8d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281e8c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e90:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281e93:	89 10                	mov    %edx,(%eax)
			break;
  281e95:	eb 2f                	jmp    281ec6 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e9a:	8b 00                	mov    (%eax),%eax
  281e9c:	f7 d0                	not    %eax
  281e9e:	89 c2                	mov    %eax,%edx
  281ea0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281ea3:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281ea5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281ea8:	8b 00                	mov    (%eax),%eax
  281eaa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281ead:	75 dd                	jne    281e8c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281eaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281eb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281eb5:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281eb7:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281ebe:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281ec1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281ec4:	76 91                	jbe    281e57 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281ec6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281ec9:	c9                   	leave  
  281eca:	c3                   	ret    

00281ecb <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281ecb:	55                   	push   %ebp
  281ecc:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281ece:	8b 45 08             	mov    0x8(%ebp),%eax
  281ed1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281ed7:	8b 45 08             	mov    0x8(%ebp),%eax
  281eda:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281ee1:	8b 45 08             	mov    0x8(%ebp),%eax
  281ee4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281eeb:	8b 45 08             	mov    0x8(%ebp),%eax
  281eee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281ef5:	90                   	nop
}
  281ef6:	5d                   	pop    %ebp
  281ef7:	c3                   	ret    

00281ef8 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281ef8:	55                   	push   %ebp
  281ef9:	89 e5                	mov    %esp,%ebp
  281efb:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281efe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281f05:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281f0c:	eb 14                	jmp    281f22 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281f0e:	8b 45 08             	mov    0x8(%ebp),%eax
  281f11:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281f14:	83 c2 02             	add    $0x2,%edx
  281f17:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f1b:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281f1e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281f22:	8b 45 08             	mov    0x8(%ebp),%eax
  281f25:	8b 00                	mov    (%eax),%eax
  281f27:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281f2a:	77 e2                	ja     281f0e <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281f2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281f2f:	c9                   	leave  
  281f30:	c3                   	ret    

00281f31 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281f31:	55                   	push   %ebp
  281f32:	89 e5                	mov    %esp,%ebp
  281f34:	53                   	push   %ebx
  281f35:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281f38:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281f3f:	e9 bd 00 00 00       	jmp    282001 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  281f44:	8b 45 08             	mov    0x8(%ebp),%eax
  281f47:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f4a:	83 c2 02             	add    $0x2,%edx
  281f4d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f51:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f54:	0f 82 a3 00 00 00    	jb     281ffd <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  281f5a:	8b 45 08             	mov    0x8(%ebp),%eax
  281f5d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f60:	83 c2 02             	add    $0x2,%edx
  281f63:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  281f69:	8b 45 08             	mov    0x8(%ebp),%eax
  281f6c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f6f:	83 c2 02             	add    $0x2,%edx
  281f72:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  281f75:	8b 45 0c             	mov    0xc(%ebp),%eax
  281f78:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281f7b:	8b 45 08             	mov    0x8(%ebp),%eax
  281f7e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f81:	83 c2 02             	add    $0x2,%edx
  281f84:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  281f87:	8b 45 08             	mov    0x8(%ebp),%eax
  281f8a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281f8d:	83 c2 02             	add    $0x2,%edx
  281f90:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f94:	2b 45 0c             	sub    0xc(%ebp),%eax
  281f97:	89 c2                	mov    %eax,%edx
  281f99:	8b 45 08             	mov    0x8(%ebp),%eax
  281f9c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  281f9f:	83 c1 02             	add    $0x2,%ecx
  281fa2:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  281fa6:	8b 45 08             	mov    0x8(%ebp),%eax
  281fa9:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281fac:	83 c2 02             	add    $0x2,%edx
  281faf:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281fb3:	85 c0                	test   %eax,%eax
  281fb5:	75 41                	jne    281ff8 <memman_alloc+0xc7>
			{
				man->frees--;
  281fb7:	8b 45 08             	mov    0x8(%ebp),%eax
  281fba:	8b 00                	mov    (%eax),%eax
  281fbc:	8d 50 ff             	lea    -0x1(%eax),%edx
  281fbf:	8b 45 08             	mov    0x8(%ebp),%eax
  281fc2:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  281fc4:	eb 28                	jmp    281fee <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  281fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fc9:	8d 50 01             	lea    0x1(%eax),%edx
  281fcc:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281fcf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  281fd2:	8d 58 02             	lea    0x2(%eax),%ebx
  281fd5:	8b 45 08             	mov    0x8(%ebp),%eax
  281fd8:	83 c2 02             	add    $0x2,%edx
  281fdb:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  281fde:	8b 02                	mov    (%edx),%eax
  281fe0:	8b 52 04             	mov    0x4(%edx),%edx
  281fe3:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  281fe6:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  281fea:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  281fee:	8b 45 08             	mov    0x8(%ebp),%eax
  281ff1:	8b 00                	mov    (%eax),%eax
  281ff3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281ff6:	77 ce                	ja     281fc6 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  281ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  281ffb:	eb 17                	jmp    282014 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281ffd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282001:	8b 45 08             	mov    0x8(%ebp),%eax
  282004:	8b 00                	mov    (%eax),%eax
  282006:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282009:	0f 87 35 ff ff ff    	ja     281f44 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  28200f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282014:	83 c4 10             	add    $0x10,%esp
  282017:	5b                   	pop    %ebx
  282018:	5d                   	pop    %ebp
  282019:	c3                   	ret    

0028201a <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  28201a:	55                   	push   %ebp
  28201b:	89 e5                	mov    %esp,%ebp
  28201d:	53                   	push   %ebx
  28201e:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  282021:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  282028:	eb 15                	jmp    28203f <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  28202a:	8b 45 08             	mov    0x8(%ebp),%eax
  28202d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282030:	83 c2 02             	add    $0x2,%edx
  282033:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282036:	3b 45 0c             	cmp    0xc(%ebp),%eax
  282039:	77 10                	ja     28204b <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  28203b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28203f:	8b 45 08             	mov    0x8(%ebp),%eax
  282042:	8b 00                	mov    (%eax),%eax
  282044:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282047:	7f e1                	jg     28202a <memman_free+0x10>
  282049:	eb 01                	jmp    28204c <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  28204b:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  28204c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  282050:	0f 8e f2 00 00 00    	jle    282148 <memman_free+0x12e>
  282056:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282059:	8d 50 ff             	lea    -0x1(%eax),%edx
  28205c:	8b 45 08             	mov    0x8(%ebp),%eax
  28205f:	83 c2 02             	add    $0x2,%edx
  282062:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  282065:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282068:	8d 48 ff             	lea    -0x1(%eax),%ecx
  28206b:	8b 45 08             	mov    0x8(%ebp),%eax
  28206e:	83 c1 02             	add    $0x2,%ecx
  282071:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282075:	01 d0                	add    %edx,%eax
  282077:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28207a:	0f 85 c8 00 00 00    	jne    282148 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282080:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282083:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282086:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282089:	8d 50 ff             	lea    -0x1(%eax),%edx
  28208c:	8b 45 08             	mov    0x8(%ebp),%eax
  28208f:	83 c2 02             	add    $0x2,%edx
  282092:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282096:	8b 45 10             	mov    0x10(%ebp),%eax
  282099:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28209c:	8b 45 08             	mov    0x8(%ebp),%eax
  28209f:	8d 53 02             	lea    0x2(%ebx),%edx
  2820a2:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  2820a6:	8b 45 08             	mov    0x8(%ebp),%eax
  2820a9:	8b 00                	mov    (%eax),%eax
  2820ab:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820ae:	0f 8e 8a 00 00 00    	jle    28213e <memman_free+0x124>
  2820b4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2820b7:	8b 45 10             	mov    0x10(%ebp),%eax
  2820ba:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2820bd:	8b 45 08             	mov    0x8(%ebp),%eax
  2820c0:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820c3:	83 c2 02             	add    $0x2,%edx
  2820c6:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2820c9:	39 c1                	cmp    %eax,%ecx
  2820cb:	75 71                	jne    28213e <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  2820cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820d0:	8d 58 ff             	lea    -0x1(%eax),%ebx
  2820d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820d6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2820d9:	8b 45 08             	mov    0x8(%ebp),%eax
  2820dc:	83 c2 02             	add    $0x2,%edx
  2820df:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  2820e3:	8b 45 08             	mov    0x8(%ebp),%eax
  2820e6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  2820e9:	83 c1 02             	add    $0x2,%ecx
  2820ec:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2820f0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2820f3:	8b 45 08             	mov    0x8(%ebp),%eax
  2820f6:	8d 53 02             	lea    0x2(%ebx),%edx
  2820f9:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  2820fd:	eb 28                	jmp    282127 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  2820ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282102:	8d 50 01             	lea    0x1(%eax),%edx
  282105:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282108:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28210b:	8d 58 02             	lea    0x2(%eax),%ebx
  28210e:	8b 45 08             	mov    0x8(%ebp),%eax
  282111:	83 c2 02             	add    $0x2,%edx
  282114:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282117:	8b 02                	mov    (%edx),%eax
  282119:	8b 52 04             	mov    0x4(%edx),%edx
  28211c:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  28211f:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  282123:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282127:	8b 45 08             	mov    0x8(%ebp),%eax
  28212a:	8b 00                	mov    (%eax),%eax
  28212c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28212f:	7f ce                	jg     2820ff <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  282131:	8b 45 08             	mov    0x8(%ebp),%eax
  282134:	8b 00                	mov    (%eax),%eax
  282136:	8d 50 ff             	lea    -0x1(%eax),%edx
  282139:	8b 45 08             	mov    0x8(%ebp),%eax
  28213c:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  28213e:	b8 00 00 00 00       	mov    $0x0,%eax
  282143:	e9 1f 01 00 00       	jmp    282267 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  282148:	8b 45 08             	mov    0x8(%ebp),%eax
  28214b:	8b 00                	mov    (%eax),%eax
  28214d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282150:	7e 52                	jle    2821a4 <memman_free+0x18a>
  282152:	8b 55 0c             	mov    0xc(%ebp),%edx
  282155:	8b 45 10             	mov    0x10(%ebp),%eax
  282158:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28215b:	8b 45 08             	mov    0x8(%ebp),%eax
  28215e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282161:	83 c2 02             	add    $0x2,%edx
  282164:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282167:	39 c1                	cmp    %eax,%ecx
  282169:	75 39                	jne    2821a4 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  28216b:	8b 45 08             	mov    0x8(%ebp),%eax
  28216e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282171:	8d 4a 02             	lea    0x2(%edx),%ecx
  282174:	8b 55 0c             	mov    0xc(%ebp),%edx
  282177:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  28217a:	8b 45 08             	mov    0x8(%ebp),%eax
  28217d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282180:	83 c2 02             	add    $0x2,%edx
  282183:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282187:	8b 45 10             	mov    0x10(%ebp),%eax
  28218a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28218d:	8b 45 08             	mov    0x8(%ebp),%eax
  282190:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282193:	83 c2 02             	add    $0x2,%edx
  282196:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28219a:	b8 00 00 00 00       	mov    $0x0,%eax
  28219f:	e9 c3 00 00 00       	jmp    282267 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  2821a4:	8b 45 08             	mov    0x8(%ebp),%eax
  2821a7:	8b 00                	mov    (%eax),%eax
  2821a9:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  2821ae:	0f 8f 8a 00 00 00    	jg     28223e <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  2821b4:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b7:	8b 00                	mov    (%eax),%eax
  2821b9:	83 e8 01             	sub    $0x1,%eax
  2821bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  2821bf:	eb 28                	jmp    2821e9 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  2821c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2821c4:	83 c0 01             	add    $0x1,%eax
  2821c7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2821ca:	8d 58 02             	lea    0x2(%eax),%ebx
  2821cd:	8b 45 08             	mov    0x8(%ebp),%eax
  2821d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2821d3:	83 c2 02             	add    $0x2,%edx
  2821d6:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  2821d9:	8b 02                	mov    (%edx),%eax
  2821db:	8b 52 04             	mov    0x4(%edx),%edx
  2821de:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  2821e1:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  2821e5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  2821e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2821ec:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821ef:	7d d0                	jge    2821c1 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  2821f1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821f4:	8b 50 04             	mov    0x4(%eax),%edx
  2821f7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821fa:	8b 00                	mov    (%eax),%eax
  2821fc:	39 c2                	cmp    %eax,%edx
  2821fe:	7d 0b                	jge    28220b <memman_free+0x1f1>
  282200:	8b 45 08             	mov    0x8(%ebp),%eax
  282203:	8b 10                	mov    (%eax),%edx
  282205:	8b 45 08             	mov    0x8(%ebp),%eax
  282208:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  28220b:	8b 45 08             	mov    0x8(%ebp),%eax
  28220e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282211:	8d 4a 02             	lea    0x2(%edx),%ecx
  282214:	8b 55 0c             	mov    0xc(%ebp),%edx
  282217:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  28221a:	8b 45 08             	mov    0x8(%ebp),%eax
  28221d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282220:	8d 4a 02             	lea    0x2(%edx),%ecx
  282223:	8b 55 10             	mov    0x10(%ebp),%edx
  282226:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  28222a:	8b 45 08             	mov    0x8(%ebp),%eax
  28222d:	8b 00                	mov    (%eax),%eax
  28222f:	8d 50 01             	lea    0x1(%eax),%edx
  282232:	8b 45 08             	mov    0x8(%ebp),%eax
  282235:	89 10                	mov    %edx,(%eax)
		return 0;
  282237:	b8 00 00 00 00       	mov    $0x0,%eax
  28223c:	eb 29                	jmp    282267 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  28223e:	8b 45 08             	mov    0x8(%ebp),%eax
  282241:	8b 40 0c             	mov    0xc(%eax),%eax
  282244:	8d 50 01             	lea    0x1(%eax),%edx
  282247:	8b 45 08             	mov    0x8(%ebp),%eax
  28224a:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  28224d:	8b 45 08             	mov    0x8(%ebp),%eax
  282250:	8b 40 08             	mov    0x8(%eax),%eax
  282253:	89 c2                	mov    %eax,%edx
  282255:	8b 45 10             	mov    0x10(%ebp),%eax
  282258:	01 d0                	add    %edx,%eax
  28225a:	89 c2                	mov    %eax,%edx
  28225c:	8b 45 08             	mov    0x8(%ebp),%eax
  28225f:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  282262:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  282267:	83 c4 10             	add    $0x10,%esp
  28226a:	5b                   	pop    %ebx
  28226b:	5d                   	pop    %ebp
  28226c:	c3                   	ret    

0028226d <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  28226d:	55                   	push   %ebp
  28226e:	89 e5                	mov    %esp,%ebp
  282270:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  282273:	8b 45 0c             	mov    0xc(%ebp),%eax
  282276:	05 ff 0f 00 00       	add    $0xfff,%eax
  28227b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282280:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282283:	ff 75 0c             	pushl  0xc(%ebp)
  282286:	ff 75 08             	pushl  0x8(%ebp)
  282289:	e8 a3 fc ff ff       	call   281f31 <memman_alloc>
  28228e:	83 c4 08             	add    $0x8,%esp
  282291:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282294:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282297:	c9                   	leave  
  282298:	c3                   	ret    

00282299 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282299:	55                   	push   %ebp
  28229a:	89 e5                	mov    %esp,%ebp
  28229c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28229f:	8b 45 10             	mov    0x10(%ebp),%eax
  2822a2:	05 ff 0f 00 00       	add    $0xfff,%eax
  2822a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  2822ac:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  2822af:	ff 75 10             	pushl  0x10(%ebp)
  2822b2:	ff 75 0c             	pushl  0xc(%ebp)
  2822b5:	ff 75 08             	pushl  0x8(%ebp)
  2822b8:	e8 5d fd ff ff       	call   28201a <memman_free>
  2822bd:	83 c4 0c             	add    $0xc,%esp
  2822c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  2822c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  2822c6:	c9                   	leave  
  2822c7:	c3                   	ret    

002822c8 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  2822c8:	55                   	push   %ebp
  2822c9:	89 e5                	mov    %esp,%ebp
  2822cb:	57                   	push   %edi
  2822cc:	56                   	push   %esi
  2822cd:	53                   	push   %ebx
  2822ce:	83 ec 14             	sub    $0x14,%esp
  2822d1:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  2822d4:	68 14 2c 00 00       	push   $0x2c14
  2822d9:	57                   	push   %edi
  2822da:	e8 8e ff ff ff       	call   28226d <memman_alloc_4k>
  2822df:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  2822e1:	83 c4 10             	add    $0x10,%esp
  2822e4:	85 c0                	test   %eax,%eax
  2822e6:	74 6a                	je     282352 <shtctl_init+0x8a>
  2822e8:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  2822ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  2822ed:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  2822ef:	83 ec 08             	sub    $0x8,%esp
  2822f2:	8b 45 10             	mov    0x10(%ebp),%eax
  2822f5:	0f af 45 14          	imul   0x14(%ebp),%eax
  2822f9:	50                   	push   %eax
  2822fa:	57                   	push   %edi
  2822fb:	e8 6d ff ff ff       	call   28226d <memman_alloc_4k>
  282300:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  282303:	83 c4 10             	add    $0x10,%esp
  282306:	85 c0                	test   %eax,%eax
  282308:	75 19                	jne    282323 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  28230a:	83 ec 04             	sub    $0x4,%esp
  28230d:	68 14 2c 00 00       	push   $0x2c14
  282312:	56                   	push   %esi
  282313:	57                   	push   %edi
  282314:	e8 80 ff ff ff       	call   282299 <memman_free_4k>
		ctl = 0;
		goto err;
  282319:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  28231c:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  282321:	eb 2f                	jmp    282352 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  282323:	8b 45 10             	mov    0x10(%ebp),%eax
  282326:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  282329:	8b 45 14             	mov    0x14(%ebp),%eax
  28232c:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  28232f:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  282336:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  28233c:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  282342:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  282348:	89 70 04             	mov    %esi,0x4(%eax)
  28234b:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  28234e:	39 d8                	cmp    %ebx,%eax
  282350:	75 f0                	jne    282342 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
err:
	return ctl;
}
  282352:	89 f0                	mov    %esi,%eax
  282354:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282357:	5b                   	pop    %ebx
  282358:	5e                   	pop    %esi
  282359:	5f                   	pop    %edi
  28235a:	5d                   	pop    %ebp
  28235b:	c3                   	ret    

0028235c <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  28235c:	55                   	push   %ebp
  28235d:	89 e5                	mov    %esp,%ebp
  28235f:	56                   	push   %esi
  282360:	53                   	push   %ebx
  282361:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  282364:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  28236b:	74 12                	je     28237f <sheet_alloc+0x23>
  28236d:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282373:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  282378:	83 3a 00             	cmpl   $0x0,(%edx)
  28237b:	75 3c                	jne    2823b9 <sheet_alloc+0x5d>
  28237d:	eb 05                	jmp    282384 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  28237f:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282384:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28238b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28238e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282391:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282398:	00 00 00 
			sht->height = -1;
  28239b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  2823a2:	ff ff ff 
			sht->task = 0;
  2823a5:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  2823ac:	00 00 00 00 
			return sht;
  2823b0:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  2823b7:	eb 12                	jmp    2823cb <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  2823b9:	83 c0 01             	add    $0x1,%eax
  2823bc:	83 c2 28             	add    $0x28,%edx
  2823bf:	3d 00 01 00 00       	cmp    $0x100,%eax
  2823c4:	75 b2                	jne    282378 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  2823c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2823cb:	5b                   	pop    %ebx
  2823cc:	5e                   	pop    %esi
  2823cd:	5d                   	pop    %ebp
  2823ce:	c3                   	ret    

002823cf <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  2823cf:	55                   	push   %ebp
  2823d0:	89 e5                	mov    %esp,%ebp
  2823d2:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  2823d5:	8b 55 0c             	mov    0xc(%ebp),%edx
  2823d8:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  2823da:	8b 55 10             	mov    0x10(%ebp),%edx
  2823dd:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  2823e0:	8b 55 14             	mov    0x14(%ebp),%edx
  2823e3:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  2823e6:	8b 55 18             	mov    0x18(%ebp),%edx
  2823e9:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  2823ec:	5d                   	pop    %ebp
  2823ed:	c3                   	ret    

002823ee <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  2823ee:	55                   	push   %ebp
  2823ef:	89 e5                	mov    %esp,%ebp
  2823f1:	57                   	push   %edi
  2823f2:	56                   	push   %esi
  2823f3:	53                   	push   %ebx
  2823f4:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  2823f7:	8b 45 08             	mov    0x8(%ebp),%eax
  2823fa:	8b 00                	mov    (%eax),%eax
  2823fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2823ff:	8b 45 08             	mov    0x8(%ebp),%eax
  282402:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  282406:	0f 88 80 00 00 00    	js     28248c <sheet_refresh_ob+0x9e>
  28240c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  282413:	8b 45 08             	mov    0x8(%ebp),%eax
  282416:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  282419:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  28241d:	8b 02                	mov    (%edx),%eax
  28241f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  282422:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  282426:	7e 55                	jle    28247d <sheet_refresh_ob+0x8f>
  282428:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  28242d:	89 f8                	mov    %edi,%eax
  28242f:	03 42 10             	add    0x10(%edx),%eax
  282432:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  282435:	8b 4a 04             	mov    0x4(%edx),%ecx
  282438:	85 c9                	test   %ecx,%ecx
  28243a:	7e 39                	jle    282475 <sheet_refresh_ob+0x87>
  28243c:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  282441:	0f af cf             	imul   %edi,%ecx
  282444:	8b 75 f0             	mov    -0x10(%ebp),%esi
  282447:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  28244a:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  28244e:	0f b6 cb             	movzbl %bl,%ecx
  282451:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282454:	74 15                	je     28246b <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  282456:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282459:	8b 75 ec             	mov    -0x14(%ebp),%esi
  28245c:	0f af 71 08          	imul   0x8(%ecx),%esi
  282460:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282463:	01 c1                	add    %eax,%ecx
  282465:	03 4a 0c             	add    0xc(%edx),%ecx
  282468:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  28246b:	83 c0 01             	add    $0x1,%eax
  28246e:	8b 4a 04             	mov    0x4(%edx),%ecx
  282471:	39 c1                	cmp    %eax,%ecx
  282473:	7f cc                	jg     282441 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  282475:	83 c7 01             	add    $0x1,%edi
  282478:	39 7a 08             	cmp    %edi,0x8(%edx)
  28247b:	7f b0                	jg     28242d <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28247d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282484:	8b 7d 08             	mov    0x8(%ebp),%edi
  282487:	39 47 10             	cmp    %eax,0x10(%edi)
  28248a:	7d 87                	jge    282413 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28248c:	83 c4 10             	add    $0x10,%esp
  28248f:	5b                   	pop    %ebx
  282490:	5e                   	pop    %esi
  282491:	5f                   	pop    %edi
  282492:	5d                   	pop    %ebp
  282493:	c3                   	ret    

00282494 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282494:	55                   	push   %ebp
  282495:	89 e5                	mov    %esp,%ebp
  282497:	57                   	push   %edi
  282498:	56                   	push   %esi
  282499:	53                   	push   %ebx
  28249a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28249d:	8b 45 08             	mov    0x8(%ebp),%eax
  2824a0:	8b 00                	mov    (%eax),%eax
  2824a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2824a5:	8b 45 08             	mov    0x8(%ebp),%eax
  2824a8:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  2824ac:	0f 88 a7 00 00 00    	js     282559 <sheet_refreshsub1+0xc5>
  2824b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  2824b9:	8b 45 08             	mov    0x8(%ebp),%eax
  2824bc:	8b 7d e0             	mov    -0x20(%ebp),%edi
  2824bf:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  2824c3:	8b 01                	mov    (%ecx),%eax
  2824c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  2824c8:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  2824cc:	7e 78                	jle    282546 <sheet_refreshsub1+0xb2>
  2824ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  2824d5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  2824d8:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  2824db:	8b 71 04             	mov    0x4(%ecx),%esi
  2824de:	85 f6                	test   %esi,%esi
  2824e0:	7e 58                	jle    28253a <sheet_refreshsub1+0xa6>
  2824e2:	b8 00 00 00 00       	mov    $0x0,%eax
  2824e7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  2824ea:	89 c2                	mov    %eax,%edx
  2824ec:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  2824ef:	3b 55 0c             	cmp    0xc(%ebp),%edx
  2824f2:	7c 3c                	jl     282530 <sheet_refreshsub1+0x9c>
  2824f4:	3b 55 14             	cmp    0x14(%ebp),%edx
  2824f7:	7d 37                	jge    282530 <sheet_refreshsub1+0x9c>
  2824f9:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2824fc:	3b 7d 10             	cmp    0x10(%ebp),%edi
  2824ff:	7c 2f                	jl     282530 <sheet_refreshsub1+0x9c>
  282501:	3b 7d 18             	cmp    0x18(%ebp),%edi
  282504:	7d 2a                	jge    282530 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  282506:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  28250a:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  28250d:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  282510:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  282514:	89 f3                	mov    %esi,%ebx
  282516:	0f b6 fb             	movzbl %bl,%edi
  282519:	3b 79 14             	cmp    0x14(%ecx),%edi
  28251c:	74 12                	je     282530 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  28251e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282521:	8b 7d f0             	mov    -0x10(%ebp),%edi
  282524:	0f af 7b 08          	imul   0x8(%ebx),%edi
  282528:	03 55 e4             	add    -0x1c(%ebp),%edx
  28252b:	89 f3                	mov    %esi,%ebx
  28252d:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  282530:	83 c0 01             	add    $0x1,%eax
  282533:	8b 71 04             	mov    0x4(%ecx),%esi
  282536:	39 c6                	cmp    %eax,%esi
  282538:	7f b0                	jg     2824ea <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  28253a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  28253e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  282541:	39 41 08             	cmp    %eax,0x8(%ecx)
  282544:	7f 8f                	jg     2824d5 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282546:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  28254a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  28254d:	8b 7d 08             	mov    0x8(%ebp),%edi
  282550:	39 47 10             	cmp    %eax,0x10(%edi)
  282553:	0f 8d 60 ff ff ff    	jge    2824b9 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  282559:	83 c4 14             	add    $0x14,%esp
  28255c:	5b                   	pop    %ebx
  28255d:	5e                   	pop    %esi
  28255e:	5f                   	pop    %edi
  28255f:	5d                   	pop    %ebp
  282560:	c3                   	ret    

00282561 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  282561:	55                   	push   %ebp
  282562:	89 e5                	mov    %esp,%ebp
  282564:	57                   	push   %edi
  282565:	56                   	push   %esi
  282566:	53                   	push   %ebx
  282567:	83 ec 34             	sub    $0x34,%esp
  28256a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28256d:	8b 55 10             	mov    0x10(%ebp),%edx
  282570:	8b 75 14             	mov    0x14(%ebp),%esi
  282573:	8b 7d 18             	mov    0x18(%ebp),%edi
  282576:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  282579:	8b 45 08             	mov    0x8(%ebp),%eax
  28257c:	8b 00                	mov    (%eax),%eax
  28257e:	89 45 c0             	mov    %eax,-0x40(%ebp)
  282581:	8b 45 08             	mov    0x8(%ebp),%eax
  282584:	8b 40 04             	mov    0x4(%eax),%eax
  282587:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28258a:	b8 00 00 00 00       	mov    $0x0,%eax
  28258f:	85 c9                	test   %ecx,%ecx
  282591:	0f 48 c8             	cmovs  %eax,%ecx
  282594:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  282597:	85 d2                	test   %edx,%edx
  282599:	0f 48 d0             	cmovs  %eax,%edx
  28259c:	89 55 c8             	mov    %edx,-0x38(%ebp)
	struct SHEET *sht;

	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28259f:	8b 55 08             	mov    0x8(%ebp),%edx
  2825a2:	8b 52 08             	mov    0x8(%edx),%edx
  2825a5:	39 f2                	cmp    %esi,%edx
  2825a7:	0f 4e f2             	cmovle %edx,%esi
  2825aa:	89 75 d0             	mov    %esi,-0x30(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  2825ad:	8b 55 08             	mov    0x8(%ebp),%edx
  2825b0:	8b 52 0c             	mov    0xc(%edx),%edx
  2825b3:	39 fa                	cmp    %edi,%edx
  2825b5:	0f 4e fa             	cmovle %edx,%edi
  2825b8:	89 7d cc             	mov    %edi,-0x34(%ebp)
  2825bb:	85 db                	test   %ebx,%ebx
  2825bd:	0f 49 c3             	cmovns %ebx,%eax
  2825c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  2825c3:	8b 7d 08             	mov    0x8(%ebp),%edi
  2825c6:	3b 47 10             	cmp    0x10(%edi),%eax
  2825c9:	0f 8f 9c 01 00 00    	jg     28276b <sheet_refreshsub2+0x20a>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  2825cf:	8b 45 08             	mov    0x8(%ebp),%eax
  2825d2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  2825d5:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  2825d9:	8b 02                	mov    (%edx),%eax
  2825db:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  2825de:	8b 72 0c             	mov    0xc(%edx),%esi
		by0 = vy0 - sht->vy0;
  2825e1:	8b 7a 10             	mov    0x10(%edx),%edi
		bx1 = vx1 - sht->vx0;
  2825e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2825e7:	29 f0                	sub    %esi,%eax
		by1 = vy1 - sht->vy0;
  2825e9:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  2825ec:	89 7d f0             	mov    %edi,-0x10(%ebp)
  2825ef:	29 fb                	sub    %edi,%ebx
  2825f1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  2825f4:	29 f1                	sub    %esi,%ecx
  2825f6:	bf 00 00 00 00       	mov    $0x0,%edi
  2825fb:	0f 48 cf             	cmovs  %edi,%ecx
  2825fe:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  282601:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  282604:	2b 4d f0             	sub    -0x10(%ebp),%ecx
  282607:	0f 49 f9             	cmovns %ecx,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  28260a:	8b 4a 04             	mov    0x4(%edx),%ecx
  28260d:	39 c8                	cmp    %ecx,%eax
  28260f:	0f 4e c8             	cmovle %eax,%ecx
  282612:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  282615:	8b 42 08             	mov    0x8(%edx),%eax
  282618:	39 c3                	cmp    %eax,%ebx
  28261a:	0f 4e c3             	cmovle %ebx,%eax
  28261d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(sht->col_inv == -1)
  282620:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  282624:	74 0d                	je     282633 <sheet_refreshsub2+0xd2>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  282626:	39 f8                	cmp    %edi,%eax
  282628:	0f 8f dd 00 00 00    	jg     28270b <sheet_refreshsub2+0x1aa>
  28262e:	e9 25 01 00 00       	jmp    282758 <sheet_refreshsub2+0x1f7>
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
  282633:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282636:	09 f0                	or     %esi,%eax
  282638:	a8 03                	test   $0x3,%al
  28263a:	75 06                	jne    282642 <sheet_refreshsub2+0xe1>
  28263c:	f6 45 f0 03          	testb  $0x3,-0x10(%ebp)
  282640:	74 0c                	je     28264e <sheet_refreshsub2+0xed>
  282642:	89 fe                	mov    %edi,%esi
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  282644:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  282647:	7f 71                	jg     2826ba <sheet_refreshsub2+0x159>
  282649:	e9 0a 01 00 00       	jmp    282758 <sheet_refreshsub2+0x1f7>
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
  28264e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282651:	01 c6                	add    %eax,%esi
  282653:	89 75 e4             	mov    %esi,-0x1c(%ebp)
				bx1 = (bx1-bx0)/4;
  282656:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  282659:	29 c3                	sub    %eax,%ebx
  28265b:	89 d8                	mov    %ebx,%eax
  28265d:	8d 4b 03             	lea    0x3(%ebx),%ecx
  282660:	85 db                	test   %ebx,%ebx
  282662:	0f 48 c1             	cmovs  %ecx,%eax
  282665:	c1 f8 02             	sar    $0x2,%eax
  282668:	89 c6                	mov    %eax,%esi
				for(by=by0;by<by1;by++)
  28266a:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  28266d:	0f 8e e5 00 00 00    	jle    282758 <sheet_refreshsub2+0x1f7>
				{

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
  282673:	89 f9                	mov    %edi,%ecx
  282675:	03 4a 10             	add    0x10(%edx),%ecx
  282678:	8b 45 08             	mov    0x8(%ebp),%eax
  28267b:	0f af 48 08          	imul   0x8(%eax),%ecx
  28267f:	03 4d e4             	add    -0x1c(%ebp),%ecx
					int *q = (int *) &buf[by*sht->bxsize+bx0];
  282682:	89 fb                	mov    %edi,%ebx
  282684:	0f af 5a 04          	imul   0x4(%edx),%ebx
  282688:	03 5d d8             	add    -0x28(%ebp),%ebx

					for(bx=0;bx<bx1;bx++)
  28268b:	85 f6                	test   %esi,%esi
  28268d:	7e 1e                	jle    2826ad <sheet_refreshsub2+0x14c>
  28268f:	b8 00 00 00 00       	mov    $0x0,%eax
					{
						p[bx]=q[bx];
  282694:	03 5d ec             	add    -0x14(%ebp),%ebx
  282697:	03 4d e8             	add    -0x18(%ebp),%ecx
  28269a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28269d:	8b 14 83             	mov    (%ebx,%eax,4),%edx
  2826a0:	89 14 81             	mov    %edx,(%ecx,%eax,4)

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
					int *q = (int *) &buf[by*sht->bxsize+bx0];

					for(bx=0;bx<bx1;bx++)
  2826a3:	83 c0 01             	add    $0x1,%eax
  2826a6:	39 c6                	cmp    %eax,%esi
  2826a8:	75 f3                	jne    28269d <sheet_refreshsub2+0x13c>
  2826aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
				bx1 = (bx1-bx0)/4;
				for(by=by0;by<by1;by++)
  2826ad:	83 c7 01             	add    $0x1,%edi
  2826b0:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  2826b3:	75 be                	jne    282673 <sheet_refreshsub2+0x112>
  2826b5:	e9 9e 00 00 00       	jmp    282758 <sheet_refreshsub2+0x1f7>
			}
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
  2826ba:	89 f7                	mov    %esi,%edi
  2826bc:	03 7a 10             	add    0x10(%edx),%edi
					for(bx=bx0;bx<bx1;bx++)
  2826bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826c2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  2826c5:	7e 3a                	jle    282701 <sheet_refreshsub2+0x1a0>
  2826c7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  2826ca:	89 7d e0             	mov    %edi,-0x20(%ebp)
					{
						vx = sht->vx0+bx;
						map[vy*ctl->xsize+vx] = buf[by*sht->bxsize+bx];
  2826cd:	89 f1                	mov    %esi,%ecx
  2826cf:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  2826d2:	0f af 4f 04          	imul   0x4(%edi),%ecx
  2826d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2826d9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  2826dc:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
  2826e0:	89 da                	mov    %ebx,%edx
  2826e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2826e5:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  2826e8:	0f af 59 08          	imul   0x8(%ecx),%ebx
  2826ec:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2826ef:	01 c1                	add    %eax,%ecx
  2826f1:	03 4f 0c             	add    0xc(%edi),%ecx
  2826f4:	88 14 19             	mov    %dl,(%ecx,%ebx,1)
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
					for(bx=bx0;bx<bx1;bx++)
  2826f7:	83 c0 01             	add    $0x1,%eax
  2826fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  2826fd:	75 ce                	jne    2826cd <sheet_refreshsub2+0x16c>
  2826ff:	89 fa                	mov    %edi,%edx
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  282701:	83 c6 01             	add    $0x1,%esi
  282704:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  282707:	75 b1                	jne    2826ba <sheet_refreshsub2+0x159>
  282709:	eb 4d                	jmp    282758 <sheet_refreshsub2+0x1f7>
		}
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
  28270b:	89 f8                	mov    %edi,%eax
  28270d:	03 42 10             	add    0x10(%edx),%eax
  282710:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				for(bx=bx0;bx<bx1;bx++)
  282713:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282716:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282719:	7e 35                	jle    282750 <sheet_refreshsub2+0x1ef>
				{
					vx = sht->vx0+bx;
					c  = buf[by*sht->bxsize+bx];
  28271b:	89 f9                	mov    %edi,%ecx
  28271d:	0f af 4a 04          	imul   0x4(%edx),%ecx
  282721:	8b 75 ec             	mov    -0x14(%ebp),%esi
  282724:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  282727:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
					if(c!=sht->col_inv)
  28272b:	0f b6 cb             	movzbl %bl,%ecx
  28272e:	3b 4a 14             	cmp    0x14(%edx),%ecx
  282731:	74 15                	je     282748 <sheet_refreshsub2+0x1e7>
						map[vy*ctl->xsize+vx] = c;
  282733:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282736:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  282739:	0f af 71 08          	imul   0x8(%ecx),%esi
  28273d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  282740:	01 c1                	add    %eax,%ecx
  282742:	03 4a 0c             	add    0xc(%edx),%ecx
  282745:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
				for(bx=bx0;bx<bx1;bx++)
  282748:	83 c0 01             	add    $0x1,%eax
  28274b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  28274e:	75 cb                	jne    28271b <sheet_refreshsub2+0x1ba>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  282750:	83 c7 01             	add    $0x1,%edi
  282753:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282756:	75 b3                	jne    28270b <sheet_refreshsub2+0x1aa>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282758:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
  28275c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28275f:	8b 7d 08             	mov    0x8(%ebp),%edi
  282762:	39 47 10             	cmp    %eax,0x10(%edi)
  282765:	0f 8d 64 fe ff ff    	jge    2825cf <sheet_refreshsub2+0x6e>
				}
			}
		}

	}
	if(((vx1-vx0)&3)==0)
  28276b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  28276e:	2b 45 c4             	sub    -0x3c(%ebp),%eax
  282771:	a8 03                	test   $0x3,%al
  282773:	74 0d                	je     282782 <sheet_refreshsub2+0x221>
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  282775:	8b 7d c8             	mov    -0x38(%ebp),%edi
  282778:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  28277b:	7f 79                	jg     2827f6 <sheet_refreshsub2+0x295>
  28277d:	e9 8c 00 00 00       	jmp    28280e <sheet_refreshsub2+0x2ad>
		}

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
  282782:	8d 50 03             	lea    0x3(%eax),%edx
  282785:	85 c0                	test   %eax,%eax
  282787:	0f 48 c2             	cmovs  %edx,%eax
  28278a:	c1 f8 02             	sar    $0x2,%eax
  28278d:	89 c3                	mov    %eax,%ebx
		for(vy=vy0;vy<vy1;vy++)
  28278f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282792:	39 45 cc             	cmp    %eax,-0x34(%ebp)
  282795:	7e 77                	jle    28280e <sheet_refreshsub2+0x2ad>
  282797:	89 c1                	mov    %eax,%ecx
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
  282799:	8b 45 08             	mov    0x8(%ebp),%eax
  28279c:	89 ca                	mov    %ecx,%edx
  28279e:	0f af 50 08          	imul   0x8(%eax),%edx
  2827a2:	03 55 c4             	add    -0x3c(%ebp),%edx
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  2827a5:	85 db                	test   %ebx,%ebx
  2827a7:	7e 1b                	jle    2827c4 <sheet_refreshsub2+0x263>
  2827a9:	b8 00 00 00 00       	mov    $0x0,%eax
				d[vx] = s[vx];
  2827ae:	8b 7d e8             	mov    -0x18(%ebp),%edi
  2827b1:	8d 34 17             	lea    (%edi,%edx,1),%esi
  2827b4:	03 55 c0             	add    -0x40(%ebp),%edx
  2827b7:	8b 3c 86             	mov    (%esi,%eax,4),%edi
  2827ba:	89 3c 82             	mov    %edi,(%edx,%eax,4)
		for(vy=vy0;vy<vy1;vy++)
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  2827bd:	83 c0 01             	add    $0x1,%eax
  2827c0:	39 c3                	cmp    %eax,%ebx
  2827c2:	75 f3                	jne    2827b7 <sheet_refreshsub2+0x256>

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
		for(vy=vy0;vy<vy1;vy++)
  2827c4:	83 c1 01             	add    $0x1,%ecx
  2827c7:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  2827ca:	75 cd                	jne    282799 <sheet_refreshsub2+0x238>
  2827cc:	eb 40                	jmp    28280e <sheet_refreshsub2+0x2ad>
  2827ce:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  2827d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2827d4:	0f af 47 08          	imul   0x8(%edi),%eax
  2827d8:	01 d0                	add    %edx,%eax
  2827da:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  2827de:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
  2827e1:	83 c2 01             	add    $0x1,%edx
  2827e4:	3b 55 d0             	cmp    -0x30(%ebp),%edx
  2827e7:	75 e8                	jne    2827d1 <sheet_refreshsub2+0x270>
  2827e9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  2827ec:	83 c1 01             	add    $0x1,%ecx
  2827ef:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  2827f2:	74 1a                	je     28280e <sheet_refreshsub2+0x2ad>
  2827f4:	eb 0c                	jmp    282802 <sheet_refreshsub2+0x2a1>
  2827f6:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  2827f9:	8b 75 e8             	mov    -0x18(%ebp),%esi
  2827fc:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  2827ff:	8b 7d 08             	mov    0x8(%ebp),%edi
			for(vx=vx0;vx<vx1;vx++)
  282802:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  282805:	89 c2                	mov    %eax,%edx
  282807:	39 45 d0             	cmp    %eax,-0x30(%ebp)
  28280a:	7f c2                	jg     2827ce <sheet_refreshsub2+0x26d>
  28280c:	eb de                	jmp    2827ec <sheet_refreshsub2+0x28b>
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
	}
}
  28280e:	83 c4 34             	add    $0x34,%esp
  282811:	5b                   	pop    %ebx
  282812:	5e                   	pop    %esi
  282813:	5f                   	pop    %edi
  282814:	5d                   	pop    %ebp
  282815:	c3                   	ret    

00282816 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  282816:	55                   	push   %ebp
  282817:	89 e5                	mov    %esp,%ebp
  282819:	53                   	push   %ebx
  28281a:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
	struct SHTCTL *ctl = sht->ctl;
	sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  28281d:	8b 48 10             	mov    0x10(%eax),%ecx
  282820:	8b 50 0c             	mov    0xc(%eax),%edx
  282823:	ff 70 18             	pushl  0x18(%eax)
  282826:	89 cb                	mov    %ecx,%ebx
  282828:	03 5d 18             	add    0x18(%ebp),%ebx
  28282b:	53                   	push   %ebx
  28282c:	89 d3                	mov    %edx,%ebx
  28282e:	03 5d 14             	add    0x14(%ebp),%ebx
  282831:	53                   	push   %ebx
  282832:	03 4d 10             	add    0x10(%ebp),%ecx
  282835:	51                   	push   %ecx
  282836:	03 55 0c             	add    0xc(%ebp),%edx
  282839:	52                   	push   %edx
  28283a:	ff 70 20             	pushl  0x20(%eax)
  28283d:	e8 1f fd ff ff       	call   282561 <sheet_refreshsub2>
	//}
	return;
  282842:	83 c4 18             	add    $0x18,%esp
}
  282845:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282848:	c9                   	leave  
  282849:	c3                   	ret    

0028284a <sheet_updown>:
}


//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  28284a:	55                   	push   %ebp
  28284b:	89 e5                	mov    %esp,%ebp
  28284d:	57                   	push   %edi
  28284e:	56                   	push   %esi
  28284f:	53                   	push   %ebx
  282850:	8b 75 08             	mov    0x8(%ebp),%esi
  282853:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  282856:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  282859:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  28285c:	8b 79 10             	mov    0x10(%ecx),%edi
  28285f:	8d 57 01             	lea    0x1(%edi),%edx
  282862:	39 da                	cmp    %ebx,%edx
  282864:	0f 4f d3             	cmovg  %ebx,%edx
  282867:	85 d2                	test   %edx,%edx
  282869:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  28286e:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  282871:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  282874:	39 d8                	cmp    %ebx,%eax
  282876:	7e 59                	jle    2828d1 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  282878:	85 db                	test   %ebx,%ebx
  28287a:	79 09                	jns    282885 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28287c:	8b 59 10             	mov    0x10(%ecx),%ebx
  28287f:	39 d8                	cmp    %ebx,%eax
  282881:	7c 1c                	jl     28289f <sheet_updown+0x55>
  282883:	eb 31                	jmp    2828b6 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282885:	8d 50 ff             	lea    -0x1(%eax),%edx
  282888:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28288c:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282890:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282893:	89 d0                	mov    %edx,%eax
  282895:	39 d3                	cmp    %edx,%ebx
  282897:	75 ec                	jne    282885 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282899:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28289d:	eb 1d                	jmp    2828bc <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28289f:	8d 50 01             	lea    0x1(%eax),%edx
  2828a2:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  2828a6:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  2828aa:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  2828ad:	8b 59 10             	mov    0x10(%ecx),%ebx
  2828b0:	89 d0                	mov    %edx,%eax
  2828b2:	39 d3                	cmp    %edx,%ebx
  2828b4:	7f e9                	jg     28289f <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  2828b6:	83 eb 01             	sub    $0x1,%ebx
  2828b9:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  2828bc:	ff 76 08             	pushl  0x8(%esi)
  2828bf:	ff 76 04             	pushl  0x4(%esi)
  2828c2:	6a 00                	push   $0x0
  2828c4:	6a 00                	push   $0x0
  2828c6:	56                   	push   %esi
  2828c7:	e8 4a ff ff ff       	call   282816 <sheet_refresh>
  2828cc:	83 c4 14             	add    $0x14,%esp
  2828cf:	eb 5a                	jmp    28292b <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  2828d1:	39 d8                	cmp    %ebx,%eax
  2828d3:	7d 56                	jge    28292b <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  2828d5:	85 c0                	test   %eax,%eax
  2828d7:	78 1a                	js     2828f3 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  2828d9:	8d 50 01             	lea    0x1(%eax),%edx
  2828dc:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  2828e0:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  2828e4:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  2828e7:	89 d0                	mov    %edx,%eax
  2828e9:	39 d3                	cmp    %edx,%ebx
  2828eb:	75 ec                	jne    2828d9 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  2828ed:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  2828f1:	eb 25                	jmp    282918 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  2828f3:	8b 41 10             	mov    0x10(%ecx),%eax
  2828f6:	8d 50 01             	lea    0x1(%eax),%edx
  2828f9:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  2828fc:	39 d3                	cmp    %edx,%ebx
  2828fe:	7d 14                	jge    282914 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282900:	8d 42 ff             	lea    -0x1(%edx),%eax
  282903:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  282907:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  28290b:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  28290e:	89 c2                	mov    %eax,%edx
  282910:	39 c3                	cmp    %eax,%ebx
  282912:	75 ec                	jne    282900 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  282914:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  282918:	ff 76 08             	pushl  0x8(%esi)
  28291b:	ff 76 04             	pushl  0x4(%esi)
  28291e:	6a 00                	push   $0x0
  282920:	6a 00                	push   $0x0
  282922:	56                   	push   %esi
  282923:	e8 ee fe ff ff       	call   282816 <sheet_refresh>
  282928:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  28292b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28292e:	5b                   	pop    %ebx
  28292f:	5e                   	pop    %esi
  282930:	5f                   	pop    %edi
  282931:	5d                   	pop    %ebp
  282932:	c3                   	ret    

00282933 <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  282933:	55                   	push   %ebp
  282934:	89 e5                	mov    %esp,%ebp
  282936:	57                   	push   %edi
  282937:	56                   	push   %esi
  282938:	53                   	push   %ebx
  282939:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28293c:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  28293f:	8b 43 0c             	mov    0xc(%ebx),%eax
  282942:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  282945:	8b 7d 0c             	mov    0xc(%ebp),%edi
  282948:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  28294b:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  28294e:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282952:	78 36                	js     28298a <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  282954:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  282957:	6a 00                	push   $0x0
  282959:	89 d1                	mov    %edx,%ecx
  28295b:	03 4b 08             	add    0x8(%ebx),%ecx
  28295e:	51                   	push   %ecx
  28295f:	89 c1                	mov    %eax,%ecx
  282961:	03 4b 04             	add    0x4(%ebx),%ecx
  282964:	51                   	push   %ecx
  282965:	52                   	push   %edx
  282966:	50                   	push   %eax
  282967:	57                   	push   %edi
  282968:	e8 f4 fb ff ff       	call   282561 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  28296d:	ff 73 18             	pushl  0x18(%ebx)
  282970:	89 f0                	mov    %esi,%eax
  282972:	03 43 08             	add    0x8(%ebx),%eax
  282975:	50                   	push   %eax
  282976:	8b 45 0c             	mov    0xc(%ebp),%eax
  282979:	03 43 04             	add    0x4(%ebx),%eax
  28297c:	50                   	push   %eax
  28297d:	56                   	push   %esi
  28297e:	ff 75 0c             	pushl  0xc(%ebp)
  282981:	57                   	push   %edi
  282982:	e8 da fb ff ff       	call   282561 <sheet_refreshsub2>
  282987:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  28298a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28298d:	5b                   	pop    %ebx
  28298e:	5e                   	pop    %esi
  28298f:	5f                   	pop    %edi
  282990:	5d                   	pop    %ebp
  282991:	c3                   	ret    

00282992 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282992:	55                   	push   %ebp
  282993:	89 e5                	mov    %esp,%ebp
  282995:	53                   	push   %ebx
  282996:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282999:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  28299d:	78 0b                	js     2829aa <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  28299f:	6a ff                	push   $0xffffffff
  2829a1:	53                   	push   %ebx
  2829a2:	e8 a3 fe ff ff       	call   28284a <sheet_updown>
  2829a7:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  2829aa:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  2829b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2829b4:	c9                   	leave  
  2829b5:	c3                   	ret    

002829b6 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  2829b6:	55                   	push   %ebp
  2829b7:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  2829b9:	80 3d f0 75 28 00 00 	cmpb   $0x0,0x2875f0
  2829c0:	74 11                	je     2829d3 <timer_alloc+0x1d>
  2829c2:	ba 04 76 28 00       	mov    $0x287604,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  2829c7:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  2829cc:	80 3a 00             	cmpb   $0x0,(%edx)
  2829cf:	75 2b                	jne    2829fc <timer_alloc+0x46>
  2829d1:	eb 05                	jmp    2829d8 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  2829d3:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  2829d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2829df:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2829e2:	8d 0c 8d e0 75 28 00 	lea    0x2875e0(,%ecx,4),%ecx
  2829e9:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  2829ed:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  2829f1:	01 d0                	add    %edx,%eax
  2829f3:	8d 04 85 e8 75 28 00 	lea    0x2875e8(,%eax,4),%eax
  2829fa:	eb 12                	jmp    282a0e <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  2829fc:	83 c0 01             	add    $0x1,%eax
  2829ff:	83 c2 14             	add    $0x14,%edx
  282a02:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282a07:	75 c3                	jne    2829cc <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282a0e:	5d                   	pop    %ebp
  282a0f:	c3                   	ret    

00282a10 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282a10:	55                   	push   %ebp
  282a11:	89 e5                	mov    %esp,%ebp
  282a13:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282a16:	6a 34                	push   $0x34
  282a18:	6a 43                	push   $0x43
  282a1a:	e8 07 e0 ff ff       	call   280a26 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282a1f:	83 c4 08             	add    $0x8,%esp
  282a22:	68 9c 00 00 00       	push   $0x9c
  282a27:	6a 40                	push   $0x40
  282a29:	e8 f8 df ff ff       	call   280a26 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282a2e:	83 c4 08             	add    $0x8,%esp
  282a31:	6a 2e                	push   $0x2e
  282a33:	6a 40                	push   $0x40
  282a35:	e8 ec df ff ff       	call   280a26 <io_out8>
  282a3a:	b8 f0 75 28 00       	mov    $0x2875f0,%eax
  282a3f:	ba 00 9d 28 00       	mov    $0x289d00,%edx
  282a44:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282a47:	c6 00 00             	movb   $0x0,(%eax)
  282a4a:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282a4d:	39 d0                	cmp    %edx,%eax
  282a4f:	75 f6                	jne    282a47 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282a51:	e8 60 ff ff ff       	call   2829b6 <timer_alloc>
	t->next = 0;
  282a56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282a5c:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282a63:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282a67:	a3 f8 9c 28 00       	mov    %eax,0x289cf8
	timerctl.next = 0xffffffff;
  282a6c:	c7 05 e4 75 28 00 ff 	movl   $0xffffffff,0x2875e4
  282a73:	ff ff ff 
	return;
}
  282a76:	c9                   	leave  
  282a77:	c3                   	ret    

00282a78 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282a78:	55                   	push   %ebp
  282a79:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282a7b:	8b 45 08             	mov    0x8(%ebp),%eax
  282a7e:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282a82:	5d                   	pop    %ebp
  282a83:	c3                   	ret    

00282a84 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282a84:	55                   	push   %ebp
  282a85:	89 e5                	mov    %esp,%ebp
  282a87:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282a8a:	8b 55 0c             	mov    0xc(%ebp),%edx
  282a8d:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282a90:	8b 55 10             	mov    0x10(%ebp),%edx
  282a93:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282a96:	5d                   	pop    %ebp
  282a97:	c3                   	ret    

00282a98 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282a98:	55                   	push   %ebp
  282a99:	89 e5                	mov    %esp,%ebp
  282a9b:	57                   	push   %edi
  282a9c:	56                   	push   %esi
  282a9d:	53                   	push   %ebx
  282a9e:	83 ec 0c             	sub    $0xc,%esp
  282aa1:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282aa4:	a1 e0 75 28 00       	mov    0x2875e0,%eax
  282aa9:	03 45 0c             	add    0xc(%ebp),%eax
  282aac:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282aaf:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282ab3:	e8 8d df ff ff       	call   280a45 <io_load_eflags>
  282ab8:	89 c6                	mov    %eax,%esi
	io_cli();
  282aba:	e8 33 df ff ff       	call   2809f2 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282abf:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282ac2:	8b 3d f8 9c 28 00    	mov    0x289cf8,%edi
  282ac8:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282acb:	77 1e                	ja     282aeb <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282acd:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282acf:	89 1d f8 9c 28 00    	mov    %ebx,0x289cf8
		timerctl.next = timer->timeout;
  282ad5:	8b 43 04             	mov    0x4(%ebx),%eax
  282ad8:	a3 e4 75 28 00       	mov    %eax,0x2875e4
		io_store_eflags(e);
  282add:	83 ec 0c             	sub    $0xc,%esp
  282ae0:	56                   	push   %esi
  282ae1:	e8 62 df ff ff       	call   280a48 <io_store_eflags>
		return;
  282ae6:	83 c4 10             	add    $0x10,%esp
  282ae9:	eb 3e                	jmp    282b29 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282aeb:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282aed:	85 d2                	test   %edx,%edx
  282aef:	74 2c                	je     282b1d <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282af1:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282af4:	77 21                	ja     282b17 <timer_settime+0x7f>
  282af6:	eb 07                	jmp    282aff <timer_settime+0x67>
  282af8:	3b 48 04             	cmp    0x4(%eax),%ecx
  282afb:	77 18                	ja     282b15 <timer_settime+0x7d>
  282afd:	eb 04                	jmp    282b03 <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282aff:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282b01:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282b03:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282b05:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282b07:	83 ec 0c             	sub    $0xc,%esp
  282b0a:	56                   	push   %esi
  282b0b:	e8 38 df ff ff       	call   280a48 <io_store_eflags>
			return;
  282b10:	83 c4 10             	add    $0x10,%esp
  282b13:	eb 14                	jmp    282b29 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282b15:	89 c2                	mov    %eax,%edx
  282b17:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282b19:	85 c0                	test   %eax,%eax
  282b1b:	75 db                	jne    282af8 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282b1d:	83 ec 0c             	sub    $0xc,%esp
  282b20:	56                   	push   %esi
  282b21:	e8 22 df ff ff       	call   280a48 <io_store_eflags>
	return;
  282b26:	83 c4 10             	add    $0x10,%esp
}
  282b29:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282b2c:	5b                   	pop    %ebx
  282b2d:	5e                   	pop    %esi
  282b2e:	5f                   	pop    %edi
  282b2f:	5d                   	pop    %ebp
  282b30:	c3                   	ret    

00282b31 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282b31:	55                   	push   %ebp
  282b32:	89 e5                	mov    %esp,%ebp
  282b34:	56                   	push   %esi
  282b35:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282b36:	83 ec 08             	sub    $0x8,%esp
  282b39:	6a 60                	push   $0x60
  282b3b:	6a 20                	push   $0x20
  282b3d:	e8 e4 de ff ff       	call   280a26 <io_out8>
	timerctl.count ++;
  282b42:	a1 e0 75 28 00       	mov    0x2875e0,%eax
  282b47:	8d 50 01             	lea    0x1(%eax),%edx
  282b4a:	89 15 e0 75 28 00    	mov    %edx,0x2875e0
	
	if(timerctl.count >= timerctl.next)
  282b50:	83 c4 10             	add    $0x10,%esp
  282b53:	3b 15 e4 75 28 00    	cmp    0x2875e4,%edx
  282b59:	72 69                	jb     282bc4 <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282b5b:	8b 1d f8 9c 28 00    	mov    0x289cf8,%ebx
		while(t)
  282b61:	85 db                	test   %ebx,%ebx
  282b63:	75 46                	jne    282bab <inthandler20+0x7a>
  282b65:	eb 5d                	jmp    282bc4 <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282b67:	8b 43 04             	mov    0x4(%ebx),%eax
  282b6a:	3b 05 e0 75 28 00    	cmp    0x2875e0,%eax
  282b70:	77 2c                	ja     282b9e <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282b72:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282b76:	39 1d 00 9d 28 00    	cmp    %ebx,0x289d00
  282b7c:	74 13                	je     282b91 <inthandler20+0x60>
  282b7e:	83 ec 08             	sub    $0x8,%esp
  282b81:	ff 73 10             	pushl  0x10(%ebx)
  282b84:	ff 73 0c             	pushl  0xc(%ebx)
  282b87:	e8 5d ef ff ff       	call   281ae9 <fifo32_put>
  282b8c:	83 c4 10             	add    $0x10,%esp
  282b8f:	eb 05                	jmp    282b96 <inthandler20+0x65>
				else ts=1;
  282b91:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282b96:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282b98:	85 db                	test   %ebx,%ebx
  282b9a:	75 cb                	jne    282b67 <inthandler20+0x36>
  282b9c:	eb 1b                	jmp    282bb9 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282b9e:	a3 e4 75 28 00       	mov    %eax,0x2875e4
				timerctl.t0 = t;
  282ba3:	89 1d f8 9c 28 00    	mov    %ebx,0x289cf8
				break;
  282ba9:	eb 0e                	jmp    282bb9 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282bab:	8b 43 04             	mov    0x4(%ebx),%eax
  282bae:	be 00 00 00 00       	mov    $0x0,%esi
  282bb3:	39 c2                	cmp    %eax,%edx
  282bb5:	73 bb                	jae    282b72 <inthandler20+0x41>
  282bb7:	eb e5                	jmp    282b9e <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282bb9:	89 f0                	mov    %esi,%eax
  282bbb:	84 c0                	test   %al,%al
  282bbd:	74 05                	je     282bc4 <inthandler20+0x93>
  282bbf:	e8 d7 04 00 00       	call   28309b <task_switch>
	return;
}
  282bc4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282bc7:	5b                   	pop    %ebx
  282bc8:	5e                   	pop    %esi
  282bc9:	5d                   	pop    %ebp
  282bca:	c3                   	ret    

00282bcb <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282bcb:	55                   	push   %ebp
  282bcc:	89 e5                	mov    %esp,%ebp
  282bce:	56                   	push   %esi
  282bcf:	53                   	push   %ebx
  282bd0:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282bd3:	e8 6d de ff ff       	call   280a45 <io_load_eflags>
  282bd8:	89 c6                	mov    %eax,%esi
	io_cli();
  282bda:	e8 13 de ff ff       	call   2809f2 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282bdf:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282be3:	75 3e                	jne    282c23 <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282be5:	8b 15 f8 9c 28 00    	mov    0x289cf8,%edx
  282beb:	39 d3                	cmp    %edx,%ebx
  282bed:	75 13                	jne    282c02 <timer_cancel+0x37>
		{
			t = timer->next;
  282bef:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282bf1:	a3 f8 9c 28 00       	mov    %eax,0x289cf8
			timerctl.next = t->timeout;
  282bf6:	8b 40 04             	mov    0x4(%eax),%eax
  282bf9:	a3 e4 75 28 00       	mov    %eax,0x2875e4
  282bfe:	eb 0c                	jmp    282c0c <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282c00:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282c02:	8b 02                	mov    (%edx),%eax
  282c04:	39 c3                	cmp    %eax,%ebx
  282c06:	75 f8                	jne    282c00 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282c08:	8b 03                	mov    (%ebx),%eax
  282c0a:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282c0c:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282c10:	83 ec 0c             	sub    $0xc,%esp
  282c13:	56                   	push   %esi
  282c14:	e8 2f de ff ff       	call   280a48 <io_store_eflags>
		return 1;
  282c19:	83 c4 10             	add    $0x10,%esp
  282c1c:	b8 01 00 00 00       	mov    $0x1,%eax
  282c21:	eb 11                	jmp    282c34 <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282c23:	83 ec 0c             	sub    $0xc,%esp
  282c26:	56                   	push   %esi
  282c27:	e8 1c de ff ff       	call   280a48 <io_store_eflags>
	return 0;
  282c2c:	83 c4 10             	add    $0x10,%esp
  282c2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282c34:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282c37:	5b                   	pop    %ebx
  282c38:	5e                   	pop    %esi
  282c39:	5d                   	pop    %ebp
  282c3a:	c3                   	ret    

00282c3b <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282c3b:	55                   	push   %ebp
  282c3c:	89 e5                	mov    %esp,%ebp
  282c3e:	57                   	push   %edi
  282c3f:	56                   	push   %esi
  282c40:	53                   	push   %ebx
  282c41:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282c44:	e8 fc dd ff ff       	call   280a45 <io_load_eflags>
  282c49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282c4c:	e8 a1 dd ff ff       	call   2809f2 <io_cli>
  282c51:	bb e8 75 28 00       	mov    $0x2875e8,%ebx
  282c56:	bf f8 9c 28 00       	mov    $0x289cf8,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282c5b:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282c5f:	74 1e                	je     282c7f <timer_cancelall+0x44>
  282c61:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282c65:	74 18                	je     282c7f <timer_cancelall+0x44>
  282c67:	8b 45 08             	mov    0x8(%ebp),%eax
  282c6a:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282c6d:	75 10                	jne    282c7f <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282c6f:	83 ec 0c             	sub    $0xc,%esp
  282c72:	53                   	push   %ebx
  282c73:	e8 53 ff ff ff       	call   282bcb <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282c78:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282c7c:	83 c4 10             	add    $0x10,%esp
  282c7f:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282c82:	39 fb                	cmp    %edi,%ebx
  282c84:	75 d5                	jne    282c5b <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282c86:	83 ec 0c             	sub    $0xc,%esp
  282c89:	ff 75 e4             	pushl  -0x1c(%ebp)
  282c8c:	e8 b7 dd ff ff       	call   280a48 <io_store_eflags>
	return;
  282c91:	83 c4 10             	add    $0x10,%esp
}
  282c94:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282c97:	5b                   	pop    %ebx
  282c98:	5e                   	pop    %esi
  282c99:	5f                   	pop    %edi
  282c9a:	5d                   	pop    %ebp
  282c9b:	c3                   	ret    
  282c9c:	66 90                	xchg   %ax,%ax
  282c9e:	66 90                	xchg   %ax,%ax

00282ca0 <load_tr>:
  282ca0:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282ca5:	c3                   	ret    

00282ca6 <farjmp>:
  282ca6:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282caa:	c3                   	ret    

00282cab <farcall>:
  282cab:	ff 5c 24 04          	lcall  *0x4(%esp)
  282caf:	c3                   	ret    

00282cb0 <asm_end_app>:
  282cb0:	8b 20                	mov    (%eax),%esp
  282cb2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282cb9:	61                   	popa   
  282cba:	c3                   	ret    

00282cbb <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282cbb:	55                   	push   %ebp
  282cbc:	89 e5                	mov    %esp,%ebp
  282cbe:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282cc1:	e8 2a dd ff ff       	call   2809f0 <io_hlt>
  282cc6:	eb f9                	jmp    282cc1 <task_idle+0x6>

00282cc8 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282cc8:	55                   	push   %ebp
  282cc9:	89 e5                	mov    %esp,%ebp
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282ccb:	8b 0d fc 9c 28 00    	mov    0x289cfc,%ecx
  282cd1:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282cd8:	74 16                	je     282cf0 <task_alloc+0x28>
  282cda:	8d 91 98 10 00 00    	lea    0x1098(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282ce0:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282ce5:	83 3a 00             	cmpl   $0x0,(%edx)
  282ce8:	0f 85 b9 00 00 00    	jne    282da7 <task_alloc+0xdf>
  282cee:	eb 05                	jmp    282cf5 <task_alloc+0x2d>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282cf0:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282cf5:	69 c0 9c 00 00 00    	imul   $0x9c,%eax,%eax
			task->flags = 1;
  282cfb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  282cfe:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282d05:	00 00 00 
			task->tss.eflags = 0x202;
  282d08:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282d0f:	02 00 00 
			task->tss.eax = 0;
  282d12:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282d19:	00 00 00 
			task->tss.ecx = 0;
  282d1c:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282d23:	00 00 00 
			task->tss.edx = 0;
  282d26:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282d2d:	00 00 00 
			task->tss.ebx = 0;
  282d30:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282d37:	00 00 00 
			task->tss.ebp = 0;
  282d3a:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282d41:	00 00 00 
			task->tss.esi = 0;
  282d44:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282d4b:	00 00 00 
			task->tss.edi = 0;
  282d4e:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282d55:	00 00 00 
			task->tss.es  = 0;
  282d58:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282d5f:	00 00 00 
			task->tss.ds  = 0;
  282d62:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282d69:	00 00 00 
			task->tss.fs  = 0;
  282d6c:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282d73:	00 00 00 
			task->tss.gs  = 0;
  282d76:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282d7d:	00 00 00 
			task->tss.ldtr= 0;
  282d80:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282d87:	00 00 00 
			task->tss.iomap = 0x40000000;
  282d8a:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282d91:	00 00 40 
			task->tss.ss0 = 0;
  282d94:	c7 82 2c 10 00 00 00 	movl   $0x0,0x102c(%edx)
  282d9b:	00 00 00 
			return task;
  282d9e:	8d 84 01 f8 0f 00 00 	lea    0xff8(%ecx,%eax,1),%eax
  282da5:	eb 19                	jmp    282dc0 <task_alloc+0xf8>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282da7:	83 c0 01             	add    $0x1,%eax
  282daa:	81 c2 9c 00 00 00    	add    $0x9c,%edx
  282db0:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282db5:	0f 85 2a ff ff ff    	jne    282ce5 <task_alloc+0x1d>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282dbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282dc0:	5d                   	pop    %ebp
  282dc1:	c3                   	ret    

00282dc2 <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282dc2:	55                   	push   %ebp
  282dc3:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282dc5:	8b 15 fc 9c 28 00    	mov    0x289cfc,%edx
  282dcb:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282dcd:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282dd3:	6b c0 66             	imul   $0x66,%eax,%eax
  282dd6:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282dda:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282dde:	5d                   	pop    %ebp
  282ddf:	c3                   	ret    

00282de0 <task_add>:

void task_add(struct TASK *task)
{
  282de0:	55                   	push   %ebp
  282de1:	89 e5                	mov    %esp,%ebp
  282de3:	56                   	push   %esi
  282de4:	53                   	push   %ebx
  282de5:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282de8:	8b 35 fc 9c 28 00    	mov    0x289cfc,%esi
  282dee:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282df1:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282df7:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282df9:	8b 50 08             	mov    0x8(%eax),%edx
  282dfc:	83 fa 64             	cmp    $0x64,%edx
  282dff:	74 14                	je     282e15 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282e01:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282e04:	01 ca                	add    %ecx,%edx
  282e06:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282e0a:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282e0e:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282e15:	5b                   	pop    %ebx
  282e16:	5e                   	pop    %esi
  282e17:	5d                   	pop    %ebp
  282e18:	c3                   	ret    

00282e19 <task_remove>:

void task_remove(struct TASK *task)
{
  282e19:	55                   	push   %ebp
  282e1a:	89 e5                	mov    %esp,%ebp
  282e1c:	57                   	push   %edi
  282e1d:	56                   	push   %esi
  282e1e:	53                   	push   %ebx
  282e1f:	83 ec 04             	sub    $0x4,%esp
  282e22:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282e25:	8b 3d fc 9c 28 00    	mov    0x289cfc,%edi
  282e2b:	8b 43 08             	mov    0x8(%ebx),%eax
  282e2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282e31:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282e37:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282e39:	8b 4a 08             	mov    0x8(%edx),%ecx
  282e3c:	85 c9                	test   %ecx,%ecx
  282e3e:	7e 1d                	jle    282e5d <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282e40:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282e43:	74 1f                	je     282e64 <task_remove+0x4b>
  282e45:	b8 00 00 00 00       	mov    $0x0,%eax
  282e4a:	eb 06                	jmp    282e52 <task_remove+0x39>
  282e4c:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282e50:	74 17                	je     282e69 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282e52:	83 c0 01             	add    $0x1,%eax
  282e55:	39 c8                	cmp    %ecx,%eax
  282e57:	75 f3                	jne    282e4c <task_remove+0x33>
  282e59:	89 c8                	mov    %ecx,%eax
  282e5b:	eb 0c                	jmp    282e69 <task_remove+0x50>
  282e5d:	b8 00 00 00 00       	mov    $0x0,%eax
  282e62:	eb 05                	jmp    282e69 <task_remove+0x50>
  282e64:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282e69:	83 e9 01             	sub    $0x1,%ecx
  282e6c:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282e6f:	8b 72 0c             	mov    0xc(%edx),%esi
  282e72:	39 c6                	cmp    %eax,%esi
  282e74:	7e 06                	jle    282e7c <task_remove+0x63>
	{
		tl->now--;
  282e76:	83 ee 01             	sub    $0x1,%esi
  282e79:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282e7c:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282e7f:	7f 07                	jg     282e88 <task_remove+0x6f>
	{
		tl->now = 0;
  282e81:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282e88:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282e8f:	39 42 08             	cmp    %eax,0x8(%edx)
  282e92:	7e 1b                	jle    282eaf <task_remove+0x96>
  282e94:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282e98:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282e9c:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282e9f:	83 c0 01             	add    $0x1,%eax
  282ea2:	8b 19                	mov    (%ecx),%ebx
  282ea4:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282ea7:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282eaa:	39 42 08             	cmp    %eax,0x8(%edx)
  282ead:	7f f0                	jg     282e9f <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282eaf:	83 c4 04             	add    $0x4,%esp
  282eb2:	5b                   	pop    %ebx
  282eb3:	5e                   	pop    %esi
  282eb4:	5f                   	pop    %edi
  282eb5:	5d                   	pop    %ebp
  282eb6:	c3                   	ret    

00282eb7 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282eb7:	55                   	push   %ebp
  282eb8:	89 e5                	mov    %esp,%ebp
  282eba:	56                   	push   %esi
  282ebb:	53                   	push   %ebx
  282ebc:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282ebf:	8b 75 0c             	mov    0xc(%ebp),%esi
  282ec2:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282ec5:	85 f6                	test   %esi,%esi
  282ec7:	79 03                	jns    282ecc <task_run+0x15>
  282ec9:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282ecc:	85 c0                	test   %eax,%eax
  282ece:	7e 03                	jle    282ed3 <task_run+0x1c>
  282ed0:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282ed3:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282ed7:	75 14                	jne    282eed <task_run+0x36>
  282ed9:	3b 73 08             	cmp    0x8(%ebx),%esi
  282edc:	74 1b                	je     282ef9 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282ede:	53                   	push   %ebx
  282edf:	e8 35 ff ff ff       	call   282e19 <task_remove>
	}
	if(task->flags != 2)
  282ee4:	83 c4 04             	add    $0x4,%esp
  282ee7:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282eeb:	74 0c                	je     282ef9 <task_run+0x42>
	{
		task->level = level;
  282eed:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282ef0:	53                   	push   %ebx
  282ef1:	e8 ea fe ff ff       	call   282de0 <task_add>
  282ef6:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282ef9:	a1 fc 9c 28 00       	mov    0x289cfc,%eax
  282efe:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282f02:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282f05:	5b                   	pop    %ebx
  282f06:	5e                   	pop    %esi
  282f07:	5d                   	pop    %ebp
  282f08:	c3                   	ret    

00282f09 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282f09:	55                   	push   %ebp
  282f0a:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282f0c:	8b 0d fc 9c 28 00    	mov    0x289cfc,%ecx
  282f12:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282f16:	7f 20                	jg     282f38 <task_switchsub+0x2f>
  282f18:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282f1e:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282f23:	83 3a 00             	cmpl   $0x0,(%edx)
  282f26:	7f 15                	jg     282f3d <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282f28:	83 c0 01             	add    $0x1,%eax
  282f2b:	81 c2 98 01 00 00    	add    $0x198,%edx
  282f31:	83 f8 0a             	cmp    $0xa,%eax
  282f34:	75 ed                	jne    282f23 <task_switchsub+0x1a>
  282f36:	eb 05                	jmp    282f3d <task_switchsub+0x34>
  282f38:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282f3d:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282f3f:	a1 fc 9c 28 00       	mov    0x289cfc,%eax
  282f44:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282f48:	5d                   	pop    %ebp
  282f49:	c3                   	ret    

00282f4a <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  282f4a:	55                   	push   %ebp
  282f4b:	89 e5                	mov    %esp,%ebp
  282f4d:	57                   	push   %edi
  282f4e:	56                   	push   %esi
  282f4f:	53                   	push   %ebx
  282f50:	83 ec 14             	sub    $0x14,%esp
  282f53:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  282f56:	68 58 71 02 00       	push   $0x27158
  282f5b:	57                   	push   %edi
  282f5c:	e8 0c f3 ff ff       	call   28226d <memman_alloc_4k>
  282f61:	a3 fc 9c 28 00       	mov    %eax,0x289cfc
  282f66:	83 c4 10             	add    $0x10,%esp
  282f69:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  282f6e:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  282f73:	8b 15 fc 9c 28 00    	mov    0x289cfc,%edx
  282f79:	69 c3 9c 00 00 00    	imul   $0x9c,%ebx,%eax
  282f7f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282f82:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  282f89:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  282f8c:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  282f92:	68 89 00 00 00       	push   $0x89
  282f97:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  282f9e:	50                   	push   %eax
  282f9f:	6a 67                	push   $0x67
  282fa1:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  282fa7:	50                   	push   %eax
  282fa8:	e8 e5 e3 ff ff       	call   281392 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  282fad:	83 c3 01             	add    $0x1,%ebx
  282fb0:	83 c6 08             	add    $0x8,%esi
  282fb3:	83 c4 10             	add    $0x10,%esp
  282fb6:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  282fbc:	75 b5                	jne    282f73 <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  282fbe:	8b 15 fc 9c 28 00    	mov    0x289cfc,%edx
  282fc4:	8d 42 08             	lea    0x8(%edx),%eax
  282fc7:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  282fcd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  282fd3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282fda:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  282fdf:	39 d0                	cmp    %edx,%eax
  282fe1:	75 ea                	jne    282fcd <task_init+0x83>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  282fe3:	e8 e0 fc ff ff       	call   282cc8 <task_alloc>
  282fe8:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  282fea:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  282ff1:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  282ff8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  282fff:	83 ec 0c             	sub    $0xc,%esp
  283002:	50                   	push   %eax
  283003:	e8 d8 fd ff ff       	call   282de0 <task_add>
	
	task_switchsub();
  283008:	e8 fc fe ff ff       	call   282f09 <task_switchsub>
	load_tr(task->sel);
  28300d:	83 c4 04             	add    $0x4,%esp
  283010:	ff 36                	pushl  (%esi)
  283012:	e8 89 fc ff ff       	call   282ca0 <load_tr>
	task_timer = timer_alloc();
  283017:	e8 9a f9 ff ff       	call   2829b6 <timer_alloc>
  28301c:	a3 00 9d 28 00       	mov    %eax,0x289d00
	timer_settime(task_timer,task->priority);
  283021:	83 c4 08             	add    $0x8,%esp
  283024:	ff 76 0c             	pushl  0xc(%esi)
  283027:	50                   	push   %eax
  283028:	e8 6b fa ff ff       	call   282a98 <timer_settime>

	struct TASK *idle = task_alloc();
  28302d:	e8 96 fc ff ff       	call   282cc8 <task_alloc>
  283032:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  283034:	83 c4 08             	add    $0x8,%esp
  283037:	68 00 00 01 00       	push   $0x10000
  28303c:	57                   	push   %edi
  28303d:	e8 ef ee ff ff       	call   281f31 <memman_alloc>
  283042:	05 00 00 01 00       	add    $0x10000,%eax
  283047:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  28304a:	c7 43 4c bb 2c 00 00 	movl   $0x2cbb,0x4c(%ebx)
	idle->tss.es = 1*8;
  283051:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  283058:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  28305f:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  283066:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  28306d:	00 00 00 
	idle->tss.fs = 1*8;
  283070:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  283077:	00 00 00 
	idle->tss.gs = 1*8;
  28307a:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283081:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  283084:	83 c4 0c             	add    $0xc,%esp
  283087:	6a 01                	push   $0x1
  283089:	6a 09                	push   $0x9
  28308b:	53                   	push   %ebx
  28308c:	e8 26 fe ff ff       	call   282eb7 <task_run>
	return task;
}
  283091:	89 f0                	mov    %esi,%eax
  283093:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283096:	5b                   	pop    %ebx
  283097:	5e                   	pop    %esi
  283098:	5f                   	pop    %edi
  283099:	5d                   	pop    %ebp
  28309a:	c3                   	ret    

0028309b <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  28309b:	55                   	push   %ebp
  28309c:	89 e5                	mov    %esp,%ebp
  28309e:	56                   	push   %esi
  28309f:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  2830a0:	8b 0d fc 9c 28 00    	mov    0x289cfc,%ecx
  2830a6:	8b 31                	mov    (%ecx),%esi
  2830a8:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  2830ae:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  2830b0:	8b 50 0c             	mov    0xc(%eax),%edx
  2830b3:	6b de 66             	imul   $0x66,%esi,%ebx
  2830b6:	01 d3                	add    %edx,%ebx
  2830b8:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  2830bc:	83 c2 01             	add    $0x1,%edx
  2830bf:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  2830c2:	3b 50 08             	cmp    0x8(%eax),%edx
  2830c5:	75 07                	jne    2830ce <task_switch+0x33>
	{
		tl->now = 0;
  2830c7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  2830ce:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  2830d2:	75 0c                	jne    2830e0 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  2830d4:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  2830da:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  2830de:	eb 14                	jmp    2830f4 <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  2830e0:	e8 24 fe ff ff       	call   282f09 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  2830e5:	a1 fc 9c 28 00       	mov    0x289cfc,%eax
  2830ea:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  2830f0:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  2830f4:	8b 50 04             	mov    0x4(%eax),%edx
  2830f7:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  2830fb:	83 ec 08             	sub    $0x8,%esp
  2830fe:	ff 76 0c             	pushl  0xc(%esi)
  283101:	ff 35 00 9d 28 00    	pushl  0x289d00
  283107:	e8 8c f9 ff ff       	call   282a98 <timer_settime>
	if(new_task != now_task)
  28310c:	83 c4 10             	add    $0x10,%esp
  28310f:	39 f3                	cmp    %esi,%ebx
  283111:	74 0f                	je     283122 <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  283113:	83 ec 08             	sub    $0x8,%esp
  283116:	ff 36                	pushl  (%esi)
  283118:	6a 00                	push   $0x0
  28311a:	e8 87 fb ff ff       	call   282ca6 <farjmp>
  28311f:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  283122:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283125:	5b                   	pop    %ebx
  283126:	5e                   	pop    %esi
  283127:	5d                   	pop    %ebp
  283128:	c3                   	ret    

00283129 <task_sleep>:

void task_sleep(struct TASK *task)
{
  283129:	55                   	push   %ebp
  28312a:	89 e5                	mov    %esp,%ebp
  28312c:	56                   	push   %esi
  28312d:	53                   	push   %ebx
  28312e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  283131:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  283135:	75 2d                	jne    283164 <task_sleep+0x3b>
	{
		now_task = task_now();
  283137:	e8 86 fc ff ff       	call   282dc2 <task_now>
  28313c:	89 c6                	mov    %eax,%esi
		task_remove(task);
  28313e:	53                   	push   %ebx
  28313f:	e8 d5 fc ff ff       	call   282e19 <task_remove>
		if(task == now_task)
  283144:	83 c4 04             	add    $0x4,%esp
  283147:	39 f3                	cmp    %esi,%ebx
  283149:	75 19                	jne    283164 <task_sleep+0x3b>
		{
			task_switchsub();
  28314b:	e8 b9 fd ff ff       	call   282f09 <task_switchsub>
			now_task = task_now();
  283150:	e8 6d fc ff ff       	call   282dc2 <task_now>
			farjmp(0,now_task->sel);
  283155:	83 ec 08             	sub    $0x8,%esp
  283158:	ff 30                	pushl  (%eax)
  28315a:	6a 00                	push   $0x0
  28315c:	e8 45 fb ff ff       	call   282ca6 <farjmp>
  283161:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283164:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283167:	5b                   	pop    %ebx
  283168:	5e                   	pop    %esi
  283169:	5d                   	pop    %ebp
  28316a:	c3                   	ret    

0028316b <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  28316b:	55                   	push   %ebp
  28316c:	89 e5                	mov    %esp,%ebp
  28316e:	57                   	push   %edi
  28316f:	56                   	push   %esi
  283170:	53                   	push   %ebx
  283171:	83 ec 5c             	sub    $0x5c,%esp
  283174:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  283177:	e8 46 fc ff ff       	call   282dc2 <task_now>
  28317c:	89 c6                	mov    %eax,%esi
  28317e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  283181:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  283184:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  28318b:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  283192:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	//*((int *)0x0fec) = (int)&cons; //for api
	task->cons = &cons;
  283199:	8d 5d b4             	lea    -0x4c(%ebp),%ebx
  28319c:	89 98 94 00 00 00    	mov    %ebx,0x94(%eax)

	int i;
	cons.timer = timer_alloc();
  2831a2:	e8 0f f8 ff ff       	call   2829b6 <timer_alloc>
  2831a7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  2831aa:	83 c6 10             	add    $0x10,%esi
  2831ad:	83 ec 04             	sub    $0x4,%esp
  2831b0:	6a 01                	push   $0x1
  2831b2:	56                   	push   %esi
  2831b3:	50                   	push   %eax
  2831b4:	e8 cb f8 ff ff       	call   282a84 <timer_init>
	timer_settime(cons.timer,50);
  2831b9:	83 c4 08             	add    $0x8,%esp
  2831bc:	6a 32                	push   $0x32
  2831be:	ff 75 c4             	pushl  -0x3c(%ebp)
  2831c1:	e8 d2 f8 ff ff       	call   282a98 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  2831c6:	83 c4 08             	add    $0x8,%esp
  2831c9:	68 00 2d 00 00       	push   $0x2d00
  2831ce:	68 00 00 3c 00       	push   $0x3c0000
  2831d3:	e8 95 f0 ff ff       	call   28226d <memman_alloc_4k>
  2831d8:	89 45 a0             	mov    %eax,-0x60(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  2831db:	83 c4 08             	add    $0x8,%esp
  2831de:	68 00 02 10 00       	push   $0x100200
  2831e3:	50                   	push   %eax
  2831e4:	e8 08 02 00 00       	call   2833f1 <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  2831e9:	83 c4 0c             	add    $0xc,%esp
  2831ec:	6a 01                	push   $0x1
  2831ee:	6a 3e                	push   $0x3e
  2831f0:	53                   	push   %ebx
  2831f1:	e8 95 05 00 00       	call   28378b <cons_putchar>
  2831f6:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  2831f9:	e8 f4 d7 ff ff       	call   2809f2 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  2831fe:	83 ec 0c             	sub    $0xc,%esp
  283201:	56                   	push   %esi
  283202:	e8 8f e9 ff ff       	call   281b96 <fifo32_status>
  283207:	83 c4 10             	add    $0x10,%esp
  28320a:	85 c0                	test   %eax,%eax
  28320c:	75 15                	jne    283223 <console_task+0xb8>
		{
			task_sleep(task);
  28320e:	83 ec 0c             	sub    $0xc,%esp
  283211:	ff 75 a4             	pushl  -0x5c(%ebp)
  283214:	e8 10 ff ff ff       	call   283129 <task_sleep>
			io_sti();
  283219:	e8 d6 d7 ff ff       	call   2809f4 <io_sti>
  28321e:	83 c4 10             	add    $0x10,%esp
  283221:	eb d6                	jmp    2831f9 <console_task+0x8e>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  283223:	83 ec 0c             	sub    $0xc,%esp
  283226:	56                   	push   %esi
  283227:	e8 2f e9 ff ff       	call   281b5b <fifo32_get>
  28322c:	89 c3                	mov    %eax,%ebx
			io_sti();
  28322e:	e8 c1 d7 ff ff       	call   2809f4 <io_sti>
			if(i<=1) //for cursor
  283233:	83 c4 10             	add    $0x10,%esp
  283236:	83 fb 01             	cmp    $0x1,%ebx
  283239:	7f 57                	jg     283292 <console_task+0x127>
			{
				if(i!=0)
  28323b:	85 db                	test   %ebx,%ebx
  28323d:	74 20                	je     28325f <console_task+0xf4>
				{
					timer_init(cons.timer,&task->fifo,0);
  28323f:	83 ec 04             	sub    $0x4,%esp
  283242:	6a 00                	push   $0x0
  283244:	56                   	push   %esi
  283245:	ff 75 c4             	pushl  -0x3c(%ebp)
  283248:	e8 37 f8 ff ff       	call   282a84 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  28324d:	83 c4 10             	add    $0x10,%esp
  283250:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  283254:	78 27                	js     28327d <console_task+0x112>
  283256:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  28325d:	eb 1e                	jmp    28327d <console_task+0x112>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  28325f:	83 ec 04             	sub    $0x4,%esp
  283262:	6a 01                	push   $0x1
  283264:	56                   	push   %esi
  283265:	ff 75 c4             	pushl  -0x3c(%ebp)
  283268:	e8 17 f8 ff ff       	call   282a84 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  28326d:	83 c4 10             	add    $0x10,%esp
  283270:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  283274:	78 07                	js     28327d <console_task+0x112>
  283276:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  28327d:	83 ec 08             	sub    $0x8,%esp
  283280:	6a 32                	push   $0x32
  283282:	ff 75 c4             	pushl  -0x3c(%ebp)
  283285:	e8 0e f8 ff ff       	call   282a98 <timer_settime>
  28328a:	83 c4 10             	add    $0x10,%esp
  28328d:	e9 13 01 00 00       	jmp    2833a5 <console_task+0x23a>
							
			}
			else if(i == 2) //get show cursor msg
  283292:	83 fb 02             	cmp    $0x2,%ebx
  283295:	75 11                	jne    2832a8 <console_task+0x13d>
			{
				cons.cur_c = COL8_FFFFFF;
  283297:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  28329e:	b8 07 00 00 00       	mov    $0x7,%eax
  2832a3:	e9 04 01 00 00       	jmp    2833ac <console_task+0x241>
			}
			else if(i == 2) //get show cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide cursor msg
  2832a8:	83 fb 03             	cmp    $0x3,%ebx
  2832ab:	75 2a                	jne    2832d7 <console_task+0x16c>
			{
				cons.cur_c = -1;
  2832ad:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,28,cons.cur_x+7,43);
  2832b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
  2832b7:	83 ec 04             	sub    $0x4,%esp
  2832ba:	6a 2b                	push   $0x2b
  2832bc:	8d 50 07             	lea    0x7(%eax),%edx
  2832bf:	52                   	push   %edx
  2832c0:	6a 1c                	push   $0x1c
  2832c2:	50                   	push   %eax
  2832c3:	6a 00                	push   $0x0
  2832c5:	ff 77 04             	pushl  0x4(%edi)
  2832c8:	ff 37                	pushl  (%edi)
  2832ca:	e8 12 d9 ff ff       	call   280be1 <boxfill8>
  2832cf:	83 c4 20             	add    $0x20,%esp
  2832d2:	e9 ce 00 00 00       	jmp    2833a5 <console_task+0x23a>
			}
			else if(256<=i && i<=511)
  2832d7:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  2832dd:	3d ff 00 00 00       	cmp    $0xff,%eax
  2832e2:	0f 87 bd 00 00 00    	ja     2833a5 <console_task+0x23a>
			{
				if(i == 8+256) //back key
  2832e8:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  2832ee:	75 26                	jne    283316 <console_task+0x1ab>
				{
					if(cons.cur_x > 16)
  2832f0:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  2832f4:	0f 8e ab 00 00 00    	jle    2833a5 <console_task+0x23a>
					{
						cons_putchar(&cons,' ',0);
  2832fa:	83 ec 04             	sub    $0x4,%esp
  2832fd:	6a 00                	push   $0x0
  2832ff:	6a 20                	push   $0x20
  283301:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283304:	50                   	push   %eax
  283305:	e8 81 04 00 00       	call   28378b <cons_putchar>
						cons.cur_x -= 8;
  28330a:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  28330e:	83 c4 10             	add    $0x10,%esp
  283311:	e9 8f 00 00 00       	jmp    2833a5 <console_task+0x23a>
					}
				}
				else if(i == 10+256) //return key
  283316:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  28331c:	75 56                	jne    283374 <console_task+0x209>
				{
					cons_putchar(&cons,' ',0);
  28331e:	83 ec 04             	sub    $0x4,%esp
  283321:	6a 00                	push   $0x0
  283323:	6a 20                	push   $0x20
  283325:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283328:	50                   	push   %eax
  283329:	e8 5d 04 00 00       	call   28378b <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  28332e:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283331:	8d 42 07             	lea    0x7(%edx),%eax
  283334:	85 d2                	test   %edx,%edx
  283336:	0f 49 c2             	cmovns %edx,%eax
  283339:	c1 f8 03             	sar    $0x3,%eax
  28333c:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  283341:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283344:	89 04 24             	mov    %eax,(%esp)
  283347:	e8 74 03 00 00       	call   2836c0 <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  28334c:	ff 75 0c             	pushl  0xc(%ebp)
  28334f:	ff 75 a0             	pushl  -0x60(%ebp)
  283352:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283355:	50                   	push   %eax
  283356:	8d 45 ca             	lea    -0x36(%ebp),%eax
  283359:	50                   	push   %eax
  28335a:	e8 41 0a 00 00       	call   283da0 <cons_runcmd>
					cons_putchar(&cons,'>',1);
  28335f:	83 c4 1c             	add    $0x1c,%esp
  283362:	6a 01                	push   $0x1
  283364:	6a 3e                	push   $0x3e
  283366:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283369:	50                   	push   %eax
  28336a:	e8 1c 04 00 00       	call   28378b <cons_putchar>
  28336f:	83 c4 10             	add    $0x10,%esp
  283372:	eb 31                	jmp    2833a5 <console_task+0x23a>
				}
				else
				{
					if(cons.cur_x<240)
  283374:	8b 45 b8             	mov    -0x48(%ebp),%eax
  283377:	3d ef 00 00 00       	cmp    $0xef,%eax
  28337c:	7f 27                	jg     2833a5 <console_task+0x23a>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  28337e:	8d 50 07             	lea    0x7(%eax),%edx
  283381:	85 c0                	test   %eax,%eax
  283383:	0f 48 c2             	cmovs  %edx,%eax
  283386:	c1 f8 03             	sar    $0x3,%eax
  283389:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  28338d:	83 ec 04             	sub    $0x4,%esp
  283390:	6a 01                	push   $0x1
  283392:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  283398:	53                   	push   %ebx
  283399:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28339c:	50                   	push   %eax
  28339d:	e8 e9 03 00 00       	call   28378b <cons_putchar>
  2833a2:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  2833a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
  2833a8:	85 c0                	test   %eax,%eax
  2833aa:	78 24                	js     2833d0 <console_task+0x265>
  2833ac:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  2833af:	8b 55 b8             	mov    -0x48(%ebp),%edx
  2833b2:	83 ec 04             	sub    $0x4,%esp
  2833b5:	8d 59 0f             	lea    0xf(%ecx),%ebx
  2833b8:	53                   	push   %ebx
  2833b9:	8d 5a 07             	lea    0x7(%edx),%ebx
  2833bc:	53                   	push   %ebx
  2833bd:	51                   	push   %ecx
  2833be:	52                   	push   %edx
  2833bf:	0f b6 c0             	movzbl %al,%eax
  2833c2:	50                   	push   %eax
  2833c3:	ff 77 04             	pushl  0x4(%edi)
  2833c6:	ff 37                	pushl  (%edi)
  2833c8:	e8 14 d8 ff ff       	call   280be1 <boxfill8>
  2833cd:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  2833d0:	8b 55 bc             	mov    -0x44(%ebp),%edx
  2833d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
  2833d6:	83 ec 0c             	sub    $0xc,%esp
  2833d9:	8d 4a 10             	lea    0x10(%edx),%ecx
  2833dc:	51                   	push   %ecx
  2833dd:	8d 48 08             	lea    0x8(%eax),%ecx
  2833e0:	51                   	push   %ecx
  2833e1:	52                   	push   %edx
  2833e2:	50                   	push   %eax
  2833e3:	57                   	push   %edi
  2833e4:	e8 2d f4 ff ff       	call   282816 <sheet_refresh>
  2833e9:	83 c4 20             	add    $0x20,%esp
  2833ec:	e9 08 fe ff ff       	jmp    2831f9 <console_task+0x8e>

002833f1 <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2833f1:	55                   	push   %ebp
  2833f2:	89 e5                	mov    %esp,%ebp
  2833f4:	53                   	push   %ebx
  2833f5:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2833f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2833ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283406:	e9 87 00 00 00       	jmp    283492 <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  28340b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28340e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283415:	8b 45 08             	mov    0x8(%ebp),%eax
  283418:	01 d0                	add    %edx,%eax
  28341a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28341d:	8b 55 0c             	mov    0xc(%ebp),%edx
  283420:	01 ca                	add    %ecx,%edx
  283422:	0f b6 12             	movzbl (%edx),%edx
  283425:	0f b6 d2             	movzbl %dl,%edx
  283428:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28342b:	8d 59 01             	lea    0x1(%ecx),%ebx
  28342e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283431:	01 d9                	add    %ebx,%ecx
  283433:	0f b6 09             	movzbl (%ecx),%ecx
  283436:	0f b6 c9             	movzbl %cl,%ecx
  283439:	c1 e1 08             	shl    $0x8,%ecx
  28343c:	09 ca                	or     %ecx,%edx
  28343e:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283444:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  283446:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283449:	83 c0 01             	add    $0x1,%eax
  28344c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283453:	8b 45 08             	mov    0x8(%ebp),%eax
  283456:	01 d0                	add    %edx,%eax
  283458:	8b 55 f4             	mov    -0xc(%ebp),%edx
  28345b:	8d 4a 01             	lea    0x1(%edx),%ecx
  28345e:	8b 55 0c             	mov    0xc(%ebp),%edx
  283461:	01 ca                	add    %ecx,%edx
  283463:	0f b6 12             	movzbl (%edx),%edx
  283466:	c0 ea 04             	shr    $0x4,%dl
  283469:	0f b6 d2             	movzbl %dl,%edx
  28346c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  28346f:	8d 59 02             	lea    0x2(%ecx),%ebx
  283472:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283475:	01 d9                	add    %ebx,%ecx
  283477:	0f b6 09             	movzbl (%ecx),%ecx
  28347a:	0f b6 c9             	movzbl %cl,%ecx
  28347d:	c1 e1 04             	shl    $0x4,%ecx
  283480:	09 ca                	or     %ecx,%edx
  283482:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  283488:	89 10                	mov    %edx,(%eax)
		j+=3;
  28348a:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  28348e:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  283492:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  283499:	0f 8e 6c ff ff ff    	jle    28340b <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  28349f:	90                   	nop
}
  2834a0:	83 c4 10             	add    $0x10,%esp
  2834a3:	5b                   	pop    %ebx
  2834a4:	5d                   	pop    %ebp
  2834a5:	c3                   	ret    

002834a6 <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  2834a6:	55                   	push   %ebp
  2834a7:	89 e5                	mov    %esp,%ebp
  2834a9:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  2834ac:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  2834b3:	7f 38                	jg     2834ed <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  2834b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2834bc:	eb 25                	jmp    2834e3 <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  2834be:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2834c1:	8b 45 10             	mov    0x10(%ebp),%eax
  2834c4:	01 c2                	add    %eax,%edx
  2834c6:	8b 45 08             	mov    0x8(%ebp),%eax
  2834c9:	c1 e0 09             	shl    $0x9,%eax
  2834cc:	89 c1                	mov    %eax,%ecx
  2834ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2834d1:	01 c8                	add    %ecx,%eax
  2834d3:	89 c1                	mov    %eax,%ecx
  2834d5:	8b 45 18             	mov    0x18(%ebp),%eax
  2834d8:	01 c8                	add    %ecx,%eax
  2834da:	0f b6 00             	movzbl (%eax),%eax
  2834dd:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  2834df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2834e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2834e6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2834e9:	7c d3                	jl     2834be <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  2834eb:	eb 5e                	jmp    28354b <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2834ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2834f4:	eb 25                	jmp    28351b <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2834f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2834f9:	8b 45 10             	mov    0x10(%ebp),%eax
  2834fc:	01 c2                	add    %eax,%edx
  2834fe:	8b 45 08             	mov    0x8(%ebp),%eax
  283501:	c1 e0 09             	shl    $0x9,%eax
  283504:	89 c1                	mov    %eax,%ecx
  283506:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283509:	01 c8                	add    %ecx,%eax
  28350b:	89 c1                	mov    %eax,%ecx
  28350d:	8b 45 18             	mov    0x18(%ebp),%eax
  283510:	01 c8                	add    %ecx,%eax
  283512:	0f b6 00             	movzbl (%eax),%eax
  283515:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  283517:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  28351b:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  283522:	7e d2                	jle    2834f6 <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  283524:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  28352b:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  283532:	8b 45 08             	mov    0x8(%ebp),%eax
  283535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28353c:	8b 45 14             	mov    0x14(%ebp),%eax
  28353f:	01 d0                	add    %edx,%eax
  283541:	8b 00                	mov    (%eax),%eax
  283543:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  283546:	e9 61 ff ff ff       	jmp    2834ac <file_loadfile+0x6>
	return;
}
  28354b:	c9                   	leave  
  28354c:	c3                   	ret    

0028354d <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  28354d:	55                   	push   %ebp
  28354e:	89 e5                	mov    %esp,%ebp
  283550:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283553:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28355a:	eb 0f                	jmp    28356b <file_search+0x1e>
	{
		s[j] = ' ';
  28355c:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28355f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283562:	01 d0                	add    %edx,%eax
  283564:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283567:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28356b:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28356f:	7e eb                	jle    28355c <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  283571:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  283578:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  28357f:	e9 83 00 00 00       	jmp    283607 <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283584:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283588:	7e 0a                	jle    283594 <file_search+0x47>
  28358a:	b8 00 00 00 00       	mov    $0x0,%eax
  28358f:	e9 2a 01 00 00       	jmp    2836be <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283594:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283597:	8b 45 08             	mov    0x8(%ebp),%eax
  28359a:	01 d0                	add    %edx,%eax
  28359c:	0f b6 00             	movzbl (%eax),%eax
  28359f:	3c 2e                	cmp    $0x2e,%al
  2835a1:	75 0f                	jne    2835b2 <file_search+0x65>
  2835a3:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  2835a7:	7f 09                	jg     2835b2 <file_search+0x65>
			j = 8;
  2835a9:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  2835b0:	eb 51                	jmp    283603 <file_search+0xb6>
		else
		{
			s[j] = name[i];
  2835b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2835b5:	8b 45 08             	mov    0x8(%ebp),%eax
  2835b8:	01 d0                	add    %edx,%eax
  2835ba:	0f b6 00             	movzbl (%eax),%eax
  2835bd:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  2835c0:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2835c3:	01 ca                	add    %ecx,%edx
  2835c5:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  2835c7:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2835ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835cd:	01 d0                	add    %edx,%eax
  2835cf:	0f b6 00             	movzbl (%eax),%eax
  2835d2:	3c 60                	cmp    $0x60,%al
  2835d4:	7e 29                	jle    2835ff <file_search+0xb2>
  2835d6:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2835d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835dc:	01 d0                	add    %edx,%eax
  2835de:	0f b6 00             	movzbl (%eax),%eax
  2835e1:	3c 7a                	cmp    $0x7a,%al
  2835e3:	7f 1a                	jg     2835ff <file_search+0xb2>
				s[j] -= 0x20;
  2835e5:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2835e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835eb:	01 d0                	add    %edx,%eax
  2835ed:	0f b6 00             	movzbl (%eax),%eax
  2835f0:	83 e8 20             	sub    $0x20,%eax
  2835f3:	89 c1                	mov    %eax,%ecx
  2835f5:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2835f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2835fb:	01 d0                	add    %edx,%eax
  2835fd:	88 08                	mov    %cl,(%eax)
			j++;
  2835ff:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  283603:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283607:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28360a:	8b 45 08             	mov    0x8(%ebp),%eax
  28360d:	01 d0                	add    %edx,%eax
  28360f:	0f b6 00             	movzbl (%eax),%eax
  283612:	84 c0                	test   %al,%al
  283614:	0f 85 6a ff ff ff    	jne    283584 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  28361a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283621:	e9 84 00 00 00       	jmp    2836aa <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  283626:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283629:	c1 e0 06             	shl    $0x6,%eax
  28362c:	89 c2                	mov    %eax,%edx
  28362e:	8b 45 0c             	mov    0xc(%ebp),%eax
  283631:	01 d0                	add    %edx,%eax
  283633:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  283637:	84 c0                	test   %al,%al
  283639:	74 7d                	je     2836b8 <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  28363b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28363e:	c1 e0 06             	shl    $0x6,%eax
  283641:	89 c2                	mov    %eax,%edx
  283643:	8b 45 0c             	mov    0xc(%ebp),%eax
  283646:	01 d0                	add    %edx,%eax
  283648:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  28364c:	0f b6 c0             	movzbl %al,%eax
  28364f:	83 e0 18             	and    $0x18,%eax
  283652:	85 c0                	test   %eax,%eax
  283654:	75 50                	jne    2836a6 <file_search+0x159>
		{
			for(j=0;j<11;j++)
  283656:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28365d:	eb 31                	jmp    283690 <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  28365f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283662:	c1 e0 06             	shl    $0x6,%eax
  283665:	89 c2                	mov    %eax,%edx
  283667:	8b 45 0c             	mov    0xc(%ebp),%eax
  28366a:	01 c2                	add    %eax,%edx
  28366c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28366f:	01 d0                	add    %edx,%eax
  283671:	83 c0 20             	add    $0x20,%eax
  283674:	0f b6 00             	movzbl (%eax),%eax
  283677:	0f b6 d0             	movzbl %al,%edx
  28367a:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  28367d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283680:	01 c8                	add    %ecx,%eax
  283682:	0f b6 00             	movzbl (%eax),%eax
  283685:	0f be c0             	movsbl %al,%eax
  283688:	39 c2                	cmp    %eax,%edx
  28368a:	75 19                	jne    2836a5 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  28368c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283690:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283694:	7e c9                	jle    28365f <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  283696:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283699:	c1 e0 06             	shl    $0x6,%eax
  28369c:	89 c2                	mov    %eax,%edx
  28369e:	8b 45 0c             	mov    0xc(%ebp),%eax
  2836a1:	01 d0                	add    %edx,%eax
  2836a3:	eb 19                	jmp    2836be <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  2836a5:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  2836a6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2836aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836ad:	3b 45 10             	cmp    0x10(%ebp),%eax
  2836b0:	0f 8c 70 ff ff ff    	jl     283626 <file_search+0xd9>
  2836b6:	eb 01                	jmp    2836b9 <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  2836b8:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  2836b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  2836be:	c9                   	leave  
  2836bf:	c3                   	ret    

002836c0 <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2836c0:	55                   	push   %ebp
  2836c1:	89 e5                	mov    %esp,%ebp
  2836c3:	57                   	push   %edi
  2836c4:	56                   	push   %esi
  2836c5:	53                   	push   %ebx
  2836c6:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  2836c9:	8b 45 08             	mov    0x8(%ebp),%eax
  2836cc:	8b 40 08             	mov    0x8(%eax),%eax
  2836cf:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  2836d4:	7e 0c                	jle    2836e2 <cons_newline+0x22>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  2836d6:	8b 45 08             	mov    0x8(%ebp),%eax
  2836d9:	8b 18                	mov    (%eax),%ebx
  2836db:	bf 1c 00 00 00       	mov    $0x1c,%edi
  2836e0:	eb 43                	jmp    283725 <cons_newline+0x65>
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
  2836e2:	83 c0 10             	add    $0x10,%eax
  2836e5:	8b 7d 08             	mov    0x8(%ebp),%edi
  2836e8:	89 47 08             	mov    %eax,0x8(%edi)
  2836eb:	e9 89 00 00 00       	jmp    283779 <cons_newline+0xb9>
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2836f0:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2836f3:	8b 43 04             	mov    0x4(%ebx),%eax
  2836f6:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2836f9:	0f af f0             	imul   %eax,%esi
  2836fc:	89 d1                	mov    %edx,%ecx
  2836fe:	03 0b                	add    (%ebx),%ecx
  283700:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  283704:	0f af c7             	imul   %edi,%eax
  283707:	89 f3                	mov    %esi,%ebx
  283709:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  28370c:	83 c2 01             	add    $0x1,%edx
  28370f:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  283715:	75 d9                	jne    2836f0 <cons_newline+0x30>
  283717:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
  28371a:	83 c7 01             	add    $0x1,%edi
  28371d:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  283723:	74 33                	je     283758 <cons_newline+0x98>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  283725:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  28372a:	8d 47 10             	lea    0x10(%edi),%eax
  28372d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  283730:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  283733:	eb bb                	jmp    2836f0 <cons_newline+0x30>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  283735:	89 fa                	mov    %edi,%edx
  283737:	0f af 53 04          	imul   0x4(%ebx),%edx
  28373b:	89 c1                	mov    %eax,%ecx
  28373d:	03 0b                	add    (%ebx),%ecx
  28373f:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  283743:	83 c0 01             	add    $0x1,%eax
  283746:	3d f8 00 00 00       	cmp    $0xf8,%eax
  28374b:	75 e8                	jne    283735 <cons_newline+0x75>
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  28374d:	83 c7 01             	add    $0x1,%edi
  283750:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  283756:	74 07                	je     28375f <cons_newline+0x9f>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  283758:	b8 08 00 00 00       	mov    $0x8,%eax
  28375d:	eb d6                	jmp    283735 <cons_newline+0x75>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  28375f:	83 ec 0c             	sub    $0xc,%esp
  283762:	68 9c 00 00 00       	push   $0x9c
  283767:	68 f8 00 00 00       	push   $0xf8
  28376c:	6a 1c                	push   $0x1c
  28376e:	6a 08                	push   $0x8
  283770:	53                   	push   %ebx
  283771:	e8 a0 f0 ff ff       	call   282816 <sheet_refresh>
  283776:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  283779:	8b 45 08             	mov    0x8(%ebp),%eax
  28377c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283783:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283786:	5b                   	pop    %ebx
  283787:	5e                   	pop    %esi
  283788:	5f                   	pop    %edi
  283789:	5d                   	pop    %ebp
  28378a:	c3                   	ret    

0028378b <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28378b:	55                   	push   %ebp
  28378c:	89 e5                	mov    %esp,%ebp
  28378e:	56                   	push   %esi
  28378f:	53                   	push   %ebx
  283790:	83 ec 10             	sub    $0x10,%esp
  283793:	8b 5d 08             	mov    0x8(%ebp),%ebx
  283796:	8b 45 0c             	mov    0xc(%ebp),%eax
  283799:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  28379c:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  28379f:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  2837a3:	3c 09                	cmp    $0x9,%al
  2837a5:	75 46                	jne    2837ed <cons_putchar+0x62>
	{
		//tab
		for(;;)
		{
			putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  2837a7:	83 ec 04             	sub    $0x4,%esp
  2837aa:	6a 01                	push   $0x1
  2837ac:	68 43 4d 28 00       	push   $0x284d43
  2837b1:	6a 00                	push   $0x0
  2837b3:	6a 07                	push   $0x7
  2837b5:	ff 73 08             	pushl  0x8(%ebx)
  2837b8:	ff 73 04             	pushl  0x4(%ebx)
  2837bb:	ff 33                	pushl  (%ebx)
  2837bd:	e8 7e d8 ff ff       	call   281040 <putfonts8_asc_sht>
			cons->cur_x += 8;
  2837c2:	8b 43 04             	mov    0x4(%ebx),%eax
  2837c5:	83 c0 08             	add    $0x8,%eax
  2837c8:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  2837cb:	83 c4 20             	add    $0x20,%esp
  2837ce:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2837d3:	75 0c                	jne    2837e1 <cons_putchar+0x56>
				cons_newline(cons);
  2837d5:	83 ec 0c             	sub    $0xc,%esp
  2837d8:	53                   	push   %ebx
  2837d9:	e8 e2 fe ff ff       	call   2836c0 <cons_newline>
  2837de:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  2837e1:	8b 43 04             	mov    0x4(%ebx),%eax
  2837e4:	83 e8 08             	sub    $0x8,%eax
  2837e7:	a8 1f                	test   $0x1f,%al
  2837e9:	75 bc                	jne    2837a7 <cons_putchar+0x1c>
  2837eb:	eb 55                	jmp    283842 <cons_putchar+0xb7>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2837ed:	3c 0a                	cmp    $0xa,%al
  2837ef:	75 0e                	jne    2837ff <cons_putchar+0x74>
		cons_newline(cons);
  2837f1:	83 ec 0c             	sub    $0xc,%esp
  2837f4:	53                   	push   %ebx
  2837f5:	e8 c6 fe ff ff       	call   2836c0 <cons_newline>
  2837fa:	83 c4 10             	add    $0x10,%esp
  2837fd:	eb 43                	jmp    283842 <cons_putchar+0xb7>
	else if(s[0] == 0x0d) 
  2837ff:	3c 0d                	cmp    $0xd,%al
  283801:	74 3f                	je     283842 <cons_putchar+0xb7>
		;//todo
	else
	{
		putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  283803:	83 ec 04             	sub    $0x4,%esp
  283806:	6a 01                	push   $0x1
  283808:	8d 45 f6             	lea    -0xa(%ebp),%eax
  28380b:	50                   	push   %eax
  28380c:	6a 00                	push   $0x0
  28380e:	6a 07                	push   $0x7
  283810:	ff 73 08             	pushl  0x8(%ebx)
  283813:	ff 73 04             	pushl  0x4(%ebx)
  283816:	ff 33                	pushl  (%ebx)
  283818:	e8 23 d8 ff ff       	call   281040 <putfonts8_asc_sht>
		if(move != 0)
  28381d:	83 c4 20             	add    $0x20,%esp
  283820:	89 f0                	mov    %esi,%eax
  283822:	84 c0                	test   %al,%al
  283824:	74 1c                	je     283842 <cons_putchar+0xb7>
		{
			cons->cur_x += 8;
  283826:	8b 43 04             	mov    0x4(%ebx),%eax
  283829:	83 c0 08             	add    $0x8,%eax
  28382c:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  28382f:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283834:	75 0c                	jne    283842 <cons_putchar+0xb7>
				cons_newline(cons);
  283836:	83 ec 0c             	sub    $0xc,%esp
  283839:	53                   	push   %ebx
  28383a:	e8 81 fe ff ff       	call   2836c0 <cons_newline>
  28383f:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283842:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283845:	5b                   	pop    %ebx
  283846:	5e                   	pop    %esi
  283847:	5d                   	pop    %ebp
  283848:	c3                   	ret    

00283849 <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  283849:	55                   	push   %ebp
  28384a:	89 e5                	mov    %esp,%ebp
  28384c:	56                   	push   %esi
  28384d:	53                   	push   %ebx
  28384e:	83 ec 24             	sub    $0x24,%esp
  283851:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  283854:	8b 45 0c             	mov    0xc(%ebp),%eax
  283857:	c1 e8 14             	shr    $0x14,%eax
  28385a:	50                   	push   %eax
  28385b:	68 e0 4c 28 00       	push   $0x284ce0
  283860:	8d 75 da             	lea    -0x26(%ebp),%esi
  283863:	56                   	push   %esi
  283864:	e8 94 e0 ff ff       	call   2818fd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283869:	83 c4 0c             	add    $0xc,%esp
  28386c:	6a 1e                	push   $0x1e
  28386e:	56                   	push   %esi
  28386f:	6a 00                	push   $0x0
  283871:	6a 07                	push   $0x7
  283873:	ff 73 08             	pushl  0x8(%ebx)
  283876:	6a 08                	push   $0x8
  283878:	ff 33                	pushl  (%ebx)
  28387a:	e8 c1 d7 ff ff       	call   281040 <putfonts8_asc_sht>
	cons_newline(cons);
  28387f:	83 c4 14             	add    $0x14,%esp
  283882:	53                   	push   %ebx
  283883:	e8 38 fe ff ff       	call   2836c0 <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  283888:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  28388f:	e8 64 e6 ff ff       	call   281ef8 <memman_total>
  283894:	83 c4 0c             	add    $0xc,%esp
  283897:	c1 e8 0a             	shr    $0xa,%eax
  28389a:	50                   	push   %eax
  28389b:	68 eb 4c 28 00       	push   $0x284ceb
  2838a0:	56                   	push   %esi
  2838a1:	e8 57 e0 ff ff       	call   2818fd <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  2838a6:	83 c4 0c             	add    $0xc,%esp
  2838a9:	6a 1e                	push   $0x1e
  2838ab:	56                   	push   %esi
  2838ac:	6a 00                	push   $0x0
  2838ae:	6a 07                	push   $0x7
  2838b0:	ff 73 08             	pushl  0x8(%ebx)
  2838b3:	6a 08                	push   $0x8
  2838b5:	ff 33                	pushl  (%ebx)
  2838b7:	e8 84 d7 ff ff       	call   281040 <putfonts8_asc_sht>
	cons_newline(cons);
  2838bc:	83 c4 14             	add    $0x14,%esp
  2838bf:	53                   	push   %ebx
  2838c0:	e8 fb fd ff ff       	call   2836c0 <cons_newline>
	cons_newline(cons);
  2838c5:	89 1c 24             	mov    %ebx,(%esp)
  2838c8:	e8 f3 fd ff ff       	call   2836c0 <cons_newline>
	return;
  2838cd:	83 c4 10             	add    $0x10,%esp
}
  2838d0:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2838d3:	5b                   	pop    %ebx
  2838d4:	5e                   	pop    %esi
  2838d5:	5d                   	pop    %ebp
  2838d6:	c3                   	ret    

002838d7 <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  2838d7:	55                   	push   %ebp
  2838d8:	89 e5                	mov    %esp,%ebp
  2838da:	57                   	push   %edi
  2838db:	56                   	push   %esi
  2838dc:	53                   	push   %ebx
  2838dd:	83 ec 0c             	sub    $0xc,%esp
  2838e0:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  2838e3:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  2838e5:	be 1c 00 00 00       	mov    $0x1c,%esi
  2838ea:	eb 23                	jmp    28390f <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2838ec:	89 f1                	mov    %esi,%ecx
  2838ee:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2838f2:	89 c3                	mov    %eax,%ebx
  2838f4:	03 1a                	add    (%edx),%ebx
  2838f6:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  2838fa:	83 c0 01             	add    $0x1,%eax
  2838fd:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283902:	75 e8                	jne    2838ec <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  283904:	83 c6 01             	add    $0x1,%esi
  283907:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  28390d:	74 07                	je     283916 <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  28390f:	b8 08 00 00 00       	mov    $0x8,%eax
  283914:	eb d6                	jmp    2838ec <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  283916:	83 ec 0c             	sub    $0xc,%esp
  283919:	68 9c 00 00 00       	push   $0x9c
  28391e:	68 f8 00 00 00       	push   $0xf8
  283923:	6a 1c                	push   $0x1c
  283925:	6a 08                	push   $0x8
  283927:	52                   	push   %edx
  283928:	e8 e9 ee ff ff       	call   282816 <sheet_refresh>
	cons->cur_y = 28;
  28392d:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  283934:	83 c4 20             	add    $0x20,%esp
}
  283937:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28393a:	5b                   	pop    %ebx
  28393b:	5e                   	pop    %esi
  28393c:	5f                   	pop    %edi
  28393d:	5d                   	pop    %ebp
  28393e:	c3                   	ret    

0028393f <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  28393f:	55                   	push   %ebp
  283940:	89 e5                	mov    %esp,%ebp
  283942:	57                   	push   %edi
  283943:	56                   	push   %esi
  283944:	53                   	push   %ebx
  283945:	83 ec 2c             	sub    $0x2c,%esp
  283948:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  28394b:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283952:	84 c0                	test   %al,%al
  283954:	0f 84 87 00 00 00    	je     2839e1 <cmd_dir+0xa2>
  28395a:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  28395f:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283962:	eb 0b                	jmp    28396f <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283964:	83 c3 40             	add    $0x40,%ebx
  283967:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  28396b:	84 c0                	test   %al,%al
  28396d:	74 72                	je     2839e1 <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  28396f:	3c e5                	cmp    $0xe5,%al
  283971:	74 66                	je     2839d9 <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283973:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283977:	75 60                	jne    2839d9 <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283979:	83 ec 04             	sub    $0x4,%esp
  28397c:	ff 73 3c             	pushl  0x3c(%ebx)
  28397f:	68 f5 4c 28 00       	push   $0x284cf5
  283984:	56                   	push   %esi
  283985:	e8 73 df ff ff       	call   2818fd <sprintf>
  28398a:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  28398d:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283992:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283997:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  28399a:	83 c0 01             	add    $0x1,%eax
  28399d:	83 f8 08             	cmp    $0x8,%eax
  2839a0:	75 f0                	jne    283992 <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  2839a2:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  2839a6:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  2839a9:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  2839ad:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  2839b0:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  2839b4:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  2839b7:	83 ec 04             	sub    $0x4,%esp
  2839ba:	6a 1e                	push   $0x1e
  2839bc:	56                   	push   %esi
  2839bd:	6a 00                	push   $0x0
  2839bf:	6a 07                	push   $0x7
  2839c1:	ff 77 08             	pushl  0x8(%edi)
  2839c4:	6a 08                	push   $0x8
  2839c6:	ff 37                	pushl  (%edi)
  2839c8:	e8 73 d6 ff ff       	call   281040 <putfonts8_asc_sht>
				cons_newline(cons);
  2839cd:	83 c4 14             	add    $0x14,%esp
  2839d0:	57                   	push   %edi
  2839d1:	e8 ea fc ff ff       	call   2836c0 <cons_newline>
  2839d6:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  2839d9:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  2839df:	75 83                	jne    283964 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  2839e1:	83 ec 0c             	sub    $0xc,%esp
  2839e4:	57                   	push   %edi
  2839e5:	e8 d6 fc ff ff       	call   2836c0 <cons_newline>
	return;
  2839ea:	83 c4 10             	add    $0x10,%esp
}
  2839ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2839f0:	5b                   	pop    %ebx
  2839f1:	5e                   	pop    %esi
  2839f2:	5f                   	pop    %edi
  2839f3:	5d                   	pop    %ebp
  2839f4:	c3                   	ret    

002839f5 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  2839f5:	55                   	push   %ebp
  2839f6:	89 e5                	mov    %esp,%ebp
  2839f8:	57                   	push   %edi
  2839f9:	56                   	push   %esi
  2839fa:	53                   	push   %ebx
  2839fb:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  2839fe:	68 e0 00 00 00       	push   $0xe0
  283a03:	68 00 26 10 00       	push   $0x102600
  283a08:	8b 45 10             	mov    0x10(%ebp),%eax
  283a0b:	83 c0 05             	add    $0x5,%eax
  283a0e:	50                   	push   %eax
  283a0f:	e8 39 fb ff ff       	call   28354d <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283a14:	83 c4 10             	add    $0x10,%esp
  283a17:	85 c0                	test   %eax,%eax
  283a19:	74 6e                	je     283a89 <cmd_type+0x94>
  283a1b:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283a1d:	83 ec 08             	sub    $0x8,%esp
  283a20:	ff 70 3c             	pushl  0x3c(%eax)
  283a23:	68 00 00 3c 00       	push   $0x3c0000
  283a28:	e8 40 e8 ff ff       	call   28226d <memman_alloc_4k>
  283a2d:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283a2f:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283a36:	ff 75 0c             	pushl  0xc(%ebp)
  283a39:	50                   	push   %eax
  283a3a:	ff 76 3c             	pushl  0x3c(%esi)
  283a3d:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283a41:	50                   	push   %eax
  283a42:	e8 5f fa ff ff       	call   2834a6 <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283a47:	8b 46 3c             	mov    0x3c(%esi),%eax
  283a4a:	83 c4 20             	add    $0x20,%esp
  283a4d:	85 c0                	test   %eax,%eax
  283a4f:	74 24                	je     283a75 <cmd_type+0x80>
  283a51:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283a56:	83 ec 04             	sub    $0x4,%esp
  283a59:	6a 01                	push   $0x1
  283a5b:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283a5f:	50                   	push   %eax
  283a60:	ff 75 08             	pushl  0x8(%ebp)
  283a63:	e8 23 fd ff ff       	call   28378b <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283a68:	83 c3 01             	add    $0x1,%ebx
  283a6b:	8b 46 3c             	mov    0x3c(%esi),%eax
  283a6e:	83 c4 10             	add    $0x10,%esp
  283a71:	39 d8                	cmp    %ebx,%eax
  283a73:	77 e1                	ja     283a56 <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283a75:	83 ec 04             	sub    $0x4,%esp
  283a78:	50                   	push   %eax
  283a79:	57                   	push   %edi
  283a7a:	68 00 00 3c 00       	push   $0x3c0000
  283a7f:	e8 15 e8 ff ff       	call   282299 <memman_free_4k>
  283a84:	83 c4 10             	add    $0x10,%esp
  283a87:	eb 2b                	jmp    283ab4 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283a89:	83 ec 04             	sub    $0x4,%esp
  283a8c:	6a 0f                	push   $0xf
  283a8e:	68 05 4d 28 00       	push   $0x284d05
  283a93:	6a 00                	push   $0x0
  283a95:	6a 07                	push   $0x7
  283a97:	8b 45 08             	mov    0x8(%ebp),%eax
  283a9a:	ff 70 08             	pushl  0x8(%eax)
  283a9d:	6a 08                	push   $0x8
  283a9f:	ff 30                	pushl  (%eax)
  283aa1:	e8 9a d5 ff ff       	call   281040 <putfonts8_asc_sht>
		cons_newline(cons);
  283aa6:	83 c4 14             	add    $0x14,%esp
  283aa9:	ff 75 08             	pushl  0x8(%ebp)
  283aac:	e8 0f fc ff ff       	call   2836c0 <cons_newline>
  283ab1:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283ab4:	83 ec 0c             	sub    $0xc,%esp
  283ab7:	ff 75 08             	pushl  0x8(%ebp)
  283aba:	e8 01 fc ff ff       	call   2836c0 <cons_newline>
	return;
  283abf:	83 c4 10             	add    $0x10,%esp
}
  283ac2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283ac5:	5b                   	pop    %ebx
  283ac6:	5e                   	pop    %esi
  283ac7:	5f                   	pop    %edi
  283ac8:	5d                   	pop    %ebp
  283ac9:	c3                   	ret    

00283aca <cons_putstr0>:
	return 0;
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283aca:	55                   	push   %ebp
  283acb:	89 e5                	mov    %esp,%ebp
  283acd:	56                   	push   %esi
  283ace:	53                   	push   %ebx
  283acf:	8b 75 08             	mov    0x8(%ebp),%esi
  283ad2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283ad5:	0f b6 03             	movzbl (%ebx),%eax
  283ad8:	84 c0                	test   %al,%al
  283ada:	74 1c                	je     283af8 <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283adc:	83 ec 04             	sub    $0x4,%esp
  283adf:	6a 01                	push   $0x1
  283ae1:	0f be c0             	movsbl %al,%eax
  283ae4:	50                   	push   %eax
  283ae5:	56                   	push   %esi
  283ae6:	e8 a0 fc ff ff       	call   28378b <cons_putchar>
}


void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283aeb:	83 c3 01             	add    $0x1,%ebx
  283aee:	0f b6 03             	movzbl (%ebx),%eax
  283af1:	83 c4 10             	add    $0x10,%esp
  283af4:	84 c0                	test   %al,%al
  283af6:	75 e4                	jne    283adc <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283af8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283afb:	5b                   	pop    %ebx
  283afc:	5e                   	pop    %esi
  283afd:	5d                   	pop    %ebp
  283afe:	c3                   	ret    

00283aff <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283aff:	55                   	push   %ebp
  283b00:	89 e5                	mov    %esp,%ebp
  283b02:	57                   	push   %edi
  283b03:	56                   	push   %esi
  283b04:	53                   	push   %ebx
  283b05:	83 ec 4c             	sub    $0x4c,%esp
  283b08:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283b0b:	e8 b2 f2 ff ff       	call   282dc2 <task_now>
  283b10:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283b13:	0f b6 06             	movzbl (%esi),%eax
  283b16:	3c 20                	cmp    $0x20,%al
  283b18:	0f 8f 6d 02 00 00    	jg     283d8b <cmd_app+0x28c>
  283b1e:	eb 16                	jmp    283b36 <cmd_app+0x37>
  283b20:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283b24:	3c 20                	cmp    $0x20,%al
  283b26:	7e 13                	jle    283b3b <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283b28:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283b2c:	83 c3 01             	add    $0x1,%ebx
  283b2f:	83 fb 0d             	cmp    $0xd,%ebx
  283b32:	75 ec                	jne    283b20 <cmd_app+0x21>
  283b34:	eb 05                	jmp    283b3b <cmd_app+0x3c>
  283b36:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283b3b:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283b40:	83 ec 04             	sub    $0x4,%esp
  283b43:	68 e0 00 00 00       	push   $0xe0
  283b48:	68 00 26 10 00       	push   $0x102600
  283b4d:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283b50:	50                   	push   %eax
  283b51:	e8 f7 f9 ff ff       	call   28354d <file_search>
  283b56:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283b59:	83 c4 10             	add    $0x10,%esp
  283b5c:	85 c0                	test   %eax,%eax
  283b5e:	75 48                	jne    283ba8 <cmd_app+0xa9>
  283b60:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283b65:	0f 84 2d 02 00 00    	je     283d98 <cmd_app+0x299>
	{
		name[i  ] = '.';
  283b6b:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283b70:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283b75:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283b7a:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283b7f:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283b84:	83 ec 04             	sub    $0x4,%esp
  283b87:	68 e0 00 00 00       	push   $0xe0
  283b8c:	68 00 26 10 00       	push   $0x102600
  283b91:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283b94:	50                   	push   %eax
  283b95:	e8 b3 f9 ff ff       	call   28354d <file_search>
  283b9a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283b9d:	83 c4 10             	add    $0x10,%esp
  283ba0:	85 c0                	test   %eax,%eax
  283ba2:	0f 84 dc 01 00 00    	je     283d84 <cmd_app+0x285>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283ba8:	83 ec 08             	sub    $0x8,%esp
  283bab:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283bae:	ff 77 3c             	pushl  0x3c(%edi)
  283bb1:	68 00 00 3c 00       	push   $0x3c0000
  283bb6:	e8 b2 e6 ff ff       	call   28226d <memman_alloc_4k>
  283bbb:	89 c6                	mov    %eax,%esi
  283bbd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283bc0:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283bc7:	ff 75 0c             	pushl  0xc(%ebp)
  283bca:	50                   	push   %eax
  283bcb:	ff 77 3c             	pushl  0x3c(%edi)
  283bce:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283bd2:	50                   	push   %eax
  283bd3:	e8 ce f8 ff ff       	call   2834a6 <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283bd8:	83 c4 20             	add    $0x20,%esp
  283bdb:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283bdf:	0f 86 61 01 00 00    	jbe    283d46 <cmd_app+0x247>
  283be5:	83 ec 04             	sub    $0x4,%esp
  283be8:	6a 04                	push   $0x4
  283bea:	68 15 4d 28 00       	push   $0x284d15
  283bef:	89 f0                	mov    %esi,%eax
  283bf1:	83 c0 04             	add    $0x4,%eax
  283bf4:	50                   	push   %eax
  283bf5:	e8 3e de ff ff       	call   281a38 <strncmp>
  283bfa:	83 c4 10             	add    $0x10,%esp
  283bfd:	85 c0                	test   %eax,%eax
  283bff:	0f 85 41 01 00 00    	jne    283d46 <cmd_app+0x247>
  283c05:	80 3e 00             	cmpb   $0x0,(%esi)
  283c08:	0f 85 38 01 00 00    	jne    283d46 <cmd_app+0x247>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283c0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283c11:	8b 08                	mov    (%eax),%ecx
			int esp		=	*((int *)(p+0x000c));
  283c13:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283c16:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283c19:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283c1c:	83 ec 08             	sub    $0x8,%esp
  283c1f:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  283c22:	51                   	push   %ecx
  283c23:	68 00 00 3c 00       	push   $0x3c0000
  283c28:	e8 40 e6 ff ff       	call   28226d <memman_alloc_4k>
  283c2d:	89 c2                	mov    %eax,%edx
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
  283c2f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  283c32:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  283c35:	89 91 98 00 00 00    	mov    %edx,0x98(%ecx)
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283c3b:	68 fa 40 00 00       	push   $0x40fa
  283c40:	ff 75 bc             	pushl  -0x44(%ebp)
  283c43:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283c46:	8b 40 3c             	mov    0x3c(%eax),%eax
  283c49:	83 e8 01             	sub    $0x1,%eax
  283c4c:	50                   	push   %eax
  283c4d:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  283c50:	8b 11                	mov    (%ecx),%edx
  283c52:	8d 42 07             	lea    0x7(%edx),%eax
  283c55:	85 d2                	test   %edx,%edx
  283c57:	0f 49 c2             	cmovns %edx,%eax
  283c5a:	c1 f8 03             	sar    $0x3,%eax
  283c5d:	8d 04 c5 40 1f 27 00 	lea    0x271f40(,%eax,8),%eax
  283c64:	50                   	push   %eax
  283c65:	e8 28 d7 ff ff       	call   281392 <set_segmdesc>
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
  283c6a:	83 c4 20             	add    $0x20,%esp
  283c6d:	68 f2 40 00 00       	push   $0x40f2
  283c72:	ff 75 b4             	pushl  -0x4c(%ebp)
  283c75:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  283c78:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283c7b:	50                   	push   %eax
  283c7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283c7f:	8b 10                	mov    (%eax),%edx
  283c81:	8d 42 07             	lea    0x7(%edx),%eax
  283c84:	85 d2                	test   %edx,%edx
  283c86:	0f 49 c2             	cmovns %edx,%eax
  283c89:	c1 f8 03             	sar    $0x3,%eax
  283c8c:	8d 04 c5 80 3e 27 00 	lea    0x273e80(,%eax,8),%eax
  283c93:	50                   	push   %eax
  283c94:	e8 f9 d6 ff ff       	call   281392 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283c99:	83 c4 10             	add    $0x10,%esp
  283c9c:	85 db                	test   %ebx,%ebx
  283c9e:	7e 1b                	jle    283cbb <cmd_app+0x1bc>
  283ca0:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283ca5:	03 7d bc             	add    -0x44(%ebp),%edi
  283ca8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283cab:	01 f2                	add    %esi,%edx
  283cad:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283cb1:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			q = (char *)memman_alloc_4k(memman,segsiz);
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283cb4:	83 c0 01             	add    $0x1,%eax
  283cb7:	39 c3                	cmp    %eax,%ebx
  283cb9:	75 f2                	jne    283cad <cmd_app+0x1ae>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
  283cbb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  283cbe:	8b 02                	mov    (%edx),%eax
  283cc0:	83 ec 0c             	sub    $0xc,%esp
  283cc3:	83 c2 30             	add    $0x30,%edx
  283cc6:	52                   	push   %edx
  283cc7:	8d 90 80 3e 00 00    	lea    0x3e80(%eax),%edx
  283ccd:	52                   	push   %edx
  283cce:	56                   	push   %esi
  283ccf:	05 40 1f 00 00       	add    $0x1f40,%eax
  283cd4:	50                   	push   %eax
  283cd5:	6a 1b                	push   $0x1b
  283cd7:	e8 04 02 00 00       	call   283ee0 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283cdc:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283ce2:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283ce8:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283cee:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283cf4:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283cf7:	8b 03                	mov    (%ebx),%eax
  283cf9:	83 e0 11             	and    $0x11,%eax
  283cfc:	83 f8 11             	cmp    $0x11,%eax
  283cff:	75 14                	jne    283d15 <cmd_app+0x216>
  283d01:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283d04:	3b 43 08             	cmp    0x8(%ebx),%eax
  283d07:	75 0c                	jne    283d15 <cmd_app+0x216>
					sheet_free(sht);
  283d09:	83 ec 0c             	sub    $0xc,%esp
  283d0c:	56                   	push   %esi
  283d0d:	e8 80 ec ff ff       	call   282992 <sheet_free>
  283d12:	83 c4 10             	add    $0x10,%esp
  283d15:	83 c3 28             	add    $0x28,%ebx
  283d18:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283d1b:	39 f7                	cmp    %esi,%edi
  283d1d:	75 d8                	jne    283cf7 <cmd_app+0x1f8>
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			timer_cancelall(&task->fifo);
  283d1f:	83 ec 0c             	sub    $0xc,%esp
  283d22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283d25:	83 c0 10             	add    $0x10,%eax
  283d28:	50                   	push   %eax
  283d29:	e8 0d ef ff ff       	call   282c3b <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283d2e:	83 c4 0c             	add    $0xc,%esp
  283d31:	ff 75 b8             	pushl  -0x48(%ebp)
  283d34:	ff 75 b4             	pushl  -0x4c(%ebp)
  283d37:	68 00 00 3c 00       	push   $0x3c0000
  283d3c:	e8 58 e5 ff ff       	call   282299 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283d41:	83 c4 10             	add    $0x10,%esp
  283d44:	eb 13                	jmp    283d59 <cmd_app+0x25a>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283d46:	83 ec 08             	sub    $0x8,%esp
  283d49:	68 1a 4d 28 00       	push   $0x284d1a
  283d4e:	ff 75 08             	pushl  0x8(%ebp)
  283d51:	e8 74 fd ff ff       	call   283aca <cons_putstr0>
  283d56:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283d59:	83 ec 04             	sub    $0x4,%esp
  283d5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283d5f:	ff 70 3c             	pushl  0x3c(%eax)
  283d62:	ff 75 bc             	pushl  -0x44(%ebp)
  283d65:	68 00 00 3c 00       	push   $0x3c0000
  283d6a:	e8 2a e5 ff ff       	call   282299 <memman_free_4k>
		cons_newline(cons);
  283d6f:	83 c4 04             	add    $0x4,%esp
  283d72:	ff 75 08             	pushl  0x8(%ebp)
  283d75:	e8 46 f9 ff ff       	call   2836c0 <cons_newline>
		return 1;
  283d7a:	83 c4 10             	add    $0x10,%esp
  283d7d:	b8 01 00 00 00       	mov    $0x1,%eax
  283d82:	eb 14                	jmp    283d98 <cmd_app+0x299>
	}
	return 0;
  283d84:	b8 00 00 00 00       	mov    $0x0,%eax
  283d89:	eb 0d                	jmp    283d98 <cmd_app+0x299>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283d8b:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283d8e:	bb 01 00 00 00       	mov    $0x1,%ebx
  283d93:	e9 88 fd ff ff       	jmp    283b20 <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283d98:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283d9b:	5b                   	pop    %ebx
  283d9c:	5e                   	pop    %esi
  283d9d:	5f                   	pop    %edi
  283d9e:	5d                   	pop    %ebp
  283d9f:	c3                   	ret    

00283da0 <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  283da0:	55                   	push   %ebp
  283da1:	89 e5                	mov    %esp,%ebp
  283da3:	53                   	push   %ebx
  283da4:	83 ec 0c             	sub    $0xc,%esp
  283da7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  283daa:	68 33 4d 28 00       	push   $0x284d33
  283daf:	53                   	push   %ebx
  283db0:	e8 1d dc ff ff       	call   2819d2 <strcmp>
  283db5:	83 c4 10             	add    $0x10,%esp
  283db8:	85 c0                	test   %eax,%eax
  283dba:	75 16                	jne    283dd2 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  283dbc:	83 ec 08             	sub    $0x8,%esp
  283dbf:	ff 75 14             	pushl  0x14(%ebp)
  283dc2:	ff 75 0c             	pushl  0xc(%ebp)
  283dc5:	e8 7f fa ff ff       	call   283849 <cmd_mem>
  283dca:	83 c4 10             	add    $0x10,%esp
  283dcd:	e9 c9 00 00 00       	jmp    283e9b <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"cls") == 0)
  283dd2:	83 ec 08             	sub    $0x8,%esp
  283dd5:	68 37 4d 28 00       	push   $0x284d37
  283dda:	53                   	push   %ebx
  283ddb:	e8 f2 db ff ff       	call   2819d2 <strcmp>
  283de0:	83 c4 10             	add    $0x10,%esp
  283de3:	85 c0                	test   %eax,%eax
  283de5:	75 13                	jne    283dfa <cons_runcmd+0x5a>
		cmd_cls(cons);
  283de7:	83 ec 0c             	sub    $0xc,%esp
  283dea:	ff 75 0c             	pushl  0xc(%ebp)
  283ded:	e8 e5 fa ff ff       	call   2838d7 <cmd_cls>
  283df2:	83 c4 10             	add    $0x10,%esp
  283df5:	e9 a1 00 00 00       	jmp    283e9b <cons_runcmd+0xfb>
	else if(strcmp(cmdline,"dir") == 0)
  283dfa:	83 ec 08             	sub    $0x8,%esp
  283dfd:	68 3b 4d 28 00       	push   $0x284d3b
  283e02:	53                   	push   %ebx
  283e03:	e8 ca db ff ff       	call   2819d2 <strcmp>
  283e08:	83 c4 10             	add    $0x10,%esp
  283e0b:	85 c0                	test   %eax,%eax
  283e0d:	75 10                	jne    283e1f <cons_runcmd+0x7f>
		cmd_dir(cons);
  283e0f:	83 ec 0c             	sub    $0xc,%esp
  283e12:	ff 75 0c             	pushl  0xc(%ebp)
  283e15:	e8 25 fb ff ff       	call   28393f <cmd_dir>
  283e1a:	83 c4 10             	add    $0x10,%esp
  283e1d:	eb 7c                	jmp    283e9b <cons_runcmd+0xfb>
	else if(strncmp(cmdline,"type ",5) == 0)
  283e1f:	83 ec 04             	sub    $0x4,%esp
  283e22:	6a 05                	push   $0x5
  283e24:	68 3f 4d 28 00       	push   $0x284d3f
  283e29:	53                   	push   %ebx
  283e2a:	e8 09 dc ff ff       	call   281a38 <strncmp>
  283e2f:	83 c4 10             	add    $0x10,%esp
  283e32:	85 c0                	test   %eax,%eax
  283e34:	75 14                	jne    283e4a <cons_runcmd+0xaa>
		cmd_type(cons,fat,cmdline);
  283e36:	83 ec 04             	sub    $0x4,%esp
  283e39:	53                   	push   %ebx
  283e3a:	ff 75 10             	pushl  0x10(%ebp)
  283e3d:	ff 75 0c             	pushl  0xc(%ebp)
  283e40:	e8 b0 fb ff ff       	call   2839f5 <cmd_type>
  283e45:	83 c4 10             	add    $0x10,%esp
  283e48:	eb 51                	jmp    283e9b <cons_runcmd+0xfb>
	else if(cmdline[0] != 0)
  283e4a:	80 3b 00             	cmpb   $0x0,(%ebx)
  283e4d:	74 4c                	je     283e9b <cons_runcmd+0xfb>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  283e4f:	83 ec 04             	sub    $0x4,%esp
  283e52:	53                   	push   %ebx
  283e53:	ff 75 10             	pushl  0x10(%ebp)
  283e56:	ff 75 0c             	pushl  0xc(%ebp)
  283e59:	e8 a1 fc ff ff       	call   283aff <cmd_app>
  283e5e:	83 c4 10             	add    $0x10,%esp
  283e61:	85 c0                	test   %eax,%eax
  283e63:	75 36                	jne    283e9b <cons_runcmd+0xfb>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  283e65:	83 ec 04             	sub    $0x4,%esp
  283e68:	6a 0c                	push   $0xc
  283e6a:	68 45 4d 28 00       	push   $0x284d45
  283e6f:	6a 00                	push   $0x0
  283e71:	6a 07                	push   $0x7
  283e73:	8b 45 0c             	mov    0xc(%ebp),%eax
  283e76:	ff 70 08             	pushl  0x8(%eax)
  283e79:	6a 08                	push   $0x8
  283e7b:	ff 30                	pushl  (%eax)
  283e7d:	e8 be d1 ff ff       	call   281040 <putfonts8_asc_sht>
			cons_newline(cons);
  283e82:	83 c4 14             	add    $0x14,%esp
  283e85:	ff 75 0c             	pushl  0xc(%ebp)
  283e88:	e8 33 f8 ff ff       	call   2836c0 <cons_newline>
			cons_newline(cons);
  283e8d:	83 c4 04             	add    $0x4,%esp
  283e90:	ff 75 0c             	pushl  0xc(%ebp)
  283e93:	e8 28 f8 ff ff       	call   2836c0 <cons_newline>
  283e98:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  283e9b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  283e9e:	c9                   	leave  
  283e9f:	c3                   	ret    

00283ea0 <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  283ea0:	55                   	push   %ebp
  283ea1:	89 e5                	mov    %esp,%ebp
  283ea3:	57                   	push   %edi
  283ea4:	56                   	push   %esi
  283ea5:	53                   	push   %ebx
  283ea6:	83 ec 0c             	sub    $0xc,%esp
  283ea9:	8b 7d 08             	mov    0x8(%ebp),%edi
  283eac:	8b 75 0c             	mov    0xc(%ebp),%esi
  283eaf:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  283eb2:	85 c0                	test   %eax,%eax
  283eb4:	7e 1d                	jle    283ed3 <cons_putstr1+0x33>
  283eb6:	89 f3                	mov    %esi,%ebx
  283eb8:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  283eba:	83 ec 04             	sub    $0x4,%esp
  283ebd:	6a 01                	push   $0x1
  283ebf:	0f be 03             	movsbl (%ebx),%eax
  283ec2:	50                   	push   %eax
  283ec3:	57                   	push   %edi
  283ec4:	e8 c2 f8 ff ff       	call   28378b <cons_putchar>
  283ec9:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  283ecc:	83 c4 10             	add    $0x10,%esp
  283ecf:	39 f3                	cmp    %esi,%ebx
  283ed1:	75 e7                	jne    283eba <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  283ed3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283ed6:	5b                   	pop    %ebx
  283ed7:	5e                   	pop    %esi
  283ed8:	5f                   	pop    %edi
  283ed9:	5d                   	pop    %ebp
  283eda:	c3                   	ret    
  283edb:	66 90                	xchg   %ax,%ax
  283edd:	66 90                	xchg   %ax,%ax
  283edf:	90                   	nop

00283ee0 <start_app>:
  283ee0:	60                   	pusha  
  283ee1:	8b 44 24 24          	mov    0x24(%esp),%eax
  283ee5:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  283ee9:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  283eed:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  283ef1:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  283ef5:	89 65 00             	mov    %esp,0x0(%ebp)
  283ef8:	8c 55 04             	mov    %ss,0x4(%ebp)
  283efb:	8e c3                	mov    %ebx,%es
  283efd:	8e db                	mov    %ebx,%ds
  283eff:	8e e3                	mov    %ebx,%fs
  283f01:	8e eb                	mov    %ebx,%gs
  283f03:	83 c9 03             	or     $0x3,%ecx
  283f06:	83 cb 03             	or     $0x3,%ebx
  283f09:	53                   	push   %ebx
  283f0a:	52                   	push   %edx
  283f0b:	51                   	push   %ecx
  283f0c:	50                   	push   %eax
  283f0d:	cb                   	lret   

00283f0e <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  283f0e:	55                   	push   %ebp
  283f0f:	89 e5                	mov    %esp,%ebp
  283f11:	53                   	push   %ebx
  283f12:	83 ec 34             	sub    $0x34,%esp
	struct TASK *task = task_now();
  283f15:	e8 a8 ee ff ff       	call   282dc2 <task_now>
  283f1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct CONSOLE *cons = task->cons;
  283f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  283f20:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
  283f26:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int ds_base = task->ds_base;
  283f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
  283f2c:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
  283f32:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283f35:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  283f3a:	8b 00                	mov    (%eax),%eax
  283f3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  283f3f:	8d 45 24             	lea    0x24(%ebp),%eax
  283f42:	83 c0 04             	add    $0x4,%eax
  283f45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	   reg[0] = 1st_edi; reg[1] = 1st_esi ... reg[7] = 1st_eax
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	 */

	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  283f48:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  283f4c:	75 1c                	jne    283f6a <sys_api+0x5c>
  283f4e:	8b 45 24             	mov    0x24(%ebp),%eax
  283f51:	0f b6 c0             	movzbl %al,%eax
  283f54:	83 ec 04             	sub    $0x4,%esp
  283f57:	6a 01                	push   $0x1
  283f59:	50                   	push   %eax
  283f5a:	ff 75 f0             	pushl  -0x10(%ebp)
  283f5d:	e8 29 f8 ff ff       	call   28378b <cons_putchar>
  283f62:	83 c4 10             	add    $0x10,%esp
  283f65:	e9 fb 05 00 00       	jmp    284565 <sys_api+0x657>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  283f6a:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  283f6e:	75 1c                	jne    283f8c <sys_api+0x7e>
  283f70:	8b 55 ec             	mov    -0x14(%ebp),%edx
  283f73:	8b 45 18             	mov    0x18(%ebp),%eax
  283f76:	01 d0                	add    %edx,%eax
  283f78:	83 ec 08             	sub    $0x8,%esp
  283f7b:	50                   	push   %eax
  283f7c:	ff 75 f0             	pushl  -0x10(%ebp)
  283f7f:	e8 46 fb ff ff       	call   283aca <cons_putstr0>
  283f84:	83 c4 10             	add    $0x10,%esp
  283f87:	e9 d9 05 00 00       	jmp    284565 <sys_api+0x657>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  283f8c:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  283f90:	75 1f                	jne    283fb1 <sys_api+0xa3>
  283f92:	8b 55 ec             	mov    -0x14(%ebp),%edx
  283f95:	8b 45 18             	mov    0x18(%ebp),%eax
  283f98:	01 d0                	add    %edx,%eax
  283f9a:	83 ec 04             	sub    $0x4,%esp
  283f9d:	ff 75 20             	pushl  0x20(%ebp)
  283fa0:	50                   	push   %eax
  283fa1:	ff 75 f0             	pushl  -0x10(%ebp)
  283fa4:	e8 f7 fe ff ff       	call   283ea0 <cons_putstr1>
  283fa9:	83 c4 10             	add    $0x10,%esp
  283fac:	e9 b4 05 00 00       	jmp    284565 <sys_api+0x657>
	else if(edx == 4)
  283fb1:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  283fb5:	75 0b                	jne    283fc2 <sys_api+0xb4>
	{
		//exit app
		return &(task->tss.esp0);
  283fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  283fba:	83 c0 30             	add    $0x30,%eax
  283fbd:	e9 a8 05 00 00       	jmp    28456a <sys_api+0x65c>
	}
	else if(edx == 5)
  283fc2:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  283fc6:	0f 85 d1 00 00 00    	jne    28409d <sys_api+0x18f>
	{
		sht = sheet_alloc(shtctl);
  283fcc:	83 ec 0c             	sub    $0xc,%esp
  283fcf:	ff 75 e8             	pushl  -0x18(%ebp)
  283fd2:	e8 85 e3 ff ff       	call   28235c <sheet_alloc>
  283fd7:	83 c4 10             	add    $0x10,%esp
  283fda:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->task = task;
  283fdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  283fe0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  283fe3:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  283fe6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  283fe9:	8b 40 1c             	mov    0x1c(%eax),%eax
  283fec:	83 c8 11             	or     $0x11,%eax
  283fef:	89 c2                	mov    %eax,%edx
  283ff1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  283ff4:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  283ff7:	8b 45 24             	mov    0x24(%ebp),%eax
  283ffa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  283ffd:	8b 55 18             	mov    0x18(%ebp),%edx
  284000:	01 ca                	add    %ecx,%edx
  284002:	83 ec 0c             	sub    $0xc,%esp
  284005:	50                   	push   %eax
  284006:	ff 75 08             	pushl  0x8(%ebp)
  284009:	ff 75 0c             	pushl  0xc(%ebp)
  28400c:	52                   	push   %edx
  28400d:	ff 75 d4             	pushl  -0x2c(%ebp)
  284010:	e8 ba e3 ff ff       	call   2823cf <sheet_setbuf>
  284015:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  284018:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28401b:	8b 45 20             	mov    0x20(%ebp),%eax
  28401e:	01 d0                	add    %edx,%eax
  284020:	89 c1                	mov    %eax,%ecx
  284022:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284025:	8b 45 18             	mov    0x18(%ebp),%eax
  284028:	01 d0                	add    %edx,%eax
  28402a:	83 ec 0c             	sub    $0xc,%esp
  28402d:	6a 00                	push   $0x0
  28402f:	51                   	push   %ecx
  284030:	ff 75 08             	pushl  0x8(%ebp)
  284033:	ff 75 0c             	pushl  0xc(%ebp)
  284036:	50                   	push   %eax
  284037:	e8 a6 ce ff ff       	call   280ee2 <make_window8>
  28403c:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,((shtctl->xsize - esi)/2)&~3,(shtctl->ysize - edi)/2);
  28403f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284042:	8b 40 0c             	mov    0xc(%eax),%eax
  284045:	2b 45 08             	sub    0x8(%ebp),%eax
  284048:	89 c2                	mov    %eax,%edx
  28404a:	c1 ea 1f             	shr    $0x1f,%edx
  28404d:	01 d0                	add    %edx,%eax
  28404f:	d1 f8                	sar    %eax
  284051:	89 c1                	mov    %eax,%ecx
  284053:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284056:	8b 40 08             	mov    0x8(%eax),%eax
  284059:	2b 45 0c             	sub    0xc(%ebp),%eax
  28405c:	89 c2                	mov    %eax,%edx
  28405e:	c1 ea 1f             	shr    $0x1f,%edx
  284061:	01 d0                	add    %edx,%eax
  284063:	d1 f8                	sar    %eax
  284065:	83 e0 fc             	and    $0xfffffffc,%eax
  284068:	83 ec 04             	sub    $0x4,%esp
  28406b:	51                   	push   %ecx
  28406c:	50                   	push   %eax
  28406d:	ff 75 d4             	pushl  -0x2c(%ebp)
  284070:	e8 be e8 ff ff       	call   282933 <sheet_slide>
  284075:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  284078:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28407b:	8b 40 10             	mov    0x10(%eax),%eax
  28407e:	83 ec 08             	sub    $0x8,%esp
  284081:	50                   	push   %eax
  284082:	ff 75 d4             	pushl  -0x2c(%ebp)
  284085:	e8 c0 e7 ff ff       	call   28284a <sheet_updown>
  28408a:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  28408d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284090:	8d 50 1c             	lea    0x1c(%eax),%edx
  284093:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284096:	89 02                	mov    %eax,(%edx)
  284098:	e9 c8 04 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 6)
  28409d:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  2840a1:	75 74                	jne    284117 <sys_api+0x209>
	{
		sht = (struct SHEET *)ebx;
  2840a3:	8b 45 18             	mov    0x18(%ebp),%eax
  2840a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  2840a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2840ac:	8b 45 10             	mov    0x10(%ebp),%eax
  2840af:	01 d0                	add    %edx,%eax
  2840b1:	89 c3                	mov    %eax,%ebx
  2840b3:	8b 45 24             	mov    0x24(%ebp),%eax
  2840b6:	0f be c8             	movsbl %al,%ecx
  2840b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2840bc:	8b 50 04             	mov    0x4(%eax),%edx
  2840bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2840c2:	8b 00                	mov    (%eax),%eax
  2840c4:	83 ec 08             	sub    $0x8,%esp
  2840c7:	53                   	push   %ebx
  2840c8:	51                   	push   %ecx
  2840c9:	ff 75 08             	pushl  0x8(%ebp)
  2840cc:	ff 75 0c             	pushl  0xc(%ebp)
  2840cf:	52                   	push   %edx
  2840d0:	50                   	push   %eax
  2840d1:	e8 6e d2 ff ff       	call   281344 <putfonts8_asc>
  2840d6:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2840d9:	8b 45 18             	mov    0x18(%ebp),%eax
  2840dc:	83 e0 01             	and    $0x1,%eax
  2840df:	85 c0                	test   %eax,%eax
  2840e1:	0f 85 7e 04 00 00    	jne    284565 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  2840e7:	8b 45 08             	mov    0x8(%ebp),%eax
  2840ea:	8d 50 10             	lea    0x10(%eax),%edx
  2840ed:	8b 45 20             	mov    0x20(%ebp),%eax
  2840f0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  2840f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  2840fa:	01 c8                	add    %ecx,%eax
  2840fc:	83 ec 0c             	sub    $0xc,%esp
  2840ff:	52                   	push   %edx
  284100:	50                   	push   %eax
  284101:	ff 75 08             	pushl  0x8(%ebp)
  284104:	ff 75 0c             	pushl  0xc(%ebp)
  284107:	ff 75 d4             	pushl  -0x2c(%ebp)
  28410a:	e8 07 e7 ff ff       	call   282816 <sheet_refresh>
  28410f:	83 c4 20             	add    $0x20,%esp
  284112:	e9 4e 04 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 7)
  284117:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  28411b:	75 68                	jne    284185 <sys_api+0x277>
	{
		sht = (struct SHEET *)ebx;
  28411d:	8b 45 18             	mov    0x18(%ebp),%eax
  284120:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  284123:	8b 5d 24             	mov    0x24(%ebp),%ebx
  284126:	8b 45 10             	mov    0x10(%ebp),%eax
  284129:	0f b6 c8             	movzbl %al,%ecx
  28412c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28412f:	8b 50 04             	mov    0x4(%eax),%edx
  284132:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284135:	8b 00                	mov    (%eax),%eax
  284137:	83 ec 04             	sub    $0x4,%esp
  28413a:	ff 75 08             	pushl  0x8(%ebp)
  28413d:	ff 75 0c             	pushl  0xc(%ebp)
  284140:	ff 75 20             	pushl  0x20(%ebp)
  284143:	53                   	push   %ebx
  284144:	51                   	push   %ecx
  284145:	52                   	push   %edx
  284146:	50                   	push   %eax
  284147:	e8 95 ca ff ff       	call   280be1 <boxfill8>
  28414c:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  28414f:	8b 45 18             	mov    0x18(%ebp),%eax
  284152:	83 e0 01             	and    $0x1,%eax
  284155:	85 c0                	test   %eax,%eax
  284157:	0f 85 08 04 00 00    	jne    284565 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  28415d:	8b 45 08             	mov    0x8(%ebp),%eax
  284160:	8d 48 01             	lea    0x1(%eax),%ecx
  284163:	8b 45 0c             	mov    0xc(%ebp),%eax
  284166:	8d 50 01             	lea    0x1(%eax),%edx
  284169:	8b 45 24             	mov    0x24(%ebp),%eax
  28416c:	83 ec 0c             	sub    $0xc,%esp
  28416f:	51                   	push   %ecx
  284170:	52                   	push   %edx
  284171:	ff 75 20             	pushl  0x20(%ebp)
  284174:	50                   	push   %eax
  284175:	ff 75 d4             	pushl  -0x2c(%ebp)
  284178:	e8 99 e6 ff ff       	call   282816 <sheet_refresh>
  28417d:	83 c4 20             	add    $0x20,%esp
  284180:	e9 e0 03 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 8)
  284185:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284189:	75 3b                	jne    2841c6 <sys_api+0x2b8>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  28418b:	8b 55 18             	mov    0x18(%ebp),%edx
  28418e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284191:	01 d0                	add    %edx,%eax
  284193:	83 ec 0c             	sub    $0xc,%esp
  284196:	50                   	push   %eax
  284197:	e8 2f dd ff ff       	call   281ecb <memman_init>
  28419c:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  28419f:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  2841a3:	8b 45 20             	mov    0x20(%ebp),%eax
  2841a6:	8b 55 24             	mov    0x24(%ebp),%edx
  2841a9:	89 d3                	mov    %edx,%ebx
  2841ab:	8b 4d 18             	mov    0x18(%ebp),%ecx
  2841ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2841b1:	01 ca                	add    %ecx,%edx
  2841b3:	83 ec 04             	sub    $0x4,%esp
  2841b6:	50                   	push   %eax
  2841b7:	53                   	push   %ebx
  2841b8:	52                   	push   %edx
  2841b9:	e8 5c de ff ff       	call   28201a <memman_free>
  2841be:	83 c4 10             	add    $0x10,%esp
  2841c1:	e9 9f 03 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 9)
  2841c6:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  2841ca:	75 31                	jne    2841fd <sys_api+0x2ef>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  2841cc:	8b 45 20             	mov    0x20(%ebp),%eax
  2841cf:	83 c0 0f             	add    $0xf,%eax
  2841d2:	83 e0 f0             	and    $0xfffffff0,%eax
  2841d5:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  2841d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2841db:	8d 58 1c             	lea    0x1c(%eax),%ebx
  2841de:	8b 45 20             	mov    0x20(%ebp),%eax
  2841e1:	8b 4d 18             	mov    0x18(%ebp),%ecx
  2841e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2841e7:	01 ca                	add    %ecx,%edx
  2841e9:	83 ec 08             	sub    $0x8,%esp
  2841ec:	50                   	push   %eax
  2841ed:	52                   	push   %edx
  2841ee:	e8 3e dd ff ff       	call   281f31 <memman_alloc>
  2841f3:	83 c4 10             	add    $0x10,%esp
  2841f6:	89 03                	mov    %eax,(%ebx)
  2841f8:	e9 68 03 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 10)
  2841fd:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  284201:	75 2f                	jne    284232 <sys_api+0x324>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  284203:	8b 45 20             	mov    0x20(%ebp),%eax
  284206:	83 c0 0f             	add    $0xf,%eax
  284209:	83 e0 f0             	and    $0xfffffff0,%eax
  28420c:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  28420f:	8b 45 20             	mov    0x20(%ebp),%eax
  284212:	8b 55 24             	mov    0x24(%ebp),%edx
  284215:	89 d3                	mov    %edx,%ebx
  284217:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  28421a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28421d:	01 ca                	add    %ecx,%edx
  28421f:	83 ec 04             	sub    $0x4,%esp
  284222:	50                   	push   %eax
  284223:	53                   	push   %ebx
  284224:	52                   	push   %edx
  284225:	e8 f0 dd ff ff       	call   28201a <memman_free>
  28422a:	83 c4 10             	add    $0x10,%esp
  28422d:	e9 33 03 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 11)
  284232:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  284236:	75 58                	jne    284290 <sys_api+0x382>
	{
		sht = (struct SHEET *)ebx;
  284238:	8b 45 18             	mov    0x18(%ebp),%eax
  28423b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  28423e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284241:	8b 10                	mov    (%eax),%edx
  284243:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284246:	8b 40 04             	mov    0x4(%eax),%eax
  284249:	0f af 45 08          	imul   0x8(%ebp),%eax
  28424d:	89 c1                	mov    %eax,%ecx
  28424f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284252:	01 c8                	add    %ecx,%eax
  284254:	01 d0                	add    %edx,%eax
  284256:	8b 55 24             	mov    0x24(%ebp),%edx
  284259:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  28425b:	8b 45 18             	mov    0x18(%ebp),%eax
  28425e:	83 e0 01             	and    $0x1,%eax
  284261:	85 c0                	test   %eax,%eax
  284263:	0f 85 fc 02 00 00    	jne    284565 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  284269:	8b 45 08             	mov    0x8(%ebp),%eax
  28426c:	8d 50 01             	lea    0x1(%eax),%edx
  28426f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284272:	83 c0 01             	add    $0x1,%eax
  284275:	83 ec 0c             	sub    $0xc,%esp
  284278:	52                   	push   %edx
  284279:	50                   	push   %eax
  28427a:	ff 75 08             	pushl  0x8(%ebp)
  28427d:	ff 75 0c             	pushl  0xc(%ebp)
  284280:	ff 75 d4             	pushl  -0x2c(%ebp)
  284283:	e8 8e e5 ff ff       	call   282816 <sheet_refresh>
  284288:	83 c4 20             	add    $0x20,%esp
  28428b:	e9 d5 02 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 12)
  284290:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  284294:	75 26                	jne    2842bc <sys_api+0x3ae>
	{
		sht = (struct SHEET *)ebx;
  284296:	8b 45 18             	mov    0x18(%ebp),%eax
  284299:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  28429c:	8b 45 24             	mov    0x24(%ebp),%eax
  28429f:	83 ec 0c             	sub    $0xc,%esp
  2842a2:	ff 75 08             	pushl  0x8(%ebp)
  2842a5:	ff 75 0c             	pushl  0xc(%ebp)
  2842a8:	ff 75 20             	pushl  0x20(%ebp)
  2842ab:	50                   	push   %eax
  2842ac:	ff 75 d4             	pushl  -0x2c(%ebp)
  2842af:	e8 62 e5 ff ff       	call   282816 <sheet_refresh>
  2842b4:	83 c4 20             	add    $0x20,%esp
  2842b7:	e9 a9 02 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 13)
  2842bc:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  2842c0:	75 5d                	jne    28431f <sys_api+0x411>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  2842c2:	8b 45 18             	mov    0x18(%ebp),%eax
  2842c5:	83 e0 fe             	and    $0xfffffffe,%eax
  2842c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  2842cb:	8b 45 24             	mov    0x24(%ebp),%eax
  2842ce:	83 ec 08             	sub    $0x8,%esp
  2842d1:	ff 75 10             	pushl  0x10(%ebp)
  2842d4:	ff 75 08             	pushl  0x8(%ebp)
  2842d7:	ff 75 0c             	pushl  0xc(%ebp)
  2842da:	ff 75 20             	pushl  0x20(%ebp)
  2842dd:	50                   	push   %eax
  2842de:	ff 75 d4             	pushl  -0x2c(%ebp)
  2842e1:	e8 e8 ce ff ff       	call   2811ce <drawline8_sht>
  2842e6:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2842e9:	8b 45 18             	mov    0x18(%ebp),%eax
  2842ec:	83 e0 01             	and    $0x1,%eax
  2842ef:	85 c0                	test   %eax,%eax
  2842f1:	0f 85 6e 02 00 00    	jne    284565 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  2842f7:	8b 45 08             	mov    0x8(%ebp),%eax
  2842fa:	8d 48 01             	lea    0x1(%eax),%ecx
  2842fd:	8b 45 0c             	mov    0xc(%ebp),%eax
  284300:	8d 50 01             	lea    0x1(%eax),%edx
  284303:	8b 45 24             	mov    0x24(%ebp),%eax
  284306:	83 ec 0c             	sub    $0xc,%esp
  284309:	51                   	push   %ecx
  28430a:	52                   	push   %edx
  28430b:	ff 75 20             	pushl  0x20(%ebp)
  28430e:	50                   	push   %eax
  28430f:	ff 75 d4             	pushl  -0x2c(%ebp)
  284312:	e8 ff e4 ff ff       	call   282816 <sheet_refresh>
  284317:	83 c4 20             	add    $0x20,%esp
  28431a:	e9 46 02 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 14)
  28431f:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  284323:	75 14                	jne    284339 <sys_api+0x42b>
	{
		sheet_free((struct SHEET *)ebx);
  284325:	8b 45 18             	mov    0x18(%ebp),%eax
  284328:	83 ec 0c             	sub    $0xc,%esp
  28432b:	50                   	push   %eax
  28432c:	e8 61 e6 ff ff       	call   282992 <sheet_free>
  284331:	83 c4 10             	add    $0x10,%esp
  284334:	e9 2c 02 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 15)
  284339:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  28433d:	0f 85 f3 00 00 00    	jne    284436 <sys_api+0x528>
	{
		for(;;)
		{
			io_cli();
  284343:	e8 aa c6 ff ff       	call   2809f2 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  284348:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28434b:	83 c0 10             	add    $0x10,%eax
  28434e:	83 ec 0c             	sub    $0xc,%esp
  284351:	50                   	push   %eax
  284352:	e8 3f d8 ff ff       	call   281b96 <fifo32_status>
  284357:	83 c4 10             	add    $0x10,%esp
  28435a:	85 c0                	test   %eax,%eax
  28435c:	75 32                	jne    284390 <sys_api+0x482>
			{
				if(eax != 0)
  28435e:	8b 45 24             	mov    0x24(%ebp),%eax
  284361:	85 c0                	test   %eax,%eax
  284363:	74 10                	je     284375 <sys_api+0x467>
					task_sleep(task);
  284365:	83 ec 0c             	sub    $0xc,%esp
  284368:	ff 75 f4             	pushl  -0xc(%ebp)
  28436b:	e8 b9 ed ff ff       	call   283129 <task_sleep>
  284370:	83 c4 10             	add    $0x10,%esp
  284373:	eb 1b                	jmp    284390 <sys_api+0x482>
				else
				{
					io_sti();
  284375:	e8 7a c6 ff ff       	call   2809f4 <io_sti>
					reg[7] = -1;
  28437a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28437d:	83 c0 1c             	add    $0x1c,%eax
  284380:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  284386:	b8 00 00 00 00       	mov    $0x0,%eax
  28438b:	e9 da 01 00 00       	jmp    28456a <sys_api+0x65c>
				}
			}
			int i = fifo32_get(&task->fifo);
  284390:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284393:	83 c0 10             	add    $0x10,%eax
  284396:	83 ec 0c             	sub    $0xc,%esp
  284399:	50                   	push   %eax
  28439a:	e8 bc d7 ff ff       	call   281b5b <fifo32_get>
  28439f:	83 c4 10             	add    $0x10,%esp
  2843a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
			io_sti();
  2843a5:	e8 4a c6 ff ff       	call   2809f4 <io_sti>
			if(i <= 1)
  2843aa:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
  2843ae:	7f 34                	jg     2843e4 <sys_api+0x4d6>
			{
				timer_init(cons->timer,&task->fifo,1);
  2843b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2843b3:	8d 50 10             	lea    0x10(%eax),%edx
  2843b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2843b9:	8b 40 10             	mov    0x10(%eax),%eax
  2843bc:	83 ec 04             	sub    $0x4,%esp
  2843bf:	6a 01                	push   $0x1
  2843c1:	52                   	push   %edx
  2843c2:	50                   	push   %eax
  2843c3:	e8 bc e6 ff ff       	call   282a84 <timer_init>
  2843c8:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  2843cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2843ce:	8b 40 10             	mov    0x10(%eax),%eax
  2843d1:	83 ec 08             	sub    $0x8,%esp
  2843d4:	6a 32                	push   $0x32
  2843d6:	50                   	push   %eax
  2843d7:	e8 bc e6 ff ff       	call   282a98 <timer_settime>
  2843dc:	83 c4 10             	add    $0x10,%esp
  2843df:	e9 5f ff ff ff       	jmp    284343 <sys_api+0x435>
			}
			else if(i == 2)
  2843e4:	83 7d e0 02          	cmpl   $0x2,-0x20(%ebp)
  2843e8:	75 0f                	jne    2843f9 <sys_api+0x4eb>
			{
				cons->cur_c = COL8_FFFFFF;
  2843ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2843ed:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  2843f4:	e9 4a ff ff ff       	jmp    284343 <sys_api+0x435>
			}
			else if(i == 3)
  2843f9:	83 7d e0 03          	cmpl   $0x3,-0x20(%ebp)
  2843fd:	75 0f                	jne    28440e <sys_api+0x500>
			{
				cons->cur_c = -1;
  2843ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284402:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  284409:	e9 35 ff ff ff       	jmp    284343 <sys_api+0x435>
			}
			else if(i>=256)
  28440e:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%ebp)
  284415:	0f 8e 28 ff ff ff    	jle    284343 <sys_api+0x435>
			{
				reg[7] = i-256;
  28441b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28441e:	83 c0 1c             	add    $0x1c,%eax
  284421:	8b 55 e0             	mov    -0x20(%ebp),%edx
  284424:	81 ea 00 01 00 00    	sub    $0x100,%edx
  28442a:	89 10                	mov    %edx,(%eax)
				return 0;
  28442c:	b8 00 00 00 00       	mov    $0x0,%eax
  284431:	e9 34 01 00 00       	jmp    28456a <sys_api+0x65c>
			}
		}
	}
	else if(edx == 16)
  284436:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  28443a:	75 1e                	jne    28445a <sys_api+0x54c>
	{
		reg[7] = (int)timer_alloc();
  28443c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28443f:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284442:	e8 6f e5 ff ff       	call   2829b6 <timer_alloc>
  284447:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  284449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28444c:	83 c0 1c             	add    $0x1c,%eax
  28444f:	8b 00                	mov    (%eax),%eax
  284451:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  284455:	e9 0b 01 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 17)
  28445a:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  28445e:	75 25                	jne    284485 <sys_api+0x577>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  284460:	8b 45 24             	mov    0x24(%ebp),%eax
  284463:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  284469:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28446c:	8d 50 10             	lea    0x10(%eax),%edx
  28446f:	8b 45 18             	mov    0x18(%ebp),%eax
  284472:	83 ec 04             	sub    $0x4,%esp
  284475:	51                   	push   %ecx
  284476:	52                   	push   %edx
  284477:	50                   	push   %eax
  284478:	e8 07 e6 ff ff       	call   282a84 <timer_init>
  28447d:	83 c4 10             	add    $0x10,%esp
  284480:	e9 e0 00 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 18)
  284485:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284489:	75 1a                	jne    2844a5 <sys_api+0x597>
	{
		timer_settime((struct TIMER *)ebx,eax);
  28448b:	8b 45 24             	mov    0x24(%ebp),%eax
  28448e:	89 c2                	mov    %eax,%edx
  284490:	8b 45 18             	mov    0x18(%ebp),%eax
  284493:	83 ec 08             	sub    $0x8,%esp
  284496:	52                   	push   %edx
  284497:	50                   	push   %eax
  284498:	e8 fb e5 ff ff       	call   282a98 <timer_settime>
  28449d:	83 c4 10             	add    $0x10,%esp
  2844a0:	e9 c0 00 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 19)
  2844a5:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  2844a9:	75 14                	jne    2844bf <sys_api+0x5b1>
	{
		timer_free((struct TIMER *)ebx);
  2844ab:	8b 45 18             	mov    0x18(%ebp),%eax
  2844ae:	83 ec 0c             	sub    $0xc,%esp
  2844b1:	50                   	push   %eax
  2844b2:	e8 c1 e5 ff ff       	call   282a78 <timer_free>
  2844b7:	83 c4 10             	add    $0x10,%esp
  2844ba:	e9 a6 00 00 00       	jmp    284565 <sys_api+0x657>
	}
	else if(edx == 20)
  2844bf:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  2844c3:	0f 85 9c 00 00 00    	jne    284565 <sys_api+0x657>
	{
		if(eax == 0)
  2844c9:	8b 45 24             	mov    0x24(%ebp),%eax
  2844cc:	85 c0                	test   %eax,%eax
  2844ce:	75 26                	jne    2844f6 <sys_api+0x5e8>
		{
			int i = io_in8(0x61);
  2844d0:	83 ec 0c             	sub    $0xc,%esp
  2844d3:	6a 61                	push   $0x61
  2844d5:	e8 2a c5 ff ff       	call   280a04 <io_in8>
  2844da:	83 c4 10             	add    $0x10,%esp
  2844dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
			io_out8(0x61,i&0x0d);
  2844e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2844e3:	83 e0 0d             	and    $0xd,%eax
  2844e6:	83 ec 08             	sub    $0x8,%esp
  2844e9:	50                   	push   %eax
  2844ea:	6a 61                	push   $0x61
  2844ec:	e8 35 c5 ff ff       	call   280a26 <io_out8>
  2844f1:	83 c4 10             	add    $0x10,%esp
  2844f4:	eb 6f                	jmp    284565 <sys_api+0x657>
		}
		else
		{
			int i = 1193180000/eax;
  2844f6:	8b 5d 24             	mov    0x24(%ebp),%ebx
  2844f9:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  2844fe:	99                   	cltd   
  2844ff:	f7 fb                	idiv   %ebx
  284501:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x43,0xb6);
  284504:	83 ec 08             	sub    $0x8,%esp
  284507:	68 b6 00 00 00       	push   $0xb6
  28450c:	6a 43                	push   $0x43
  28450e:	e8 13 c5 ff ff       	call   280a26 <io_out8>
  284513:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  284516:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284519:	0f b6 c0             	movzbl %al,%eax
  28451c:	83 ec 08             	sub    $0x8,%esp
  28451f:	50                   	push   %eax
  284520:	6a 42                	push   $0x42
  284522:	e8 ff c4 ff ff       	call   280a26 <io_out8>
  284527:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  28452a:	8b 45 d8             	mov    -0x28(%ebp),%eax
  28452d:	c1 f8 08             	sar    $0x8,%eax
  284530:	83 ec 08             	sub    $0x8,%esp
  284533:	50                   	push   %eax
  284534:	6a 42                	push   $0x42
  284536:	e8 eb c4 ff ff       	call   280a26 <io_out8>
  28453b:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  28453e:	83 ec 0c             	sub    $0xc,%esp
  284541:	6a 61                	push   $0x61
  284543:	e8 bc c4 ff ff       	call   280a04 <io_in8>
  284548:	83 c4 10             	add    $0x10,%esp
  28454b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  28454e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284551:	83 e0 0c             	and    $0xc,%eax
  284554:	83 c8 03             	or     $0x3,%eax
  284557:	83 ec 08             	sub    $0x8,%esp
  28455a:	50                   	push   %eax
  28455b:	6a 61                	push   $0x61
  28455d:	e8 c4 c4 ff ff       	call   280a26 <io_out8>
  284562:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  284565:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28456a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28456d:	c9                   	leave  
  28456e:	c3                   	ret    
  28456f:	90                   	nop

00284570 <api_putchar>:
  284570:	ba 01 00 00 00       	mov    $0x1,%edx
  284575:	8a 44 24 04          	mov    0x4(%esp),%al
  284579:	cd 40                	int    $0x40
  28457b:	c3                   	ret    

0028457c <api_putstr>:
  28457c:	ba 02 00 00 00       	mov    $0x2,%edx
  284581:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284585:	cd 40                	int    $0x40
  284587:	c3                   	ret    

00284588 <api_end>:
  284588:	ba 04 00 00 00       	mov    $0x4,%edx
  28458d:	cd 40                	int    $0x40

0028458f <api_test>:
  28458f:	05 80 00 00 00       	add    $0x80,%eax
  284594:	c3                   	ret    

00284595 <api_openwin>:
  284595:	57                   	push   %edi
  284596:	56                   	push   %esi
  284597:	53                   	push   %ebx
  284598:	ba 05 00 00 00       	mov    $0x5,%edx
  28459d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  2845a1:	8b 74 24 14          	mov    0x14(%esp),%esi
  2845a5:	8b 7c 24 18          	mov    0x18(%esp),%edi
  2845a9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  2845ad:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  2845b1:	cd 40                	int    $0x40
  2845b3:	5b                   	pop    %ebx
  2845b4:	5e                   	pop    %esi
  2845b5:	5f                   	pop    %edi
  2845b6:	c3                   	ret    

002845b7 <api_putstrwin>:
  2845b7:	57                   	push   %edi
  2845b8:	56                   	push   %esi
  2845b9:	55                   	push   %ebp
  2845ba:	53                   	push   %ebx
  2845bb:	ba 06 00 00 00       	mov    $0x6,%edx
  2845c0:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  2845c4:	8b 74 24 18          	mov    0x18(%esp),%esi
  2845c8:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  2845cc:	8b 44 24 20          	mov    0x20(%esp),%eax
  2845d0:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  2845d4:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  2845d8:	cd 40                	int    $0x40
  2845da:	5b                   	pop    %ebx
  2845db:	5d                   	pop    %ebp
  2845dc:	5e                   	pop    %esi
  2845dd:	5f                   	pop    %edi
  2845de:	c3                   	ret    

002845df <api_boxfilwin>:
  2845df:	57                   	push   %edi
  2845e0:	56                   	push   %esi
  2845e1:	55                   	push   %ebp
  2845e2:	53                   	push   %ebx
  2845e3:	ba 07 00 00 00       	mov    $0x7,%edx
  2845e8:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  2845ec:	8b 44 24 18          	mov    0x18(%esp),%eax
  2845f0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  2845f4:	8b 74 24 20          	mov    0x20(%esp),%esi
  2845f8:	8b 7c 24 24          	mov    0x24(%esp),%edi
  2845fc:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284600:	cd 40                	int    $0x40
  284602:	5b                   	pop    %ebx
  284603:	5d                   	pop    %ebp
  284604:	5e                   	pop    %esi
  284605:	5f                   	pop    %edi
  284606:	c3                   	ret    

00284607 <api_initmalloc>:
  284607:	53                   	push   %ebx
  284608:	ba 08 00 00 00       	mov    $0x8,%edx
  28460d:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284614:	89 d8                	mov    %ebx,%eax
  284616:	05 00 80 00 00       	add    $0x8000,%eax
  28461b:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  284622:	29 c1                	sub    %eax,%ecx
  284624:	cd 40                	int    $0x40
  284626:	5b                   	pop    %ebx
  284627:	c3                   	ret    

00284628 <api_malloc>:
  284628:	53                   	push   %ebx
  284629:	ba 09 00 00 00       	mov    $0x9,%edx
  28462e:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284635:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  284639:	cd 40                	int    $0x40
  28463b:	5b                   	pop    %ebx
  28463c:	c3                   	ret    

0028463d <api_free>:
  28463d:	53                   	push   %ebx
  28463e:	ba 0a 00 00 00       	mov    $0xa,%edx
  284643:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  28464a:	8b 44 24 08          	mov    0x8(%esp),%eax
  28464e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284652:	cd 40                	int    $0x40
  284654:	5b                   	pop    %ebx
  284655:	c3                   	ret    

00284656 <api_pointwin>:
  284656:	57                   	push   %edi
  284657:	56                   	push   %esi
  284658:	53                   	push   %ebx
  284659:	ba 0b 00 00 00       	mov    $0xb,%edx
  28465e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284662:	8b 74 24 14          	mov    0x14(%esp),%esi
  284666:	8b 7c 24 18          	mov    0x18(%esp),%edi
  28466a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  28466e:	cd 40                	int    $0x40
  284670:	5b                   	pop    %ebx
  284671:	5e                   	pop    %esi
  284672:	5f                   	pop    %edi
  284673:	c3                   	ret    

00284674 <api_refreshwin>:
  284674:	57                   	push   %edi
  284675:	56                   	push   %esi
  284676:	53                   	push   %ebx
  284677:	ba 0c 00 00 00       	mov    $0xc,%edx
  28467c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284680:	8b 44 24 14          	mov    0x14(%esp),%eax
  284684:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284688:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  28468c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284690:	cd 40                	int    $0x40
  284692:	5b                   	pop    %ebx
  284693:	5e                   	pop    %esi
  284694:	5f                   	pop    %edi
  284695:	c3                   	ret    

00284696 <api_linewin>:
  284696:	57                   	push   %edi
  284697:	56                   	push   %esi
  284698:	55                   	push   %ebp
  284699:	53                   	push   %ebx
  28469a:	ba 0d 00 00 00       	mov    $0xd,%edx
  28469f:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  2846a3:	8b 44 24 18          	mov    0x18(%esp),%eax
  2846a7:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  2846ab:	8b 74 24 20          	mov    0x20(%esp),%esi
  2846af:	8b 7c 24 24          	mov    0x24(%esp),%edi
  2846b3:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  2846b7:	cd 40                	int    $0x40
  2846b9:	5b                   	pop    %ebx
  2846ba:	5d                   	pop    %ebp
  2846bb:	5e                   	pop    %esi
  2846bc:	5f                   	pop    %edi
  2846bd:	c3                   	ret    

002846be <api_closewin>:
  2846be:	53                   	push   %ebx
  2846bf:	ba 0e 00 00 00       	mov    $0xe,%edx
  2846c4:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  2846c8:	cd 40                	int    $0x40
  2846ca:	5b                   	pop    %ebx
  2846cb:	c3                   	ret    

002846cc <api_getkey>:
  2846cc:	ba 0f 00 00 00       	mov    $0xf,%edx
  2846d1:	8b 44 24 04          	mov    0x4(%esp),%eax
  2846d5:	cd 40                	int    $0x40
  2846d7:	c3                   	ret    

002846d8 <api_alloctimer>:
  2846d8:	ba 10 00 00 00       	mov    $0x10,%edx
  2846dd:	cd 40                	int    $0x40
  2846df:	c3                   	ret    

002846e0 <api_inittimer>:
  2846e0:	53                   	push   %ebx
  2846e1:	ba 11 00 00 00       	mov    $0x11,%edx
  2846e6:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  2846ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
  2846ee:	cd 40                	int    $0x40
  2846f0:	5b                   	pop    %ebx
  2846f1:	c3                   	ret    

002846f2 <api_settimer>:
  2846f2:	53                   	push   %ebx
  2846f3:	ba 12 00 00 00       	mov    $0x12,%edx
  2846f8:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  2846fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284700:	cd 40                	int    $0x40
  284702:	5b                   	pop    %ebx
  284703:	c3                   	ret    

00284704 <api_freetimer>:
  284704:	53                   	push   %ebx
  284705:	ba 13 00 00 00       	mov    $0x13,%edx
  28470a:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  28470e:	cd 40                	int    $0x40
  284710:	5b                   	pop    %ebx
  284711:	c3                   	ret    

00284712 <api_beep>:
  284712:	ba 14 00 00 00       	mov    $0x14,%edx
  284717:	8b 44 24 04          	mov    0x4(%esp),%eax
  28471b:	cd 40                	int    $0x40
  28471d:	c3                   	ret    

0028471e <change_wtitle8>:
	}
	return;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  28471e:	55                   	push   %ebp
  28471f:	89 e5                	mov    %esp,%ebp
  284721:	57                   	push   %edi
  284722:	56                   	push   %esi
  284723:	53                   	push   %ebx
  284724:	83 ec 2c             	sub    $0x2c,%esp
  284727:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  28472a:	8b 7d 08             	mov    0x8(%ebp),%edi
  28472d:	8b 7f 04             	mov    0x4(%edi),%edi
  284730:	89 fe                	mov    %edi,%esi
  284732:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  284735:	3c 01                	cmp    $0x1,%al
  284737:	19 ff                	sbb    %edi,%edi
  284739:	89 fb                	mov    %edi,%ebx
  28473b:	83 e3 fd             	and    $0xfffffffd,%ebx
  28473e:	83 c3 0f             	add    $0xf,%ebx
  284741:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  284744:	89 fb                	mov    %edi,%ebx
  284746:	83 c3 08             	add    $0x8,%ebx
  284749:	88 5d e7             	mov    %bl,-0x19(%ebp)
  28474c:	83 e7 03             	and    $0x3,%edi
  28474f:	83 c7 0c             	add    $0xc,%edi
  284752:	3c 01                	cmp    $0x1,%al
  284754:	19 c0                	sbb    %eax,%eax
  284756:	f7 d0                	not    %eax
  284758:	83 c0 08             	add    $0x8,%eax
  28475b:	88 45 e5             	mov    %al,-0x1b(%ebp)
  28475e:	89 f0                	mov    %esi,%eax
  284760:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  284763:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  284766:	8b 5d 08             	mov    0x8(%ebp),%ebx
  284769:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  28476b:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284772:	8d 5e fc             	lea    -0x4(%esi),%ebx
  284775:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  284778:	83 e8 03             	sub    $0x3,%eax
  28477b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  28477e:	8d 46 ea             	lea    -0x16(%esi),%eax
  284781:	89 45 dc             	mov    %eax,-0x24(%ebp)
  284784:	eb 32                	jmp    2847b8 <change_wtitle8+0x9a>
  284786:	89 ce                	mov    %ecx,%esi
  284788:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  28478a:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  28478e:	38 45 e7             	cmp    %al,-0x19(%ebp)
  284791:	75 05                	jne    284798 <change_wtitle8+0x7a>
  284793:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  284796:	7d 08                	jge    2847a0 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284798:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  28479b:	0f 44 c7             	cmove  %edi,%eax
  28479e:	eb 04                	jmp    2847a4 <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  2847a0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  2847a4:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  2847a7:	83 c2 01             	add    $0x1,%edx
  2847aa:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  2847ad:	75 d7                	jne    284786 <change_wtitle8+0x68>
  2847af:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  2847b2:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  2847b6:	74 0d                	je     2847c5 <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  2847b8:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  2847bc:	7e f1                	jle    2847af <change_wtitle8+0x91>
  2847be:	ba 03 00 00 00       	mov    $0x3,%edx
  2847c3:	eb c1                	jmp    284786 <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  2847c5:	83 ec 0c             	sub    $0xc,%esp
  2847c8:	6a 15                	push   $0x15
  2847ca:	ff 75 cc             	pushl  -0x34(%ebp)
  2847cd:	6a 03                	push   $0x3
  2847cf:	6a 03                	push   $0x3
  2847d1:	ff 75 08             	pushl  0x8(%ebp)
  2847d4:	e8 3d e0 ff ff       	call   282816 <sheet_refresh>
	return;
  2847d9:	83 c4 20             	add    $0x20,%esp
}
  2847dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2847df:	5b                   	pop    %ebx
  2847e0:	5e                   	pop    %esi
  2847e1:	5f                   	pop    %edi
  2847e2:	5d                   	pop    %ebp
  2847e3:	c3                   	ret    

002847e4 <keywin_off>:
#include "common.h"
#include "graphics.h"
#include "memory.h"
#include "task_console.h"
void keywin_off(struct SHEET *key_win)
{
  2847e4:	55                   	push   %ebp
  2847e5:	89 e5                	mov    %esp,%ebp
  2847e7:	53                   	push   %ebx
  2847e8:	83 ec 0c             	sub    $0xc,%esp
  2847eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  2847ee:	6a 00                	push   $0x0
  2847f0:	53                   	push   %ebx
  2847f1:	e8 28 ff ff ff       	call   28471e <change_wtitle8>
	if((key_win->flags & 0x20))
  2847f6:	83 c4 10             	add    $0x10,%esp
  2847f9:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  2847fd:	74 14                	je     284813 <keywin_off+0x2f>
	{
		fifo32_put(&key_win->task->fifo,3);
  2847ff:	83 ec 08             	sub    $0x8,%esp
  284802:	6a 03                	push   $0x3
  284804:	8b 43 24             	mov    0x24(%ebx),%eax
  284807:	83 c0 10             	add    $0x10,%eax
  28480a:	50                   	push   %eax
  28480b:	e8 d9 d2 ff ff       	call   281ae9 <fifo32_put>
  284810:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284813:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284816:	c9                   	leave  
  284817:	c3                   	ret    

00284818 <keywin_on>:

void keywin_on(struct SHEET *key_win)
{
  284818:	55                   	push   %ebp
  284819:	89 e5                	mov    %esp,%ebp
  28481b:	53                   	push   %ebx
  28481c:	83 ec 0c             	sub    $0xc,%esp
  28481f:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  284822:	6a 01                	push   $0x1
  284824:	53                   	push   %ebx
  284825:	e8 f4 fe ff ff       	call   28471e <change_wtitle8>
	if((key_win->flags & 0x20))
  28482a:	83 c4 10             	add    $0x10,%esp
  28482d:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  284831:	74 14                	je     284847 <keywin_on+0x2f>
	{
		fifo32_put(&key_win->task->fifo,2);
  284833:	83 ec 08             	sub    $0x8,%esp
  284836:	6a 02                	push   $0x2
  284838:	8b 43 24             	mov    0x24(%ebx),%eax
  28483b:	83 c0 10             	add    $0x10,%eax
  28483e:	50                   	push   %eax
  28483f:	e8 a5 d2 ff ff       	call   281ae9 <fifo32_put>
  284844:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284847:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28484a:	c9                   	leave  
  28484b:	c3                   	ret    

0028484c <open_console>:
	sheet_refresh(sht,3,3,xsize,21);
	return;
}

struct SHEET *open_console(struct SHTCTL *shtctl,unsigned int memtotal)
{
  28484c:	55                   	push   %ebp
  28484d:	89 e5                	mov    %esp,%ebp
  28484f:	57                   	push   %edi
  284850:	56                   	push   %esi
  284851:	53                   	push   %ebx
  284852:	83 ec 18             	sub    $0x18,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct SHEET *sht = sheet_alloc(shtctl);
  284855:	ff 75 08             	pushl  0x8(%ebp)
  284858:	e8 ff da ff ff       	call   28235c <sheet_alloc>
  28485d:	89 c6                	mov    %eax,%esi
	unsigned char *buf = (unsigned char *)memman_alloc_4k(memman,256*165);
  28485f:	83 c4 08             	add    $0x8,%esp
  284862:	68 00 a5 00 00       	push   $0xa500
  284867:	68 00 00 3c 00       	push   $0x3c0000
  28486c:	e8 fc d9 ff ff       	call   28226d <memman_alloc_4k>
  284871:	89 c7                	mov    %eax,%edi
	struct TASK *task = task_alloc();
  284873:	e8 50 e4 ff ff       	call   282cc8 <task_alloc>
  284878:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht,buf,256,165,-1);
  28487a:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  284881:	68 a5 00 00 00       	push   $0xa5
  284886:	68 00 01 00 00       	push   $0x100
  28488b:	57                   	push   %edi
  28488c:	56                   	push   %esi
  28488d:	e8 3d db ff ff       	call   2823cf <sheet_setbuf>
	make_window8(buf,256,165,"console",0);
  284892:	83 c4 14             	add    $0x14,%esp
  284895:	6a 00                	push   $0x0
  284897:	68 52 4d 28 00       	push   $0x284d52
  28489c:	68 a5 00 00 00       	push   $0xa5
  2848a1:	68 00 01 00 00       	push   $0x100
  2848a6:	57                   	push   %edi
  2848a7:	e8 36 c6 ff ff       	call   280ee2 <make_window8>
	make_textbox8(sht,8,28,240,128,COL8_000000);
  2848ac:	83 c4 18             	add    $0x18,%esp
  2848af:	6a 00                	push   $0x0
  2848b1:	68 80 00 00 00       	push   $0x80
  2848b6:	68 f0 00 00 00       	push   $0xf0
  2848bb:	6a 1c                	push   $0x1c
  2848bd:	6a 08                	push   $0x8
  2848bf:	56                   	push   %esi
  2848c0:	e8 e0 c7 ff ff       	call   2810a5 <make_textbox8>
	task->tss.esp = memman_alloc_4k(memman,64*1024)+64*1024-12;
  2848c5:	83 c4 18             	add    $0x18,%esp
  2848c8:	68 00 00 01 00       	push   $0x10000
  2848cd:	68 00 00 3c 00       	push   $0x3c0000
  2848d2:	e8 96 d9 ff ff       	call   28226d <memman_alloc_4k>
  2848d7:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
  2848dd:	89 53 64             	mov    %edx,0x64(%ebx)
	task->tss.eip = (int)&console_task - 0x280000;
  2848e0:	c7 43 4c 6b 31 00 00 	movl   $0x316b,0x4c(%ebx)
	task->tss.es = 1*8;
  2848e7:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	task->tss.cs = 3*8;
  2848ee:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	task->tss.ss = 1*8;
  2848f5:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	task->tss.ds = 1*8;
  2848fc:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  284903:	00 00 00 
	task->tss.fs = 1*8;
  284906:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28490d:	00 00 00 
	task->tss.gs = 1*8;
  284910:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  284917:	00 00 00 
	*((int *)(task->tss.esp + 4)) = sht;
  28491a:	89 b0 f8 ff 00 00    	mov    %esi,0xfff8(%eax)
	*((int *)(task->tss.esp + 8)) = memtotal;
  284920:	8b 43 64             	mov    0x64(%ebx),%eax
  284923:	8b 55 0c             	mov    0xc(%ebp),%edx
  284926:	89 50 08             	mov    %edx,0x8(%eax)
	task_run(task,2,2);
  284929:	83 c4 0c             	add    $0xc,%esp
  28492c:	6a 02                	push   $0x2
  28492e:	6a 02                	push   $0x2
  284930:	53                   	push   %ebx
  284931:	e8 81 e5 ff ff       	call   282eb7 <task_run>
	sht->task = task;
  284936:	89 5e 24             	mov    %ebx,0x24(%esi)
	sht->flags |= 0x20;
  284939:	83 4e 1c 20          	orl    $0x20,0x1c(%esi)
	int *cons_fifo = memman_alloc_4k(memman,128*4);
  28493d:	83 c4 08             	add    $0x8,%esp
  284940:	68 00 02 00 00       	push   $0x200
  284945:	68 00 00 3c 00       	push   $0x3c0000
  28494a:	e8 1e d9 ff ff       	call   28226d <memman_alloc_4k>
	fifo32_init(&task->fifo,128,cons_fifo,task);
  28494f:	53                   	push   %ebx
  284950:	50                   	push   %eax
  284951:	68 80 00 00 00       	push   $0x80
  284956:	83 c3 10             	add    $0x10,%ebx
  284959:	53                   	push   %ebx
  28495a:	e8 59 d1 ff ff       	call   281ab8 <fifo32_init>
	return sht;
}
  28495f:	89 f0                	mov    %esi,%eax
  284961:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284964:	5b                   	pop    %ebx
  284965:	5e                   	pop    %esi
  284966:	5f                   	pop    %edi
  284967:	5d                   	pop    %ebp
  284968:	c3                   	ret    

00284969 <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  284969:	55                   	push   %ebp
  28496a:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  28496c:	8b 45 0c             	mov    0xc(%ebp),%eax
  28496f:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  284973:	5d                   	pop    %ebp
  284974:	c3                   	ret    
