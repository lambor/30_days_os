
main.out.o：     文件格式 elf32-i386


Disassembly of section .text:

00280000 <bootmain>:
#include "header.h"


int bootmain()
{
  280000:	55                   	push   %ebp
	//the buf for all strings.
	char s[50] = {0};
  280001:	31 c0                	xor    %eax,%eax
  280003:	b9 32 00 00 00       	mov    $0x32,%ecx
#include "header.h"


int bootmain()
{
  280008:	89 e5                	mov    %esp,%ebp
  28000a:	57                   	push   %edi
  28000b:	56                   	push   %esi
	//the buf for all strings.
	char s[50] = {0};
  28000c:	8d bd 36 fc ff ff    	lea    -0x3ca(%ebp),%edi
#include "header.h"


int bootmain()
{
  280012:	53                   	push   %ebx
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280013:	8d 9d fc fb ff ff    	lea    -0x404(%ebp),%ebx
	fifo32_init(&keycmd,32,keycmd_buf,0);
  280019:	8d b5 18 fc ff ff    	lea    -0x3e8(%ebp),%esi
#include "header.h"


int bootmain()
{
  28001f:	81 ec 6c 04 00 00    	sub    $0x46c,%esp
	//the buf for all strings.
	char s[50] = {0};
  280025:	f3 aa                	rep stos %al,%es:(%edi)
	struct BOOTINFO *binfo = (struct BOOTINFO *)0xff0;

	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
  280027:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  28002d:	6a 00                	push   $0x0
  28002f:	50                   	push   %eax
  280030:	68 80 00 00 00       	push   $0x80
  280035:	53                   	push   %ebx
  280036:	e8 fd 1a 00 00       	call   281b38 <fifo32_init>
	fifo32_init(&keycmd,32,keycmd_buf,0);
  28003b:	8d 85 68 fc ff ff    	lea    -0x398(%ebp),%eax
  280041:	6a 00                	push   $0x0
  280043:	50                   	push   %eax
  280044:	6a 20                	push   $0x20
  280046:	56                   	push   %esi
  280047:	e8 ec 1a 00 00       	call   281b38 <fifo32_init>
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  28004c:	a0 f1 0f 00 00       	mov    0xff1,%al

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  280051:	83 c4 18             	add    $0x18,%esp
	//init fifo and keycmd fifo
	struct FIFO32 fifo,keycmd;
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;
  280054:	89 1d ec 0f 00 00    	mov    %ebx,0xfec

	int key_leds = (binfo->leds>>4)&7;

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28005a:	68 ed 00 00 00       	push   $0xed
  28005f:	56                   	push   %esi
	int fifobuf[128], keycmd_buf[32];
	fifo32_init(&fifo,128,fifobuf,0);
	fifo32_init(&keycmd,32,keycmd_buf,0);
	*((int *)0x0fec) = (int) &fifo;

	int key_leds = (binfo->leds>>4)&7;
  280060:	c0 f8 04             	sar    $0x4,%al
  280063:	83 e0 07             	and    $0x7,%eax
  280066:	89 85 cc fb ff ff    	mov    %eax,-0x434(%ebp)

	//init with the keyboard led status
	fifo32_put(&keycmd,KEYCMD_LED);
  28006c:	e8 f8 1a 00 00       	call   281b69 <fifo32_put>
	fifo32_put(&keycmd,key_leds);
  280071:	59                   	pop    %ecx
  280072:	5f                   	pop    %edi
  280073:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280079:	56                   	push   %esi
  28007a:	e8 ea 1a 00 00       	call   281b69 <fifo32_put>

	//init gdt idt pic and enable cpu interrupt
	init_gdtidt();
  28007f:	e8 11 14 00 00       	call   281495 <init_gdtidt>
	init_pic();
  280084:	e8 d0 15 00 00       	call   281659 <init_pic>
	io_sti();
  280089:	e8 e6 09 00 00       	call   280a74 <io_sti>

	//init keyboard and mouse
	init_keyboard(&fifo,256);
  28008e:	58                   	pop    %eax
  28008f:	5a                   	pop    %edx
  280090:	68 00 01 00 00       	push   $0x100
  280095:	53                   	push   %ebx
  280096:	e8 d7 1c 00 00       	call   281d72 <init_keyboard>
	struct MOUSE_DEC mdec;
	enable_mouse(&fifo,512,&mdec);
  28009b:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  2800a1:	83 c4 0c             	add    $0xc,%esp
  2800a4:	50                   	push   %eax
  2800a5:	68 00 02 00 00       	push   $0x200
  2800aa:	53                   	push   %ebx
  2800ab:	e8 74 1b 00 00       	call   281c24 <enable_mouse>

	//init timer
	init_pit();
  2800b0:	e8 db 29 00 00       	call   282a90 <init_pit>

	io_out8(PIC0_IMR,0xf8);
  2800b5:	59                   	pop    %ecx
  2800b6:	5f                   	pop    %edi
  2800b7:	68 f8 00 00 00       	push   $0xf8
  2800bc:	6a 21                	push   $0x21
  2800be:	e8 e3 09 00 00       	call   280aa6 <io_out8>
	io_out8(PIC1_IMR,0xef);
  2800c3:	58                   	pop    %eax
  2800c4:	5a                   	pop    %edx
  2800c5:	68 ef 00 00 00       	push   $0xef
  2800ca:	68 a1 00 00 00       	push   $0xa1
  2800cf:	e8 d2 09 00 00       	call   280aa6 <io_out8>

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800d4:	59                   	pop    %ecx
  2800d5:	5f                   	pop    %edi
  2800d6:	68 ff ff ff bf       	push   $0xbfffffff
  2800db:	68 00 00 40 00       	push   $0x400000
  2800e0:	e8 27 1d 00 00       	call   281e0c <memtest>
	memman_init(memman);
  2800e5:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
	io_out8(PIC1_IMR,0xef);

	//init memory manager
	unsigned int memtotal,count = 0;
	struct MEMMAN *memman  = (struct MEMMAN *)MEMMAN_ADDR;
	memtotal = memtest(0x00400000,0xbfffffff);
  2800ec:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%ebp)
	memman_init(memman);
  2800f2:	e8 54 1e 00 00       	call   281f4b <memman_init>
	//init memman with two mem block:0x00001000-0x0009efff and 0x00400000-memtotal
	memman_free(memman,0x00001000,0x0009e000);
  2800f7:	83 c4 0c             	add    $0xc,%esp
  2800fa:	68 00 e0 09 00       	push   $0x9e000
  2800ff:	68 00 10 00 00       	push   $0x1000
  280104:	68 00 00 3c 00       	push   $0x3c0000
  280109:	e8 8c 1f 00 00       	call   28209a <memman_free>
	memman_free(memman,0x00400000,memtotal-0x00400000);
  28010e:	8b 85 a4 fb ff ff    	mov    -0x45c(%ebp),%eax
  280114:	83 c4 0c             	add    $0xc,%esp
  280117:	2d 00 00 40 00       	sub    $0x400000,%eax
  28011c:	50                   	push   %eax
  28011d:	68 00 00 40 00       	push   $0x400000
  280122:	68 00 00 3c 00       	push   $0x3c0000
  280127:	e8 6e 1f 00 00       	call   28209a <memman_free>
	struct SHTCTL *shtctl;
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
  28012c:	e8 aa 0a 00 00       	call   280bdb <init_palette>
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280131:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280138:	50                   	push   %eax
  280139:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  280140:	50                   	push   %eax
  280141:	ff 35 f8 0f 00 00    	pushl  0xff8
  280147:	68 00 00 3c 00       	push   $0x3c0000
  28014c:	e8 f7 21 00 00       	call   282348 <shtctl_init>
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  280151:	83 c4 14             	add    $0x14,%esp
	struct SHEET *sht_bg, *sht_mouse;
	unsigned char *buf_bg,buf_mouse[256];
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
  280154:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%ebp)
	*((int *)0x0fe4) = (int)shtctl;
  28015a:	a3 e4 0f 00 00       	mov    %eax,0xfe4
	task_a = task_init(memman); //main task
  28015f:	68 00 00 3c 00       	push   $0x3c0000
  280164:	e8 6e 2e 00 00       	call   282fd7 <task_init>
	fifo.task = task_a;
	task_run(task_a,1,0);
  280169:	83 c4 0c             	add    $0xc,%esp
	struct TASK *task_a;

	init_palette();
	shtctl = shtctl_init(memman,binfo->vram,binfo->scrnx,binfo->scrny);
	*((int *)0x0fe4) = (int)shtctl;
	task_a = task_init(memman); //main task
  28016c:	89 85 a0 fb ff ff    	mov    %eax,-0x460(%ebp)
	fifo.task = task_a;
  280172:	89 85 14 fc ff ff    	mov    %eax,-0x3ec(%ebp)
	task_run(task_a,1,0);
  280178:	6a 00                	push   $0x0
  28017a:	6a 01                	push   $0x1
  28017c:	50                   	push   %eax
  28017d:	e8 c2 2d 00 00       	call   282f44 <task_run>

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
  280182:	58                   	pop    %eax
  280183:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  280189:	e8 4e 22 00 00       	call   2823dc <sheet_alloc>
  28018e:	89 85 b0 fb ff ff    	mov    %eax,-0x450(%ebp)
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
  280194:	58                   	pop    %eax
  280195:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  28019c:	5a                   	pop    %edx
  28019d:	0f bf 15 f4 0f 00 00 	movswl 0xff4,%edx
  2801a4:	0f af c2             	imul   %edx,%eax
  2801a7:	50                   	push   %eax
  2801a8:	68 00 00 3c 00       	push   $0x3c0000
  2801ad:	e8 3b 21 00 00       	call   2822ed <memman_alloc_4k>
  2801b2:	89 c7                	mov    %eax,%edi
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
  2801b4:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801bb:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  2801c2:	50                   	push   %eax
  2801c3:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801ca:	50                   	push   %eax
  2801cb:	57                   	push   %edi
  2801cc:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2801d2:	e8 78 22 00 00       	call   28244f <sheet_setbuf>
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801d7:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  2801de:	83 c4 1c             	add    $0x1c,%esp
  2801e1:	50                   	push   %eax
  2801e2:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2801e9:	50                   	push   %eax
  2801ea:	57                   	push   %edi

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  2801eb:	8d bd e8 fc ff ff    	lea    -0x318(%ebp),%edi

	//desktop sheet
	sht_bg = sheet_alloc(shtctl);
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);
  2801f1:	e8 db 0a 00 00       	call   280cd1 <init_screen8>

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  2801f6:	59                   	pop    %ecx
  2801f7:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2801fd:	e8 da 21 00 00       	call   2823dc <sheet_alloc>
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280202:	c7 04 24 63 00 00 00 	movl   $0x63,(%esp)
  280209:	6a 10                	push   $0x10
  28020b:	6a 10                	push   $0x10
  28020d:	57                   	push   %edi
  28020e:	50                   	push   %eax
	buf_bg = (unsigned char *)memman_alloc_4k(memman,binfo->scrnx*binfo->scrny);
	sheet_setbuf(sht_bg,buf_bg,binfo->scrnx,binfo->scrny,-1);
	init_screen8(buf_bg,binfo->scrnx,binfo->scrny);

	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
  28020f:	89 85 ac fb ff ff    	mov    %eax,-0x454(%ebp)
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
  280215:	e8 35 22 00 00       	call   28244f <sheet_setbuf>
	init_mouse_cursor8(buf_mouse,99);
  28021a:	83 c4 18             	add    $0x18,%esp
  28021d:	6a 63                	push   $0x63
  28021f:	57                   	push   %edi
  280220:	e8 1b 0c 00 00       	call   280e40 <init_mouse_cursor8>
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280225:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  28022c:	b9 02 00 00 00       	mov    $0x2,%ecx
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280231:	5f                   	pop    %edi
	//mouse sheet
	sht_mouse = sheet_alloc(shtctl);
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
  280232:	83 e8 10             	sub    $0x10,%eax
  280235:	99                   	cltd   
  280236:	f7 f9                	idiv   %ecx
  280238:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
	int my = (binfo->scrny-28-16)/2;
  28023e:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
  280245:	83 e8 2c             	sub    $0x2c,%eax
  280248:	99                   	cltd   
  280249:	f7 f9                	idiv   %ecx
  28024b:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
	//init window focus
	key_win = open_console(shtctl,memtotal);
  280251:	58                   	pop    %eax
  280252:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  280258:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  28025e:	e8 ab 3c 00 00       	call   283f0e <open_console>
  280263:	89 c7                	mov    %eax,%edi
	keywin_on(key_win);
  280265:	89 04 24             	mov    %eax,(%esp)
  280268:	e8 6b 49 00 00       	call   284bd8 <keywin_on>

	sheet_slide(sht_bg,0,0);
  28026d:	83 c4 0c             	add    $0xc,%esp
  280270:	6a 00                	push   $0x0
  280272:	6a 00                	push   $0x0
  280274:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  28027a:	e8 34 27 00 00       	call   2829b3 <sheet_slide>
	sheet_slide(key_win,32,4);
  28027f:	83 c4 0c             	add    $0xc,%esp
  280282:	6a 04                	push   $0x4
  280284:	6a 20                	push   $0x20
  280286:	57                   	push   %edi
  280287:	e8 27 27 00 00       	call   2829b3 <sheet_slide>
	sheet_slide(sht_mouse,mx,my);
  28028c:	83 c4 0c             	add    $0xc,%esp
  28028f:	ff b5 d0 fb ff ff    	pushl  -0x430(%ebp)
  280295:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  28029b:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802a1:	e8 0d 27 00 00       	call   2829b3 <sheet_slide>
	sheet_updown(sht_bg,		0);
  2802a6:	58                   	pop    %eax
  2802a7:	5a                   	pop    %edx
  2802a8:	6a 00                	push   $0x0
  2802aa:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2802b0:	e8 15 26 00 00       	call   2828ca <sheet_updown>
	sheet_updown(key_win,1);
  2802b5:	59                   	pop    %ecx
  2802b6:	58                   	pop    %eax
  2802b7:	6a 01                	push   $0x1
  2802b9:	57                   	push   %edi
  2802ba:	e8 0b 26 00 00       	call   2828ca <sheet_updown>
	sheet_updown(sht_mouse,		2);
  2802bf:	58                   	pop    %eax
  2802c0:	5a                   	pop    %edx
  2802c1:	6a 02                	push   $0x2
  2802c3:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2802c9:	e8 fc 25 00 00       	call   2828ca <sheet_updown>
  2802ce:	83 c4 10             	add    $0x10,%esp

	extern struct TIMERCTL timerctl;
	
	int key_shift = 0,keycmd_wait = -1;
  2802d1:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  2802d8:	ff ff ff 
  2802db:	c7 85 c8 fb ff ff 00 	movl   $0x0,-0x438(%ebp)
  2802e2:	00 00 00 
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;

	//console sheet
	struct SHEET *key_win,*sht = 0;
  2802e5:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%ebp)
  2802ec:	00 00 00 
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
	int new_mx = -1,new_my = 0,new_wx = 0x7fffffff,new_wy=0;
  2802ef:	c7 85 b4 fb ff ff 00 	movl   $0x0,-0x44c(%ebp)
  2802f6:	00 00 00 
  2802f9:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280300:	ff ff 7f 
  280303:	c7 85 dc fb ff ff 00 	movl   $0x0,-0x424(%ebp)
  28030a:	00 00 00 
  28030d:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  280314:	ff ff ff 
	sheet_setbuf(sht_mouse,buf_mouse,16,16,99);
	init_mouse_cursor8(buf_mouse,99);
	//mouse pos
	int mx = (binfo->scrnx-16)/2;
	int my = (binfo->scrny-28-16)/2;
	int x,y,mmx = -1,mmy = -1,mmx2 = 0;
  280317:	c7 85 9c fb ff ff 00 	movl   $0x0,-0x464(%ebp)
  28031e:	00 00 00 
  280321:	c7 85 a8 fb ff ff ff 	movl   $0xffffffff,-0x458(%ebp)
  280328:	ff ff ff 
  28032b:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  280332:	ff ff ff 
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280335:	89 b5 c4 fb ff ff    	mov    %esi,-0x43c(%ebp)
			keycmd_wait = fifo32_get(&keycmd);
			wait_KBC_sendready();
			io_out8(PORT_KEYDAT,keycmd_wait);
		}
		io_cli();
		if(fifo32_status(&fifo) == 0)
  28033b:	89 9d 98 fb ff ff    	mov    %ebx,-0x468(%ebp)
	
	int key_shift = 0,keycmd_wait = -1;

	for(;;)
	{
		if(fifo32_status(&keycmd) > 0 && keycmd_wait < 0)
  280341:	83 ec 0c             	sub    $0xc,%esp
  280344:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28034a:	e8 c7 18 00 00       	call   281c16 <fifo32_status>
  28034f:	8b 8d b8 fb ff ff    	mov    -0x448(%ebp),%ecx
  280355:	83 c4 10             	add    $0x10,%esp
  280358:	c1 e9 1f             	shr    $0x1f,%ecx
  28035b:	74 2f                	je     28038c <bootmain+0x38c>
  28035d:	85 c0                	test   %eax,%eax
  28035f:	7e 2b                	jle    28038c <bootmain+0x38c>
		{
			keycmd_wait = fifo32_get(&keycmd);
  280361:	83 ec 0c             	sub    $0xc,%esp
  280364:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  28036a:	e8 6c 18 00 00       	call   281bdb <fifo32_get>
  28036f:	89 85 b8 fb ff ff    	mov    %eax,-0x448(%ebp)
			wait_KBC_sendready();
  280375:	e8 df 19 00 00       	call   281d59 <wait_KBC_sendready>
			io_out8(PORT_KEYDAT,keycmd_wait);
  28037a:	58                   	pop    %eax
  28037b:	5a                   	pop    %edx
  28037c:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  280382:	6a 60                	push   $0x60
  280384:	e8 1d 07 00 00       	call   280aa6 <io_out8>
  280389:	83 c4 10             	add    $0x10,%esp
		}
		io_cli();
  28038c:	e8 e1 06 00 00       	call   280a72 <io_cli>
		if(fifo32_status(&fifo) == 0)
  280391:	83 ec 0c             	sub    $0xc,%esp
  280394:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  28039a:	e8 77 18 00 00       	call   281c16 <fifo32_status>
  28039f:	83 c4 10             	add    $0x10,%esp
  2803a2:	85 c0                	test   %eax,%eax
  2803a4:	0f 85 86 00 00 00    	jne    280430 <bootmain+0x430>
		{	
			if(new_mx >= 0)
  2803aa:	83 bd e0 fb ff ff 00 	cmpl   $0x0,-0x420(%ebp)
  2803b1:	78 2f                	js     2803e2 <bootmain+0x3e2>
			{
				io_sti();
  2803b3:	e8 bc 06 00 00       	call   280a74 <io_sti>
				sheet_slide(sht_mouse,new_mx,new_my);
  2803b8:	50                   	push   %eax
  2803b9:	ff b5 dc fb ff ff    	pushl  -0x424(%ebp)
  2803bf:	ff b5 e0 fb ff ff    	pushl  -0x420(%ebp)
  2803c5:	ff b5 ac fb ff ff    	pushl  -0x454(%ebp)
  2803cb:	e8 e3 25 00 00       	call   2829b3 <sheet_slide>
  2803d0:	83 c4 10             	add    $0x10,%esp
				new_mx = -1;
  2803d3:	c7 85 e0 fb ff ff ff 	movl   $0xffffffff,-0x420(%ebp)
  2803da:	ff ff ff 
  2803dd:	e9 5f ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else if(new_wx!=0x7fffffff)
  2803e2:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2803e9:	ff ff 7f 
  2803ec:	74 2f                	je     28041d <bootmain+0x41d>
			{
				io_sti();
  2803ee:	e8 81 06 00 00       	call   280a74 <io_sti>
				sheet_slide(sht,new_wx,new_wy);
  2803f3:	50                   	push   %eax
  2803f4:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2803fa:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  280400:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280406:	e8 a8 25 00 00       	call   2829b3 <sheet_slide>
  28040b:	83 c4 10             	add    $0x10,%esp
				new_wx = 0x7fffffff;
  28040e:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280415:	ff ff 7f 
  280418:	e9 24 ff ff ff       	jmp    280341 <bootmain+0x341>
			}
			else
			{
				task_sleep(task_a);
  28041d:	83 ec 0c             	sub    $0xc,%esp
  280420:	ff b5 a0 fb ff ff    	pushl  -0x460(%ebp)
  280426:	e8 96 2d 00 00       	call   2831c1 <task_sleep>
  28042b:	e9 7e 02 00 00       	jmp    2806ae <bootmain+0x6ae>
				io_sti();
			}
		}
		else
		{
			int i = fifo32_get(&fifo);
  280430:	83 ec 0c             	sub    $0xc,%esp
  280433:	ff b5 98 fb ff ff    	pushl  -0x468(%ebp)
  280439:	e8 9d 17 00 00       	call   281bdb <fifo32_get>
  28043e:	89 c6                	mov    %eax,%esi
			io_sti();
  280440:	e8 2f 06 00 00       	call   280a74 <io_sti>
			if(key_win != 0 && key_win->flags == 0) //key_win already closed
  280445:	83 c4 10             	add    $0x10,%esp
  280448:	85 ff                	test   %edi,%edi
  28044a:	74 2c                	je     280478 <bootmain+0x478>
  28044c:	83 7f 1c 00          	cmpl   $0x0,0x1c(%edi)
  280450:	75 26                	jne    280478 <bootmain+0x478>
			{
				if(shtctl->top == 1)
  280452:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280458:	31 ff                	xor    %edi,%edi
  28045a:	8b 40 10             	mov    0x10(%eax),%eax
  28045d:	83 f8 01             	cmp    $0x1,%eax
  280460:	74 16                	je     280478 <bootmain+0x478>
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  280462:	8b 8d d8 fb ff ff    	mov    -0x428(%ebp),%ecx
					keywin_on(key_win);
  280468:	83 ec 0c             	sub    $0xc,%esp
				{
					key_win = 0;
				}
				else
				{
					key_win = shtctl->sheets[shtctl->top - 1];
  28046b:	8b 7c 81 10          	mov    0x10(%ecx,%eax,4),%edi
					keywin_on(key_win);
  28046f:	57                   	push   %edi
  280470:	e8 63 47 00 00       	call   284bd8 <keywin_on>
  280475:	83 c4 10             	add    $0x10,%esp
				}
			}
			if(256<=i && i<=511)
  280478:	8d 9e 00 ff ff ff    	lea    -0x100(%esi),%ebx
  28047e:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  280484:	0f 87 bf 02 00 00    	ja     280749 <bootmain+0x749>
			{
				xtoa(i-256,s);
  28048a:	50                   	push   %eax
  28048b:	50                   	push   %eax
  28048c:	8d 85 36 fc ff ff    	lea    -0x3ca(%ebp),%eax
  280492:	50                   	push   %eax
  280493:	53                   	push   %ebx
  280494:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  28049a:	e8 47 14 00 00       	call   2818e6 <xtoa>
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);
  28049f:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
  2804a5:	83 c4 0c             	add    $0xc,%esp
  2804a8:	6a 04                	push   $0x4
  2804aa:	50                   	push   %eax
  2804ab:	6a 00                	push   $0x0
  2804ad:	6a 07                	push   $0x7
  2804af:	6a 10                	push   $0x10
  2804b1:	6a 00                	push   $0x0
  2804b3:	ff b5 b0 fb ff ff    	pushl  -0x450(%ebp)
  2804b9:	e8 02 0c 00 00       	call   2810c0 <putfonts8_asc_sht>

				s[0] = key_char(i-256,key_shift);
  2804be:	83 c4 18             	add    $0x18,%esp
  2804c1:	ff b5 c8 fb ff ff    	pushl  -0x438(%ebp)
  2804c7:	53                   	push   %ebx
  2804c8:	e8 17 19 00 00       	call   281de4 <key_char>
				s[1] = 0;

				if('A' <= s[0] && s[0] <= 'Z')
  2804cd:	8d 50 bf             	lea    -0x41(%eax),%edx
  2804d0:	83 c4 10             	add    $0x10,%esp
			if(256<=i && i<=511)
			{
				xtoa(i-256,s);
				putfonts8_asc_sht(sht_bg,0,16,COL8_FFFFFF,COL8_000000,s,4);

				s[0] = key_char(i-256,key_shift);
  2804d3:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				s[1] = 0;
  2804d9:	c6 85 37 fc ff ff 00 	movb   $0x0,-0x3c9(%ebp)

				if('A' <= s[0] && s[0] <= 'Z')
  2804e0:	80 fa 19             	cmp    $0x19,%dl
  2804e3:	77 26                	ja     28050b <bootmain+0x50b>
				{
					if((key_leds&4) == 0 && key_shift != 0 ||	//keyboard led off and shift on
  2804e5:	f6 85 cc fb ff ff 04 	testb  $0x4,-0x434(%ebp)
  2804ec:	75 0b                	jne    2804f9 <bootmain+0x4f9>
  2804ee:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  2804f5:	75 0b                	jne    280502 <bootmain+0x502>
  2804f7:	eb 12                	jmp    28050b <bootmain+0x50b>
							(key_leds&4) != 0 && key_shift == 0)			//keyboard led on and shift off
  2804f9:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280500:	75 09                	jne    28050b <bootmain+0x50b>
						s[0] += 0x20;		//uppercase 2 lowercases					
  280502:	83 c0 20             	add    $0x20,%eax
  280505:	88 85 36 fc ff ff    	mov    %al,-0x3ca(%ebp)
				}
				if(s[0]!=0 && key_win != 0)//visible char,return key and back key
  28050b:	0f be 85 36 fc ff ff 	movsbl -0x3ca(%ebp),%eax
  280512:	85 ff                	test   %edi,%edi
  280514:	0f 95 c3             	setne  %bl
  280517:	84 c0                	test   %al,%al
  280519:	74 1b                	je     280536 <bootmain+0x536>
  28051b:	84 db                	test   %bl,%bl
  28051d:	74 17                	je     280536 <bootmain+0x536>
				{
					fifo32_put(&key_win->task->fifo,s[0]+256); //send key to console fifo
  28051f:	05 00 01 00 00       	add    $0x100,%eax
  280524:	51                   	push   %ecx
  280525:	51                   	push   %ecx
  280526:	50                   	push   %eax
  280527:	8b 47 24             	mov    0x24(%edi),%eax
  28052a:	83 c0 10             	add    $0x10,%eax
  28052d:	50                   	push   %eax
  28052e:	e8 36 16 00 00       	call   281b69 <fifo32_put>
  280533:	83 c4 10             	add    $0x10,%esp
				}
				if(i == 256 + 0x0f && key_win != 0) //tab key
  280536:	81 fe 0f 01 00 00    	cmp    $0x10f,%esi
  28053c:	75 39                	jne    280577 <bootmain+0x577>
  28053e:	84 db                	test   %bl,%bl
  280540:	74 35                	je     280577 <bootmain+0x577>
				{
					keywin_off(key_win);
  280542:	83 ec 0c             	sub    $0xc,%esp
  280545:	57                   	push   %edi
  280546:	e8 59 46 00 00       	call   284ba4 <keywin_off>
					int j=key_win->height - 1;
  28054b:	8b 47 18             	mov    0x18(%edi),%eax
					if(j==0)
  28054e:	83 c4 10             	add    $0x10,%esp
  280551:	48                   	dec    %eax
  280552:	75 10                	jne    280564 <bootmain+0x564>
					{
						j = shtctl->top-1;
  280554:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28055a:	8b 40 10             	mov    0x10(%eax),%eax
  28055d:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%ebp)
  280563:	48                   	dec    %eax
					}
					key_win = shtctl->sheets[j];
  280564:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
					keywin_on(key_win);
  28056a:	83 ec 0c             	sub    $0xc,%esp
					int j=key_win->height - 1;
					if(j==0)
					{
						j = shtctl->top-1;
					}
					key_win = shtctl->sheets[j];
  28056d:	8b 7c 82 14          	mov    0x14(%edx,%eax,4),%edi
					keywin_on(key_win);
  280571:	57                   	push   %edi
  280572:	e9 93 01 00 00       	jmp    28070a <bootmain+0x70a>
				}
				else if(i == 256 + 0x2a)  //left shift on
  280577:	81 fe 2a 01 00 00    	cmp    $0x12a,%esi
  28057d:	75 0c                	jne    28058b <bootmain+0x58b>
				{
					key_shift |= 1;
  28057f:	83 8d c8 fb ff ff 01 	orl    $0x1,-0x438(%ebp)
  280586:	e9 b6 fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0x36) //right shift on
  28058b:	81 fe 36 01 00 00    	cmp    $0x136,%esi
  280591:	75 0c                	jne    28059f <bootmain+0x59f>
				{
					key_shift |= 2;
  280593:	83 8d c8 fb ff ff 02 	orl    $0x2,-0x438(%ebp)
  28059a:	e9 a2 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xaa)  //left shift off
  28059f:	81 fe aa 01 00 00    	cmp    $0x1aa,%esi
  2805a5:	75 0c                	jne    2805b3 <bootmain+0x5b3>
				{
					key_shift &= ~1;
  2805a7:	83 a5 c8 fb ff ff fe 	andl   $0xfffffffe,-0x438(%ebp)
  2805ae:	e9 8e fd ff ff       	jmp    280341 <bootmain+0x341>
				} 
				else if(i == 256 + 0xb6) //right shift off
  2805b3:	81 fe b6 01 00 00    	cmp    $0x1b6,%esi
  2805b9:	75 0c                	jne    2805c7 <bootmain+0x5c7>
				{
					key_shift &= ~2;
  2805bb:	83 a5 c8 fb ff ff fd 	andl   $0xfffffffd,-0x438(%ebp)
  2805c2:	e9 7a fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0x3a) //CapsLock
  2805c7:	81 fe 3a 01 00 00    	cmp    $0x13a,%esi
  2805cd:	75 09                	jne    2805d8 <bootmain+0x5d8>
				{
					key_leds ^= 4;
  2805cf:	83 b5 cc fb ff ff 04 	xorl   $0x4,-0x434(%ebp)
  2805d6:	eb 20                	jmp    2805f8 <bootmain+0x5f8>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x45) //NumLock
  2805d8:	81 fe 45 01 00 00    	cmp    $0x145,%esi
  2805de:	75 09                	jne    2805e9 <bootmain+0x5e9>
				{
					key_leds ^= 2;
  2805e0:	83 b5 cc fb ff ff 02 	xorl   $0x2,-0x434(%ebp)
  2805e7:	eb 0f                	jmp    2805f8 <bootmain+0x5f8>
					fifo32_put(&keycmd,KEYCMD_LED);
					fifo32_put(&keycmd,key_leds);
				}
				else if(i == 256 + 0x46) //ScrollLock
  2805e9:	81 fe 46 01 00 00    	cmp    $0x146,%esi
  2805ef:	75 31                	jne    280622 <bootmain+0x622>
				{
					key_leds ^= 1;
  2805f1:	83 b5 cc fb ff ff 01 	xorl   $0x1,-0x434(%ebp)
					fifo32_put(&keycmd,KEYCMD_LED);
  2805f8:	50                   	push   %eax
  2805f9:	50                   	push   %eax
  2805fa:	68 ed 00 00 00       	push   $0xed
  2805ff:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280605:	e8 5f 15 00 00       	call   281b69 <fifo32_put>
					fifo32_put(&keycmd,key_leds);
  28060a:	58                   	pop    %eax
  28060b:	5a                   	pop    %edx
  28060c:	ff b5 cc fb ff ff    	pushl  -0x434(%ebp)
  280612:	ff b5 c4 fb ff ff    	pushl  -0x43c(%ebp)
  280618:	e8 4c 15 00 00       	call   281b69 <fifo32_put>
  28061d:	e9 38 04 00 00       	jmp    280a5a <bootmain+0xa5a>
				}
				else if(i == 256 + 0xfa)
  280622:	81 fe fa 01 00 00    	cmp    $0x1fa,%esi
  280628:	75 0f                	jne    280639 <bootmain+0x639>
				{
					keycmd_wait = -1;
  28062a:	c7 85 b8 fb ff ff ff 	movl   $0xffffffff,-0x448(%ebp)
  280631:	ff ff ff 
  280634:	e9 08 fd ff ff       	jmp    280341 <bootmain+0x341>
				}
				else if(i == 256 + 0xfe)
  280639:	81 fe fe 01 00 00    	cmp    $0x1fe,%esi
  28063f:	75 19                	jne    28065a <bootmain+0x65a>
				{
					wait_KBC_sendready();
  280641:	e8 13 17 00 00       	call   281d59 <wait_KBC_sendready>
					io_out8(PORT_KEYDAT,keycmd_wait);
  280646:	50                   	push   %eax
  280647:	50                   	push   %eax
  280648:	ff b5 b8 fb ff ff    	pushl  -0x448(%ebp)
  28064e:	6a 60                	push   $0x60
  280650:	e8 51 04 00 00       	call   280aa6 <io_out8>
  280655:	e9 00 04 00 00       	jmp    280a5a <bootmain+0xa5a>
				}
				else if(i == 256 + 0x3b && key_shift != 0 && key_win != 0)	//shift + F1
  28065a:	83 bd c8 fb ff ff 00 	cmpl   $0x0,-0x438(%ebp)
  280661:	0f 95 c0             	setne  %al
  280664:	81 fe 3b 01 00 00    	cmp    $0x13b,%esi
  28066a:	0f 94 c2             	sete   %dl
  28066d:	84 c2                	test   %al,%dl
  28066f:	74 47                	je     2806b8 <bootmain+0x6b8>
  280671:	84 db                	test   %bl,%bl
  280673:	74 43                	je     2806b8 <bootmain+0x6b8>
				{
					struct TASK *task = key_win->task;
  280675:	8b 5f 24             	mov    0x24(%edi),%ebx
					if(task!=0 && task->tss.ss0 != 0)
  280678:	85 db                	test   %ebx,%ebx
  28067a:	0f 84 c1 fc ff ff    	je     280341 <bootmain+0x341>
  280680:	83 7b 34 00          	cmpl   $0x0,0x34(%ebx)
  280684:	0f 84 b7 fc ff ff    	je     280341 <bootmain+0x341>
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
  28068a:	50                   	push   %eax
  28068b:	50                   	push   %eax
  28068c:	68 20 4c 28 00       	push   $0x284c20
  280691:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  280697:	e8 61 35 00 00       	call   283bfd <cons_putstr0>
						io_cli();
  28069c:	e8 d1 03 00 00       	call   280a72 <io_cli>
						task->tss.eax = (int)&(task->tss.esp0);
  2806a1:	8d 43 30             	lea    0x30(%ebx),%eax
						task->tss.eip = (int)asm_end_app - 0x280000;
  2806a4:	c7 43 4c 30 2d 00 00 	movl   $0x2d30,0x4c(%ebx)
					if(task!=0 && task->tss.ss0 != 0)
					{
						extern void asm_end_app();
						cons_putstr0(task->cons,"\nBreak(key):\n");
						io_cli();
						task->tss.eax = (int)&(task->tss.esp0);
  2806ab:	89 43 54             	mov    %eax,0x54(%ebx)
						task->tss.eip = (int)asm_end_app - 0x280000;
						io_sti();
  2806ae:	e8 c1 03 00 00       	call   280a74 <io_sti>
  2806b3:	e9 a2 03 00 00       	jmp    280a5a <bootmain+0xa5a>
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
  2806b8:	81 fe 3c 01 00 00    	cmp    $0x13c,%esi
  2806be:	75 54                	jne    280714 <bootmain+0x714>
  2806c0:	84 c0                	test   %al,%al
  2806c2:	74 50                	je     280714 <bootmain+0x714>
				{
					if(key_win != 0) keywin_off(key_win);
  2806c4:	85 ff                	test   %edi,%edi
  2806c6:	74 0c                	je     2806d4 <bootmain+0x6d4>
  2806c8:	83 ec 0c             	sub    $0xc,%esp
  2806cb:	57                   	push   %edi
  2806cc:	e8 d3 44 00 00       	call   284ba4 <keywin_off>
  2806d1:	83 c4 10             	add    $0x10,%esp
					key_win = open_console(shtctl,memtotal);
  2806d4:	51                   	push   %ecx
  2806d5:	51                   	push   %ecx
  2806d6:	ff b5 a4 fb ff ff    	pushl  -0x45c(%ebp)
  2806dc:	ff b5 d8 fb ff ff    	pushl  -0x428(%ebp)
  2806e2:	e8 27 38 00 00       	call   283f0e <open_console>
					sheet_slide(key_win,32,4);
  2806e7:	83 c4 0c             	add    $0xc,%esp
					}
				}
				else if(i == 256 + 0x3c && key_shift != 0)	//shift + F2 to open new console
				{
					if(key_win != 0) keywin_off(key_win);
					key_win = open_console(shtctl,memtotal);
  2806ea:	89 c7                	mov    %eax,%edi
					sheet_slide(key_win,32,4);
  2806ec:	6a 04                	push   $0x4
  2806ee:	6a 20                	push   $0x20
  2806f0:	50                   	push   %eax
  2806f1:	e8 bd 22 00 00       	call   2829b3 <sheet_slide>
					sheet_updown(key_win,shtctl->top);
  2806f6:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  2806fc:	5b                   	pop    %ebx
  2806fd:	5e                   	pop    %esi
  2806fe:	ff 70 10             	pushl  0x10(%eax)
  280701:	57                   	push   %edi
  280702:	e8 c3 21 00 00       	call   2828ca <sheet_updown>
					keywin_on(key_win);
  280707:	89 3c 24             	mov    %edi,(%esp)
  28070a:	e8 c9 44 00 00       	call   284bd8 <keywin_on>
  28070f:	e9 46 03 00 00       	jmp    280a5a <bootmain+0xa5a>
				}
				else if(i == 256 + 0x57 && shtctl->top > 2)
  280714:	81 fe 57 01 00 00    	cmp    $0x157,%esi
  28071a:	0f 85 21 fc ff ff    	jne    280341 <bootmain+0x341>
  280720:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280726:	8b 40 10             	mov    0x10(%eax),%eax
  280729:	83 f8 02             	cmp    $0x2,%eax
  28072c:	0f 8e 0f fc ff ff    	jle    280341 <bootmain+0x341>
				{
					//F11 to pop the bottom window
					sheet_updown(shtctl->sheets[1],shtctl->top - 1);
  280732:	48                   	dec    %eax
  280733:	52                   	push   %edx
  280734:	52                   	push   %edx
  280735:	50                   	push   %eax
  280736:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  28073c:	ff 70 18             	pushl  0x18(%eax)
  28073f:	e8 86 21 00 00       	call   2828ca <sheet_updown>
  280744:	e9 11 03 00 00       	jmp    280a5a <bootmain+0xa5a>
				}

			}
			else if(512<=i && i<=767)
  280749:	8d 86 00 fe ff ff    	lea    -0x200(%esi),%eax
  28074f:	3d ff 00 00 00       	cmp    $0xff,%eax
  280754:	0f 87 d6 02 00 00    	ja     280a30 <bootmain+0xa30>
			{
				if(mouse_decode(&mdec,i-512)!=0)
  28075a:	50                   	push   %eax
  28075b:	50                   	push   %eax
  28075c:	89 f0                	mov    %esi,%eax
  28075e:	0f b6 f0             	movzbl %al,%esi
  280761:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
  280767:	56                   	push   %esi
  280768:	50                   	push   %eax
  280769:	e8 00 15 00 00       	call   281c6e <mouse_decode>
  28076e:	83 c4 10             	add    $0x10,%esp
  280771:	85 c0                	test   %eax,%eax
  280773:	0f 84 c8 fb ff ff    	je     280341 <bootmain+0x341>
  280779:	31 c9                	xor    %ecx,%ecx
  28077b:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
  280781:	03 85 f0 fb ff ff    	add    -0x410(%ebp),%eax
  280787:	0f 48 c1             	cmovs  %ecx,%eax
  28078a:	89 85 e0 fb ff ff    	mov    %eax,-0x420(%ebp)
  280790:	8b 85 d0 fb ff ff    	mov    -0x430(%ebp),%eax
  280796:	03 85 f4 fb ff ff    	add    -0x40c(%ebp),%eax
  28079c:	0f 49 c8             	cmovns %eax,%ecx
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  28079f:	0f bf 05 f4 0f 00 00 	movswl 0xff4,%eax
  2807a6:	3b 85 e0 fb ff ff    	cmp    -0x420(%ebp),%eax
  2807ac:	8d 50 ff             	lea    -0x1(%eax),%edx
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807af:	0f bf 05 f6 0f 00 00 	movswl 0xff6,%eax
				{
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
  2807b6:	0f 4f 95 e0 fb ff ff 	cmovg  -0x420(%ebp),%edx
  2807bd:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%ebp)
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807c3:	8d 50 ff             	lea    -0x1(%eax),%edx
  2807c6:	39 c8                	cmp    %ecx,%eax
  2807c8:	0f 4f d1             	cmovg  %ecx,%edx
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807cb:	f6 85 f8 fb ff ff 01 	testb  $0x1,-0x408(%ebp)
					mx += mdec.x;
					my += mdec.y;
					if(mx<0) mx=0;
					if(my<0) my=0;
					if(mx>binfo->scrnx - 1) mx=binfo->scrnx-1;
					if(my>binfo->scrny - 1) my=binfo->scrny-1;
  2807d2:	89 95 dc fb ff ff    	mov    %edx,-0x424(%ebp)
					//sheet_slide(sht_mouse,mx,my);
					new_mx = mx;
					new_my = my;
					if(mdec.btn & 0x01)
  2807d8:	0f 84 e0 01 00 00    	je     2809be <bootmain+0x9be>
					{
						if(mmx < 0) 
  2807de:	83 bd bc fb ff ff 00 	cmpl   $0x0,-0x444(%ebp)
  2807e5:	0f 89 7f 01 00 00    	jns    28096a <bootmain+0x96a>
						{
							for(int j=shtctl->top-1;j>0;j--)
  2807eb:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  2807f1:	8b 40 10             	mov    0x10(%eax),%eax
  2807f4:	48                   	dec    %eax
  2807f5:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2807fb:	85 c0                	test   %eax,%eax
  2807fd:	0f 8e 5f 01 00 00    	jle    280962 <bootmain+0x962>
							{
								sht = shtctl->sheets[j];
  280803:	8b 95 d8 fb ff ff    	mov    -0x428(%ebp),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280809:	8b b5 e0 fb ff ff    	mov    -0x420(%ebp),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  28080f:	8b 54 82 14          	mov    0x14(%edx,%eax,4),%edx
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  280813:	2b 72 0c             	sub    0xc(%edx),%esi
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
							{
								sht = shtctl->sheets[j];
  280816:	89 95 e4 fb ff ff    	mov    %edx,-0x41c(%ebp)
								x = mx - sht->vx0;
								y = my - sht->vy0;
								if(x>=0 && x<sht->bxsize && y>=0 && y<sht->bysize)
  28081c:	0f 88 3a 01 00 00    	js     28095c <bootmain+0x95c>
  280822:	8b 9d dc fb ff ff    	mov    -0x424(%ebp),%ebx
  280828:	2b 5a 10             	sub    0x10(%edx),%ebx
  28082b:	8b 4a 04             	mov    0x4(%edx),%ecx
  28082e:	0f 88 28 01 00 00    	js     28095c <bootmain+0x95c>
  280834:	39 ce                	cmp    %ecx,%esi
  280836:	0f 8d 20 01 00 00    	jge    28095c <bootmain+0x95c>
  28083c:	3b 5a 08             	cmp    0x8(%edx),%ebx
  28083f:	0f 8d 17 01 00 00    	jge    28095c <bootmain+0x95c>
								{
									if(sht->buf[y*sht->bxsize+x] != sht->col_inv )
  280845:	8b 12                	mov    (%edx),%edx
  280847:	0f af cb             	imul   %ebx,%ecx
  28084a:	01 f2                	add    %esi,%edx
  28084c:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%ebp)
  280852:	89 d1                	mov    %edx,%ecx
  280854:	8b 95 d0 fb ff ff    	mov    -0x430(%ebp),%edx
  28085a:	0f b6 0c 11          	movzbl (%ecx,%edx,1),%ecx
  28085e:	8b 95 e4 fb ff ff    	mov    -0x41c(%ebp),%edx
  280864:	3b 4a 14             	cmp    0x14(%edx),%ecx
  280867:	0f 84 ef 00 00 00    	je     28095c <bootmain+0x95c>
									{
										sheet_updown(sht,shtctl->top-1);
  28086d:	50                   	push   %eax
  28086e:	50                   	push   %eax
  28086f:	ff b5 d4 fb ff ff    	pushl  -0x42c(%ebp)
  280875:	52                   	push   %edx
  280876:	e8 4f 20 00 00       	call   2828ca <sheet_updown>
										if(sht!=key_win)
  28087b:	83 c4 10             	add    $0x10,%esp
  28087e:	3b bd e4 fb ff ff    	cmp    -0x41c(%ebp),%edi
  280884:	74 18                	je     28089e <bootmain+0x89e>
										{
											keywin_off(key_win);
  280886:	83 ec 0c             	sub    $0xc,%esp
  280889:	57                   	push   %edi
  28088a:	e8 15 43 00 00       	call   284ba4 <keywin_off>
											key_win = sht;
											keywin_on(key_win);
  28088f:	5f                   	pop    %edi
  280890:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280896:	e8 3d 43 00 00       	call   284bd8 <keywin_on>
  28089b:	83 c4 10             	add    $0x10,%esp
  28089e:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
  2808a4:	83 fe 02             	cmp    $0x2,%esi
  2808a7:	8b 40 04             	mov    0x4(%eax),%eax
  2808aa:	7e 3f                	jle    2808eb <bootmain+0x8eb>
  2808ac:	8d 50 fd             	lea    -0x3(%eax),%edx
  2808af:	39 d6                	cmp    %edx,%esi
  2808b1:	7d 38                	jge    2808eb <bootmain+0x8eb>
  2808b3:	8d 53 fd             	lea    -0x3(%ebx),%edx
  2808b6:	83 fa 11             	cmp    $0x11,%edx
  2808b9:	77 30                	ja     2808eb <bootmain+0x8eb>
										{
											mmx = mx;
											mmy = my;
											mmx2 = sht->vx0;
  2808bb:	8b 8d e4 fb ff ff    	mov    -0x41c(%ebp),%ecx
  2808c1:	8b 79 0c             	mov    0xc(%ecx),%edi
  2808c4:	89 bd 9c fb ff ff    	mov    %edi,-0x464(%ebp)
											new_wy = sht->vy0;
  2808ca:	8b 79 10             	mov    0x10(%ecx),%edi
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
											mmy = my;
  2808cd:	8b 8d dc fb ff ff    	mov    -0x424(%ebp),%ecx
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
  2808d3:	89 bd b4 fb ff ff    	mov    %edi,-0x44c(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808d9:	8b bd e0 fb ff ff    	mov    -0x420(%ebp),%edi
											mmy = my;
  2808df:	89 8d a8 fb ff ff    	mov    %ecx,-0x458(%ebp)
											key_win = sht;
											keywin_on(key_win);
										}
										if(x>=3 && x<sht->bxsize-3 && y>=3 && y<21)
										{
											mmx = mx;
  2808e5:	89 bd bc fb ff ff    	mov    %edi,-0x444(%ebp)
											mmy = my;
											mmx2 = sht->vx0;
											new_wy = sht->vy0;
										}
										if(sht->bxsize - 21 <= x && x<sht->bxsize - 5 && y>=5 && y<19) //click the close button
  2808eb:	8d 50 eb             	lea    -0x15(%eax),%edx
  2808ee:	39 d6                	cmp    %edx,%esi
  2808f0:	7c 62                	jl     280954 <bootmain+0x954>
  2808f2:	83 e8 05             	sub    $0x5,%eax
  2808f5:	39 c6                	cmp    %eax,%esi
  2808f7:	7d 5b                	jge    280954 <bootmain+0x954>
  2808f9:	83 eb 05             	sub    $0x5,%ebx
  2808fc:	83 fb 0d             	cmp    $0xd,%ebx
  2808ff:	77 53                	ja     280954 <bootmain+0x954>
										{
											if(sht->flags & 0x10)
  280901:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
  280907:	f6 40 1c 10          	testb  $0x10,0x1c(%eax)
  28090b:	8b 58 24             	mov    0x24(%eax),%ebx
  28090e:	74 2a                	je     28093a <bootmain+0x93a>
											{
												if(sht->task != 0)
  280910:	85 db                	test   %ebx,%ebx
  280912:	74 40                	je     280954 <bootmain+0x954>
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
  280914:	51                   	push   %ecx
  280915:	51                   	push   %ecx
  280916:	68 2e 4c 28 00       	push   $0x284c2e
  28091b:	ff b3 94 00 00 00    	pushl  0x94(%ebx)
  280921:	e8 d7 32 00 00       	call   283bfd <cons_putstr0>
													io_cli();
  280926:	e8 47 01 00 00       	call   280a72 <io_cli>
													task->tss.eax = (int)&(task->tss.esp0);
  28092b:	8d 43 30             	lea    0x30(%ebx),%eax
													extern void asm_end_app();
													task->tss.eip = (int)&asm_end_app - 0x280000;
  28092e:	c7 43 4c 30 2d 00 00 	movl   $0x2d30,0x4c(%ebx)
												{
													struct TASK *task = sht->task;
													struct CONSOLE *cons = task->cons;
													cons_putstr0(cons,"\nBreak(mouse) :\n");
													io_cli();
													task->tss.eax = (int)&(task->tss.esp0);
  280935:	89 43 54             	mov    %eax,0x54(%ebx)
  280938:	eb 12                	jmp    28094c <bootmain+0x94c>
											}
											else
											{
												struct TASK *task = sht->task;
												io_cli();
												fifo32_put(&task->fifo,4);
  28093a:	83 c3 10             	add    $0x10,%ebx
												}
											}
											else
											{
												struct TASK *task = sht->task;
												io_cli();
  28093d:	e8 30 01 00 00       	call   280a72 <io_cli>
												fifo32_put(&task->fifo,4);
  280942:	52                   	push   %edx
  280943:	52                   	push   %edx
  280944:	6a 04                	push   $0x4
  280946:	53                   	push   %ebx
  280947:	e8 1d 12 00 00       	call   281b69 <fifo32_put>
												io_sti();
  28094c:	e8 23 01 00 00       	call   280a74 <io_sti>
  280951:	83 c4 10             	add    $0x10,%esp
  280954:	8b bd e4 fb ff ff    	mov    -0x41c(%ebp),%edi
  28095a:	eb 06                	jmp    280962 <bootmain+0x962>
					new_my = my;
					if(mdec.btn & 0x01)
					{
						if(mmx < 0) 
						{
							for(int j=shtctl->top-1;j>0;j--)
  28095c:	48                   	dec    %eax
  28095d:	e9 99 fe ff ff       	jmp    2807fb <bootmain+0x7fb>
  280962:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280968:	eb 3d                	jmp    2809a7 <bootmain+0x9a7>
						}
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
  28096a:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280970:	2b 85 bc fb ff ff    	sub    -0x444(%ebp),%eax
  280976:	8b 9d 9c fb ff ff    	mov    -0x464(%ebp),%ebx
  28097c:	8d 44 03 02          	lea    0x2(%ebx,%eax,1),%eax
  280980:	83 e0 fc             	and    $0xfffffffc,%eax
  280983:	89 85 c0 fb ff ff    	mov    %eax,-0x440(%ebp)
							new_wy = new_wy+y;
  280989:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  28098f:	2b 85 a8 fb ff ff    	sub    -0x458(%ebp),%eax
  280995:	01 85 b4 fb ff ff    	add    %eax,-0x44c(%ebp)
							//sheet_slide(sht,(mmx2+x+2)&~3,sht->vy0+y);
							mmy = my;
  28099b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809a1:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%ebp)
						else 
						{
							x = mx - mmx;
							y = my - mmy;
							new_wx = (mmx2+x+2)&~3;
							new_wy = new_wy+y;
  2809a7:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809ad:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809b3:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  2809b9:	e9 83 f9 ff ff       	jmp    280341 <bootmain+0x341>
						}
					}
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
  2809be:	81 bd c0 fb ff ff ff 	cmpl   $0x7fffffff,-0x440(%ebp)
  2809c5:	ff ff 7f 
  2809c8:	75 27                	jne    2809f1 <bootmain+0x9f1>
  2809ca:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  2809d0:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  2809d6:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  2809dc:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
							mmy = my;
						}
					}
					else
					{
						mmx = -1;
  2809e2:	c7 85 bc fb ff ff ff 	movl   $0xffffffff,-0x444(%ebp)
  2809e9:	ff ff ff 
  2809ec:	e9 50 f9 ff ff       	jmp    280341 <bootmain+0x341>
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  2809f1:	50                   	push   %eax
  2809f2:	ff b5 b4 fb ff ff    	pushl  -0x44c(%ebp)
  2809f8:	ff b5 c0 fb ff ff    	pushl  -0x440(%ebp)
  2809fe:	ff b5 e4 fb ff ff    	pushl  -0x41c(%ebp)
  280a04:	e8 aa 1f 00 00       	call   2829b3 <sheet_slide>
  280a09:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
  280a0f:	83 c4 10             	add    $0x10,%esp
							new_wx = 0x7fffffff;
  280a12:	c7 85 c0 fb ff ff ff 	movl   $0x7fffffff,-0x440(%ebp)
  280a19:	ff ff 7f 
					else
					{
						mmx = -1;
						if(new_wx != 0x7fffffff)
						{
							sheet_slide(sht,new_wx,new_wy);
  280a1c:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%ebp)
  280a22:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
  280a28:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%ebp)
  280a2e:	eb b2                	jmp    2809e2 <bootmain+0x9e2>
							new_wx = 0x7fffffff;
						}
					}
				}
			}
			else if(768<=i && i<=1023)
  280a30:	8d 86 00 fd ff ff    	lea    -0x300(%esi),%eax
  280a36:	3d ff 00 00 00       	cmp    $0xff,%eax
  280a3b:	0f 87 00 f9 ff ff    	ja     280341 <bootmain+0x341>
			{
				close_console(shtctl->sheets0 + (i-768));
  280a41:	6b f6 28             	imul   $0x28,%esi,%esi
  280a44:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
  280a4a:	83 ec 0c             	sub    $0xc,%esp
  280a4d:	8d 84 30 14 8c ff ff 	lea    -0x73ec(%eax,%esi,1),%eax
  280a54:	50                   	push   %eax
  280a55:	e8 23 36 00 00       	call   28407d <close_console>
  280a5a:	83 c4 10             	add    $0x10,%esp
  280a5d:	e9 df f8 ff ff       	jmp    280341 <bootmain+0x341>
  280a62:	66 90                	xchg   %ax,%ax
  280a64:	66 90                	xchg   %ax,%ax
  280a66:	66 90                	xchg   %ax,%ax
  280a68:	66 90                	xchg   %ax,%ax
  280a6a:	66 90                	xchg   %ax,%ax
  280a6c:	66 90                	xchg   %ax,%ax
  280a6e:	66 90                	xchg   %ax,%ax

00280a70 <io_hlt>:
  280a70:	f4                   	hlt    
  280a71:	c3                   	ret    

00280a72 <io_cli>:
  280a72:	fa                   	cli    
  280a73:	c3                   	ret    

00280a74 <io_sti>:
  280a74:	fb                   	sti    
  280a75:	c3                   	ret    

00280a76 <io_stihlt>:
  280a76:	fb                   	sti    
  280a77:	f4                   	hlt    
  280a78:	c3                   	ret    

00280a79 <write_mem8>:
  280a79:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  280a7d:	8a 44 24 08          	mov    0x8(%esp),%al
  280a81:	88 01                	mov    %al,(%ecx)
  280a83:	c3                   	ret    

00280a84 <io_in8>:
  280a84:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a88:	b8 00 00 00 00       	mov    $0x0,%eax
  280a8d:	ec                   	in     (%dx),%al
  280a8e:	c3                   	ret    

00280a8f <io_in16>:
  280a8f:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a93:	b8 00 00 00 00       	mov    $0x0,%eax
  280a98:	66 ed                	in     (%dx),%ax
  280a9a:	c3                   	ret    

00280a9b <io_in32>:
  280a9b:	8b 54 24 04          	mov    0x4(%esp),%edx
  280a9f:	b8 00 00 00 00       	mov    $0x0,%eax
  280aa4:	ed                   	in     (%dx),%eax
  280aa5:	c3                   	ret    

00280aa6 <io_out8>:
  280aa6:	8b 54 24 04          	mov    0x4(%esp),%edx
  280aaa:	8b 44 24 08          	mov    0x8(%esp),%eax
  280aae:	ee                   	out    %al,(%dx)
  280aaf:	c3                   	ret    

00280ab0 <io_out16>:
  280ab0:	8b 54 24 04          	mov    0x4(%esp),%edx
  280ab4:	8b 44 24 08          	mov    0x8(%esp),%eax
  280ab8:	66 ef                	out    %ax,(%dx)
  280aba:	c3                   	ret    

00280abb <io_out32>:
  280abb:	8b 54 24 04          	mov    0x4(%esp),%edx
  280abf:	8b 44 24 08          	mov    0x8(%esp),%eax
  280ac3:	ef                   	out    %eax,(%dx)
  280ac4:	c3                   	ret    

00280ac5 <io_load_eflags>:
  280ac5:	9c                   	pushf  
  280ac6:	58                   	pop    %eax
  280ac7:	c3                   	ret    

00280ac8 <io_store_eflags>:
  280ac8:	8b 44 24 04          	mov    0x4(%esp),%eax
  280acc:	50                   	push   %eax
  280acd:	9d                   	popf   
  280ace:	c3                   	ret    

00280acf <load_gdtr>:
  280acf:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280ad4:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280ad9:	0f 01 54 24 06       	lgdtl  0x6(%esp)
  280ade:	c3                   	ret    

00280adf <load_idtr>:
  280adf:	66 8b 44 24 04       	mov    0x4(%esp),%ax
  280ae4:	66 89 44 24 06       	mov    %ax,0x6(%esp)
  280ae9:	0f 01 5c 24 06       	lidtl  0x6(%esp)
  280aee:	c3                   	ret    

00280aef <load_cr0>:
  280aef:	0f 20 c0             	mov    %cr0,%eax
  280af2:	c3                   	ret    

00280af3 <store_cr0>:
  280af3:	8b 44 24 04          	mov    0x4(%esp),%eax
  280af7:	0f 22 c0             	mov    %eax,%cr0
  280afa:	c3                   	ret    

00280afb <_memtest_sub>:
  280afb:	57                   	push   %edi
  280afc:	56                   	push   %esi
  280afd:	53                   	push   %ebx
  280afe:	be 55 aa 55 aa       	mov    $0xaa55aa55,%esi
  280b03:	bf aa 55 aa 55       	mov    $0x55aa55aa,%edi
  280b08:	8b 44 24 10          	mov    0x10(%esp),%eax

00280b0c <mts_loop>:
  280b0c:	89 c3                	mov    %eax,%ebx
  280b0e:	81 c3 fc 0f 00 00    	add    $0xffc,%ebx
  280b14:	8b 13                	mov    (%ebx),%edx
  280b16:	89 33                	mov    %esi,(%ebx)
  280b18:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b1b:	3b 3b                	cmp    (%ebx),%edi
  280b1d:	75 18                	jne    280b37 <mts_qit>
  280b1f:	83 33 ff             	xorl   $0xffffffff,(%ebx)
  280b22:	3b 33                	cmp    (%ebx),%esi
  280b24:	75 11                	jne    280b37 <mts_qit>
  280b26:	89 13                	mov    %edx,(%ebx)
  280b28:	05 00 10 00 00       	add    $0x1000,%eax
  280b2d:	3b 44 24 14          	cmp    0x14(%esp),%eax
  280b31:	76 d9                	jbe    280b0c <mts_loop>

00280b33 <mts_ret>:
  280b33:	5b                   	pop    %ebx
  280b34:	5e                   	pop    %esi
  280b35:	5f                   	pop    %edi
  280b36:	c3                   	ret    

00280b37 <mts_qit>:
  280b37:	89 13                	mov    %edx,(%ebx)
  280b39:	5b                   	pop    %ebx
  280b3a:	5e                   	pop    %esi
  280b3b:	5f                   	pop    %edi
  280b3c:	c3                   	ret    

00280b3d <set_palette>:
	set_palette(16,231,table2);
	return;	
}

void set_palette(int start, int end, unsigned char *rgb)
{
  280b3d:	55                   	push   %ebp
  280b3e:	89 e5                	mov    %esp,%ebp
  280b40:	57                   	push   %edi
  280b41:	56                   	push   %esi
  280b42:	53                   	push   %ebx
  280b43:	83 ec 1c             	sub    $0x1c,%esp
  280b46:	8b 75 08             	mov    0x8(%ebp),%esi
  280b49:	8b 7d 0c             	mov    0xc(%ebp),%edi
  280b4c:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int i,eflags;
	eflags = io_load_eflags();
  280b4f:	e8 71 ff ff ff       	call   280ac5 <io_load_eflags>
  280b54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  280b57:	e8 16 ff ff ff       	call   280a72 <io_cli>
	io_out8(0x03c8,start);
  280b5c:	83 ec 08             	sub    $0x8,%esp
  280b5f:	56                   	push   %esi
  280b60:	68 c8 03 00 00       	push   $0x3c8
  280b65:	e8 3c ff ff ff       	call   280aa6 <io_out8>
	for(i=start;i<=end;i++)
  280b6a:	83 c4 10             	add    $0x10,%esp
  280b6d:	39 fe                	cmp    %edi,%esi
  280b6f:	7f 54                	jg     280bc5 <set_palette+0x88>
	{
		io_out8(0x03c9,rgb[0]/4);
  280b71:	83 ec 08             	sub    $0x8,%esp
  280b74:	0f b6 03             	movzbl (%ebx),%eax
  280b77:	c0 e8 02             	shr    $0x2,%al
  280b7a:	0f b6 c0             	movzbl %al,%eax
  280b7d:	50                   	push   %eax
  280b7e:	68 c9 03 00 00       	push   $0x3c9
  280b83:	e8 1e ff ff ff       	call   280aa6 <io_out8>
		io_out8(0x03c9,rgb[1]/4);
  280b88:	83 c4 08             	add    $0x8,%esp
  280b8b:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  280b8f:	c0 e8 02             	shr    $0x2,%al
  280b92:	0f b6 c0             	movzbl %al,%eax
  280b95:	50                   	push   %eax
  280b96:	68 c9 03 00 00       	push   $0x3c9
  280b9b:	e8 06 ff ff ff       	call   280aa6 <io_out8>
		io_out8(0x03c9,rgb[2]/4);
  280ba0:	83 c4 08             	add    $0x8,%esp
  280ba3:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
  280ba7:	c0 e8 02             	shr    $0x2,%al
  280baa:	0f b6 c0             	movzbl %al,%eax
  280bad:	50                   	push   %eax
  280bae:	68 c9 03 00 00       	push   $0x3c9
  280bb3:	e8 ee fe ff ff       	call   280aa6 <io_out8>
		rgb+=3;
  280bb8:	83 c3 03             	add    $0x3,%ebx
{
	int i,eflags;
	eflags = io_load_eflags();
	io_cli();
	io_out8(0x03c8,start);
	for(i=start;i<=end;i++)
  280bbb:	83 c6 01             	add    $0x1,%esi
  280bbe:	83 c4 10             	add    $0x10,%esp
  280bc1:	39 f7                	cmp    %esi,%edi
  280bc3:	7d ac                	jge    280b71 <set_palette+0x34>
		io_out8(0x03c9,rgb[0]/4);
		io_out8(0x03c9,rgb[1]/4);
		io_out8(0x03c9,rgb[2]/4);
		rgb+=3;
	}
	io_store_eflags(eflags);
  280bc5:	83 ec 0c             	sub    $0xc,%esp
  280bc8:	ff 75 e4             	pushl  -0x1c(%ebp)
  280bcb:	e8 f8 fe ff ff       	call   280ac8 <io_store_eflags>
	return;
  280bd0:	83 c4 10             	add    $0x10,%esp
}
  280bd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280bd6:	5b                   	pop    %ebx
  280bd7:	5e                   	pop    %esi
  280bd8:	5f                   	pop    %edi
  280bd9:	5d                   	pop    %ebp
  280bda:	c3                   	ret    

00280bdb <init_palette>:
#include "graphics.h"

void init_palette(void)
{
  280bdb:	55                   	push   %ebp
  280bdc:	89 e5                	mov    %esp,%ebp
  280bde:	57                   	push   %edi
  280bdf:	56                   	push   %esi
  280be0:	53                   	push   %ebx
  280be1:	81 ec a0 02 00 00    	sub    $0x2a0,%esp
		0x00, 0x84, 0x84,	//dark light blue
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
  280be7:	68 00 5f 28 00       	push   $0x285f00
  280bec:	6a 0f                	push   $0xf
  280bee:	6a 00                	push   $0x0
  280bf0:	e8 48 ff ff ff       	call   280b3d <set_palette>
  280bf5:	8d bd 60 fd ff ff    	lea    -0x2a0(%ebp),%edi
  280bfb:	83 c4 10             	add    $0x10,%esp
  280bfe:	bb 00 00 00 00       	mov    $0x0,%ebx
  280c03:	eb 32                	jmp    280c37 <init_palette+0x5c>
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
			{
				table2[(r+g*6+b*36)*3+0] = r*51;
  280c05:	88 10                	mov    %dl,(%eax)
				table2[(r+g*6+b*36)*3+1] = g*51;
  280c07:	88 48 01             	mov    %cl,0x1(%eax)
				table2[(r+g*6+b*36)*3+2] = b*51;
  280c0a:	88 58 02             	mov    %bl,0x2(%eax)
  280c0d:	83 c2 33             	add    $0x33,%edx
  280c10:	83 c0 03             	add    $0x3,%eax
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
		{
			for(r=0;r<6;r++)
  280c13:	80 fa 32             	cmp    $0x32,%dl
  280c16:	75 ed                	jne    280c05 <init_palette+0x2a>
  280c18:	83 c6 12             	add    $0x12,%esi
  280c1b:	83 c1 33             	add    $0x33,%ecx
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
	{
		for(g=0;g<6;g++)
  280c1e:	80 f9 32             	cmp    $0x32,%cl
  280c21:	74 09                	je     280c2c <init_palette+0x51>
#include "graphics.h"

void init_palette(void)
{
  280c23:	89 f0                	mov    %esi,%eax
  280c25:	ba 00 00 00 00       	mov    $0x0,%edx
  280c2a:	eb d9                	jmp    280c05 <init_palette+0x2a>
  280c2c:	83 c3 33             	add    $0x33,%ebx
  280c2f:	83 c7 6c             	add    $0x6c,%edi
		0x84, 0x84, 0x84,	//dark gray
	};
	unsigned char table2[216*3];
	int r,g,b;
	set_palette(0,15,table_rgb);
	for(b=0;b<6;b++)
  280c32:	80 fb 32             	cmp    $0x32,%bl
  280c35:	74 09                	je     280c40 <init_palette+0x65>
#include "graphics.h"

void init_palette(void)
{
  280c37:	89 fe                	mov    %edi,%esi
  280c39:	b9 00 00 00 00       	mov    $0x0,%ecx
  280c3e:	eb e3                	jmp    280c23 <init_palette+0x48>
				table2[(r+g*6+b*36)*3+1] = g*51;
				table2[(r+g*6+b*36)*3+2] = b*51;
			}
		}
	}
	set_palette(16,231,table2);
  280c40:	83 ec 04             	sub    $0x4,%esp
  280c43:	8d 85 60 fd ff ff    	lea    -0x2a0(%ebp),%eax
  280c49:	50                   	push   %eax
  280c4a:	68 e7 00 00 00       	push   $0xe7
  280c4f:	6a 10                	push   $0x10
  280c51:	e8 e7 fe ff ff       	call   280b3d <set_palette>
	return;	
  280c56:	83 c4 10             	add    $0x10,%esp
}
  280c59:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280c5c:	5b                   	pop    %ebx
  280c5d:	5e                   	pop    %esi
  280c5e:	5f                   	pop    %edi
  280c5f:	5d                   	pop    %ebp
  280c60:	c3                   	ret    

00280c61 <boxfill8>:
	io_store_eflags(eflags);
	return;
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
  280c61:	55                   	push   %ebp
  280c62:	89 e5                	mov    %esp,%ebp
  280c64:	57                   	push   %edi
  280c65:	56                   	push   %esi
  280c66:	53                   	push   %ebx
  280c67:	83 ec 04             	sub    $0x4,%esp
  280c6a:	8b 55 0c             	mov    0xc(%ebp),%edx
  280c6d:	8b 7d 14             	mov    0x14(%ebp),%edi
  280c70:	8b 75 18             	mov    0x18(%ebp),%esi
  280c73:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  280c76:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
	int x,y;
	for(y=y0;y<=y1;y++)
  280c7a:	3b 75 20             	cmp    0x20(%ebp),%esi
  280c7d:	7f 28                	jg     280ca7 <boxfill8+0x46>
  280c7f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280c82:	0f af d6             	imul   %esi,%edx
  280c85:	03 55 08             	add    0x8(%ebp),%edx
  280c88:	eb 15                	jmp    280c9f <boxfill8+0x3e>
	{
		for(x=x0;x<=x1;x++)
			vram[y*xsize+x]=c;
  280c8a:	88 1c 02             	mov    %bl,(%edx,%eax,1)
void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
	{
		for(x=x0;x<=x1;x++)
  280c8d:	83 c0 01             	add    $0x1,%eax
  280c90:	39 c1                	cmp    %eax,%ecx
  280c92:	7d f6                	jge    280c8a <boxfill8+0x29>
}

void  boxfill8(unsigned char *vram,int xsize,unsigned char c,int x0,int y0,int x1,int y1)
{
	int x,y;
	for(y=y0;y<=y1;y++)
  280c94:	83 c6 01             	add    $0x1,%esi
  280c97:	03 55 f0             	add    -0x10(%ebp),%edx
  280c9a:	39 75 20             	cmp    %esi,0x20(%ebp)
  280c9d:	7c 08                	jl     280ca7 <boxfill8+0x46>
	{
		for(x=x0;x<=x1;x++)
  280c9f:	89 f8                	mov    %edi,%eax
  280ca1:	39 cf                	cmp    %ecx,%edi
  280ca3:	7e e5                	jle    280c8a <boxfill8+0x29>
  280ca5:	eb ed                	jmp    280c94 <boxfill8+0x33>
			vram[y*xsize+x]=c;
	}
		
	return;
}
  280ca7:	83 c4 04             	add    $0x4,%esp
  280caa:	5b                   	pop    %ebx
  280cab:	5e                   	pop    %esi
  280cac:	5f                   	pop    %edi
  280cad:	5d                   	pop    %ebp
  280cae:	c3                   	ret    

00280caf <boxfill8_test>:

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
  280caf:	55                   	push   %ebp
  280cb0:	89 e5                	mov    %esp,%ebp
  280cb2:	53                   	push   %ebx
  280cb3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  280cb6:	8b 55 10             	mov    0x10(%ebp),%edx
  280cb9:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	int i;
	for(i=0;i<size;i++)
  280cbd:	85 d2                	test   %edx,%edx
  280cbf:	7e 0d                	jle    280cce <boxfill8_test+0x1f>
  280cc1:	89 d8                	mov    %ebx,%eax
  280cc3:	01 da                	add    %ebx,%edx
	{
		vram[i] = c;
  280cc5:	88 08                	mov    %cl,(%eax)
  280cc7:	83 c0 01             	add    $0x1,%eax
}

void boxfill8_test(unsigned char *vram,unsigned char c,int size)
{
	int i;
	for(i=0;i<size;i++)
  280cca:	39 d0                	cmp    %edx,%eax
  280ccc:	75 f7                	jne    280cc5 <boxfill8_test+0x16>
	{
		vram[i] = c;
	}
	//vram[TRY_BG_SIZE-1] = c;
}
  280cce:	5b                   	pop    %ebx
  280ccf:	5d                   	pop    %ebp
  280cd0:	c3                   	ret    

00280cd1 <init_screen8>:

void init_screen8(unsigned char *vram, int xsize, int ysize)
{
  280cd1:	55                   	push   %ebp
  280cd2:	89 e5                	mov    %esp,%ebp
  280cd4:	57                   	push   %edi
  280cd5:	56                   	push   %esi
  280cd6:	53                   	push   %ebx
  280cd7:	83 ec 14             	sub    $0x14,%esp
  280cda:	8b 7d 08             	mov    0x8(%ebp),%edi
  280cdd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280ce0:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(vram,310,COL8_008484,0,0,310,190);
  280ce3:	68 be 00 00 00       	push   $0xbe
  280ce8:	68 36 01 00 00       	push   $0x136
  280ced:	6a 00                	push   $0x0
  280cef:	6a 00                	push   $0x0
  280cf1:	6a 0e                	push   $0xe
  280cf3:	68 36 01 00 00       	push   $0x136
  280cf8:	57                   	push   %edi
  280cf9:	e8 63 ff ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_008484,0,      0,          xsize-1,    ysize-29);
  280cfe:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280d01:	89 c2                	mov    %eax,%edx
  280d03:	8d 46 e3             	lea    -0x1d(%esi),%eax
  280d06:	50                   	push   %eax
  280d07:	89 55 f0             	mov    %edx,-0x10(%ebp)
  280d0a:	52                   	push   %edx
  280d0b:	6a 00                	push   $0x0
  280d0d:	6a 00                	push   $0x0
  280d0f:	6a 0e                	push   $0xe
  280d11:	53                   	push   %ebx
  280d12:	57                   	push   %edi
  280d13:	e8 49 ff ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-28,   xsize-1,    ysize-28);
  280d18:	8d 46 e4             	lea    -0x1c(%esi),%eax
  280d1b:	83 c4 38             	add    $0x38,%esp
  280d1e:	50                   	push   %eax
  280d1f:	ff 75 f0             	pushl  -0x10(%ebp)
  280d22:	50                   	push   %eax
  280d23:	6a 00                	push   $0x0
  280d25:	6a 08                	push   $0x8
  280d27:	53                   	push   %ebx
  280d28:	57                   	push   %edi
  280d29:	e8 33 ff ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,0,      ysize-27,   xsize-1,    ysize-27);
  280d2e:	8d 46 e5             	lea    -0x1b(%esi),%eax
  280d31:	50                   	push   %eax
  280d32:	ff 75 f0             	pushl  -0x10(%ebp)
  280d35:	50                   	push   %eax
  280d36:	6a 00                	push   $0x0
  280d38:	6a 07                	push   $0x7
  280d3a:	53                   	push   %ebx
  280d3b:	57                   	push   %edi
  280d3c:	e8 20 ff ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_C6C6C6,0,      ysize-26,   xsize-1,    ysize- 1);
  280d41:	83 c4 38             	add    $0x38,%esp
  280d44:	8d 46 ff             	lea    -0x1(%esi),%eax
  280d47:	50                   	push   %eax
  280d48:	ff 75 f0             	pushl  -0x10(%ebp)
  280d4b:	8d 46 e6             	lea    -0x1a(%esi),%eax
  280d4e:	50                   	push   %eax
  280d4f:	6a 00                	push   $0x0
  280d51:	6a 08                	push   $0x8
  280d53:	53                   	push   %ebx
  280d54:	57                   	push   %edi
  280d55:	e8 07 ff ff ff       	call   280c61 <boxfill8>
	
	
	boxfill8(vram,xsize,COL8_FFFFFF,3,      ysize-24,   59,         ysize-24);
  280d5a:	8d 46 e8             	lea    -0x18(%esi),%eax
  280d5d:	50                   	push   %eax
  280d5e:	6a 3b                	push   $0x3b
  280d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
  280d63:	50                   	push   %eax
  280d64:	6a 03                	push   $0x3
  280d66:	6a 07                	push   $0x7
  280d68:	53                   	push   %ebx
  280d69:	57                   	push   %edi
  280d6a:	e8 f2 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,2,      ysize-24,    2,         ysize- 4);
  280d6f:	8d 4e fc             	lea    -0x4(%esi),%ecx
  280d72:	83 c4 38             	add    $0x38,%esp
  280d75:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  280d78:	51                   	push   %ecx
  280d79:	6a 02                	push   $0x2
  280d7b:	ff 75 f0             	pushl  -0x10(%ebp)
  280d7e:	6a 02                	push   $0x2
  280d80:	6a 07                	push   $0x7
  280d82:	53                   	push   %ebx
  280d83:	57                   	push   %edi
  280d84:	e8 d8 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,3,      ysize- 4,   59,         ysize- 4);
  280d89:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  280d8c:	51                   	push   %ecx
  280d8d:	6a 3b                	push   $0x3b
  280d8f:	51                   	push   %ecx
  280d90:	6a 03                	push   $0x3
  280d92:	6a 0f                	push   $0xf
  280d94:	53                   	push   %ebx
  280d95:	57                   	push   %edi
  280d96:	e8 c6 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,59,     ysize-23,   59,         ysize- 5);
  280d9b:	8d 56 e9             	lea    -0x17(%esi),%edx
  280d9e:	83 c4 38             	add    $0x38,%esp
  280da1:	8d 46 fb             	lea    -0x5(%esi),%eax
  280da4:	50                   	push   %eax
  280da5:	6a 3b                	push   $0x3b
  280da7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  280daa:	52                   	push   %edx
  280dab:	6a 3b                	push   $0x3b
  280dad:	6a 0f                	push   $0xf
  280daf:	53                   	push   %ebx
  280db0:	57                   	push   %edi
  280db1:	e8 ab fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,2,      ysize- 3,   59,         ysize- 3);
  280db6:	83 ee 03             	sub    $0x3,%esi
  280db9:	56                   	push   %esi
  280dba:	6a 3b                	push   $0x3b
  280dbc:	56                   	push   %esi
  280dbd:	6a 02                	push   $0x2
  280dbf:	6a 00                	push   $0x0
  280dc1:	53                   	push   %ebx
  280dc2:	57                   	push   %edi
  280dc3:	e8 99 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_000000,60,     ysize-24,   60,         ysize- 3);
  280dc8:	83 c4 38             	add    $0x38,%esp
  280dcb:	56                   	push   %esi
  280dcc:	6a 3c                	push   $0x3c
  280dce:	ff 75 f0             	pushl  -0x10(%ebp)
  280dd1:	6a 3c                	push   $0x3c
  280dd3:	6a 00                	push   $0x0
  280dd5:	53                   	push   %ebx
  280dd6:	57                   	push   %edi
  280dd7:	e8 85 fe ff ff       	call   280c61 <boxfill8>
	
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-24,   xsize- 4,   ysize-24);
  280ddc:	8d 4b fc             	lea    -0x4(%ebx),%ecx
  280ddf:	8d 53 d1             	lea    -0x2f(%ebx),%edx
  280de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  280de5:	50                   	push   %eax
  280de6:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  280de9:	51                   	push   %ecx
  280dea:	50                   	push   %eax
  280deb:	89 55 e8             	mov    %edx,-0x18(%ebp)
  280dee:	52                   	push   %edx
  280def:	6a 0f                	push   $0xf
  280df1:	53                   	push   %ebx
  280df2:	57                   	push   %edi
  280df3:	e8 69 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_848484,xsize-47,       ysize-23,   xsize-47,   ysize- 4);
  280df8:	83 c4 38             	add    $0x38,%esp
  280dfb:	ff 75 ec             	pushl  -0x14(%ebp)
  280dfe:	8b 55 e8             	mov    -0x18(%ebp),%edx
  280e01:	52                   	push   %edx
  280e02:	ff 75 e4             	pushl  -0x1c(%ebp)
  280e05:	52                   	push   %edx
  280e06:	6a 0f                	push   $0xf
  280e08:	53                   	push   %ebx
  280e09:	57                   	push   %edi
  280e0a:	e8 52 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize-47,       ysize- 3,   xsize- 4,   ysize- 3);
  280e0f:	56                   	push   %esi
  280e10:	ff 75 e0             	pushl  -0x20(%ebp)
  280e13:	56                   	push   %esi
  280e14:	ff 75 e8             	pushl  -0x18(%ebp)
  280e17:	6a 07                	push   $0x7
  280e19:	53                   	push   %ebx
  280e1a:	57                   	push   %edi
  280e1b:	e8 41 fe ff ff       	call   280c61 <boxfill8>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
  280e20:	8d 43 fd             	lea    -0x3(%ebx),%eax
  280e23:	83 c4 38             	add    $0x38,%esp
  280e26:	56                   	push   %esi
  280e27:	50                   	push   %eax
  280e28:	ff 75 f0             	pushl  -0x10(%ebp)
  280e2b:	50                   	push   %eax
  280e2c:	6a 07                	push   $0x7
  280e2e:	53                   	push   %ebx
  280e2f:	57                   	push   %edi
  280e30:	e8 2c fe ff ff       	call   280c61 <boxfill8>
}
  280e35:	83 c4 1c             	add    $0x1c,%esp
  280e38:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280e3b:	5b                   	pop    %ebx
  280e3c:	5e                   	pop    %esi
  280e3d:	5f                   	pop    %edi
  280e3e:	5d                   	pop    %ebp
  280e3f:	c3                   	ret    

00280e40 <init_mouse_cursor8>:


void init_mouse_cursor8(char *mouse, char bc)
{
  280e40:	55                   	push   %ebp
  280e41:	89 e5                	mov    %esp,%ebp
  280e43:	57                   	push   %edi
  280e44:	56                   	push   %esi
  280e45:	53                   	push   %ebx
  280e46:	83 ec 08             	sub    $0x8,%esp
  280e49:	8b 75 08             	mov    0x8(%ebp),%esi
  280e4c:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
  280e50:	89 75 f0             	mov    %esi,-0x10(%ebp)
  280e53:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
  280e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
  280e5c:	eb 38                	jmp    280e96 <init_mouse_cursor8+0x56>
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e5e:	0f b6 94 03 20 4d 28 	movzbl 0x284d20(%ebx,%eax,1),%edx
  280e65:	00 
  280e66:	80 fa 2a             	cmp    $0x2a,%dl
  280e69:	75 06                	jne    280e71 <init_mouse_cursor8+0x31>
				mouse[y*16+x] = COL8_000000;
  280e6b:	c6 04 06 00          	movb   $0x0,(%esi,%eax,1)
  280e6f:	eb 15                	jmp    280e86 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == 'O')
  280e71:	80 fa 4f             	cmp    $0x4f,%dl
  280e74:	75 06                	jne    280e7c <init_mouse_cursor8+0x3c>
				mouse[y*16+x] = COL8_FFFFFF;
  280e76:	c6 04 06 07          	movb   $0x7,(%esi,%eax,1)
  280e7a:	eb 0a                	jmp    280e86 <init_mouse_cursor8+0x46>
			else if(cursor[y][x] == '.')
  280e7c:	80 fa 2e             	cmp    $0x2e,%dl
  280e7f:	75 05                	jne    280e86 <init_mouse_cursor8+0x46>
				mouse[y*16+x] = bc;
  280e81:	89 fa                	mov    %edi,%edx
  280e83:	88 14 06             	mov    %dl,(%esi,%eax,1)
	};
	int x,y;
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
  280e86:	83 c0 01             	add    $0x1,%eax
  280e89:	83 f8 10             	cmp    $0x10,%eax
  280e8c:	75 d0                	jne    280e5e <init_mouse_cursor8+0x1e>
  280e8e:	83 c6 10             	add    $0x10,%esi
        "............*OO*",
        ".............***"
	};
	int x,y;
	
	for(y=0;y<16;y++)
  280e91:	3b 75 ec             	cmp    -0x14(%ebp),%esi
  280e94:	74 0c                	je     280ea2 <init_mouse_cursor8+0x62>
	boxfill8(vram,xsize,COL8_FFFFFF,xsize- 3,       ysize-24,   xsize- 3,   ysize- 3);
}


void init_mouse_cursor8(char *mouse, char bc)
{
  280e96:	b8 00 00 00 00       	mov    $0x0,%eax
	
	for(y=0;y<16;y++)
	{
		for(x=0;x<16;x++)
		{
			if(cursor[y][x] == '*')
  280e9b:	89 f3                	mov    %esi,%ebx
  280e9d:	2b 5d f0             	sub    -0x10(%ebp),%ebx
  280ea0:	eb bc                	jmp    280e5e <init_mouse_cursor8+0x1e>
			else if(cursor[y][x] == '.')
				mouse[y*16+x] = bc;
		}
	}
	return;
}
  280ea2:	83 c4 08             	add    $0x8,%esp
  280ea5:	5b                   	pop    %ebx
  280ea6:	5e                   	pop    %esi
  280ea7:	5f                   	pop    %edi
  280ea8:	5d                   	pop    %ebp
  280ea9:	c3                   	ret    

00280eaa <make_wtitle8>:
	make_wtitle8(buf,xsize,title,act);
	return;
}

void make_wtitle8(unsigned char *buf,int xsize,char *title,char act)
{
  280eaa:	55                   	push   %ebp
  280eab:	89 e5                	mov    %esp,%ebp
  280ead:	57                   	push   %edi
  280eae:	56                   	push   %esi
  280eaf:	53                   	push   %ebx
  280eb0:	83 ec 1c             	sub    $0x1c,%esp
  280eb3:	8b 75 08             	mov    0x8(%ebp),%esi
  280eb6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280eb9:	8b 55 14             	mov    0x14(%ebp),%edx
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
		tbc= COL8_848484;
  280ebc:	80 fa 01             	cmp    $0x1,%dl
  280ebf:	19 c0                	sbb    %eax,%eax
  280ec1:	83 e0 03             	and    $0x3,%eax
  280ec4:	83 c0 0c             	add    $0xc,%eax
  280ec7:	80 fa 01             	cmp    $0x1,%dl
  280eca:	19 ff                	sbb    %edi,%edi
  280ecc:	f7 d7                	not    %edi
  280ece:	83 c7 08             	add    $0x8,%edi
	}
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
  280ed1:	6a 14                	push   $0x14
  280ed3:	8d 53 fc             	lea    -0x4(%ebx),%edx
  280ed6:	52                   	push   %edx
  280ed7:	6a 03                	push   $0x3
  280ed9:	6a 03                	push   $0x3
  280edb:	0f b6 c0             	movzbl %al,%eax
  280ede:	50                   	push   %eax
  280edf:	53                   	push   %ebx
  280ee0:	56                   	push   %esi
  280ee1:	e8 7b fd ff ff       	call   280c61 <boxfill8>
	putfonts8_asc(buf,xsize,24,4,tc,title);
  280ee6:	83 c4 04             	add    $0x4,%esp
  280ee9:	ff 75 10             	pushl  0x10(%ebp)
  280eec:	89 f8                	mov    %edi,%eax
  280eee:	0f be f8             	movsbl %al,%edi
  280ef1:	57                   	push   %edi
  280ef2:	6a 04                	push   $0x4
  280ef4:	6a 18                	push   $0x18
  280ef6:	53                   	push   %ebx
  280ef7:	56                   	push   %esi
  280ef8:	e8 c7 04 00 00       	call   2813c4 <putfonts8_asc>
  280efd:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  280f00:	8d 3c 9b             	lea    (%ebx,%ebx,4),%edi
  280f03:	01 fb                	add    %edi,%ebx
  280f05:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
  280f08:	83 c4 30             	add    $0x30,%esp
  280f0b:	be 00 00 00 00       	mov    $0x0,%esi
  280f10:	eb 41                	jmp    280f53 <make_wtitle8+0xa9>
  280f12:	89 c1                	mov    %eax,%ecx
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
		{
			c=closebtn[y][x];
  280f14:	0f b6 9c 06 40 4c 28 	movzbl 0x284c40(%esi,%eax,1),%ebx
  280f1b:	00 
			if(c == '@') c=COL8_000000;
  280f1c:	ba 00 00 00 00       	mov    $0x0,%edx
  280f21:	80 fb 40             	cmp    $0x40,%bl
  280f24:	74 13                	je     280f39 <make_wtitle8+0x8f>
			else if(c == '$') c=COL8_848484;
  280f26:	ba 0f 00 00 00       	mov    $0xf,%edx
  280f2b:	80 fb 24             	cmp    $0x24,%bl
  280f2e:	74 09                	je     280f39 <make_wtitle8+0x8f>
			else if(c == 'Q') c=COL8_C6C6C6;
			else c=COL8_FFFFFF;
  280f30:	80 fb 51             	cmp    $0x51,%bl
  280f33:	0f 94 c2             	sete   %dl
  280f36:	83 c2 07             	add    $0x7,%edx
			buf[(5+y)*xsize+(xsize-21+x)] = c;
  280f39:	88 54 0f eb          	mov    %dl,-0x15(%edi,%ecx,1)
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
	{
		for(x=0;x<16;x++)
  280f3d:	83 c0 01             	add    $0x1,%eax
  280f40:	83 f8 10             	cmp    $0x10,%eax
  280f43:	75 cd                	jne    280f12 <make_wtitle8+0x68>
  280f45:	03 7d e4             	add    -0x1c(%ebp),%edi
  280f48:	83 c6 10             	add    $0x10,%esi
	//draw title bar
    boxfill8(buf, xsize, tbc		, 3     , 3     , xsize-4,20    );
	putfonts8_asc(buf,xsize,24,4,tc,title);
	
	//draw close button
	for(y=0;y<14;y++)
  280f4b:	81 fe e0 00 00 00    	cmp    $0xe0,%esi
  280f51:	74 07                	je     280f5a <make_wtitle8+0xb0>
		tc = COL8_FFFFFF;
		tbc= COL8_000084;
	}
	else
	{
		tc = COL8_C6C6C6;
  280f53:	b8 00 00 00 00       	mov    $0x0,%eax
  280f58:	eb b8                	jmp    280f12 <make_wtitle8+0x68>
			else c=COL8_FFFFFF;
			buf[(5+y)*xsize+(xsize-21+x)] = c;
		}
	}
	return;
}
  280f5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  280f5d:	5b                   	pop    %ebx
  280f5e:	5e                   	pop    %esi
  280f5f:	5f                   	pop    %edi
  280f60:	5d                   	pop    %ebp
  280f61:	c3                   	ret    

00280f62 <make_window8>:
	}
	return;
}

void make_window8(unsigned char *buf,int xsize,int ysize,char *title,char act)
{
  280f62:	55                   	push   %ebp
  280f63:	89 e5                	mov    %esp,%ebp
  280f65:	57                   	push   %edi
  280f66:	56                   	push   %esi
  280f67:	53                   	push   %ebx
  280f68:	83 ec 1c             	sub    $0x1c,%esp
  280f6b:	8b 75 08             	mov    0x8(%ebp),%esi
  280f6e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  280f71:	8b 45 18             	mov    0x18(%ebp),%eax
  280f74:	89 45 d8             	mov    %eax,-0x28(%ebp)
	boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , xsize - 1, 0  );
  280f77:	8d 43 ff             	lea    -0x1(%ebx),%eax
  280f7a:	6a 00                	push   $0x0
  280f7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  280f7f:	50                   	push   %eax
  280f80:	6a 00                	push   $0x0
  280f82:	6a 00                	push   $0x0
  280f84:	6a 08                	push   $0x8
  280f86:	53                   	push   %ebx
  280f87:	56                   	push   %esi
  280f88:	e8 d4 fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , xsize - 2, 1  );
  280f8d:	8d 53 fe             	lea    -0x2(%ebx),%edx
  280f90:	6a 01                	push   $0x1
  280f92:	89 55 e0             	mov    %edx,-0x20(%ebp)
  280f95:	52                   	push   %edx
  280f96:	6a 01                	push   $0x1
  280f98:	6a 01                	push   $0x1
  280f9a:	6a 07                	push   $0x7
  280f9c:	53                   	push   %ebx
  280f9d:	56                   	push   %esi
  280f9e:	e8 be fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 0     , 0     , 0     , ysize-1);
  280fa3:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fa6:	8d 4f ff             	lea    -0x1(%edi),%ecx
  280fa9:	83 c4 38             	add    $0x38,%esp
  280fac:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  280faf:	51                   	push   %ecx
  280fb0:	6a 00                	push   $0x0
  280fb2:	6a 00                	push   $0x0
  280fb4:	6a 00                	push   $0x0
  280fb6:	6a 08                	push   $0x8
  280fb8:	53                   	push   %ebx
  280fb9:	56                   	push   %esi
  280fba:	e8 a2 fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_FFFFFF, 1     , 1     , 1     , ysize-2);
  280fbf:	8b 7d 10             	mov    0x10(%ebp),%edi
  280fc2:	83 ef 02             	sub    $0x2,%edi
  280fc5:	57                   	push   %edi
  280fc6:	6a 01                	push   $0x1
  280fc8:	6a 01                	push   $0x1
  280fca:	6a 01                	push   $0x1
  280fcc:	6a 07                	push   $0x7
  280fce:	53                   	push   %ebx
  280fcf:	56                   	push   %esi
  280fd0:	e8 8c fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, xsize-2,1     , xsize-2,ysize-2);
  280fd5:	83 c4 38             	add    $0x38,%esp
  280fd8:	57                   	push   %edi
  280fd9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  280fdc:	52                   	push   %edx
  280fdd:	6a 01                	push   $0x1
  280fdf:	52                   	push   %edx
  280fe0:	6a 0f                	push   $0xf
  280fe2:	53                   	push   %ebx
  280fe3:	56                   	push   %esi
  280fe4:	e8 78 fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, xsize-1,0     , xsize-1,ysize-1);
  280fe9:	ff 75 dc             	pushl  -0x24(%ebp)
  280fec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  280fef:	50                   	push   %eax
  280ff0:	6a 00                	push   $0x0
  280ff2:	50                   	push   %eax
  280ff3:	6a 00                	push   $0x0
  280ff5:	53                   	push   %ebx
  280ff6:	56                   	push   %esi
  280ff7:	e8 65 fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_C6C6C6, 2     , 2     , xsize-3,ysize-3);
  280ffc:	83 c4 38             	add    $0x38,%esp
  280fff:	8b 55 10             	mov    0x10(%ebp),%edx
  281002:	8d 42 fd             	lea    -0x3(%edx),%eax
  281005:	50                   	push   %eax
  281006:	8d 43 fd             	lea    -0x3(%ebx),%eax
  281009:	50                   	push   %eax
  28100a:	6a 02                	push   $0x2
  28100c:	6a 02                	push   $0x2
  28100e:	6a 08                	push   $0x8
  281010:	53                   	push   %ebx
  281011:	56                   	push   %esi
  281012:	e8 4a fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_848484, 1     , ysize-2,xsize-2,ysize-2);
  281017:	57                   	push   %edi
  281018:	ff 75 e0             	pushl  -0x20(%ebp)
  28101b:	57                   	push   %edi
  28101c:	6a 01                	push   $0x1
  28101e:	6a 0f                	push   $0xf
  281020:	53                   	push   %ebx
  281021:	56                   	push   %esi
  281022:	e8 3a fc ff ff       	call   280c61 <boxfill8>
    boxfill8(buf, xsize, COL8_000000, 0     , ysize-1,xsize-1,ysize-1);
  281027:	83 c4 38             	add    $0x38,%esp
  28102a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  28102d:	51                   	push   %ecx
  28102e:	ff 75 e4             	pushl  -0x1c(%ebp)
  281031:	51                   	push   %ecx
  281032:	6a 00                	push   $0x0
  281034:	6a 00                	push   $0x0
  281036:	53                   	push   %ebx
  281037:	56                   	push   %esi
  281038:	e8 24 fc ff ff       	call   280c61 <boxfill8>
	make_wtitle8(buf,xsize,title,act);
  28103d:	83 c4 1c             	add    $0x1c,%esp
  281040:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
  281044:	50                   	push   %eax
  281045:	ff 75 14             	pushl  0x14(%ebp)
  281048:	53                   	push   %ebx
  281049:	56                   	push   %esi
  28104a:	e8 5b fe ff ff       	call   280eaa <make_wtitle8>
	return;
  28104f:	83 c4 10             	add    $0x10,%esp
}
  281052:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281055:	5b                   	pop    %ebx
  281056:	5e                   	pop    %esi
  281057:	5f                   	pop    %edi
  281058:	5d                   	pop    %ebp
  281059:	c3                   	ret    

0028105a <putblock8_8>:
	}
	return;
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
  28105a:	55                   	push   %ebp
  28105b:	89 e5                	mov    %esp,%ebp
  28105d:	57                   	push   %edi
  28105e:	56                   	push   %esi
  28105f:	53                   	push   %ebx
  281060:	83 ec 04             	sub    $0x4,%esp
  281063:	8b 45 0c             	mov    0xc(%ebp),%eax
  281066:	8b 5d 10             	mov    0x10(%ebp),%ebx
	int x,y;
	for(y=0;y<pysize;y++)
  281069:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  28106d:	7e 49                	jle    2810b8 <putblock8_8+0x5e>
  28106f:	8b 7d 24             	mov    0x24(%ebp),%edi
  281072:	8b 4d 20             	mov    0x20(%ebp),%ecx
  281075:	89 45 f0             	mov    %eax,-0x10(%ebp)
  281078:	0f af 45 1c          	imul   0x1c(%ebp),%eax
  28107c:	03 45 18             	add    0x18(%ebp),%eax
  28107f:	89 c2                	mov    %eax,%edx
  281081:	03 55 08             	add    0x8(%ebp),%edx
  281084:	be 00 00 00 00       	mov    $0x0,%esi
  281089:	eb 22                	jmp    2810ad <putblock8_8+0x53>
  28108b:	89 5d 10             	mov    %ebx,0x10(%ebp)
		for(x=0;x<pxsize;x++)
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];
  28108e:	0f b6 1c 01          	movzbl (%ecx,%eax,1),%ebx
  281092:	88 1c 02             	mov    %bl,(%edx,%eax,1)

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
		for(x=0;x<pxsize;x++)
  281095:	83 c0 01             	add    $0x1,%eax
  281098:	39 45 10             	cmp    %eax,0x10(%ebp)
  28109b:	75 f1                	jne    28108e <putblock8_8+0x34>
  28109d:	8b 5d 10             	mov    0x10(%ebp),%ebx
}

void putblock8_8(char *vram,int vxsize,int pxsize,int pysize,int px0,int py0,char *buf,int bxsize)
{
	int x,y;
	for(y=0;y<pysize;y++)
  2810a0:	83 c6 01             	add    $0x1,%esi
  2810a3:	01 f9                	add    %edi,%ecx
  2810a5:	03 55 f0             	add    -0x10(%ebp),%edx
  2810a8:	39 75 14             	cmp    %esi,0x14(%ebp)
  2810ab:	74 0b                	je     2810b8 <putblock8_8+0x5e>
		for(x=0;x<pxsize;x++)
  2810ad:	b8 00 00 00 00       	mov    $0x0,%eax
  2810b2:	85 db                	test   %ebx,%ebx
  2810b4:	7f d5                	jg     28108b <putblock8_8+0x31>
  2810b6:	eb e8                	jmp    2810a0 <putblock8_8+0x46>
			vram[(py0+y)*vxsize+(px0+x)]=buf[y*bxsize+x];

	return;
}
  2810b8:	83 c4 04             	add    $0x4,%esp
  2810bb:	5b                   	pop    %ebx
  2810bc:	5e                   	pop    %esi
  2810bd:	5f                   	pop    %edi
  2810be:	5d                   	pop    %ebp
  2810bf:	c3                   	ret    

002810c0 <putfonts8_asc_sht>:
//b background color
//c font color
void putfonts8_asc_sht(struct SHEET *sht,int x,int y,int c,int b,char *s,int l)
{
  2810c0:	55                   	push   %ebp
  2810c1:	89 e5                	mov    %esp,%ebp
  2810c3:	57                   	push   %edi
  2810c4:	56                   	push   %esi
  2810c5:	53                   	push   %ebx
  2810c6:	83 ec 0c             	sub    $0xc,%esp
  2810c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2810cc:	8b 75 10             	mov    0x10(%ebp),%esi
	boxfill8(sht->buf,sht->bxsize,b,x,y,x+l*8-1,y+15);
  2810cf:	8b 45 20             	mov    0x20(%ebp),%eax
  2810d2:	8b 55 0c             	mov    0xc(%ebp),%edx
  2810d5:	8d 3c c2             	lea    (%edx,%eax,8),%edi
  2810d8:	8d 46 0f             	lea    0xf(%esi),%eax
  2810db:	50                   	push   %eax
  2810dc:	8d 47 ff             	lea    -0x1(%edi),%eax
  2810df:	50                   	push   %eax
  2810e0:	56                   	push   %esi
  2810e1:	52                   	push   %edx
  2810e2:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  2810e6:	50                   	push   %eax
  2810e7:	ff 73 04             	pushl  0x4(%ebx)
  2810ea:	ff 33                	pushl  (%ebx)
  2810ec:	e8 70 fb ff ff       	call   280c61 <boxfill8>
	putfonts8_asc(sht->buf,sht->bxsize,x,y,c,s);
  2810f1:	83 c4 04             	add    $0x4,%esp
  2810f4:	ff 75 1c             	pushl  0x1c(%ebp)
  2810f7:	ff 75 14             	pushl  0x14(%ebp)
  2810fa:	56                   	push   %esi
  2810fb:	ff 75 0c             	pushl  0xc(%ebp)
  2810fe:	ff 73 04             	pushl  0x4(%ebx)
  281101:	ff 33                	pushl  (%ebx)
  281103:	e8 bc 02 00 00       	call   2813c4 <putfonts8_asc>
	sheet_refresh(sht,x,y,x+l*8,y+16);
  281108:	83 c4 24             	add    $0x24,%esp
  28110b:	8d 46 10             	lea    0x10(%esi),%eax
  28110e:	50                   	push   %eax
  28110f:	57                   	push   %edi
  281110:	56                   	push   %esi
  281111:	ff 75 0c             	pushl  0xc(%ebp)
  281114:	53                   	push   %ebx
  281115:	e8 7c 17 00 00       	call   282896 <sheet_refresh>
}
  28111a:	83 c4 20             	add    $0x20,%esp
  28111d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281120:	5b                   	pop    %ebx
  281121:	5e                   	pop    %esi
  281122:	5f                   	pop    %edi
  281123:	5d                   	pop    %ebp
  281124:	c3                   	ret    

00281125 <make_textbox8>:

void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
{
  281125:	55                   	push   %ebp
  281126:	89 e5                	mov    %esp,%ebp
  281128:	57                   	push   %edi
  281129:	56                   	push   %esi
  28112a:	53                   	push   %ebx
  28112b:	83 ec 18             	sub    $0x18,%esp
  28112e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    int x1 = x0 + sx, y1 = y0 + sy;
  281131:	8b 45 0c             	mov    0xc(%ebp),%eax
  281134:	03 45 14             	add    0x14(%ebp),%eax
  281137:	8b 55 10             	mov    0x10(%ebp),%edx
  28113a:	03 55 18             	add    0x18(%ebp),%edx
  28113d:	89 d7                	mov    %edx,%edi
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
  28113f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  281142:	8d 48 01             	lea    0x1(%eax),%ecx
  281145:	8b 75 10             	mov    0x10(%ebp),%esi
  281148:	83 ee 03             	sub    $0x3,%esi
  28114b:	8b 55 0c             	mov    0xc(%ebp),%edx
  28114e:	83 ea 02             	sub    $0x2,%edx
  281151:	56                   	push   %esi
  281152:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  281155:	51                   	push   %ecx
  281156:	56                   	push   %esi
  281157:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28115a:	52                   	push   %edx
  28115b:	6a 0f                	push   $0xf
  28115d:	ff 73 04             	pushl  0x4(%ebx)
  281160:	ff 33                	pushl  (%ebx)
  281162:	e8 fa fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
  281167:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  28116a:	8d 7f 01             	lea    0x1(%edi),%edi
  28116d:	89 f9                	mov    %edi,%ecx
  28116f:	8b 7d 0c             	mov    0xc(%ebp),%edi
  281172:	83 ef 03             	sub    $0x3,%edi
  281175:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  281178:	51                   	push   %ecx
  281179:	57                   	push   %edi
  28117a:	56                   	push   %esi
  28117b:	57                   	push   %edi
  28117c:	6a 0f                	push   $0xf
  28117e:	ff 73 04             	pushl  0x4(%ebx)
  281181:	ff 33                	pushl  (%ebx)
  281183:	e8 d9 fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
  281188:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  28118b:	8d 4a 02             	lea    0x2(%edx),%ecx
  28118e:	83 c4 38             	add    $0x38,%esp
  281191:	51                   	push   %ecx
  281192:	ff 75 e0             	pushl  -0x20(%ebp)
  281195:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  281198:	51                   	push   %ecx
  281199:	57                   	push   %edi
  28119a:	6a 07                	push   $0x7
  28119c:	ff 73 04             	pushl  0x4(%ebx)
  28119f:	ff 33                	pushl  (%ebx)
  2811a1:	e8 bb fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
  2811a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  2811a9:	83 c0 02             	add    $0x2,%eax
  2811ac:	ff 75 dc             	pushl  -0x24(%ebp)
  2811af:	50                   	push   %eax
  2811b0:	56                   	push   %esi
  2811b1:	50                   	push   %eax
  2811b2:	6a 07                	push   $0x7
  2811b4:	ff 73 04             	pushl  0x4(%ebx)
  2811b7:	ff 33                	pushl  (%ebx)
  2811b9:	e8 a3 fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
  2811be:	8b 75 10             	mov    0x10(%ebp),%esi
  2811c1:	8d 7e fe             	lea    -0x2(%esi),%edi
  2811c4:	8b 75 0c             	mov    0xc(%ebp),%esi
  2811c7:	83 ee 01             	sub    $0x1,%esi
  2811ca:	83 c4 38             	add    $0x38,%esp
  2811cd:	57                   	push   %edi
  2811ce:	ff 75 e8             	pushl  -0x18(%ebp)
  2811d1:	57                   	push   %edi
  2811d2:	56                   	push   %esi
  2811d3:	6a 00                	push   $0x0
  2811d5:	ff 73 04             	pushl  0x4(%ebx)
  2811d8:	ff 33                	pushl  (%ebx)
  2811da:	e8 82 fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x0 - 2, y1 + 0);
  2811df:	ff 75 e4             	pushl  -0x1c(%ebp)
  2811e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  2811e5:	52                   	push   %edx
  2811e6:	57                   	push   %edi
  2811e7:	52                   	push   %edx
  2811e8:	6a 00                	push   $0x0
  2811ea:	ff 73 04             	pushl  0x4(%ebx)
  2811ed:	ff 33                	pushl  (%ebx)
  2811ef:	e8 6d fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
  2811f4:	83 c4 38             	add    $0x38,%esp
  2811f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2811fa:	50                   	push   %eax
  2811fb:	ff 75 e8             	pushl  -0x18(%ebp)
  2811fe:	50                   	push   %eax
  2811ff:	ff 75 f0             	pushl  -0x10(%ebp)
  281202:	6a 08                	push   $0x8
  281204:	ff 73 04             	pushl  0x4(%ebx)
  281207:	ff 33                	pushl  (%ebx)
  281209:	e8 53 fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
  28120e:	ff 75 ec             	pushl  -0x14(%ebp)
  281211:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  281214:	51                   	push   %ecx
  281215:	57                   	push   %edi
  281216:	51                   	push   %ecx
  281217:	6a 08                	push   $0x8
  281219:	ff 73 04             	pushl  0x4(%ebx)
  28121c:	ff 33                	pushl  (%ebx)
  28121e:	e8 3e fa ff ff       	call   280c61 <boxfill8>
    boxfill8(sht->buf, sht->bxsize, c,           x0 - 1, y0 - 1, x1 + 0, y1 + 0);
  281223:	83 c4 38             	add    $0x38,%esp
  281226:	ff 75 e4             	pushl  -0x1c(%ebp)
  281229:	ff 75 e8             	pushl  -0x18(%ebp)
  28122c:	8b 45 10             	mov    0x10(%ebp),%eax
  28122f:	83 e8 01             	sub    $0x1,%eax
  281232:	50                   	push   %eax
  281233:	56                   	push   %esi
  281234:	0f b6 45 1c          	movzbl 0x1c(%ebp),%eax
  281238:	50                   	push   %eax
  281239:	ff 73 04             	pushl  0x4(%ebx)
  28123c:	ff 33                	pushl  (%ebx)
  28123e:	e8 1e fa ff ff       	call   280c61 <boxfill8>
    return;
  281243:	83 c4 1c             	add    $0x1c,%esp
}
  281246:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281249:	5b                   	pop    %ebx
  28124a:	5e                   	pop    %esi
  28124b:	5f                   	pop    %edi
  28124c:	5d                   	pop    %ebp
  28124d:	c3                   	ret    

0028124e <drawline8_sht>:

void drawline8_sht(struct SHEET *sht,int x0,int y0,int x1,int y1,int col)
{
  28124e:	55                   	push   %ebp
  28124f:	89 e5                	mov    %esp,%ebp
  281251:	57                   	push   %edi
  281252:	56                   	push   %esi
  281253:	53                   	push   %ebx
  281254:	83 ec 10             	sub    $0x10,%esp
  281257:	8b 75 08             	mov    0x8(%ebp),%esi
	int i,x,y,len,dx,dy;
	dx = x1-x0;
  28125a:	8b 7d 14             	mov    0x14(%ebp),%edi
  28125d:	2b 7d 0c             	sub    0xc(%ebp),%edi
	dy = y1-y0;
  281260:	8b 45 18             	mov    0x18(%ebp),%eax
  281263:	2b 45 10             	sub    0x10(%ebp),%eax
  281266:	89 45 f0             	mov    %eax,-0x10(%ebp)
	x = x0 << 10;
  281269:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  28126c:	c1 e1 0a             	shl    $0xa,%ecx
	y = y0 << 10;
  28126f:	8b 5d 10             	mov    0x10(%ebp),%ebx
  281272:	c1 e3 0a             	shl    $0xa,%ebx
  281275:	89 fa                	mov    %edi,%edx
  281277:	c1 fa 1f             	sar    $0x1f,%edx
  28127a:	89 d0                	mov    %edx,%eax
  28127c:	31 fa                	xor    %edi,%edx
  28127e:	29 c2                	sub    %eax,%edx
  281280:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281283:	c1 f8 1f             	sar    $0x1f,%eax
  281286:	89 45 ec             	mov    %eax,-0x14(%ebp)
  281289:	33 45 f0             	xor    -0x10(%ebp),%eax
  28128c:	2b 45 ec             	sub    -0x14(%ebp),%eax
	}
	if (dy<0) 
	{
		dy = -dy;
	}
	if(dx >= dy)
  28128f:	39 c2                	cmp    %eax,%edx
  281291:	7c 4a                	jl     2812dd <drawline8_sht+0x8f>
	{
		len=dx+1;
  281293:	83 c2 01             	add    $0x1,%edx
  281296:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if(x0 >x1)
			dx = -1024;
		else
			dx = 1024;
  281299:	8b 7d 0c             	mov    0xc(%ebp),%edi
  28129c:	39 7d 14             	cmp    %edi,0x14(%ebp)
  28129f:	b8 00 04 00 00       	mov    $0x400,%eax
  2812a4:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  2812a9:	89 c7                	mov    %eax,%edi
  2812ab:	0f 4c fa             	cmovl  %edx,%edi
  2812ae:	89 7d e8             	mov    %edi,-0x18(%ebp)
		if(y0<=y1)
  2812b1:	8b 7d 10             	mov    0x10(%ebp),%edi
  2812b4:	39 7d 18             	cmp    %edi,0x18(%ebp)
  2812b7:	7c 12                	jl     2812cb <drawline8_sht+0x7d>
			dy = ((y1 - y0 + 1)<<10)/len;
  2812b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812bc:	83 c0 01             	add    $0x1,%eax
  2812bf:	c1 e0 0a             	shl    $0xa,%eax
  2812c2:	99                   	cltd   
  2812c3:	f7 7d ec             	idivl  -0x14(%ebp)
  2812c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  2812c9:	eb 52                	jmp    28131d <drawline8_sht+0xcf>
		else
			dy = ((y1 - y0 - 1)<<10)/len;
  2812cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2812ce:	83 e8 01             	sub    $0x1,%eax
  2812d1:	c1 e0 0a             	shl    $0xa,%eax
  2812d4:	99                   	cltd   
  2812d5:	f7 7d ec             	idivl  -0x14(%ebp)
  2812d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  2812db:	eb 40                	jmp    28131d <drawline8_sht+0xcf>
	}
	else
	{
		len=dy+1;
  2812dd:	83 c0 01             	add    $0x1,%eax
  2812e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(y0>y1)
			dy = -1024;
		else
			dy = 1024;
  2812e3:	8b 55 10             	mov    0x10(%ebp),%edx
  2812e6:	39 55 18             	cmp    %edx,0x18(%ebp)
  2812e9:	b8 00 04 00 00       	mov    $0x400,%eax
  2812ee:	ba 00 fc ff ff       	mov    $0xfffffc00,%edx
  2812f3:	0f 4c c2             	cmovl  %edx,%eax
  2812f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(x0<=x1)
  2812f9:	8b 55 0c             	mov    0xc(%ebp),%edx
  2812fc:	39 55 14             	cmp    %edx,0x14(%ebp)
  2812ff:	7c 0f                	jl     281310 <drawline8_sht+0xc2>
			dx = ((x1 - x0 + 1)<<10)/len;
  281301:	8d 47 01             	lea    0x1(%edi),%eax
  281304:	c1 e0 0a             	shl    $0xa,%eax
  281307:	99                   	cltd   
  281308:	f7 7d ec             	idivl  -0x14(%ebp)
  28130b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28130e:	eb 0d                	jmp    28131d <drawline8_sht+0xcf>
		else
			dx = ((x1 - x0 - 1)<<10)/len;
  281310:	8d 47 ff             	lea    -0x1(%edi),%eax
  281313:	c1 e0 0a             	shl    $0xa,%eax
  281316:	99                   	cltd   
  281317:	f7 7d ec             	idivl  -0x14(%ebp)
  28131a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	}
	for(i=0;i<len;i++)
  28131d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  281321:	7e 31                	jle    281354 <drawline8_sht+0x106>
  281323:	ba 00 00 00 00       	mov    $0x0,%edx
  281328:	89 55 f0             	mov    %edx,-0x10(%ebp)
	{
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
  28132b:	89 d8                	mov    %ebx,%eax
  28132d:	c1 f8 0a             	sar    $0xa,%eax
  281330:	0f af 46 04          	imul   0x4(%esi),%eax
  281334:	89 cf                	mov    %ecx,%edi
  281336:	c1 ff 0a             	sar    $0xa,%edi
  281339:	03 06                	add    (%esi),%eax
  28133b:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  28133f:	88 14 38             	mov    %dl,(%eax,%edi,1)
		x += dx;
  281342:	03 4d e8             	add    -0x18(%ebp),%ecx
		y += dy;
  281345:	03 5d e4             	add    -0x1c(%ebp),%ebx
		if(x0<=x1)
			dx = ((x1 - x0 + 1)<<10)/len;
		else
			dx = ((x1 - x0 - 1)<<10)/len;
	}
	for(i=0;i<len;i++)
  281348:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  28134c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28134f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  281352:	75 d7                	jne    28132b <drawline8_sht+0xdd>
		sht->buf[(y>>10)*sht->bxsize+(x>>10)] = col;
		x += dx;
		y += dy;
	}
	return;
}
  281354:	83 c4 10             	add    $0x10,%esp
  281357:	5b                   	pop    %ebx
  281358:	5e                   	pop    %esi
  281359:	5f                   	pop    %edi
  28135a:	5d                   	pop    %ebp
  28135b:	c3                   	ret    

0028135c <putfont8>:
#include "fontascii.h"
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
  28135c:	55                   	push   %ebp
  28135d:	89 e5                	mov    %esp,%ebp
  28135f:	57                   	push   %edi
  281360:	56                   	push   %esi
  281361:	53                   	push   %ebx
  281362:	83 ec 08             	sub    $0x8,%esp
  281365:	8b 45 0c             	mov    0xc(%ebp),%eax
  281368:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  28136b:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  28136f:	89 fb                	mov    %edi,%ebx
  281371:	89 45 ec             	mov    %eax,-0x14(%ebp)
  281374:	0f af 45 14          	imul   0x14(%ebp),%eax
  281378:	03 45 10             	add    0x10(%ebp),%eax
  28137b:	89 c1                	mov    %eax,%ecx
  28137d:	03 4d 08             	add    0x8(%ebp),%ecx
  281380:	83 c7 10             	add    $0x10,%edi
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
  281383:	0f b6 13             	movzbl (%ebx),%edx
		int col = HKK_TABLE_COL-1;
  281386:	b8 07 00 00 00       	mov    $0x7,%eax
  28138b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  28138e:	89 f1                	mov    %esi,%ecx
  281390:	89 de                	mov    %ebx,%esi
  281392:	89 cb                	mov    %ecx,%ebx
		for(;col>=0;col--)
		{
			if(d&0x1) p[col] = c;
  281394:	f6 c2 01             	test   $0x1,%dl
  281397:	74 06                	je     28139f <putfont8+0x43>
  281399:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  28139c:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
			d=d>>1;
  28139f:	d0 ea                	shr    %dl
	for(i=0;i<HKK_TABLE_ROW;i++)
	{
		p = vram + (y+i)*xsize+x;
		d = font[i];
		int col = HKK_TABLE_COL-1;
		for(;col>=0;col--)
  2813a1:	83 e8 01             	sub    $0x1,%eax
  2813a4:	83 f8 ff             	cmp    $0xffffffff,%eax
  2813a7:	75 eb                	jne    281394 <putfont8+0x38>
  2813a9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  2813ac:	89 d8                	mov    %ebx,%eax
  2813ae:	89 f3                	mov    %esi,%ebx
  2813b0:	89 c6                	mov    %eax,%esi
  2813b2:	83 c3 01             	add    $0x1,%ebx
  2813b5:	03 4d ec             	add    -0x14(%ebp),%ecx
void putfont8(char *vram, int xsize,int x,int y,char c,unsigned char *font)
{
	int i;
	char *p;
	unsigned char d;
	for(i=0;i<HKK_TABLE_ROW;i++)
  2813b8:	39 fb                	cmp    %edi,%ebx
  2813ba:	75 c7                	jne    281383 <putfont8+0x27>
			if(d&0x1) p[col] = c;
			d=d>>1;
		}
	}

}
  2813bc:	83 c4 08             	add    $0x8,%esp
  2813bf:	5b                   	pop    %ebx
  2813c0:	5e                   	pop    %esi
  2813c1:	5f                   	pop    %edi
  2813c2:	5d                   	pop    %ebp
  2813c3:	c3                   	ret    

002813c4 <putfonts8_asc>:

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
  2813c4:	55                   	push   %ebp
  2813c5:	89 e5                	mov    %esp,%ebp
  2813c7:	57                   	push   %edi
  2813c8:	56                   	push   %esi
  2813c9:	53                   	push   %ebx
  2813ca:	8b 75 10             	mov    0x10(%ebp),%esi
  2813cd:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  2813d0:	0f b6 55 18          	movzbl 0x18(%ebp),%edx
	extern char hankaku[];
	for(;*s !=0x00;s++)
  2813d4:	0f b6 03             	movzbl (%ebx),%eax
  2813d7:	84 c0                	test   %al,%al
  2813d9:	74 2f                	je     28140a <putfonts8_asc+0x46>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
  2813db:	0f be fa             	movsbl %dl,%edi
  2813de:	0f b6 c0             	movzbl %al,%eax
  2813e1:	c1 e0 04             	shl    $0x4,%eax
  2813e4:	05 40 5f 28 00       	add    $0x285f40,%eax
  2813e9:	50                   	push   %eax
  2813ea:	57                   	push   %edi
  2813eb:	ff 75 14             	pushl  0x14(%ebp)
  2813ee:	56                   	push   %esi
  2813ef:	ff 75 0c             	pushl  0xc(%ebp)
  2813f2:	ff 75 08             	pushl  0x8(%ebp)
  2813f5:	e8 62 ff ff ff       	call   28135c <putfont8>
		x+=HKK_TABLE_COL;
  2813fa:	83 c6 08             	add    $0x8,%esi
}

void putfonts8_asc(char *vram,int xsize,int x,int y,char c,unsigned char *s)
{
	extern char hankaku[];
	for(;*s !=0x00;s++)
  2813fd:	83 c3 01             	add    $0x1,%ebx
  281400:	0f b6 03             	movzbl (%ebx),%eax
  281403:	83 c4 18             	add    $0x18,%esp
  281406:	84 c0                	test   %al,%al
  281408:	75 d4                	jne    2813de <putfonts8_asc+0x1a>
	{
		putfont8(vram,xsize,x,y,c,hankaku+*s*HKK_TABLE_ROW);
		x+=HKK_TABLE_COL;
	}
	return; 
}
  28140a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28140d:	5b                   	pop    %ebx
  28140e:	5e                   	pop    %esi
  28140f:	5f                   	pop    %edi
  281410:	5d                   	pop    %ebp
  281411:	c3                   	ret    

00281412 <set_segmdesc>:
#include "dsctbl.h"
#include "io.h"

void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit,int base,int ar)
{
  281412:	55                   	push   %ebp
  281413:	89 e5                	mov    %esp,%ebp
  281415:	57                   	push   %edi
  281416:	56                   	push   %esi
  281417:	53                   	push   %ebx
  281418:	8b 55 08             	mov    0x8(%ebp),%edx
  28141b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  28141e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281421:	8b 7d 14             	mov    0x14(%ebp),%edi
	if(limit>0xfffff)
  281424:	81 fb ff ff 0f 00    	cmp    $0xfffff,%ebx
  28142a:	76 09                	jbe    281435 <set_segmdesc+0x23>
	{
		ar |= 0x8000;
  28142c:	81 cf 00 80 00 00    	or     $0x8000,%edi
		limit /= 0x1000;
  281432:	c1 eb 0c             	shr    $0xc,%ebx
	}
	sd->limit_low = limit&0xffff;
  281435:	66 89 1a             	mov    %bx,(%edx)
	sd->base_low = base&0xffff;
  281438:	66 89 4a 02          	mov    %cx,0x2(%edx)
	sd->base_mid = (base>>16) & 0xff;
  28143c:	89 ce                	mov    %ecx,%esi
  28143e:	c1 fe 10             	sar    $0x10,%esi
  281441:	89 f0                	mov    %esi,%eax
  281443:	88 42 04             	mov    %al,0x4(%edx)
	sd->access_right = ar & 0xff;
  281446:	89 f8                	mov    %edi,%eax
  281448:	88 42 05             	mov    %al,0x5(%edx)
	sd->limit_high = ((limit>>16)&0x0f) | ((ar>>8)&0xf0);
  28144b:	c1 eb 10             	shr    $0x10,%ebx
  28144e:	83 e3 0f             	and    $0xf,%ebx
  281451:	89 f8                	mov    %edi,%eax
  281453:	c1 f8 08             	sar    $0x8,%eax
  281456:	83 e0 f0             	and    $0xfffffff0,%eax
  281459:	09 d8                	or     %ebx,%eax
  28145b:	88 42 06             	mov    %al,0x6(%edx)
	sd->base_high = (base>>24)&0xff;
  28145e:	c1 e9 18             	shr    $0x18,%ecx
  281461:	88 4a 07             	mov    %cl,0x7(%edx)
	return;
}
  281464:	5b                   	pop    %ebx
  281465:	5e                   	pop    %esi
  281466:	5f                   	pop    %edi
  281467:	5d                   	pop    %ebp
  281468:	c3                   	ret    

00281469 <set_gatedesc>:

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
  281469:	55                   	push   %ebp
  28146a:	89 e5                	mov    %esp,%ebp
  28146c:	53                   	push   %ebx
  28146d:	8b 45 08             	mov    0x8(%ebp),%eax
  281470:	8b 55 0c             	mov    0xc(%ebp),%edx
  281473:	8b 4d 14             	mov    0x14(%ebp),%ecx
	gd->offset_low = offset & 0xffff;
  281476:	66 89 10             	mov    %dx,(%eax)
	gd->selector = selector;
  281479:	8b 5d 10             	mov    0x10(%ebp),%ebx
  28147c:	66 89 58 02          	mov    %bx,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281480:	89 cb                	mov    %ecx,%ebx
  281482:	c1 fb 08             	sar    $0x8,%ebx
  281485:	88 58 04             	mov    %bl,0x4(%eax)
	gd->access_right = ar&0xff;
  281488:	88 48 05             	mov    %cl,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28148b:	c1 ea 10             	shr    $0x10,%edx
  28148e:	66 89 50 06          	mov    %dx,0x6(%eax)
	return;
}
  281492:	5b                   	pop    %ebx
  281493:	5d                   	pop    %ebp
  281494:	c3                   	ret    

00281495 <init_gdtidt>:

void init_gdtidt(void)
{
  281495:	55                   	push   %ebp
  281496:	89 e5                	mov    %esp,%ebp
  281498:	53                   	push   %ebx
  281499:	83 ec 04             	sub    $0x4,%esp
  28149c:	bb 00 00 27 00       	mov    $0x270000,%ebx
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
	{
		set_segmdesc(gdt+i,0,0,0);
  2814a1:	6a 00                	push   $0x0
  2814a3:	6a 00                	push   $0x0
  2814a5:	6a 00                	push   $0x0
  2814a7:	53                   	push   %ebx
  2814a8:	e8 65 ff ff ff       	call   281412 <set_segmdesc>
  2814ad:	83 c3 08             	add    $0x8,%ebx
{
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
	struct GATE_DESCRIPTOR *idt = (struct GATE_DESCRIPTOR *) ADR_IDT;
	int i;

	for(i=0;i<8192;i++)
  2814b0:	83 c4 10             	add    $0x10,%esp
  2814b3:	81 fb 00 00 28 00    	cmp    $0x280000,%ebx
  2814b9:	75 e6                	jne    2814a1 <init_gdtidt+0xc>
	{
		set_segmdesc(gdt+i,0,0,0);
	}
	//must be similiar with bootstrap gdt.
	//otherwise the code will run with different segment descriptor.
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
  2814bb:	68 92 40 00 00       	push   $0x4092
  2814c0:	6a 00                	push   $0x0
  2814c2:	6a ff                	push   $0xffffffff
  2814c4:	68 08 00 27 00       	push   $0x270008
  2814c9:	e8 44 ff ff ff       	call   281412 <set_segmdesc>
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
  2814ce:	68 9a 40 00 00       	push   $0x409a
  2814d3:	6a 00                	push   $0x0
  2814d5:	68 ff ff 0f 00       	push   $0xfffff
  2814da:	68 10 00 27 00       	push   $0x270010
  2814df:	e8 2e ff ff ff       	call   281412 <set_segmdesc>
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
  2814e4:	83 c4 20             	add    $0x20,%esp
  2814e7:	68 9a 40 00 00       	push   $0x409a
  2814ec:	68 00 00 28 00       	push   $0x280000
  2814f1:	68 ff ff 07 00       	push   $0x7ffff
  2814f6:	68 18 00 27 00       	push   $0x270018
  2814fb:	e8 12 ff ff ff       	call   281412 <set_segmdesc>
	load_gdtr(LIMIT_GDT,ADR_GDT);
  281500:	83 c4 08             	add    $0x8,%esp
  281503:	68 00 00 27 00       	push   $0x270000
  281508:	68 ff ff 00 00       	push   $0xffff
  28150d:	e8 bd f5 ff ff       	call   280acf <load_gdtr>
  281512:	83 c4 10             	add    $0x10,%esp
  281515:	b8 00 f8 26 00       	mov    $0x26f800,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28151a:	66 c7 00 00 00       	movw   $0x0,(%eax)
	gd->selector = selector;
  28151f:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
	gd->dw_count = (ar>>8) & 0xff;
  281525:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	gd->access_right = ar&0xff;
  281529:	c6 40 05 00          	movb   $0x0,0x5(%eax)
	gd->offset_high = (offset>>16)&0xffff;
  28152d:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
  281533:	83 c0 08             	add    $0x8,%eax
	set_segmdesc(gdt+1,0xffffffff,0x00000000,AR_DATA32_RW);
	set_segmdesc(gdt+2,0x000fffff,0x00000000,AR_CODE32_ER);
	set_segmdesc(gdt+3,LIMIT_BOTPAK,ADR_BOTPAK,AR_CODE32_ER);
	load_gdtr(LIMIT_GDT,ADR_GDT);

	for(i=0;i<256;i++)
  281536:	3d 00 00 27 00       	cmp    $0x270000,%eax
  28153b:	75 dd                	jne    28151a <init_gdtidt+0x85>
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
  28153d:	b8 de 17 00 00       	mov    $0x17de,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281542:	66 a3 00 f9 26 00    	mov    %ax,0x26f900
	gd->selector = selector;
  281548:	66 c7 05 02 f9 26 00 	movw   $0x18,0x26f902
  28154f:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281551:	c6 05 04 f9 26 00 00 	movb   $0x0,0x26f904
	gd->access_right = ar&0xff;
  281558:	c6 05 05 f9 26 00 8e 	movb   $0x8e,0x26f905
	gd->offset_high = (offset>>16)&0xffff;
  28155f:	c1 e8 10             	shr    $0x10,%eax
  281562:	66 a3 06 f9 26 00    	mov    %ax,0x26f906
	for(i=0;i<256;i++)
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
  281568:	b8 b0 17 00 00       	mov    $0x17b0,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  28156d:	66 a3 08 f9 26 00    	mov    %ax,0x26f908
	gd->selector = selector;
  281573:	66 c7 05 0a f9 26 00 	movw   $0x18,0x26f90a
  28157a:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  28157c:	c6 05 0c f9 26 00 00 	movb   $0x0,0x26f90c
	gd->access_right = ar&0xff;
  281583:	c6 05 0d f9 26 00 8e 	movb   $0x8e,0x26f90d
	gd->offset_high = (offset>>16)&0xffff;
  28158a:	c1 e8 10             	shr    $0x10,%eax
  28158d:	66 a3 0e f9 26 00    	mov    %ax,0x26f90e
	{
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
  281593:	b8 c7 17 00 00       	mov    $0x17c7,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281598:	66 a3 60 f9 26 00    	mov    %ax,0x26f960
	gd->selector = selector;
  28159e:	66 c7 05 62 f9 26 00 	movw   $0x18,0x26f962
  2815a5:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815a7:	c6 05 64 f9 26 00 00 	movb   $0x0,0x26f964
	gd->access_right = ar&0xff;
  2815ae:	c6 05 65 f9 26 00 8e 	movb   $0x8e,0x26f965
	gd->offset_high = (offset>>16)&0xffff;
  2815b5:	c1 e8 10             	shr    $0x10,%eax
  2815b8:	66 a3 66 f9 26 00    	mov    %ax,0x26f966
		set_gatedesc(idt+i,0,0,0);
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
  2815be:	b8 f5 17 00 00       	mov    $0x17f5,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815c3:	66 a3 00 fa 26 00    	mov    %ax,0x26fa00
	gd->selector = selector;
  2815c9:	66 c7 05 02 fa 26 00 	movw   $0x18,0x26fa02
  2815d0:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815d2:	c6 05 04 fa 26 00 00 	movb   $0x0,0x26fa04
	gd->access_right = ar&0xff;
  2815d9:	c6 05 05 fa 26 00 ee 	movb   $0xee,0x26fa05
	gd->offset_high = (offset>>16)&0xffff;
  2815e0:	c1 e8 10             	shr    $0x10,%eax
  2815e3:	66 a3 06 fa 26 00    	mov    %ax,0x26fa06
	}
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
  2815e9:	b8 16 18 00 00       	mov    $0x1816,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  2815ee:	66 a3 68 f8 26 00    	mov    %ax,0x26f868
	gd->selector = selector;
  2815f4:	66 c7 05 6a f8 26 00 	movw   $0x18,0x26f86a
  2815fb:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  2815fd:	c6 05 6c f8 26 00 00 	movb   $0x0,0x26f86c
	gd->access_right = ar&0xff;
  281604:	c6 05 6d f8 26 00 8e 	movb   $0x8e,0x26f86d
	gd->offset_high = (offset>>16)&0xffff;
  28160b:	c1 e8 10             	shr    $0x10,%eax
  28160e:	66 a3 6e f8 26 00    	mov    %ax,0x26f86e
	set_gatedesc(idt+0x20,(int)asm_inthandler20 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
  281614:	b8 36 18 00 00       	mov    $0x1836,%eax
	return;
}

void set_gatedesc(struct GATE_DESCRIPTOR *gd,int offset,int selector,int ar)
{
	gd->offset_low = offset & 0xffff;
  281619:	66 a3 60 f8 26 00    	mov    %ax,0x26f860
	gd->selector = selector;
  28161f:	66 c7 05 62 f8 26 00 	movw   $0x18,0x26f862
  281626:	18 00 
	gd->dw_count = (ar>>8) & 0xff;
  281628:	c6 05 64 f8 26 00 00 	movb   $0x0,0x26f864
	gd->access_right = ar&0xff;
  28162f:	c6 05 65 f8 26 00 8e 	movb   $0x8e,0x26f865
	gd->offset_high = (offset>>16)&0xffff;
  281636:	c1 e8 10             	shr    $0x10,%eax
  281639:	66 a3 66 f8 26 00    	mov    %ax,0x26f866
	set_gatedesc(idt+0x21,(int)asm_inthandler21 - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x2c,(int)asm_inthandler2c - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x40,(int)asm_sys_api - 0x280000,3*8,AR_INTGATE32+0x60);
	set_gatedesc(idt+0x0d,(int)asm_inthandler0d - 0x280000,3*8,AR_INTGATE32);
	set_gatedesc(idt+0x0c,(int)asm_inthandler0c - 0x280000,3*8,AR_INTGATE32);
	load_idtr(LIMIT_IDT,ADR_IDT);
  28163f:	83 ec 08             	sub    $0x8,%esp
  281642:	68 00 f8 26 00       	push   $0x26f800
  281647:	68 ff 07 00 00       	push   $0x7ff
  28164c:	e8 8e f4 ff ff       	call   280adf <load_idtr>

	return;
  281651:	83 c4 10             	add    $0x10,%esp
}
  281654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281657:	c9                   	leave  
  281658:	c3                   	ret    

00281659 <init_pic>:
#include "const.h"
#include "fifo.h"
#include "timer.h"
#include "string.h"
void init_pic(void)
{
  281659:	55                   	push   %ebp
  28165a:	89 e5                	mov    %esp,%ebp
  28165c:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIC0_IMR, 0xff);	//disable all pic0 int
  28165f:	68 ff 00 00 00       	push   $0xff
  281664:	6a 21                	push   $0x21
  281666:	e8 3b f4 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC1_IMR, 0xff);	//disable all pic1 int
  28166b:	83 c4 08             	add    $0x8,%esp
  28166e:	68 ff 00 00 00       	push   $0xff
  281673:	68 a1 00 00 00       	push   $0xa1
  281678:	e8 29 f4 ff ff       	call   280aa6 <io_out8>

	io_out8(PIC0_ICW1, 0x11);	
  28167d:	83 c4 08             	add    $0x8,%esp
  281680:	6a 11                	push   $0x11
  281682:	6a 20                	push   $0x20
  281684:	e8 1d f4 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC0_ICW2, 0x20);
  281689:	83 c4 08             	add    $0x8,%esp
  28168c:	6a 20                	push   $0x20
  28168e:	6a 21                	push   $0x21
  281690:	e8 11 f4 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC0_ICW3, 1 << 2);
  281695:	83 c4 08             	add    $0x8,%esp
  281698:	6a 04                	push   $0x4
  28169a:	6a 21                	push   $0x21
  28169c:	e8 05 f4 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC0_ICW4, 0x01);
  2816a1:	83 c4 08             	add    $0x8,%esp
  2816a4:	6a 01                	push   $0x1
  2816a6:	6a 21                	push   $0x21
  2816a8:	e8 f9 f3 ff ff       	call   280aa6 <io_out8>

	io_out8(PIC1_ICW1, 0x11);
  2816ad:	83 c4 08             	add    $0x8,%esp
  2816b0:	6a 11                	push   $0x11
  2816b2:	68 a0 00 00 00       	push   $0xa0
  2816b7:	e8 ea f3 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC1_ICW2, 0x28);
  2816bc:	83 c4 08             	add    $0x8,%esp
  2816bf:	6a 28                	push   $0x28
  2816c1:	68 a1 00 00 00       	push   $0xa1
  2816c6:	e8 db f3 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC1_ICW3, 2);
  2816cb:	83 c4 08             	add    $0x8,%esp
  2816ce:	6a 02                	push   $0x2
  2816d0:	68 a1 00 00 00       	push   $0xa1
  2816d5:	e8 cc f3 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC1_ICW4, 0x01);
  2816da:	83 c4 08             	add    $0x8,%esp
  2816dd:	6a 01                	push   $0x1
  2816df:	68 a1 00 00 00       	push   $0xa1
  2816e4:	e8 bd f3 ff ff       	call   280aa6 <io_out8>

	io_out8(PIC0_IMR, 0xfb);
  2816e9:	83 c4 08             	add    $0x8,%esp
  2816ec:	68 fb 00 00 00       	push   $0xfb
  2816f1:	6a 21                	push   $0x21
  2816f3:	e8 ae f3 ff ff       	call   280aa6 <io_out8>
	io_out8(PIC1_IMR, 0xff);
  2816f8:	83 c4 08             	add    $0x8,%esp
  2816fb:	68 ff 00 00 00       	push   $0xff
  281700:	68 a1 00 00 00       	push   $0xa1
  281705:	e8 9c f3 ff ff       	call   280aa6 <io_out8>
}
  28170a:	83 c4 10             	add    $0x10,%esp
  28170d:	c9                   	leave  
  28170e:	c3                   	ret    

0028170f <inthandler0d>:

//when app code execute or access sys code or mem
int *inthandler0d(int *esp)
{
  28170f:	55                   	push   %ebp
  281710:	89 e5                	mov    %esp,%ebp
  281712:	57                   	push   %edi
  281713:	56                   	push   %esi
  281714:	53                   	push   %ebx
  281715:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281718:	e8 32 17 00 00       	call   282e4f <task_now>
  28171d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28171f:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0D:\n General Protected Exception.\n");
  281725:	83 ec 08             	sub    $0x8,%esp
  281728:	68 20 4e 28 00       	push   $0x284e20
  28172d:	56                   	push   %esi
  28172e:	e8 ca 24 00 00       	call   283bfd <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281733:	83 c4 0c             	add    $0xc,%esp
  281736:	8b 45 08             	mov    0x8(%ebp),%eax
  281739:	ff 70 2c             	pushl  0x2c(%eax)
  28173c:	68 48 4e 28 00       	push   $0x284e48
  281741:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281744:	57                   	push   %edi
  281745:	e8 33 02 00 00       	call   28197d <sprintf>
	cons_putstr0(cons,s);
  28174a:	83 c4 08             	add    $0x8,%esp
  28174d:	57                   	push   %edi
  28174e:	56                   	push   %esi
  28174f:	e8 a9 24 00 00       	call   283bfd <cons_putstr0>
	return &(task->tss.esp0);
  281754:	8d 43 30             	lea    0x30(%ebx),%eax
}
  281757:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28175a:	5b                   	pop    %ebx
  28175b:	5e                   	pop    %esi
  28175c:	5f                   	pop    %edi
  28175d:	5d                   	pop    %ebp
  28175e:	c3                   	ret    

0028175f <inthandler0c>:


//when code write beyond stack too much
int *inthandler0c(int *esp)
{
  28175f:	55                   	push   %ebp
  281760:	89 e5                	mov    %esp,%ebp
  281762:	57                   	push   %edi
  281763:	56                   	push   %esi
  281764:	53                   	push   %ebx
  281765:	83 ec 2c             	sub    $0x2c,%esp
	struct TASK *task = task_now();
  281768:	e8 e2 16 00 00       	call   282e4f <task_now>
  28176d:	89 c3                	mov    %eax,%ebx
	struct CONSOLE *cons = task->cons;
  28176f:	8b b0 94 00 00 00    	mov    0x94(%eax),%esi
	cons_putstr0(cons,"\nINT 0C:\n Stack Exception.\n");
  281775:	83 ec 08             	sub    $0x8,%esp
  281778:	68 50 4e 28 00       	push   $0x284e50
  28177d:	56                   	push   %esi
  28177e:	e8 7a 24 00 00       	call   283bfd <cons_putstr0>
	char s[30];
	sprintf(s,"EIP=%x\n",esp[11]);
  281783:	83 c4 0c             	add    $0xc,%esp
  281786:	8b 45 08             	mov    0x8(%ebp),%eax
  281789:	ff 70 2c             	pushl  0x2c(%eax)
  28178c:	68 48 4e 28 00       	push   $0x284e48
  281791:	8d 7d ca             	lea    -0x36(%ebp),%edi
  281794:	57                   	push   %edi
  281795:	e8 e3 01 00 00       	call   28197d <sprintf>
	cons_putstr0(cons,s);
  28179a:	83 c4 08             	add    $0x8,%esp
  28179d:	57                   	push   %edi
  28179e:	56                   	push   %esi
  28179f:	e8 59 24 00 00       	call   283bfd <cons_putstr0>
	return &(task->tss.esp0);
  2817a4:	8d 43 30             	lea    0x30(%ebx),%eax
}
  2817a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2817aa:	5b                   	pop    %ebx
  2817ab:	5e                   	pop    %esi
  2817ac:	5f                   	pop    %edi
  2817ad:	5d                   	pop    %ebp
  2817ae:	c3                   	ret    
  2817af:	90                   	nop

002817b0 <asm_inthandler21>:
  2817b0:	06                   	push   %es
  2817b1:	1e                   	push   %ds
  2817b2:	60                   	pusha  
  2817b3:	89 e0                	mov    %esp,%eax
  2817b5:	50                   	push   %eax
  2817b6:	66 8c d0             	mov    %ss,%ax
  2817b9:	8e d8                	mov    %eax,%ds
  2817bb:	8e c0                	mov    %eax,%es
  2817bd:	e8 ed 05 00 00       	call   281daf <inthandler21>
  2817c2:	58                   	pop    %eax
  2817c3:	61                   	popa   
  2817c4:	1f                   	pop    %ds
  2817c5:	07                   	pop    %es
  2817c6:	cf                   	iret   

002817c7 <asm_inthandler2c>:
  2817c7:	06                   	push   %es
  2817c8:	1e                   	push   %ds
  2817c9:	60                   	pusha  
  2817ca:	89 e0                	mov    %esp,%eax
  2817cc:	50                   	push   %eax
  2817cd:	66 8c d0             	mov    %ss,%ax
  2817d0:	8e d8                	mov    %eax,%ds
  2817d2:	8e c0                	mov    %eax,%es
  2817d4:	e8 3c 05 00 00       	call   281d15 <inthandler2c>
  2817d9:	58                   	pop    %eax
  2817da:	61                   	popa   
  2817db:	1f                   	pop    %ds
  2817dc:	07                   	pop    %es
  2817dd:	cf                   	iret   

002817de <asm_inthandler20>:
  2817de:	06                   	push   %es
  2817df:	1e                   	push   %ds
  2817e0:	60                   	pusha  
  2817e1:	89 e0                	mov    %esp,%eax
  2817e3:	50                   	push   %eax
  2817e4:	66 8c d0             	mov    %ss,%ax
  2817e7:	8e d8                	mov    %eax,%ds
  2817e9:	8e c0                	mov    %eax,%es
  2817eb:	e8 c1 13 00 00       	call   282bb1 <inthandler20>
  2817f0:	58                   	pop    %eax
  2817f1:	61                   	popa   
  2817f2:	1f                   	pop    %ds
  2817f3:	07                   	pop    %es
  2817f4:	cf                   	iret   

002817f5 <asm_sys_api>:
  2817f5:	fb                   	sti    
  2817f6:	1e                   	push   %ds
  2817f7:	06                   	push   %es
  2817f8:	60                   	pusha  
  2817f9:	60                   	pusha  
  2817fa:	66 8c d0             	mov    %ss,%ax
  2817fd:	8e d8                	mov    %eax,%ds
  2817ff:	8e c0                	mov    %eax,%es
  281801:	e8 c8 2a 00 00       	call   2842ce <sys_api>
  281806:	83 f8 00             	cmp    $0x0,%eax
  281809:	75 07                	jne    281812 <end_app>
  28180b:	83 c4 20             	add    $0x20,%esp
  28180e:	61                   	popa   
  28180f:	07                   	pop    %es
  281810:	1f                   	pop    %ds
  281811:	cf                   	iret   

00281812 <end_app>:
  281812:	8b 20                	mov    (%eax),%esp
  281814:	61                   	popa   
  281815:	c3                   	ret    

00281816 <asm_inthandler0d>:
  281816:	fb                   	sti    
  281817:	06                   	push   %es
  281818:	1e                   	push   %ds
  281819:	60                   	pusha  
  28181a:	89 e0                	mov    %esp,%eax
  28181c:	50                   	push   %eax
  28181d:	66 8c d0             	mov    %ss,%ax
  281820:	8e d8                	mov    %eax,%ds
  281822:	8e c0                	mov    %eax,%es
  281824:	e8 e6 fe ff ff       	call   28170f <inthandler0d>
  281829:	83 f8 00             	cmp    $0x0,%eax
  28182c:	75 e4                	jne    281812 <end_app>
  28182e:	58                   	pop    %eax
  28182f:	61                   	popa   
  281830:	1f                   	pop    %ds
  281831:	07                   	pop    %es
  281832:	83 c4 04             	add    $0x4,%esp
  281835:	cf                   	iret   

00281836 <asm_inthandler0c>:
  281836:	fb                   	sti    
  281837:	06                   	push   %es
  281838:	1e                   	push   %ds
  281839:	60                   	pusha  
  28183a:	89 e0                	mov    %esp,%eax
  28183c:	50                   	push   %eax
  28183d:	66 8c d0             	mov    %ss,%ax
  281840:	8e d8                	mov    %eax,%ds
  281842:	8e c0                	mov    %eax,%es
  281844:	e8 16 ff ff ff       	call   28175f <inthandler0c>
  281849:	83 f8 00             	cmp    $0x0,%eax
  28184c:	75 c4                	jne    281812 <end_app>
  28184e:	58                   	pop    %eax
  28184f:	61                   	popa   
  281850:	1f                   	pop    %ds
  281851:	07                   	pop    %es
  281852:	83 c4 04             	add    $0x4,%esp
  281855:	cf                   	iret   

00281856 <itoa>:
#include"string.h"
void itoa(int value,char *buf){
  281856:	55                   	push   %ebp
  281857:	89 e5                	mov    %esp,%ebp
  281859:	57                   	push   %edi
  28185a:	56                   	push   %esi
  28185b:	53                   	push   %ebx
  28185c:	83 ec 10             	sub    $0x10,%esp
  28185f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  281862:	8b 7d 0c             	mov    0xc(%ebp),%edi
	char tmp_buf[10] = {0};
  281865:	c7 45 ea 00 00 00 00 	movl   $0x0,-0x16(%ebp)
  28186c:	c7 45 ee 00 00 00 00 	movl   $0x0,-0x12(%ebp)
  281873:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%ebp)
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
  281879:	85 c9                	test   %ecx,%ecx
  28187b:	79 08                	jns    281885 <itoa+0x2f>
		*buf++ = '-';
  28187d:	c6 07 2d             	movb   $0x2d,(%edi)
		value = ~value + 1; 
  281880:	f7 d9                	neg    %ecx
#include"string.h"
void itoa(int value,char *buf){
	char tmp_buf[10] = {0};
	char *tbp = tmp_buf;
	if((value >> 31) & 0x1){ // neg num 
		*buf++ = '-';
  281882:	8d 7f 01             	lea    0x1(%edi),%edi
  281885:	8d 5d ea             	lea    -0x16(%ebp),%ebx
		value = ~value + 1; 
	}

	do{
		*tbp++ = ('0' + (char)(value % 10));
  281888:	be 67 66 66 66       	mov    $0x66666667,%esi
  28188d:	83 c3 01             	add    $0x1,%ebx
  281890:	89 c8                	mov    %ecx,%eax
  281892:	f7 ee                	imul   %esi
  281894:	c1 fa 02             	sar    $0x2,%edx
  281897:	89 c8                	mov    %ecx,%eax
  281899:	c1 f8 1f             	sar    $0x1f,%eax
  28189c:	29 c2                	sub    %eax,%edx
  28189e:	8d 04 92             	lea    (%edx,%edx,4),%eax
  2818a1:	01 c0                	add    %eax,%eax
  2818a3:	29 c1                	sub    %eax,%ecx
  2818a5:	83 c1 30             	add    $0x30,%ecx
  2818a8:	88 4b ff             	mov    %cl,-0x1(%ebx)
		value /= 10;
  2818ab:	89 d1                	mov    %edx,%ecx
	}while(value);
  2818ad:	85 d2                	test   %edx,%edx
  2818af:	75 dc                	jne    28188d <itoa+0x37>
	while(tmp_buf != tbp--)
  2818b1:	8d 73 ff             	lea    -0x1(%ebx),%esi
  2818b4:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2818b7:	39 c3                	cmp    %eax,%ebx
  2818b9:	74 20                	je     2818db <itoa+0x85>
  2818bb:	89 f0                	mov    %esi,%eax
  2818bd:	89 fa                	mov    %edi,%edx
  2818bf:	8d 5d e9             	lea    -0x17(%ebp),%ebx
		*buf++ = *tbp;
  2818c2:	83 c2 01             	add    $0x1,%edx
  2818c5:	0f b6 08             	movzbl (%eax),%ecx
  2818c8:	88 4a ff             	mov    %cl,-0x1(%edx)

	do{
		*tbp++ = ('0' + (char)(value % 10));
		value /= 10;
	}while(value);
	while(tmp_buf != tbp--)
  2818cb:	83 e8 01             	sub    $0x1,%eax
  2818ce:	39 d8                	cmp    %ebx,%eax
  2818d0:	75 f0                	jne    2818c2 <itoa+0x6c>
  2818d2:	8d 45 f4             	lea    -0xc(%ebp),%eax
  2818d5:	29 c6                	sub    %eax,%esi
  2818d7:	8d 7c 37 0b          	lea    0xb(%edi,%esi,1),%edi
		*buf++ = *tbp;
	*buf='\0';
  2818db:	c6 07 00             	movb   $0x0,(%edi)
}
  2818de:	83 c4 10             	add    $0x10,%esp
  2818e1:	5b                   	pop    %ebx
  2818e2:	5e                   	pop    %esi
  2818e3:	5f                   	pop    %edi
  2818e4:	5d                   	pop    %ebp
  2818e5:	c3                   	ret    

002818e6 <xtoa>:
    else
        value = value + 48;
    return value;
}

void xtoa(unsigned int value,char *buf){
  2818e6:	55                   	push   %ebp
  2818e7:	89 e5                	mov    %esp,%ebp
  2818e9:	57                   	push   %edi
  2818ea:	56                   	push   %esi
  2818eb:	53                   	push   %ebx
  2818ec:	83 ec 20             	sub    $0x20,%esp
  2818ef:	8b 45 08             	mov    0x8(%ebp),%eax
    char tmp_buf[30] = {0};
  2818f2:	bb 00 00 00 00       	mov    $0x0,%ebx
  2818f7:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
  2818fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  281905:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  28190a:	ba 00 00 00 00       	mov    $0x0,%edx
  28190f:	89 5c 15 d8          	mov    %ebx,-0x28(%ebp,%edx,1)
  281913:	83 c2 04             	add    $0x4,%edx
  281916:	39 ca                	cmp    %ecx,%edx
  281918:	72 f5                	jb     28190f <xtoa+0x29>
    char *tbp = tmp_buf;

    *buf++='0';
  28191a:	8b 75 0c             	mov    0xc(%ebp),%esi
  28191d:	c6 06 30             	movb   $0x30,(%esi)
    *buf++='x';
  281920:	83 c6 02             	add    $0x2,%esi
  281923:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281926:	c6 43 01 78          	movb   $0x78,0x1(%ebx)
    return value;
}

void xtoa(unsigned int value,char *buf){
    char tmp_buf[30] = {0};
    char *tbp = tmp_buf;
  28192a:	8d 5d d6             	lea    -0x2a(%ebp),%ebx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  28192d:	83 c3 01             	add    $0x1,%ebx
  281930:	89 c1                	mov    %eax,%ecx
  281932:	83 e1 0f             	and    $0xf,%ecx
	*str='\0';
}

static  inline char fourbtoc(int value){
    if(value >= 10)
        value = value - 10 + 65;
  281935:	8d 79 37             	lea    0x37(%ecx),%edi
  281938:	8d 51 30             	lea    0x30(%ecx),%edx
  28193b:	83 f9 0a             	cmp    $0xa,%ecx
  28193e:	0f 4d d7             	cmovge %edi,%edx

    *buf++='0';
    *buf++='x';
    do{
        // *tbp++ = ('0' + (char)(value % 16));//得到低位数字
		*tbp++=fourbtoc(value&0x0000000f);
  281941:	88 53 ff             	mov    %dl,-0x1(%ebx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
  281944:	c1 e8 04             	shr    $0x4,%eax
    }while(value);
  281947:	85 c0                	test   %eax,%eax
  281949:	75 e2                	jne    28192d <xtoa+0x47>
    
    while(tmp_buf != tbp){
  28194b:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  28194e:	39 c3                	cmp    %eax,%ebx
  281950:	74 20                	je     281972 <xtoa+0x8c>
  281952:	89 d8                	mov    %ebx,%eax
  281954:	89 f1                	mov    %esi,%ecx
  281956:	8d 7d d6             	lea    -0x2a(%ebp),%edi
      tbp--;
  281959:	83 e8 01             	sub    $0x1,%eax
      *buf++ = *tbp;
  28195c:	83 c1 01             	add    $0x1,%ecx
  28195f:	0f b6 10             	movzbl (%eax),%edx
  281962:	88 51 ff             	mov    %dl,-0x1(%ecx)
        
        //*tbp++ = ((value % 16)>9)?('A' + (char)(value % 16-10)):('0' + (char)(value % 16));//得到低位数字
		value >>= 4;
    }while(value);
    
    while(tmp_buf != tbp){
  281965:	39 f8                	cmp    %edi,%eax
  281967:	75 f0                	jne    281959 <xtoa+0x73>
  281969:	8d 45 f4             	lea    -0xc(%ebp),%eax
  28196c:	29 c3                	sub    %eax,%ebx
  28196e:	8d 74 1e 1e          	lea    0x1e(%esi,%ebx,1),%esi
      tbp--;
      *buf++ = *tbp;
    }
    *buf='\0';
  281972:	c6 06 00             	movb   $0x0,(%esi)
}
  281975:	83 c4 20             	add    $0x20,%esp
  281978:	5b                   	pop    %ebx
  281979:	5e                   	pop    %esi
  28197a:	5f                   	pop    %edi
  28197b:	5d                   	pop    %ebp
  28197c:	c3                   	ret    

0028197d <sprintf>:
	while(tmp_buf != tbp--)
		*buf++ = *tbp;
	*buf='\0';
}

void sprintf(char *str,char *format ,...){
  28197d:	55                   	push   %ebp
  28197e:	89 e5                	mov    %esp,%ebp
  281980:	57                   	push   %edi
  281981:	56                   	push   %esi
  281982:	53                   	push   %ebx
  281983:	83 ec 10             	sub    $0x10,%esp
  281986:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
  281989:	8d 7d 10             	lea    0x10(%ebp),%edi
	char buffer[10];
	char *buf=buffer;
	while(*format){
  28198c:	e9 a8 00 00 00       	jmp    281a39 <sprintf+0xbc>
		if(*format!='%'){
  281991:	3c 25                	cmp    $0x25,%al
  281993:	74 10                	je     2819a5 <sprintf+0x28>
			*str++=*format++;
  281995:	83 c6 01             	add    $0x1,%esi
  281998:	89 75 0c             	mov    %esi,0xc(%ebp)
  28199b:	88 03                	mov    %al,(%ebx)
  28199d:	8d 5b 01             	lea    0x1(%ebx),%ebx
			continue;
  2819a0:	e9 94 00 00 00       	jmp    281a39 <sprintf+0xbc>
		}
		else{
			format++;
  2819a5:	8d 46 01             	lea    0x1(%esi),%eax
  2819a8:	89 45 0c             	mov    %eax,0xc(%ebp)
			switch (*format){
  2819ab:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  2819af:	3c 73                	cmp    $0x73,%al
  2819b1:	74 5e                	je     281a11 <sprintf+0x94>
  2819b3:	3c 78                	cmp    $0x78,%al
  2819b5:	74 2f                	je     2819e6 <sprintf+0x69>
  2819b7:	3c 64                	cmp    $0x64,%al
  2819b9:	75 75                	jne    281a30 <sprintf+0xb3>
				case 'd':itoa(*var,buf);while(*buf){*str++=*buf++;};break;
  2819bb:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2819be:	50                   	push   %eax
  2819bf:	ff 37                	pushl  (%edi)
  2819c1:	e8 90 fe ff ff       	call   281856 <itoa>
  2819c6:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  2819ca:	83 c4 08             	add    $0x8,%esp
  2819cd:	84 c0                	test   %al,%al
  2819cf:	74 5f                	je     281a30 <sprintf+0xb3>
  2819d1:	8d 55 ea             	lea    -0x16(%ebp),%edx
  2819d4:	83 c3 01             	add    $0x1,%ebx
  2819d7:	83 c2 01             	add    $0x1,%edx
  2819da:	88 43 ff             	mov    %al,-0x1(%ebx)
  2819dd:	0f b6 02             	movzbl (%edx),%eax
  2819e0:	84 c0                	test   %al,%al
  2819e2:	75 f0                	jne    2819d4 <sprintf+0x57>
  2819e4:	eb 4a                	jmp    281a30 <sprintf+0xb3>
				case 'x':xtoa(*var,buf);while(*buf){*str++=*buf++;};break;
  2819e6:	8d 45 ea             	lea    -0x16(%ebp),%eax
  2819e9:	50                   	push   %eax
  2819ea:	ff 37                	pushl  (%edi)
  2819ec:	e8 f5 fe ff ff       	call   2818e6 <xtoa>
  2819f1:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
  2819f5:	83 c4 08             	add    $0x8,%esp
  2819f8:	84 c0                	test   %al,%al
  2819fa:	74 34                	je     281a30 <sprintf+0xb3>
  2819fc:	8d 55 ea             	lea    -0x16(%ebp),%edx
  2819ff:	83 c3 01             	add    $0x1,%ebx
  281a02:	83 c2 01             	add    $0x1,%edx
  281a05:	88 43 ff             	mov    %al,-0x1(%ebx)
  281a08:	0f b6 02             	movzbl (%edx),%eax
  281a0b:	84 c0                	test   %al,%al
  281a0d:	75 f0                	jne    2819ff <sprintf+0x82>
  281a0f:	eb 1f                	jmp    281a30 <sprintf+0xb3>
				case 's':buf=(char*)(*var);while(*buf){*str++=*buf++;};break;
  281a11:	8b 0f                	mov    (%edi),%ecx
  281a13:	0f b6 11             	movzbl (%ecx),%edx
  281a16:	84 d2                	test   %dl,%dl
  281a18:	74 16                	je     281a30 <sprintf+0xb3>
  281a1a:	89 d8                	mov    %ebx,%eax
  281a1c:	83 c0 01             	add    $0x1,%eax
  281a1f:	88 50 ff             	mov    %dl,-0x1(%eax)
  281a22:	89 c2                	mov    %eax,%edx
  281a24:	29 da                	sub    %ebx,%edx
  281a26:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
  281a2a:	84 d2                	test   %dl,%dl
  281a2c:	75 ee                	jne    281a1c <sprintf+0x9f>
  281a2e:	89 c3                	mov    %eax,%ebx
			}
			buf=buffer;
			var++;
  281a30:	83 c7 04             	add    $0x4,%edi
			format++;
  281a33:	83 c6 02             	add    $0x2,%esi
  281a36:	89 75 0c             	mov    %esi,0xc(%ebp)

void sprintf(char *str,char *format ,...){
	int *var=(int *)(&format)+1; //得到第一个可变参数的地址
	char buffer[10];
	char *buf=buffer;
	while(*format){
  281a39:	8b 75 0c             	mov    0xc(%ebp),%esi
  281a3c:	0f b6 06             	movzbl (%esi),%eax
  281a3f:	84 c0                	test   %al,%al
  281a41:	0f 85 4a ff ff ff    	jne    281991 <sprintf+0x14>
			buf=buffer;
			var++;
			format++;
		}
	}
	*str='\0';
  281a47:	c6 03 00             	movb   $0x0,(%ebx)
}
  281a4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  281a4d:	5b                   	pop    %ebx
  281a4e:	5e                   	pop    %esi
  281a4f:	5f                   	pop    %edi
  281a50:	5d                   	pop    %ebp
  281a51:	c3                   	ret    

00281a52 <strcmp>:
    }
    *buf='\0';
}

int strcmp(const char *str1,const char *str2)
{
  281a52:	55                   	push   %ebp
  281a53:	89 e5                	mov    %esp,%ebp
  281a55:	57                   	push   %edi
  281a56:	56                   	push   %esi
  281a57:	53                   	push   %ebx
  281a58:	8b 7d 08             	mov    0x8(%ebp),%edi
  281a5b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a5e:	0f b6 17             	movzbl (%edi),%edx
  281a61:	be 00 00 00 00       	mov    $0x0,%esi
  281a66:	84 d2                	test   %dl,%dl
  281a68:	74 40                	je     281aaa <strcmp+0x58>
  281a6a:	eb 1d                	jmp    281a89 <strcmp+0x37>
	{
		if(c1==c2) i++;
  281a6c:	38 ca                	cmp    %cl,%dl
  281a6e:	75 0f                	jne    281a7f <strcmp+0x2d>
  281a70:	83 c0 01             	add    $0x1,%eax

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a73:	89 c6                	mov    %eax,%esi
  281a75:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  281a79:	84 d2                	test   %dl,%dl
  281a7b:	75 1e                	jne    281a9b <strcmp+0x49>
  281a7d:	eb 2b                	jmp    281aaa <strcmp+0x58>
	{
		if(c1==c2) i++;
		else return c1-c2;
  281a7f:	0f be c2             	movsbl %dl,%eax
  281a82:	0f be c9             	movsbl %cl,%ecx
  281a85:	29 c8                	sub    %ecx,%eax
  281a87:	eb 2a                	jmp    281ab3 <strcmp+0x61>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a89:	0f b6 0b             	movzbl (%ebx),%ecx
  281a8c:	84 c9                	test   %cl,%cl
  281a8e:	74 15                	je     281aa5 <strcmp+0x53>
	{
		if(c1==c2) i++;
  281a90:	b8 00 00 00 00       	mov    $0x0,%eax
  281a95:	38 ca                	cmp    %cl,%dl
  281a97:	74 d7                	je     281a70 <strcmp+0x1e>
  281a99:	eb e4                	jmp    281a7f <strcmp+0x2d>

int strcmp(const char *str1,const char *str2)
{
	int i = 0;
	char c1,c2;
	while((c1 = str1[i]) && (c2 = str2[i]))
  281a9b:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
  281a9f:	84 c9                	test   %cl,%cl
  281aa1:	75 c9                	jne    281a6c <strcmp+0x1a>
  281aa3:	eb 05                	jmp    281aaa <strcmp+0x58>
  281aa5:	be 00 00 00 00       	mov    $0x0,%esi
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281aaa:	0f be c2             	movsbl %dl,%eax
  281aad:	0f be 14 33          	movsbl (%ebx,%esi,1),%edx
  281ab1:	29 d0                	sub    %edx,%eax
}
  281ab3:	5b                   	pop    %ebx
  281ab4:	5e                   	pop    %esi
  281ab5:	5f                   	pop    %edi
  281ab6:	5d                   	pop    %ebp
  281ab7:	c3                   	ret    

00281ab8 <strncmp>:

int strncmp(const char *str1,const char *str2,unsigned int n)
{
  281ab8:	55                   	push   %ebp
  281ab9:	89 e5                	mov    %esp,%ebp
  281abb:	57                   	push   %edi
  281abc:	56                   	push   %esi
  281abd:	53                   	push   %ebx
  281abe:	8b 75 08             	mov    0x8(%ebp),%esi
  281ac1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281ac4:	8b 7d 10             	mov    0x10(%ebp),%edi
	if(n == 0) return 0;
  281ac7:	b8 00 00 00 00       	mov    $0x0,%eax
  281acc:	85 ff                	test   %edi,%edi
  281ace:	74 63                	je     281b33 <strncmp+0x7b>
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281ad0:	83 ef 01             	sub    $0x1,%edi
  281ad3:	89 fa                	mov    %edi,%edx
  281ad5:	74 52                	je     281b29 <strncmp+0x71>
  281ad7:	eb 19                	jmp    281af2 <strncmp+0x3a>
	{
		if(c1==c2) i++;
  281ad9:	38 c8                	cmp    %cl,%al
  281adb:	75 0b                	jne    281ae8 <strncmp+0x30>
  281add:	83 c2 01             	add    $0x1,%edx
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281ae0:	39 fa                	cmp    %edi,%edx
  281ae2:	75 27                	jne    281b0b <strncmp+0x53>
	{
		if(c1==c2) i++;
  281ae4:	89 fa                	mov    %edi,%edx
  281ae6:	eb 41                	jmp    281b29 <strncmp+0x71>
		else return c1-c2;
  281ae8:	0f be c0             	movsbl %al,%eax
  281aeb:	0f be c9             	movsbl %cl,%ecx
  281aee:	29 c8                	sub    %ecx,%eax
  281af0:	eb 41                	jmp    281b33 <strncmp+0x7b>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281af2:	0f b6 06             	movzbl (%esi),%eax
  281af5:	84 c0                	test   %al,%al
  281af7:	74 24                	je     281b1d <strncmp+0x65>
  281af9:	0f b6 0b             	movzbl (%ebx),%ecx
  281afc:	84 c9                	test   %cl,%cl
  281afe:	74 24                	je     281b24 <strncmp+0x6c>
	{
		if(c1==c2) i++;
  281b00:	ba 00 00 00 00       	mov    $0x0,%edx
  281b05:	38 c8                	cmp    %cl,%al
  281b07:	74 d4                	je     281add <strncmp+0x25>
  281b09:	eb dd                	jmp    281ae8 <strncmp+0x30>
int strncmp(const char *str1,const char *str2,unsigned int n)
{
	if(n == 0) return 0;
	unsigned int i = 0;
	char c1,c2;
	while(i<n-1 && (c1 = str1[i]) && (c2 = str2[i]))
  281b0b:	0f b6 04 16          	movzbl (%esi,%edx,1),%eax
  281b0f:	84 c0                	test   %al,%al
  281b11:	74 16                	je     281b29 <strncmp+0x71>
  281b13:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
  281b17:	84 c9                	test   %cl,%cl
  281b19:	75 be                	jne    281ad9 <strncmp+0x21>
  281b1b:	eb 0c                	jmp    281b29 <strncmp+0x71>
  281b1d:	ba 00 00 00 00       	mov    $0x0,%edx
  281b22:	eb 05                	jmp    281b29 <strncmp+0x71>
  281b24:	ba 00 00 00 00       	mov    $0x0,%edx
	{
		if(c1==c2) i++;
		else return c1-c2;
	}
	return str1[i] - str2[i];
  281b29:	0f be 04 16          	movsbl (%esi,%edx,1),%eax
  281b2d:	0f be 14 13          	movsbl (%ebx,%edx,1),%edx
  281b31:	29 d0                	sub    %edx,%eax
}
  281b33:	5b                   	pop    %ebx
  281b34:	5e                   	pop    %esi
  281b35:	5f                   	pop    %edi
  281b36:	5d                   	pop    %ebp
  281b37:	c3                   	ret    

00281b38 <fifo32_init>:
#include "fifo.h"
#include "task.h"
void fifo32_init(struct FIFO32 *fifo,int size,int *buf,struct TASK *task)
{
  281b38:	55                   	push   %ebp
  281b39:	89 e5                	mov    %esp,%ebp
  281b3b:	8b 45 08             	mov    0x8(%ebp),%eax
  281b3e:	8b 55 0c             	mov    0xc(%ebp),%edx
	fifo->size=size;
  281b41:	89 50 0c             	mov    %edx,0xc(%eax)
	fifo->buf=buf;
  281b44:	8b 4d 10             	mov    0x10(%ebp),%ecx
  281b47:	89 08                	mov    %ecx,(%eax)
	fifo->free = size;
  281b49:	89 50 10             	mov    %edx,0x10(%eax)
	fifo->flags = 0;
  281b4c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	fifo->p = 0;
  281b53:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->q = 0;
  281b5a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	fifo->task = task;
  281b61:	8b 55 14             	mov    0x14(%ebp),%edx
  281b64:	89 50 18             	mov    %edx,0x18(%eax)
	return;
}
  281b67:	5d                   	pop    %ebp
  281b68:	c3                   	ret    

00281b69 <fifo32_put>:
#define FLAGS_OVERRUN 0x0001
#include "timer.h"
extern struct TIMERCTL timerctl;

int fifo32_put(struct FIFO32 *fifo,int data)
{
  281b69:	55                   	push   %ebp
  281b6a:	89 e5                	mov    %esp,%ebp
  281b6c:	53                   	push   %ebx
  281b6d:	83 ec 04             	sub    $0x4,%esp
  281b70:	8b 45 08             	mov    0x8(%ebp),%eax
	if(fifo->free == 0)
  281b73:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  281b77:	75 0b                	jne    281b84 <fifo32_put+0x1b>
	{
		fifo->flags |= FLAGS_OVERRUN;
  281b79:	83 48 14 01          	orl    $0x1,0x14(%eax)
		return -1;
  281b7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  281b82:	eb 52                	jmp    281bd6 <fifo32_put+0x6d>
	}
	fifo->buf[fifo->p] = data;
  281b84:	8b 48 04             	mov    0x4(%eax),%ecx
  281b87:	8b 10                	mov    (%eax),%edx
  281b89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  281b8c:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
	fifo->p++;
  281b8f:	8b 48 04             	mov    0x4(%eax),%ecx
  281b92:	8d 51 01             	lea    0x1(%ecx),%edx
  281b95:	89 50 04             	mov    %edx,0x4(%eax)
	if(fifo->p == fifo->size)
  281b98:	3b 50 0c             	cmp    0xc(%eax),%edx
  281b9b:	75 07                	jne    281ba4 <fifo32_put+0x3b>
		fifo->p = 0;
  281b9d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	fifo->free--;
  281ba4:	83 68 10 01          	subl   $0x1,0x10(%eax)

	//wake up task
	if(fifo->task!=0)
  281ba8:	8b 50 18             	mov    0x18(%eax),%edx
  281bab:	85 d2                	test   %edx,%edx
  281bad:	74 22                	je     281bd1 <fifo32_put+0x68>
		if(fifo->task->flags!=2)
		{
			task_run(fifo->task,-1,0);
		}
	}
	return 0;
  281baf:	b8 00 00 00 00       	mov    $0x0,%eax
	fifo->free--;

	//wake up task
	if(fifo->task!=0)
	{
		if(fifo->task->flags!=2)
  281bb4:	83 7a 04 02          	cmpl   $0x2,0x4(%edx)
  281bb8:	74 1c                	je     281bd6 <fifo32_put+0x6d>
		{
			task_run(fifo->task,-1,0);
  281bba:	83 ec 04             	sub    $0x4,%esp
  281bbd:	6a 00                	push   $0x0
  281bbf:	6a ff                	push   $0xffffffff
  281bc1:	52                   	push   %edx
  281bc2:	e8 7d 13 00 00       	call   282f44 <task_run>
  281bc7:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  281bca:	b8 00 00 00 00       	mov    $0x0,%eax
  281bcf:	eb 05                	jmp    281bd6 <fifo32_put+0x6d>
  281bd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  281bd6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  281bd9:	c9                   	leave  
  281bda:	c3                   	ret    

00281bdb <fifo32_get>:

int fifo32_get(struct FIFO32 *fifo)
{
  281bdb:	55                   	push   %ebp
  281bdc:	89 e5                	mov    %esp,%ebp
  281bde:	56                   	push   %esi
  281bdf:	53                   	push   %ebx
  281be0:	8b 4d 08             	mov    0x8(%ebp),%ecx
	if(fifo->free == fifo->size)
  281be3:	8b 59 10             	mov    0x10(%ecx),%ebx
  281be6:	8b 71 0c             	mov    0xc(%ecx),%esi
  281be9:	39 f3                	cmp    %esi,%ebx
  281beb:	74 20                	je     281c0d <fifo32_get+0x32>
		return -1;
	int data = fifo->buf[fifo->q];
  281bed:	8b 51 08             	mov    0x8(%ecx),%edx
  281bf0:	8b 01                	mov    (%ecx),%eax
  281bf2:	8b 04 90             	mov    (%eax,%edx,4),%eax
	fifo->q++;
  281bf5:	83 c2 01             	add    $0x1,%edx
	if(fifo->q == fifo->size)
  281bf8:	39 d6                	cmp    %edx,%esi
int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
	int data = fifo->buf[fifo->q];
	fifo->q++;
  281bfa:	be 00 00 00 00       	mov    $0x0,%esi
  281bff:	0f 44 d6             	cmove  %esi,%edx
  281c02:	89 51 08             	mov    %edx,0x8(%ecx)
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
  281c05:	83 c3 01             	add    $0x1,%ebx
  281c08:	89 59 10             	mov    %ebx,0x10(%ecx)
	return data;
  281c0b:	eb 05                	jmp    281c12 <fifo32_get+0x37>
}

int fifo32_get(struct FIFO32 *fifo)
{
	if(fifo->free == fifo->size)
		return -1;
  281c0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	fifo->q++;
	if(fifo->q == fifo->size)
		fifo->q = 0;
	fifo->free++;
	return data;
}
  281c12:	5b                   	pop    %ebx
  281c13:	5e                   	pop    %esi
  281c14:	5d                   	pop    %ebp
  281c15:	c3                   	ret    

00281c16 <fifo32_status>:

int fifo32_status(struct FIFO32 *fifo)
{
  281c16:	55                   	push   %ebp
  281c17:	89 e5                	mov    %esp,%ebp
  281c19:	8b 55 08             	mov    0x8(%ebp),%edx
	return fifo->size - fifo->free;
  281c1c:	8b 42 0c             	mov    0xc(%edx),%eax
  281c1f:	2b 42 10             	sub    0x10(%edx),%eax
}
  281c22:	5d                   	pop    %ebp
  281c23:	c3                   	ret    

00281c24 <enable_mouse>:
#include "mouse.h"
struct FIFO32 *mousefifo;
int mousedata0;
void enable_mouse(struct FIFO32 *fifo,int data0,struct MOUSE_DEC *mdec)
{
  281c24:	55                   	push   %ebp
  281c25:	89 e5                	mov    %esp,%ebp
  281c27:	83 ec 08             	sub    $0x8,%esp
	mousefifo = fifo;
  281c2a:	8b 45 08             	mov    0x8(%ebp),%eax
  281c2d:	a3 24 79 28 00       	mov    %eax,0x287924
	mousedata0 = data0;
  281c32:	8b 45 0c             	mov    0xc(%ebp),%eax
  281c35:	a3 20 79 28 00       	mov    %eax,0x287920

	wait_KBC_sendready();
  281c3a:	e8 1a 01 00 00       	call   281d59 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_SENDTO_MOUSE);
  281c3f:	83 ec 08             	sub    $0x8,%esp
  281c42:	68 d4 00 00 00       	push   $0xd4
  281c47:	6a 64                	push   $0x64
  281c49:	e8 58 ee ff ff       	call   280aa6 <io_out8>
	wait_KBC_sendready();
  281c4e:	e8 06 01 00 00       	call   281d59 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,MOUSECMD_ENABLE);
  281c53:	83 c4 08             	add    $0x8,%esp
  281c56:	68 f4 00 00 00       	push   $0xf4
  281c5b:	6a 60                	push   $0x60
  281c5d:	e8 44 ee ff ff       	call   280aa6 <io_out8>
	mdec->phase = 0;
  281c62:	8b 45 10             	mov    0x10(%ebp),%eax
  281c65:	c6 40 03 00          	movb   $0x0,0x3(%eax)
	return;
  281c69:	83 c4 10             	add    $0x10,%esp
}
  281c6c:	c9                   	leave  
  281c6d:	c3                   	ret    

00281c6e <mouse_decode>:

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
  281c6e:	55                   	push   %ebp
  281c6f:	89 e5                	mov    %esp,%ebp
  281c71:	56                   	push   %esi
  281c72:	53                   	push   %ebx
  281c73:	8b 55 08             	mov    0x8(%ebp),%edx
  281c76:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if(mdec->phase == 0)
  281c79:	0f b6 42 03          	movzbl 0x3(%edx),%eax
  281c7d:	84 c0                	test   %al,%al
  281c7f:	75 14                	jne    281c95 <mouse_decode+0x27>
	{
		if(dat == 0xfa)
			mdec->phase = 1;
		return 0;
  281c81:	b8 00 00 00 00       	mov    $0x0,%eax

int mouse_decode(struct MOUSE_DEC *mdec,unsigned char dat)
{
	if(mdec->phase == 0)
	{
		if(dat == 0xfa)
  281c86:	80 f9 fa             	cmp    $0xfa,%cl
  281c89:	0f 85 82 00 00 00    	jne    281d11 <mouse_decode+0xa3>
			mdec->phase = 1;
  281c8f:	c6 42 03 01          	movb   $0x1,0x3(%edx)
  281c93:	eb 7c                	jmp    281d11 <mouse_decode+0xa3>
		return 0;
	}
	if(mdec->phase == 1)
  281c95:	3c 01                	cmp    $0x1,%al
  281c97:	75 17                	jne    281cb0 <mouse_decode+0x42>
	{
		if((dat&0xc8) == 0x08)
  281c99:	89 cb                	mov    %ecx,%ebx
  281c9b:	83 e3 c8             	and    $0xffffffc8,%ebx
		{
			mdec->buf[0] = dat;
			mdec->phase = 2;
		}
		return 0;
  281c9e:	b8 00 00 00 00       	mov    $0x0,%eax
			mdec->phase = 1;
		return 0;
	}
	if(mdec->phase == 1)
	{
		if((dat&0xc8) == 0x08)
  281ca3:	80 fb 08             	cmp    $0x8,%bl
  281ca6:	75 69                	jne    281d11 <mouse_decode+0xa3>
		{
			mdec->buf[0] = dat;
  281ca8:	88 0a                	mov    %cl,(%edx)
			mdec->phase = 2;
  281caa:	c6 42 03 02          	movb   $0x2,0x3(%edx)
  281cae:	eb 61                	jmp    281d11 <mouse_decode+0xa3>
		}
		return 0;
	}
	if(mdec->phase == 2)
  281cb0:	3c 02                	cmp    $0x2,%al
  281cb2:	75 0e                	jne    281cc2 <mouse_decode+0x54>
	{
		mdec->buf[1] = dat;
  281cb4:	88 4a 01             	mov    %cl,0x1(%edx)
		mdec->phase = 3;
  281cb7:	c6 42 03 03          	movb   $0x3,0x3(%edx)
		return 0;
  281cbb:	b8 00 00 00 00       	mov    $0x0,%eax
  281cc0:	eb 4f                	jmp    281d11 <mouse_decode+0xa3>
	}
	if(mdec->phase == 3)
  281cc2:	3c 03                	cmp    $0x3,%al
  281cc4:	75 46                	jne    281d0c <mouse_decode+0x9e>
	{
		mdec->buf[2] = dat;
  281cc6:	88 4a 02             	mov    %cl,0x2(%edx)
		mdec->phase = 1;
  281cc9:	c6 42 03 01          	movb   $0x1,0x3(%edx)
		mdec->btn = mdec->buf[0] & 0x07;
  281ccd:	0f b6 02             	movzbl (%edx),%eax
  281cd0:	89 c3                	mov    %eax,%ebx
  281cd2:	83 e3 07             	and    $0x7,%ebx
  281cd5:	89 5a 0c             	mov    %ebx,0xc(%edx)
		mdec->x = mdec->buf[1];
  281cd8:	0f b6 5a 01          	movzbl 0x1(%edx),%ebx
  281cdc:	0f b6 f3             	movzbl %bl,%esi
  281cdf:	89 72 04             	mov    %esi,0x4(%edx)
		
		mdec->y = mdec->buf[2];
  281ce2:	0f b6 f1             	movzbl %cl,%esi
  281ce5:	89 72 08             	mov    %esi,0x8(%edx)
		if((mdec->buf[0] & 0x10)!=0)
  281ce8:	a8 10                	test   $0x10,%al
  281cea:	74 09                	je     281cf5 <mouse_decode+0x87>
		{
			mdec->x |= 0xffffff00;
  281cec:	81 cb 00 ff ff ff    	or     $0xffffff00,%ebx
  281cf2:	89 5a 04             	mov    %ebx,0x4(%edx)
		}
		if((mdec->buf[0] & 0x20)!=0)
  281cf5:	a8 20                	test   $0x20,%al
  281cf7:	74 09                	je     281d02 <mouse_decode+0x94>
		{
			mdec->y |= 0xffffff00;
  281cf9:	81 c9 00 ff ff ff    	or     $0xffffff00,%ecx
  281cff:	89 4a 08             	mov    %ecx,0x8(%edx)
		}
		mdec->y = -mdec->y;
  281d02:	f7 5a 08             	negl   0x8(%edx)
		return 1;
  281d05:	b8 01 00 00 00       	mov    $0x1,%eax
  281d0a:	eb 05                	jmp    281d11 <mouse_decode+0xa3>
	}
	return -1;
  281d0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  281d11:	5b                   	pop    %ebx
  281d12:	5e                   	pop    %esi
  281d13:	5d                   	pop    %ebp
  281d14:	c3                   	ret    

00281d15 <inthandler2c>:
#include "fifo.h"


//hanlder for int 2c (mouse interrupts)
void inthandler2c(int *esp)
{
  281d15:	55                   	push   %ebp
  281d16:	89 e5                	mov    %esp,%ebp
  281d18:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic continue watch 2c int
	io_out8(PIC1_OCW2,0X64);
  281d1b:	6a 64                	push   $0x64
  281d1d:	68 a0 00 00 00       	push   $0xa0
  281d22:	e8 7f ed ff ff       	call   280aa6 <io_out8>
	io_out8(PIC0_OCW2,0x62);
  281d27:	83 c4 08             	add    $0x8,%esp
  281d2a:	6a 62                	push   $0x62
  281d2c:	6a 20                	push   $0x20
  281d2e:	e8 73 ed ff ff       	call   280aa6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281d33:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281d3a:	e8 45 ed ff ff       	call   280a84 <io_in8>
	fifo32_put(mousefifo,data+mousedata0);
  281d3f:	83 c4 08             	add    $0x8,%esp
  281d42:	03 05 20 79 28 00    	add    0x287920,%eax
  281d48:	50                   	push   %eax
  281d49:	ff 35 24 79 28 00    	pushl  0x287924
  281d4f:	e8 15 fe ff ff       	call   281b69 <fifo32_put>
	return;
  281d54:	83 c4 10             	add    $0x10,%esp
}
  281d57:	c9                   	leave  
  281d58:	c3                   	ret    

00281d59 <wait_KBC_sendready>:

struct FIFO32 *keyfifo;
int keydata0;

void wait_KBC_sendready(void)
{
  281d59:	55                   	push   %ebp
  281d5a:	89 e5                	mov    %esp,%ebp
  281d5c:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		if((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0)
  281d5f:	83 ec 0c             	sub    $0xc,%esp
  281d62:	6a 64                	push   $0x64
  281d64:	e8 1b ed ff ff       	call   280a84 <io_in8>
  281d69:	83 c4 10             	add    $0x10,%esp
  281d6c:	a8 02                	test   $0x2,%al
  281d6e:	75 ef                	jne    281d5f <wait_KBC_sendready+0x6>
			break;
	}
	return;
}
  281d70:	c9                   	leave  
  281d71:	c3                   	ret    

00281d72 <init_keyboard>:

void init_keyboard(struct FIFO32 *fifo,int data0)
{
  281d72:	55                   	push   %ebp
  281d73:	89 e5                	mov    %esp,%ebp
  281d75:	83 ec 08             	sub    $0x8,%esp
	keyfifo = fifo;
  281d78:	8b 45 08             	mov    0x8(%ebp),%eax
  281d7b:	a3 28 79 28 00       	mov    %eax,0x287928
	keydata0 = data0;
  281d80:	8b 45 0c             	mov    0xc(%ebp),%eax
  281d83:	a3 2c 79 28 00       	mov    %eax,0x28792c
	wait_KBC_sendready();
  281d88:	e8 cc ff ff ff       	call   281d59 <wait_KBC_sendready>
	io_out8(PORT_KEYCMD,KEYCMD_WRITE_MODE);
  281d8d:	83 ec 08             	sub    $0x8,%esp
  281d90:	6a 60                	push   $0x60
  281d92:	6a 64                	push   $0x64
  281d94:	e8 0d ed ff ff       	call   280aa6 <io_out8>
	wait_KBC_sendready();
  281d99:	e8 bb ff ff ff       	call   281d59 <wait_KBC_sendready>
	io_out8(PORT_KEYDAT,KBC_MODE);
  281d9e:	83 c4 08             	add    $0x8,%esp
  281da1:	6a 47                	push   $0x47
  281da3:	6a 60                	push   $0x60
  281da5:	e8 fc ec ff ff       	call   280aa6 <io_out8>
	return;
  281daa:	83 c4 10             	add    $0x10,%esp
}
  281dad:	c9                   	leave  
  281dae:	c3                   	ret    

00281daf <inthandler21>:
#include "fifo.h"


//handler for int 21 (keyboard interrupts)
void inthandler21(int *esp)
{
  281daf:	55                   	push   %ebp
  281db0:	89 e5                	mov    %esp,%ebp
  281db2:	83 ec 10             	sub    $0x10,%esp
	int data;
	//tell pic contine watch 21 int
	io_out8(PIC0_OCW2,0x61);
  281db5:	6a 61                	push   $0x61
  281db7:	6a 20                	push   $0x20
  281db9:	e8 e8 ec ff ff       	call   280aa6 <io_out8>
	data = io_in8(PORT_KEYDAT);
  281dbe:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  281dc5:	e8 ba ec ff ff       	call   280a84 <io_in8>
	fifo32_put(keyfifo,data + keydata0);
  281dca:	83 c4 08             	add    $0x8,%esp
  281dcd:	03 05 2c 79 28 00    	add    0x28792c,%eax
  281dd3:	50                   	push   %eax
  281dd4:	ff 35 28 79 28 00    	pushl  0x287928
  281dda:	e8 8a fd ff ff       	call   281b69 <fifo32_put>
	return;
  281ddf:	83 c4 10             	add    $0x10,%esp
}
  281de2:	c9                   	leave  
  281de3:	c3                   	ret    

00281de4 <key_char>:
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
  281de4:	55                   	push   %ebp
  281de5:	89 e5                	mov    %esp,%ebp
  281de7:	8b 55 08             	mov    0x8(%ebp),%edx
	if(key>=0 && key<0x80)
	{
		if(key_shift==0) return keytable0[key];
		else return keytable1[key];
	}
	else return 0;
  281dea:	b8 00 00 00 00       	mov    $0x0,%eax
    0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
};

char key_char(int key, int key_shift)
{
	if(key>=0 && key<0x80)
  281def:	83 fa 7f             	cmp    $0x7f,%edx
  281df2:	77 16                	ja     281e0a <key_char+0x26>
	{
		if(key_shift==0) return keytable0[key];
  281df4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  281df8:	75 09                	jne    281e03 <key_char+0x1f>
  281dfa:	0f b6 82 00 4f 28 00 	movzbl 0x284f00(%edx),%eax
  281e01:	eb 07                	jmp    281e0a <key_char+0x26>
		else return keytable1[key];
  281e03:	0f b6 82 80 4e 28 00 	movzbl 0x284e80(%edx),%eax
	}
	else return 0;
}
  281e0a:	5d                   	pop    %ebp
  281e0b:	c3                   	ret    

00281e0c <memtest>:
#include "memory.h"
#include "io.h"

extern unsigned int _memtest_sub(unsigned int start,unsigned int end);
unsigned int memtest(unsigned int start,unsigned int end)
{
  281e0c:	55                   	push   %ebp
  281e0d:	89 e5                	mov    %esp,%ebp
  281e0f:	83 ec 18             	sub    $0x18,%esp
	char flg486 = 0;
  281e12:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	unsigned int eflg,cr0,i;
	
	//check cpu type
	eflg = io_load_eflags();
  281e16:	e8 aa ec ff ff       	call   280ac5 <io_load_eflags>
  281e1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	eflg != EFLAGS_AC_BIT;
	io_store_eflags(eflg);
  281e1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e21:	83 ec 0c             	sub    $0xc,%esp
  281e24:	50                   	push   %eax
  281e25:	e8 9e ec ff ff       	call   280ac8 <io_store_eflags>
  281e2a:	83 c4 10             	add    $0x10,%esp
	eflg = io_load_eflags();
  281e2d:	e8 93 ec ff ff       	call   280ac5 <io_load_eflags>
  281e32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if((eflg & EFLAGS_AC_BIT) !=0)
  281e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e38:	25 00 00 04 00       	and    $0x40000,%eax
  281e3d:	85 c0                	test   %eax,%eax
  281e3f:	74 04                	je     281e45 <memtest+0x39>
		flg486 = 1;
  281e41:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
	eflg &= ~EFLAGS_AC_BIT;
  281e45:	81 65 f0 ff ff fb ff 	andl   $0xfffbffff,-0x10(%ebp)
	io_store_eflags(eflg);
  281e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281e4f:	83 ec 0c             	sub    $0xc,%esp
  281e52:	50                   	push   %eax
  281e53:	e8 70 ec ff ff       	call   280ac8 <io_store_eflags>
  281e58:	83 c4 10             	add    $0x10,%esp
	
	//disable cpu cache
	if(flg486)
  281e5b:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281e5f:	74 1d                	je     281e7e <memtest+0x72>
	{
		cr0 = load_cr0;
  281e61:	c7 45 ec ef 0a 28 00 	movl   $0x280aef,-0x14(%ebp)
		cr0 |= CR0_CACHE_DISABLE;
  281e68:	81 4d ec 00 00 00 60 	orl    $0x60000000,-0x14(%ebp)
		store_cr0(cr0);
  281e6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281e72:	83 ec 0c             	sub    $0xc,%esp
  281e75:	50                   	push   %eax
  281e76:	e8 78 ec ff ff       	call   280af3 <store_cr0>
  281e7b:	83 c4 10             	add    $0x10,%esp
	}
	
	//i = memtest_sub(start,end);
	i = _memtest_sub(start,end);
  281e7e:	83 ec 08             	sub    $0x8,%esp
  281e81:	ff 75 0c             	pushl  0xc(%ebp)
  281e84:	ff 75 08             	pushl  0x8(%ebp)
  281e87:	e8 6f ec ff ff       	call   280afb <_memtest_sub>
  281e8c:	83 c4 10             	add    $0x10,%esp
  281e8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	//enable cpu cache
	if(flg486)
  281e92:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  281e96:	74 1e                	je     281eb6 <memtest+0xaa>
	{
		cr0 = load_cr0();
  281e98:	e8 52 ec ff ff       	call   280aef <load_cr0>
  281e9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cr0 &= ~CR0_CACHE_DISABLE;
  281ea0:	81 65 ec ff ff ff 9f 	andl   $0x9fffffff,-0x14(%ebp)
		store_cr0(cr0);
  281ea7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  281eaa:	83 ec 0c             	sub    $0xc,%esp
  281ead:	50                   	push   %eax
  281eae:	e8 40 ec ff ff       	call   280af3 <store_cr0>
  281eb3:	83 c4 10             	add    $0x10,%esp
	}

	return i;
  281eb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  281eb9:	c9                   	leave  
  281eba:	c3                   	ret    

00281ebb <memtest_sub>:

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
  281ebb:	55                   	push   %ebp
  281ebc:	89 e5                	mov    %esp,%ebp
  281ebe:	83 ec 20             	sub    $0x20,%esp
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
  281ec1:	c7 45 f8 55 aa 55 aa 	movl   $0xaa55aa55,-0x8(%ebp)
  281ec8:	c7 45 f4 aa 55 aa 55 	movl   $0x55aa55aa,-0xc(%ebp)
	for(i=start;i<=end;i+=0x1000)
  281ecf:	8b 45 08             	mov    0x8(%ebp),%eax
  281ed2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  281ed5:	eb 67                	jmp    281f3e <memtest_sub+0x83>
	{
		p = (unsigned int *) (i+0xffc);
  281ed7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281eda:	05 fc 0f 00 00       	add    $0xffc,%eax
  281edf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		old = *p;
  281ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281ee5:	8b 00                	mov    (%eax),%eax
  281ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		*p = pat0;
  281eea:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281eed:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281ef0:	89 10                	mov    %edx,(%eax)
		*p ^= 0xffffffff;
  281ef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281ef5:	8b 00                	mov    (%eax),%eax
  281ef7:	f7 d0                	not    %eax
  281ef9:	89 c2                	mov    %eax,%edx
  281efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281efe:	89 10                	mov    %edx,(%eax)
		if(*p != pat1)
  281f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f03:	8b 00                	mov    (%eax),%eax
  281f05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  281f08:	74 0d                	je     281f17 <memtest_sub+0x5c>
  281f0a:	eb 01                	jmp    281f0d <memtest_sub+0x52>
			break;
		}
		*p ^= 0xffffffff;
		if(*p != pat0)
		{
			goto not_memory;
  281f0c:	90                   	nop
		*p = pat0;
		*p ^= 0xffffffff;
		if(*p != pat1)
		{
not_memory:
			*p = old;
  281f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f10:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f13:	89 10                	mov    %edx,(%eax)
			break;
  281f15:	eb 2f                	jmp    281f46 <memtest_sub+0x8b>
		}
		*p ^= 0xffffffff;
  281f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f1a:	8b 00                	mov    (%eax),%eax
  281f1c:	f7 d0                	not    %eax
  281f1e:	89 c2                	mov    %eax,%edx
  281f20:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f23:	89 10                	mov    %edx,(%eax)
		if(*p != pat0)
  281f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f28:	8b 00                	mov    (%eax),%eax
  281f2a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  281f2d:	75 dd                	jne    281f0c <memtest_sub+0x51>
		{
			goto not_memory;
		}
		*p = old;
  281f2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  281f32:	8b 55 ec             	mov    -0x14(%ebp),%edx
  281f35:	89 10                	mov    %edx,(%eax)

//the compiler will op memtest_sub,make it not work expected
unsigned int memtest_sub(unsigned int start, unsigned int end)
{
	unsigned int i,*p,old,pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
	for(i=start;i<=end;i+=0x1000)
  281f37:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%ebp)
  281f3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  281f41:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281f44:	76 91                	jbe    281ed7 <memtest_sub+0x1c>
		{
			goto not_memory;
		}
		*p = old;
	}
	return i;
  281f46:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  281f49:	c9                   	leave  
  281f4a:	c3                   	ret    

00281f4b <memman_init>:

void memman_init(struct MEMMAN *man)
{
  281f4b:	55                   	push   %ebp
  281f4c:	89 e5                	mov    %esp,%ebp
	man->frees = 0;
  281f4e:	8b 45 08             	mov    0x8(%ebp),%eax
  281f51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	man->maxfrees = 0;
  281f57:	8b 45 08             	mov    0x8(%ebp),%eax
  281f5a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	man->lostsize = 0;
  281f61:	8b 45 08             	mov    0x8(%ebp),%eax
  281f64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	man->losts = 0;
  281f6b:	8b 45 08             	mov    0x8(%ebp),%eax
  281f6e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return;
  281f75:	90                   	nop
}
  281f76:	5d                   	pop    %ebp
  281f77:	c3                   	ret    

00281f78 <memman_total>:

unsigned int memman_total(struct MEMMAN *man)
{
  281f78:	55                   	push   %ebp
  281f79:	89 e5                	mov    %esp,%ebp
  281f7b:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,t = 0;
  281f7e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;i<man->frees;i++)
  281f85:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  281f8c:	eb 14                	jmp    281fa2 <memman_total+0x2a>
	{
		t+=man->free[i].size;
  281f8e:	8b 45 08             	mov    0x8(%ebp),%eax
  281f91:	8b 55 fc             	mov    -0x4(%ebp),%edx
  281f94:	83 c2 02             	add    $0x2,%edx
  281f97:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281f9b:	01 45 f8             	add    %eax,-0x8(%ebp)
}

unsigned int memman_total(struct MEMMAN *man)
{
	unsigned int i,t = 0;
	for(i=0;i<man->frees;i++)
  281f9e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  281fa2:	8b 45 08             	mov    0x8(%ebp),%eax
  281fa5:	8b 00                	mov    (%eax),%eax
  281fa7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  281faa:	77 e2                	ja     281f8e <memman_total+0x16>
	{
		t+=man->free[i].size;
	}
	return t;
  281fac:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  281faf:	c9                   	leave  
  281fb0:	c3                   	ret    

00281fb1 <memman_alloc>:

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
  281fb1:	55                   	push   %ebp
  281fb2:	89 e5                	mov    %esp,%ebp
  281fb4:	53                   	push   %ebx
  281fb5:	83 ec 10             	sub    $0x10,%esp
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  281fb8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  281fbf:	e9 bd 00 00 00       	jmp    282081 <memman_alloc+0xd0>
	{
		if(man->free[i].size >= size)
  281fc4:	8b 45 08             	mov    0x8(%ebp),%eax
  281fc7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281fca:	83 c2 02             	add    $0x2,%edx
  281fcd:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  281fd1:	3b 45 0c             	cmp    0xc(%ebp),%eax
  281fd4:	0f 82 a3 00 00 00    	jb     28207d <memman_alloc+0xcc>
		{
			a = man->free[i].addr;
  281fda:	8b 45 08             	mov    0x8(%ebp),%eax
  281fdd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281fe0:	83 c2 02             	add    $0x2,%edx
  281fe3:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  281fe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
			man->free[i].addr+=size;
  281fe9:	8b 45 08             	mov    0x8(%ebp),%eax
  281fec:	8b 55 f8             	mov    -0x8(%ebp),%edx
  281fef:	83 c2 02             	add    $0x2,%edx
  281ff2:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  281ff5:	8b 45 0c             	mov    0xc(%ebp),%eax
  281ff8:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  281ffb:	8b 45 08             	mov    0x8(%ebp),%eax
  281ffe:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282001:	83 c2 02             	add    $0x2,%edx
  282004:	89 0c d0             	mov    %ecx,(%eax,%edx,8)
			man->free[i].size-=size;
  282007:	8b 45 08             	mov    0x8(%ebp),%eax
  28200a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28200d:	83 c2 02             	add    $0x2,%edx
  282010:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282014:	2b 45 0c             	sub    0xc(%ebp),%eax
  282017:	89 c2                	mov    %eax,%edx
  282019:	8b 45 08             	mov    0x8(%ebp),%eax
  28201c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  28201f:	83 c1 02             	add    $0x2,%ecx
  282022:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
			if(man->free[i].size == 0)
  282026:	8b 45 08             	mov    0x8(%ebp),%eax
  282029:	8b 55 f8             	mov    -0x8(%ebp),%edx
  28202c:	83 c2 02             	add    $0x2,%edx
  28202f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
  282033:	85 c0                	test   %eax,%eax
  282035:	75 41                	jne    282078 <memman_alloc+0xc7>
			{
				man->frees--;
  282037:	8b 45 08             	mov    0x8(%ebp),%eax
  28203a:	8b 00                	mov    (%eax),%eax
  28203c:	8d 50 ff             	lea    -0x1(%eax),%edx
  28203f:	8b 45 08             	mov    0x8(%ebp),%eax
  282042:	89 10                	mov    %edx,(%eax)
				for(;i<man->frees;i++)
  282044:	eb 28                	jmp    28206e <memman_alloc+0xbd>
				{
					man->free[i] = man->free[i+1];
  282046:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282049:	8d 50 01             	lea    0x1(%eax),%edx
  28204c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28204f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282052:	8d 58 02             	lea    0x2(%eax),%ebx
  282055:	8b 45 08             	mov    0x8(%ebp),%eax
  282058:	83 c2 02             	add    $0x2,%edx
  28205b:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  28205e:	8b 02                	mov    (%edx),%eax
  282060:	8b 52 04             	mov    0x4(%edx),%edx
  282063:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  282066:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
			man->free[i].addr+=size;
			man->free[i].size-=size;
			if(man->free[i].size == 0)
			{
				man->frees--;
				for(;i<man->frees;i++)
  28206a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28206e:	8b 45 08             	mov    0x8(%ebp),%eax
  282071:	8b 00                	mov    (%eax),%eax
  282073:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282076:	77 ce                	ja     282046 <memman_alloc+0x95>
				{
					man->free[i] = man->free[i+1];
				}
			}
			return a;
  282078:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28207b:	eb 17                	jmp    282094 <memman_alloc+0xe3>
}

unsigned int memman_alloc(struct MEMMAN *man,unsigned int size)
{
	unsigned int i,a;
	for(i=0;i<man->frees;i++)
  28207d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  282081:	8b 45 08             	mov    0x8(%ebp),%eax
  282084:	8b 00                	mov    (%eax),%eax
  282086:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  282089:	0f 87 35 ff ff ff    	ja     281fc4 <memman_alloc+0x13>
				}
			}
			return a;
		}
	}
	return 0;
  28208f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282094:	83 c4 10             	add    $0x10,%esp
  282097:	5b                   	pop    %ebx
  282098:	5d                   	pop    %ebp
  282099:	c3                   	ret    

0028209a <memman_free>:

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  28209a:	55                   	push   %ebp
  28209b:	89 e5                	mov    %esp,%ebp
  28209d:	53                   	push   %ebx
  28209e:	83 ec 10             	sub    $0x10,%esp
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820a1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2820a8:	eb 15                	jmp    2820bf <memman_free+0x25>
	{
		if(man->free[i].addr>addr) break;
  2820aa:	8b 45 08             	mov    0x8(%ebp),%eax
  2820ad:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2820b0:	83 c2 02             	add    $0x2,%edx
  2820b3:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2820b6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2820b9:	77 10                	ja     2820cb <memman_free+0x31>

int memman_free(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
	int i,j;
	
	for(i=0;i<man->frees;i++)
  2820bb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2820bf:	8b 45 08             	mov    0x8(%ebp),%eax
  2820c2:	8b 00                	mov    (%eax),%eax
  2820c4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2820c7:	7f e1                	jg     2820aa <memman_free+0x10>
  2820c9:	eb 01                	jmp    2820cc <memman_free+0x32>
	{
		if(man->free[i].addr>addr) break;
  2820cb:	90                   	nop
	}

	//if prev combinable.
	if(i>0 && (man->free[i-1].addr+man->free[i-1].size == addr))
  2820cc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  2820d0:	0f 8e f2 00 00 00    	jle    2821c8 <memman_free+0x12e>
  2820d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820d9:	8d 50 ff             	lea    -0x1(%eax),%edx
  2820dc:	8b 45 08             	mov    0x8(%ebp),%eax
  2820df:	83 c2 02             	add    $0x2,%edx
  2820e2:	8b 14 d0             	mov    (%eax,%edx,8),%edx
  2820e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2820e8:	8d 48 ff             	lea    -0x1(%eax),%ecx
  2820eb:	8b 45 08             	mov    0x8(%ebp),%eax
  2820ee:	83 c1 02             	add    $0x2,%ecx
  2820f1:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  2820f5:	01 d0                	add    %edx,%eax
  2820f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
  2820fa:	0f 85 c8 00 00 00    	jne    2821c8 <memman_free+0x12e>
	{
		//combine with prev
		man->free[i-1].size += size;
  282100:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282103:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282106:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282109:	8d 50 ff             	lea    -0x1(%eax),%edx
  28210c:	8b 45 08             	mov    0x8(%ebp),%eax
  28210f:	83 c2 02             	add    $0x2,%edx
  282112:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282116:	8b 45 10             	mov    0x10(%ebp),%eax
  282119:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28211c:	8b 45 08             	mov    0x8(%ebp),%eax
  28211f:	8d 53 02             	lea    0x2(%ebx),%edx
  282122:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)

		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
  282126:	8b 45 08             	mov    0x8(%ebp),%eax
  282129:	8b 00                	mov    (%eax),%eax
  28212b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28212e:	0f 8e 8a 00 00 00    	jle    2821be <memman_free+0x124>
  282134:	8b 55 0c             	mov    0xc(%ebp),%edx
  282137:	8b 45 10             	mov    0x10(%ebp),%eax
  28213a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28213d:	8b 45 08             	mov    0x8(%ebp),%eax
  282140:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282143:	83 c2 02             	add    $0x2,%edx
  282146:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  282149:	39 c1                	cmp    %eax,%ecx
  28214b:	75 71                	jne    2821be <memman_free+0x124>
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
  28214d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282150:	8d 58 ff             	lea    -0x1(%eax),%ebx
  282153:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282156:	8d 50 ff             	lea    -0x1(%eax),%edx
  282159:	8b 45 08             	mov    0x8(%ebp),%eax
  28215c:	83 c2 02             	add    $0x2,%edx
  28215f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282163:	8b 45 08             	mov    0x8(%ebp),%eax
  282166:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  282169:	83 c1 02             	add    $0x2,%ecx
  28216c:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
  282170:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282173:	8b 45 08             	mov    0x8(%ebp),%eax
  282176:	8d 53 02             	lea    0x2(%ebx),%edx
  282179:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
			for(;i<man->frees;i++)
  28217d:	eb 28                	jmp    2821a7 <memman_free+0x10d>
				man->free[i] = man->free[i+1];
  28217f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  282182:	8d 50 01             	lea    0x1(%eax),%edx
  282185:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282188:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28218b:	8d 58 02             	lea    0x2(%eax),%ebx
  28218e:	8b 45 08             	mov    0x8(%ebp),%eax
  282191:	83 c2 02             	add    $0x2,%edx
  282194:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282197:	8b 02                	mov    (%edx),%eax
  282199:	8b 52 04             	mov    0x4(%edx),%edx
  28219c:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  28219f:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
		//and if next combinable.
		if(i<man->frees && addr + size == man->free[i].addr)
		{
			//combine next.
			man->free[i-1].size += man->free[i].size;
			for(;i<man->frees;i++)
  2821a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  2821a7:	8b 45 08             	mov    0x8(%ebp),%eax
  2821aa:	8b 00                	mov    (%eax),%eax
  2821ac:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821af:	7f ce                	jg     28217f <memman_free+0xe5>
				man->free[i] = man->free[i+1];
			man->frees--;
  2821b1:	8b 45 08             	mov    0x8(%ebp),%eax
  2821b4:	8b 00                	mov    (%eax),%eax
  2821b6:	8d 50 ff             	lea    -0x1(%eax),%edx
  2821b9:	8b 45 08             	mov    0x8(%ebp),%eax
  2821bc:	89 10                	mov    %edx,(%eax)
		}
		
		return 0;
  2821be:	b8 00 00 00 00       	mov    $0x0,%eax
  2821c3:	e9 1f 01 00 00       	jmp    2822e7 <memman_free+0x24d>
	}

	//if next combinable
	if(i<man->frees && (addr + size == man->free[i].addr))
  2821c8:	8b 45 08             	mov    0x8(%ebp),%eax
  2821cb:	8b 00                	mov    (%eax),%eax
  2821cd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  2821d0:	7e 52                	jle    282224 <memman_free+0x18a>
  2821d2:	8b 55 0c             	mov    0xc(%ebp),%edx
  2821d5:	8b 45 10             	mov    0x10(%ebp),%eax
  2821d8:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  2821db:	8b 45 08             	mov    0x8(%ebp),%eax
  2821de:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2821e1:	83 c2 02             	add    $0x2,%edx
  2821e4:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  2821e7:	39 c1                	cmp    %eax,%ecx
  2821e9:	75 39                	jne    282224 <memman_free+0x18a>
	{
		man->free[i].addr = addr;
  2821eb:	8b 45 08             	mov    0x8(%ebp),%eax
  2821ee:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2821f1:	8d 4a 02             	lea    0x2(%edx),%ecx
  2821f4:	8b 55 0c             	mov    0xc(%ebp),%edx
  2821f7:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size += size;
  2821fa:	8b 45 08             	mov    0x8(%ebp),%eax
  2821fd:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282200:	83 c2 02             	add    $0x2,%edx
  282203:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  282207:	8b 45 10             	mov    0x10(%ebp),%eax
  28220a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  28220d:	8b 45 08             	mov    0x8(%ebp),%eax
  282210:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282213:	83 c2 02             	add    $0x2,%edx
  282216:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
		return 0;
  28221a:	b8 00 00 00 00       	mov    $0x0,%eax
  28221f:	e9 c3 00 00 00       	jmp    2822e7 <memman_free+0x24d>
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
  282224:	8b 45 08             	mov    0x8(%ebp),%eax
  282227:	8b 00                	mov    (%eax),%eax
  282229:	3d f9 0f 00 00       	cmp    $0xff9,%eax
  28222e:	0f 8f 8a 00 00 00    	jg     2822be <memman_free+0x224>
	{
		for(j=man->frees-1;j>=i;j--)
  282234:	8b 45 08             	mov    0x8(%ebp),%eax
  282237:	8b 00                	mov    (%eax),%eax
  282239:	83 e8 01             	sub    $0x1,%eax
  28223c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  28223f:	eb 28                	jmp    282269 <memman_free+0x1cf>
			man->free[j+1] = man->free[j];
  282241:	8b 45 f4             	mov    -0xc(%ebp),%eax
  282244:	83 c0 01             	add    $0x1,%eax
  282247:	8b 4d 08             	mov    0x8(%ebp),%ecx
  28224a:	8d 58 02             	lea    0x2(%eax),%ebx
  28224d:	8b 45 08             	mov    0x8(%ebp),%eax
  282250:	8b 55 f4             	mov    -0xc(%ebp),%edx
  282253:	83 c2 02             	add    $0x2,%edx
  282256:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  282259:	8b 02                	mov    (%edx),%eax
  28225b:	8b 52 04             	mov    0x4(%edx),%edx
  28225e:	89 04 d9             	mov    %eax,(%ecx,%ebx,8)
  282261:	89 54 d9 04          	mov    %edx,0x4(%ecx,%ebx,8)
	}
	
	//insert a new free into man->free[]
	if(man->frees < MEMMAN_FREES)
	{
		for(j=man->frees-1;j>=i;j--)
  282265:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  282269:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28226c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  28226f:	7d d0                	jge    282241 <memman_free+0x1a7>
			man->free[j+1] = man->free[j];
		if(man->maxfrees < man->frees) man->maxfrees = man->frees;
  282271:	8b 45 08             	mov    0x8(%ebp),%eax
  282274:	8b 50 04             	mov    0x4(%eax),%edx
  282277:	8b 45 08             	mov    0x8(%ebp),%eax
  28227a:	8b 00                	mov    (%eax),%eax
  28227c:	39 c2                	cmp    %eax,%edx
  28227e:	7d 0b                	jge    28228b <memman_free+0x1f1>
  282280:	8b 45 08             	mov    0x8(%ebp),%eax
  282283:	8b 10                	mov    (%eax),%edx
  282285:	8b 45 08             	mov    0x8(%ebp),%eax
  282288:	89 50 04             	mov    %edx,0x4(%eax)
		man->free[i].addr = addr;
  28228b:	8b 45 08             	mov    0x8(%ebp),%eax
  28228e:	8b 55 f8             	mov    -0x8(%ebp),%edx
  282291:	8d 4a 02             	lea    0x2(%edx),%ecx
  282294:	8b 55 0c             	mov    0xc(%ebp),%edx
  282297:	89 14 c8             	mov    %edx,(%eax,%ecx,8)
		man->free[i].size = size;
  28229a:	8b 45 08             	mov    0x8(%ebp),%eax
  28229d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  2822a0:	8d 4a 02             	lea    0x2(%edx),%ecx
  2822a3:	8b 55 10             	mov    0x10(%ebp),%edx
  2822a6:	89 54 c8 04          	mov    %edx,0x4(%eax,%ecx,8)
		man->frees++;
  2822aa:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ad:	8b 00                	mov    (%eax),%eax
  2822af:	8d 50 01             	lea    0x1(%eax),%edx
  2822b2:	8b 45 08             	mov    0x8(%ebp),%eax
  2822b5:	89 10                	mov    %edx,(%eax)
		return 0;
  2822b7:	b8 00 00 00 00       	mov    $0x0,%eax
  2822bc:	eb 29                	jmp    2822e7 <memman_free+0x24d>
	}

	//no room for new free
	man->losts++;
  2822be:	8b 45 08             	mov    0x8(%ebp),%eax
  2822c1:	8b 40 0c             	mov    0xc(%eax),%eax
  2822c4:	8d 50 01             	lea    0x1(%eax),%edx
  2822c7:	8b 45 08             	mov    0x8(%ebp),%eax
  2822ca:	89 50 0c             	mov    %edx,0xc(%eax)
	man->lostsize += size;
  2822cd:	8b 45 08             	mov    0x8(%ebp),%eax
  2822d0:	8b 40 08             	mov    0x8(%eax),%eax
  2822d3:	89 c2                	mov    %eax,%edx
  2822d5:	8b 45 10             	mov    0x10(%ebp),%eax
  2822d8:	01 d0                	add    %edx,%eax
  2822da:	89 c2                	mov    %eax,%edx
  2822dc:	8b 45 08             	mov    0x8(%ebp),%eax
  2822df:	89 50 08             	mov    %edx,0x8(%eax)
	return -1;
  2822e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  2822e7:	83 c4 10             	add    $0x10,%esp
  2822ea:	5b                   	pop    %ebx
  2822eb:	5d                   	pop    %ebp
  2822ec:	c3                   	ret    

002822ed <memman_alloc_4k>:

unsigned int memman_alloc_4k(struct MEMMAN *man,unsigned int size)
{
  2822ed:	55                   	push   %ebp
  2822ee:	89 e5                	mov    %esp,%ebp
  2822f0:	83 ec 10             	sub    $0x10,%esp
	unsigned int a;
	size = (size+0xfff) & 0xfffff000;
  2822f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  2822f6:	05 ff 0f 00 00       	add    $0xfff,%eax
  2822fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  282300:	89 45 0c             	mov    %eax,0xc(%ebp)
	a = memman_alloc(man,size);
  282303:	ff 75 0c             	pushl  0xc(%ebp)
  282306:	ff 75 08             	pushl  0x8(%ebp)
  282309:	e8 a3 fc ff ff       	call   281fb1 <memman_alloc>
  28230e:	83 c4 08             	add    $0x8,%esp
  282311:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return a;
  282314:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282317:	c9                   	leave  
  282318:	c3                   	ret    

00282319 <memman_free_4k>:

int memman_free_4k(struct MEMMAN *man,unsigned int addr,unsigned int size)
{
  282319:	55                   	push   %ebp
  28231a:	89 e5                	mov    %esp,%ebp
  28231c:	83 ec 10             	sub    $0x10,%esp
	int i;
	size = (size+0xfff) & 0xfffff000;
  28231f:	8b 45 10             	mov    0x10(%ebp),%eax
  282322:	05 ff 0f 00 00       	add    $0xfff,%eax
  282327:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  28232c:	89 45 10             	mov    %eax,0x10(%ebp)
	i = memman_free(man,addr,size);
  28232f:	ff 75 10             	pushl  0x10(%ebp)
  282332:	ff 75 0c             	pushl  0xc(%ebp)
  282335:	ff 75 08             	pushl  0x8(%ebp)
  282338:	e8 5d fd ff ff       	call   28209a <memman_free>
  28233d:	83 c4 0c             	add    $0xc,%esp
  282340:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return i;
  282343:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  282346:	c9                   	leave  
  282347:	c3                   	ret    

00282348 <shtctl_init>:
#include "map_sheet.h"

struct SHTCTL* shtctl_init(struct MEMMAN *man,unsigned char *vram,int xsize,int ysize)
{
  282348:	55                   	push   %ebp
  282349:	89 e5                	mov    %esp,%ebp
  28234b:	57                   	push   %edi
  28234c:	56                   	push   %esi
  28234d:	53                   	push   %ebx
  28234e:	83 ec 14             	sub    $0x14,%esp
  282351:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct SHTCTL *ctl;
	int i;
	ctl = (struct SHTCTL *)memman_alloc_4k(man,sizeof(struct SHTCTL));
  282354:	68 14 2c 00 00       	push   $0x2c14
  282359:	57                   	push   %edi
  28235a:	e8 8e ff ff ff       	call   2822ed <memman_alloc_4k>
  28235f:	89 c6                	mov    %eax,%esi
	if(ctl == 0)
  282361:	83 c4 10             	add    $0x10,%esp
  282364:	85 c0                	test   %eax,%eax
  282366:	74 6a                	je     2823d2 <shtctl_init+0x8a>
  282368:	89 c3                	mov    %eax,%ebx
		goto err;
	ctl->vram = vram;
  28236a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28236d:	89 06                	mov    %eax,(%esi)
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
  28236f:	83 ec 08             	sub    $0x8,%esp
  282372:	8b 45 10             	mov    0x10(%ebp),%eax
  282375:	0f af 45 14          	imul   0x14(%ebp),%eax
  282379:	50                   	push   %eax
  28237a:	57                   	push   %edi
  28237b:	e8 6d ff ff ff       	call   2822ed <memman_alloc_4k>
  282380:	89 46 04             	mov    %eax,0x4(%esi)
	if(ctl->map == 0)
  282383:	83 c4 10             	add    $0x10,%esp
  282386:	85 c0                	test   %eax,%eax
  282388:	75 19                	jne    2823a3 <shtctl_init+0x5b>
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
  28238a:	83 ec 04             	sub    $0x4,%esp
  28238d:	68 14 2c 00 00       	push   $0x2c14
  282392:	56                   	push   %esi
  282393:	57                   	push   %edi
  282394:	e8 80 ff ff ff       	call   282319 <memman_free_4k>
		ctl = 0;
		goto err;
  282399:	83 c4 10             	add    $0x10,%esp
	ctl->vram = vram;
	ctl->map = (unsigned char *)memman_alloc_4k(man,xsize*ysize);
	if(ctl->map == 0)
	{
		memman_free_4k(man,(int)ctl,sizeof(struct SHTCTL));
		ctl = 0;
  28239c:	be 00 00 00 00       	mov    $0x0,%esi
		goto err;
  2823a1:	eb 2f                	jmp    2823d2 <shtctl_init+0x8a>
	}
	ctl->xsize= xsize;
  2823a3:	8b 45 10             	mov    0x10(%ebp),%eax
  2823a6:	89 46 08             	mov    %eax,0x8(%esi)
	ctl->ysize= ysize;
  2823a9:	8b 45 14             	mov    0x14(%ebp),%eax
  2823ac:	89 46 0c             	mov    %eax,0xc(%esi)
	ctl->top = -1;
  2823af:	c7 46 10 ff ff ff ff 	movl   $0xffffffff,0x10(%esi)
  2823b6:	8d 86 30 04 00 00    	lea    0x430(%esi),%eax
  2823bc:	81 c3 30 2c 00 00    	add    $0x2c30,%ebx
	for(i=0;i<MAX_SHEETS;i++)
	{
		ctl->sheets0[i].flags = 0;
  2823c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ctl->sheets0[i].ctl = ctl;
  2823c8:	89 70 04             	mov    %esi,0x4(%eax)
  2823cb:	83 c0 28             	add    $0x28,%eax
		goto err;
	}
	ctl->xsize= xsize;
	ctl->ysize= ysize;
	ctl->top = -1;
	for(i=0;i<MAX_SHEETS;i++)
  2823ce:	39 d8                	cmp    %ebx,%eax
  2823d0:	75 f0                	jne    2823c2 <shtctl_init+0x7a>
		ctl->sheets0[i].flags = 0;
		ctl->sheets0[i].ctl = ctl;
	}
err:
	return ctl;
}
  2823d2:	89 f0                	mov    %esi,%eax
  2823d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2823d7:	5b                   	pop    %ebx
  2823d8:	5e                   	pop    %esi
  2823d9:	5f                   	pop    %edi
  2823da:	5d                   	pop    %ebp
  2823db:	c3                   	ret    

002823dc <sheet_alloc>:

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
  2823dc:	55                   	push   %ebp
  2823dd:	89 e5                	mov    %esp,%ebp
  2823df:	56                   	push   %esi
  2823e0:	53                   	push   %ebx
  2823e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
	{
		if(ctl->sheets0[i].flags == 0)
  2823e4:	83 b9 30 04 00 00 00 	cmpl   $0x0,0x430(%ecx)
  2823eb:	74 12                	je     2823ff <sheet_alloc+0x23>
  2823ed:	8d 91 58 04 00 00    	lea    0x458(%ecx),%edx

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  2823f3:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(ctl->sheets0[i].flags == 0)
  2823f8:	83 3a 00             	cmpl   $0x0,(%edx)
  2823fb:	75 3c                	jne    282439 <sheet_alloc+0x5d>
  2823fd:	eb 05                	jmp    282404 <sheet_alloc+0x28>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  2823ff:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(ctl->sheets0[i].flags == 0)
		{
			sht = &ctl->sheets0[i];
  282404:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  28240b:	8d 34 02             	lea    (%edx,%eax,1),%esi
			sht->flags = SHEET_USE;
  28240e:	8d 1c f1             	lea    (%ecx,%esi,8),%ebx
  282411:	c7 83 30 04 00 00 01 	movl   $0x1,0x430(%ebx)
  282418:	00 00 00 
			sht->height = -1;
  28241b:	c7 83 2c 04 00 00 ff 	movl   $0xffffffff,0x42c(%ebx)
  282422:	ff ff ff 
			sht->task = 0;
  282425:	c7 84 f1 38 04 00 00 	movl   $0x0,0x438(%ecx,%esi,8)
  28242c:	00 00 00 00 
			return sht;
  282430:	8d 84 f1 14 04 00 00 	lea    0x414(%ecx,%esi,8),%eax
  282437:	eb 12                	jmp    28244b <sheet_alloc+0x6f>

struct SHEET *sheet_alloc(struct SHTCTL *ctl)
{
	struct SHEET *sht;
	int i;
	for(i=0;i<MAX_SHEETS;i++)
  282439:	83 c0 01             	add    $0x1,%eax
  28243c:	83 c2 28             	add    $0x28,%edx
  28243f:	3d 00 01 00 00       	cmp    $0x100,%eax
  282444:	75 b2                	jne    2823f8 <sheet_alloc+0x1c>
			sht->height = -1;
			sht->task = 0;
			return sht;
		}
	}
	return 0;
  282446:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28244b:	5b                   	pop    %ebx
  28244c:	5e                   	pop    %esi
  28244d:	5d                   	pop    %ebp
  28244e:	c3                   	ret    

0028244f <sheet_setbuf>:

void sheet_setbuf(struct SHEET *sht,unsigned char *buf,int xsize,int ysize,int col_inv)
{
  28244f:	55                   	push   %ebp
  282450:	89 e5                	mov    %esp,%ebp
  282452:	8b 45 08             	mov    0x8(%ebp),%eax
	sht->buf = buf;
  282455:	8b 55 0c             	mov    0xc(%ebp),%edx
  282458:	89 10                	mov    %edx,(%eax)
	sht->bxsize = xsize;
  28245a:	8b 55 10             	mov    0x10(%ebp),%edx
  28245d:	89 50 04             	mov    %edx,0x4(%eax)
	sht->bysize = ysize;
  282460:	8b 55 14             	mov    0x14(%ebp),%edx
  282463:	89 50 08             	mov    %edx,0x8(%eax)
	sht->col_inv = col_inv;
  282466:	8b 55 18             	mov    0x18(%ebp),%edx
  282469:	89 50 14             	mov    %edx,0x14(%eax)
	return;
}
  28246c:	5d                   	pop    %ebp
  28246d:	c3                   	ret    

0028246e <sheet_refresh_ob>:
}

//not good refresh
//obsolete
void sheet_refresh_ob(struct SHTCTL *ctl)
{
  28246e:	55                   	push   %ebp
  28246f:	89 e5                	mov    %esp,%ebp
  282471:	57                   	push   %edi
  282472:	56                   	push   %esi
  282473:	53                   	push   %ebx
  282474:	83 ec 10             	sub    $0x10,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
  282477:	8b 45 08             	mov    0x8(%ebp),%eax
  28247a:	8b 00                	mov    (%eax),%eax
  28247c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  28247f:	8b 45 08             	mov    0x8(%ebp),%eax
  282482:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  282486:	0f 88 80 00 00 00    	js     28250c <sheet_refresh_ob+0x9e>
  28248c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	{
		sht = ctl->sheets[h];
  282493:	8b 45 08             	mov    0x8(%ebp),%eax
  282496:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  282499:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  28249d:	8b 02                	mov    (%edx),%eax
  28249f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(by=0;by<sht->bysize;by++)
  2824a2:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  2824a6:	7e 55                	jle    2824fd <sheet_refresh_ob+0x8f>
  2824a8:	bf 00 00 00 00       	mov    $0x0,%edi
		{
			vy = sht->vy0+by;
  2824ad:	89 f8                	mov    %edi,%eax
  2824af:	03 42 10             	add    0x10(%edx),%eax
  2824b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			for(bx=0;bx<sht->bxsize;bx++)
  2824b5:	8b 4a 04             	mov    0x4(%edx),%ecx
  2824b8:	85 c9                	test   %ecx,%ecx
  2824ba:	7e 39                	jle    2824f5 <sheet_refresh_ob+0x87>
  2824bc:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				vx = sht->vx0+bx;
				c=buf[by*sht->bxsize+bx];
  2824c1:	0f af cf             	imul   %edi,%ecx
  2824c4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  2824c7:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2824ca:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
				if(c!=sht->col_inv)
  2824ce:	0f b6 cb             	movzbl %bl,%ecx
  2824d1:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2824d4:	74 15                	je     2824eb <sheet_refresh_ob+0x7d>
					vram[vy*ctl->xsize+vx] = c;
  2824d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2824d9:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2824dc:	0f af 71 08          	imul   0x8(%ecx),%esi
  2824e0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2824e3:	01 c1                	add    %eax,%ecx
  2824e5:	03 4a 0c             	add    0xc(%edx),%ecx
  2824e8:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0+by;
			for(bx=0;bx<sht->bxsize;bx++)
  2824eb:	83 c0 01             	add    $0x1,%eax
  2824ee:	8b 4a 04             	mov    0x4(%edx),%ecx
  2824f1:	39 c1                	cmp    %eax,%ecx
  2824f3:	7f cc                	jg     2824c1 <sheet_refresh_ob+0x53>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  2824f5:	83 c7 01             	add    $0x1,%edi
  2824f8:	39 7a 08             	cmp    %edi,0x8(%edx)
  2824fb:	7f b0                	jg     2824ad <sheet_refresh_ob+0x3f>
void sheet_refresh_ob(struct SHTCTL *ctl)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram=ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2824fd:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  282501:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  282504:	8b 7d 08             	mov    0x8(%ebp),%edi
  282507:	39 47 10             	cmp    %eax,0x10(%edi)
  28250a:	7d 87                	jge    282493 <sheet_refresh_ob+0x25>
					vram[vy*ctl->xsize+vx] = c;
			}
		}
	}
	return;
}
  28250c:	83 c4 10             	add    $0x10,%esp
  28250f:	5b                   	pop    %ebx
  282510:	5e                   	pop    %esi
  282511:	5f                   	pop    %edi
  282512:	5d                   	pop    %ebp
  282513:	c3                   	ret    

00282514 <sheet_refreshsub1>:



void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
  282514:	55                   	push   %ebp
  282515:	89 e5                	mov    %esp,%ebp
  282517:	57                   	push   %edi
  282518:	56                   	push   %esi
  282519:	53                   	push   %ebx
  28251a:	83 ec 14             	sub    $0x14,%esp
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
  28251d:	8b 45 08             	mov    0x8(%ebp),%eax
  282520:	8b 00                	mov    (%eax),%eax
  282522:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  282525:	8b 45 08             	mov    0x8(%ebp),%eax
  282528:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  28252c:	0f 88 a7 00 00 00    	js     2825d9 <sheet_refreshsub1+0xc5>
  282532:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	{
		sht = ctl->sheets[h];
  282539:	8b 45 08             	mov    0x8(%ebp),%eax
  28253c:	8b 7d e0             	mov    -0x20(%ebp),%edi
  28253f:	8b 4c b8 14          	mov    0x14(%eax,%edi,4),%ecx
		buf = sht->buf;
  282543:	8b 01                	mov    (%ecx),%eax
  282545:	89 45 e8             	mov    %eax,-0x18(%ebp)
		for(by=0;by<sht->bysize;by++)
  282548:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  28254c:	7e 78                	jle    2825c6 <sheet_refreshsub1+0xb2>
  28254e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		{
			vy = sht->vy0 + by;
  282555:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  282558:	03 59 10             	add    0x10(%ecx),%ebx
			for(bx=0;bx<sht->bxsize;bx++)
  28255b:	8b 71 04             	mov    0x4(%ecx),%esi
  28255e:	85 f6                	test   %esi,%esi
  282560:	7e 58                	jle    2825ba <sheet_refreshsub1+0xa6>
  282562:	b8 00 00 00 00       	mov    $0x0,%eax
  282567:	89 5d f0             	mov    %ebx,-0x10(%ebp)
			{
				vx = sht->vx0 + bx;
  28256a:	89 c2                	mov    %eax,%edx
  28256c:	03 51 0c             	add    0xc(%ecx),%edx
				if(vx0<=vx && vx<vx1 && vy0<=vy && vy<vy1)
  28256f:	3b 55 0c             	cmp    0xc(%ebp),%edx
  282572:	7c 3c                	jl     2825b0 <sheet_refreshsub1+0x9c>
  282574:	3b 55 14             	cmp    0x14(%ebp),%edx
  282577:	7d 37                	jge    2825b0 <sheet_refreshsub1+0x9c>
  282579:	8b 7d f0             	mov    -0x10(%ebp),%edi
  28257c:	3b 7d 10             	cmp    0x10(%ebp),%edi
  28257f:	7c 2f                	jl     2825b0 <sheet_refreshsub1+0x9c>
  282581:	3b 7d 18             	cmp    0x18(%ebp),%edi
  282584:	7d 2a                	jge    2825b0 <sheet_refreshsub1+0x9c>
				{
					c = buf[by*sht->bxsize+bx];
  282586:	0f af 75 ec          	imul   -0x14(%ebp),%esi
  28258a:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  28258d:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  282590:	0f b6 34 37          	movzbl (%edi,%esi,1),%esi
					if(c!=sht->col_inv)
  282594:	89 f3                	mov    %esi,%ebx
  282596:	0f b6 fb             	movzbl %bl,%edi
  282599:	3b 79 14             	cmp    0x14(%ecx),%edi
  28259c:	74 12                	je     2825b0 <sheet_refreshsub1+0x9c>
						vram[vy*ctl->xsize+vx] = c;
  28259e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2825a1:	8b 7d f0             	mov    -0x10(%ebp),%edi
  2825a4:	0f af 7b 08          	imul   0x8(%ebx),%edi
  2825a8:	03 55 e4             	add    -0x1c(%ebp),%edx
  2825ab:	89 f3                	mov    %esi,%ebx
  2825ad:	88 1c 3a             	mov    %bl,(%edx,%edi,1)
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
		{
			vy = sht->vy0 + by;
			for(bx=0;bx<sht->bxsize;bx++)
  2825b0:	83 c0 01             	add    $0x1,%eax
  2825b3:	8b 71 04             	mov    0x4(%ecx),%esi
  2825b6:	39 c6                	cmp    %eax,%esi
  2825b8:	7f b0                	jg     28256a <sheet_refreshsub1+0x56>
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
	{
		sht = ctl->sheets[h];
		buf = sht->buf;
		for(by=0;by<sht->bysize;by++)
  2825ba:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  2825be:	8b 45 ec             	mov    -0x14(%ebp),%eax
  2825c1:	39 41 08             	cmp    %eax,0x8(%ecx)
  2825c4:	7f 8f                	jg     282555 <sheet_refreshsub1+0x41>
void sheet_refreshsub1(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1)
{
	int h,bx,by,vx,vy;
	unsigned char *buf,c,*vram = ctl->vram;
	struct SHEET *sht;
	for(h=0;h<=ctl->top;h++)
  2825c6:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  2825ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  2825cd:	8b 7d 08             	mov    0x8(%ebp),%edi
  2825d0:	39 47 10             	cmp    %eax,0x10(%edi)
  2825d3:	0f 8d 60 ff ff ff    	jge    282539 <sheet_refreshsub1+0x25>
						vram[vy*ctl->xsize+vx] = c;
				}
			}
		}
	}
}
  2825d9:	83 c4 14             	add    $0x14,%esp
  2825dc:	5b                   	pop    %ebx
  2825dd:	5e                   	pop    %esi
  2825de:	5f                   	pop    %edi
  2825df:	5d                   	pop    %ebp
  2825e0:	c3                   	ret    

002825e1 <sheet_refreshsub2>:

void sheet_refreshsub2(struct SHTCTL *ctl,int vx0,int vy0,int vx1,int vy1,int h0)
{
  2825e1:	55                   	push   %ebp
  2825e2:	89 e5                	mov    %esp,%ebp
  2825e4:	57                   	push   %edi
  2825e5:	56                   	push   %esi
  2825e6:	53                   	push   %ebx
  2825e7:	83 ec 34             	sub    $0x34,%esp
  2825ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2825ed:	8b 55 10             	mov    0x10(%ebp),%edx
  2825f0:	8b 75 14             	mov    0x14(%ebp),%esi
  2825f3:	8b 7d 18             	mov    0x18(%ebp),%edi
  2825f6:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
	int h,bx,by,vx,vy,bx0,by0,bx1,by1;
	unsigned char *buf,c,*vram = ctl->vram,*map = ctl->map;
  2825f9:	8b 45 08             	mov    0x8(%ebp),%eax
  2825fc:	8b 00                	mov    (%eax),%eax
  2825fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
  282601:	8b 45 08             	mov    0x8(%ebp),%eax
  282604:	8b 40 04             	mov    0x4(%eax),%eax
  282607:	89 45 e8             	mov    %eax,-0x18(%ebp)
  28260a:	b8 00 00 00 00       	mov    $0x0,%eax
  28260f:	85 c9                	test   %ecx,%ecx
  282611:	0f 48 c8             	cmovs  %eax,%ecx
  282614:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  282617:	85 d2                	test   %edx,%edx
  282619:	0f 48 d0             	cmovs  %eax,%edx
  28261c:	89 55 c8             	mov    %edx,-0x38(%ebp)
	struct SHEET *sht;

	//limit the refresh rect in the visible rect.
	if(vx0<0) vx0 = 0;
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
  28261f:	8b 55 08             	mov    0x8(%ebp),%edx
  282622:	8b 52 08             	mov    0x8(%edx),%edx
  282625:	39 f2                	cmp    %esi,%edx
  282627:	0f 4e f2             	cmovle %edx,%esi
  28262a:	89 75 d0             	mov    %esi,-0x30(%ebp)
	if(vy1>ctl->ysize) vy1 = ctl->ysize;
  28262d:	8b 55 08             	mov    0x8(%ebp),%edx
  282630:	8b 52 0c             	mov    0xc(%edx),%edx
  282633:	39 fa                	cmp    %edi,%edx
  282635:	0f 4e fa             	cmovle %edx,%edi
  282638:	89 7d cc             	mov    %edi,-0x34(%ebp)
  28263b:	85 db                	test   %ebx,%ebx
  28263d:	0f 49 c3             	cmovns %ebx,%eax
  282640:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  282643:	8b 7d 08             	mov    0x8(%ebp),%edi
  282646:	3b 47 10             	cmp    0x10(%edi),%eax
  282649:	0f 8f 9c 01 00 00    	jg     2827eb <sheet_refreshsub2+0x20a>
	{
		//calculate the need-refresh rect of each sheet.
		sht = ctl->sheets[h];
  28264f:	8b 45 08             	mov    0x8(%ebp),%eax
  282652:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  282655:	8b 54 b8 14          	mov    0x14(%eax,%edi,4),%edx
		buf = sht->buf;
  282659:	8b 02                	mov    (%edx),%eax
  28265b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bx0 = vx0 - sht->vx0;
  28265e:	8b 72 0c             	mov    0xc(%edx),%esi
		by0 = vy0 - sht->vy0;
  282661:	8b 7a 10             	mov    0x10(%edx),%edi
		bx1 = vx1 - sht->vx0;
  282664:	8b 45 d0             	mov    -0x30(%ebp),%eax
  282667:	29 f0                	sub    %esi,%eax
		by1 = vy1 - sht->vy0;
  282669:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  28266c:	89 7d f0             	mov    %edi,-0x10(%ebp)
  28266f:	29 fb                	sub    %edi,%ebx
  282671:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  282674:	29 f1                	sub    %esi,%ecx
  282676:	bf 00 00 00 00       	mov    $0x0,%edi
  28267b:	0f 48 cf             	cmovs  %edi,%ecx
  28267e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  282681:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  282684:	2b 4d f0             	sub    -0x10(%ebp),%ecx
  282687:	0f 49 f9             	cmovns %ecx,%edi

		if(bx0<0) bx0=0;
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
  28268a:	8b 4a 04             	mov    0x4(%edx),%ecx
  28268d:	39 c8                	cmp    %ecx,%eax
  28268f:	0f 4e c8             	cmovle %eax,%ecx
  282692:	89 4d f0             	mov    %ecx,-0x10(%ebp)
		if(by1>sht->bysize) by1=sht->bysize;
  282695:	8b 42 08             	mov    0x8(%edx),%eax
  282698:	39 c3                	cmp    %eax,%ebx
  28269a:	0f 4e c3             	cmovle %ebx,%eax
  28269d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(sht->col_inv == -1)
  2826a0:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  2826a4:	74 0d                	je     2826b3 <sheet_refreshsub2+0xd2>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  2826a6:	39 f8                	cmp    %edi,%eax
  2826a8:	0f 8f dd 00 00 00    	jg     28278b <sheet_refreshsub2+0x1aa>
  2826ae:	e9 25 01 00 00       	jmp    2827d8 <sheet_refreshsub2+0x1f7>
		if(by0<0) by0=0;
		if(bx1>sht->bxsize) bx1=sht->bxsize;
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
  2826b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826b6:	09 f0                	or     %esi,%eax
  2826b8:	a8 03                	test   $0x3,%al
  2826ba:	75 06                	jne    2826c2 <sheet_refreshsub2+0xe1>
  2826bc:	f6 45 f0 03          	testb  $0x3,-0x10(%ebp)
  2826c0:	74 0c                	je     2826ce <sheet_refreshsub2+0xed>
  2826c2:	89 fe                	mov    %edi,%esi
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  2826c4:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  2826c7:	7f 71                	jg     28273a <sheet_refreshsub2+0x159>
  2826c9:	e9 0a 01 00 00       	jmp    2827d8 <sheet_refreshsub2+0x1f7>
		if(by1>sht->bysize) by1=sht->bysize;
		if(sht->col_inv == -1)
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
  2826ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2826d1:	01 c6                	add    %eax,%esi
  2826d3:	89 75 e4             	mov    %esi,-0x1c(%ebp)
				bx1 = (bx1-bx0)/4;
  2826d6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  2826d9:	29 c3                	sub    %eax,%ebx
  2826db:	89 d8                	mov    %ebx,%eax
  2826dd:	8d 4b 03             	lea    0x3(%ebx),%ecx
  2826e0:	85 db                	test   %ebx,%ebx
  2826e2:	0f 48 c1             	cmovs  %ecx,%eax
  2826e5:	c1 f8 02             	sar    $0x2,%eax
  2826e8:	89 c6                	mov    %eax,%esi
				for(by=by0;by<by1;by++)
  2826ea:	39 7d dc             	cmp    %edi,-0x24(%ebp)
  2826ed:	0f 8e e5 00 00 00    	jle    2827d8 <sheet_refreshsub2+0x1f7>
				{

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
  2826f3:	89 f9                	mov    %edi,%ecx
  2826f5:	03 4a 10             	add    0x10(%edx),%ecx
  2826f8:	8b 45 08             	mov    0x8(%ebp),%eax
  2826fb:	0f af 48 08          	imul   0x8(%eax),%ecx
  2826ff:	03 4d e4             	add    -0x1c(%ebp),%ecx
					int *q = (int *) &buf[by*sht->bxsize+bx0];
  282702:	89 fb                	mov    %edi,%ebx
  282704:	0f af 5a 04          	imul   0x4(%edx),%ebx
  282708:	03 5d d8             	add    -0x28(%ebp),%ebx

					for(bx=0;bx<bx1;bx++)
  28270b:	85 f6                	test   %esi,%esi
  28270d:	7e 1e                	jle    28272d <sheet_refreshsub2+0x14c>
  28270f:	b8 00 00 00 00       	mov    $0x0,%eax
					{
						p[bx]=q[bx];
  282714:	03 5d ec             	add    -0x14(%ebp),%ebx
  282717:	03 4d e8             	add    -0x18(%ebp),%ecx
  28271a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  28271d:	8b 14 83             	mov    (%ebx,%eax,4),%edx
  282720:	89 14 81             	mov    %edx,(%ecx,%eax,4)

					vy = sht->vy0+by;
					int *p = (int *) &map[vy*ctl->xsize+vx];
					int *q = (int *) &buf[by*sht->bxsize+bx0];

					for(bx=0;bx<bx1;bx++)
  282723:	83 c0 01             	add    $0x1,%eax
  282726:	39 c6                	cmp    %eax,%esi
  282728:	75 f3                	jne    28271d <sheet_refreshsub2+0x13c>
  28272a:	8b 55 f0             	mov    -0x10(%ebp),%edx
		{
			if((sht->vx0 & 3)==0 && (bx0 & 3)==0 && (bx1 & 3)==0) 
			{
				vx = sht->vx0+bx0;
				bx1 = (bx1-bx0)/4;
				for(by=by0;by<by1;by++)
  28272d:	83 c7 01             	add    $0x1,%edi
  282730:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  282733:	75 be                	jne    2826f3 <sheet_refreshsub2+0x112>
  282735:	e9 9e 00 00 00       	jmp    2827d8 <sheet_refreshsub2+0x1f7>
			}
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
  28273a:	89 f7                	mov    %esi,%edi
  28273c:	03 7a 10             	add    0x10(%edx),%edi
					for(bx=bx0;bx<bx1;bx++)
  28273f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282742:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282745:	7e 3a                	jle    282781 <sheet_refreshsub2+0x1a0>
  282747:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  28274a:	89 7d e0             	mov    %edi,-0x20(%ebp)
					{
						vx = sht->vx0+bx;
						map[vy*ctl->xsize+vx] = buf[by*sht->bxsize+bx];
  28274d:	89 f1                	mov    %esi,%ecx
  28274f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  282752:	0f af 4f 04          	imul   0x4(%edi),%ecx
  282756:	8b 55 ec             	mov    -0x14(%ebp),%edx
  282759:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  28275c:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
  282760:	89 da                	mov    %ebx,%edx
  282762:	8b 4d 08             	mov    0x8(%ebp),%ecx
  282765:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  282768:	0f af 59 08          	imul   0x8(%ecx),%ebx
  28276c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  28276f:	01 c1                	add    %eax,%ecx
  282771:	03 4f 0c             	add    0xc(%edi),%ecx
  282774:	88 14 19             	mov    %dl,(%ecx,%ebx,1)
			else
			{
				for(by=by0;by<by1;by++)
				{
					vy = sht->vy0+by;
					for(bx=bx0;bx<bx1;bx++)
  282777:	83 c0 01             	add    $0x1,%eax
  28277a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  28277d:	75 ce                	jne    28274d <sheet_refreshsub2+0x16c>
  28277f:	89 fa                	mov    %edi,%edx
					}
				}
			}
			else
			{
				for(by=by0;by<by1;by++)
  282781:	83 c6 01             	add    $0x1,%esi
  282784:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  282787:	75 b1                	jne    28273a <sheet_refreshsub2+0x159>
  282789:	eb 4d                	jmp    2827d8 <sheet_refreshsub2+0x1f7>
		}
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
  28278b:	89 f8                	mov    %edi,%eax
  28278d:	03 42 10             	add    0x10(%edx),%eax
  282790:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				for(bx=bx0;bx<bx1;bx++)
  282793:	8b 45 d8             	mov    -0x28(%ebp),%eax
  282796:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  282799:	7e 35                	jle    2827d0 <sheet_refreshsub2+0x1ef>
				{
					vx = sht->vx0+bx;
					c  = buf[by*sht->bxsize+bx];
  28279b:	89 f9                	mov    %edi,%ecx
  28279d:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2827a1:	8b 75 ec             	mov    -0x14(%ebp),%esi
  2827a4:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  2827a7:	0f b6 1c 0b          	movzbl (%ebx,%ecx,1),%ebx
					if(c!=sht->col_inv)
  2827ab:	0f b6 cb             	movzbl %bl,%ecx
  2827ae:	3b 4a 14             	cmp    0x14(%edx),%ecx
  2827b1:	74 15                	je     2827c8 <sheet_refreshsub2+0x1e7>
						map[vy*ctl->xsize+vx] = c;
  2827b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
  2827b6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  2827b9:	0f af 71 08          	imul   0x8(%ecx),%esi
  2827bd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  2827c0:	01 c1                	add    %eax,%ecx
  2827c2:	03 4a 0c             	add    0xc(%edx),%ecx
  2827c5:	88 1c 31             	mov    %bl,(%ecx,%esi,1)
		else
		{
			for(by=by0;by<by1;by++)
			{
				vy = sht->vy0+by;
				for(bx=bx0;bx<bx1;bx++)
  2827c8:	83 c0 01             	add    $0x1,%eax
  2827cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  2827ce:	75 cb                	jne    28279b <sheet_refreshsub2+0x1ba>
				}
			}
		}
		else
		{
			for(by=by0;by<by1;by++)
  2827d0:	83 c7 01             	add    $0x1,%edi
  2827d3:	3b 7d dc             	cmp    -0x24(%ebp),%edi
  2827d6:	75 b3                	jne    28278b <sheet_refreshsub2+0x1aa>
	if(vy0<0) vy0 = 0;
	if(vx1>ctl->xsize) vx1 = ctl->xsize;
	if(vy1>ctl->ysize) vy1 = ctl->ysize;

	if(h0 <0) h0 = 0;
	for(h=h0;h<=ctl->top;h++)
  2827d8:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
  2827dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2827df:	8b 7d 08             	mov    0x8(%ebp),%edi
  2827e2:	39 47 10             	cmp    %eax,0x10(%edi)
  2827e5:	0f 8d 64 fe ff ff    	jge    28264f <sheet_refreshsub2+0x6e>
				}
			}
		}

	}
	if(((vx1-vx0)&3)==0)
  2827eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
  2827ee:	2b 45 c4             	sub    -0x3c(%ebp),%eax
  2827f1:	a8 03                	test   $0x3,%al
  2827f3:	74 0d                	je     282802 <sheet_refreshsub2+0x221>
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  2827f5:	8b 7d c8             	mov    -0x38(%ebp),%edi
  2827f8:	39 7d cc             	cmp    %edi,-0x34(%ebp)
  2827fb:	7f 79                	jg     282876 <sheet_refreshsub2+0x295>
  2827fd:	e9 8c 00 00 00       	jmp    28288e <sheet_refreshsub2+0x2ad>
		}

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
  282802:	8d 50 03             	lea    0x3(%eax),%edx
  282805:	85 c0                	test   %eax,%eax
  282807:	0f 48 c2             	cmovs  %edx,%eax
  28280a:	c1 f8 02             	sar    $0x2,%eax
  28280d:	89 c3                	mov    %eax,%ebx
		for(vy=vy0;vy<vy1;vy++)
  28280f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  282812:	39 45 cc             	cmp    %eax,-0x34(%ebp)
  282815:	7e 77                	jle    28288e <sheet_refreshsub2+0x2ad>
  282817:	89 c1                	mov    %eax,%ecx
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
  282819:	8b 45 08             	mov    0x8(%ebp),%eax
  28281c:	89 ca                	mov    %ecx,%edx
  28281e:	0f af 50 08          	imul   0x8(%eax),%edx
  282822:	03 55 c4             	add    -0x3c(%ebp),%edx
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  282825:	85 db                	test   %ebx,%ebx
  282827:	7e 1b                	jle    282844 <sheet_refreshsub2+0x263>
  282829:	b8 00 00 00 00       	mov    $0x0,%eax
				d[vx] = s[vx];
  28282e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  282831:	8d 34 17             	lea    (%edi,%edx,1),%esi
  282834:	03 55 c0             	add    -0x40(%ebp),%edx
  282837:	8b 3c 86             	mov    (%esi,%eax,4),%edi
  28283a:	89 3c 82             	mov    %edi,(%edx,%eax,4)
		for(vy=vy0;vy<vy1;vy++)
		{

			int *s = (int *) &map[vy*ctl->xsize+vx0];
			int *d = (int *) &vram[vy*ctl->xsize+vx0];
			for(vx=0;vx<vx1;vx++)
  28283d:	83 c0 01             	add    $0x1,%eax
  282840:	39 c3                	cmp    %eax,%ebx
  282842:	75 f3                	jne    282837 <sheet_refreshsub2+0x256>

	}
	if(((vx1-vx0)&3)==0)
	{
		vx1 = (vx1-vx0)/4;
		for(vy=vy0;vy<vy1;vy++)
  282844:	83 c1 01             	add    $0x1,%ecx
  282847:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  28284a:	75 cd                	jne    282819 <sheet_refreshsub2+0x238>
  28284c:	eb 40                	jmp    28288e <sheet_refreshsub2+0x2ad>
  28284e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
  282851:	8b 45 f0             	mov    -0x10(%ebp),%eax
  282854:	0f af 47 08          	imul   0x8(%edi),%eax
  282858:	01 d0                	add    %edx,%eax
  28285a:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
  28285e:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
			for(vx=vx0;vx<vx1;vx++)
  282861:	83 c2 01             	add    $0x1,%edx
  282864:	3b 55 d0             	cmp    -0x30(%ebp),%edx
  282867:	75 e8                	jne    282851 <sheet_refreshsub2+0x270>
  282869:	8b 4d f0             	mov    -0x10(%ebp),%ecx
				d[vx] = s[vx];
		}
	}
	else
	{
		for(vy=vy0;vy<vy1;vy++)
  28286c:	83 c1 01             	add    $0x1,%ecx
  28286f:	3b 4d cc             	cmp    -0x34(%ebp),%ecx
  282872:	74 1a                	je     28288e <sheet_refreshsub2+0x2ad>
  282874:	eb 0c                	jmp    282882 <sheet_refreshsub2+0x2a1>
  282876:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  282879:	8b 75 e8             	mov    -0x18(%ebp),%esi
  28287c:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  28287f:	8b 7d 08             	mov    0x8(%ebp),%edi
			for(vx=vx0;vx<vx1;vx++)
  282882:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  282885:	89 c2                	mov    %eax,%edx
  282887:	39 45 d0             	cmp    %eax,-0x30(%ebp)
  28288a:	7f c2                	jg     28284e <sheet_refreshsub2+0x26d>
  28288c:	eb de                	jmp    28286c <sheet_refreshsub2+0x28b>
				vram[vy*ctl->xsize+vx] = map[vy*ctl->xsize+vx];
	}
}
  28288e:	83 c4 34             	add    $0x34,%esp
  282891:	5b                   	pop    %ebx
  282892:	5e                   	pop    %esi
  282893:	5f                   	pop    %edi
  282894:	5d                   	pop    %ebp
  282895:	c3                   	ret    

00282896 <sheet_refresh>:

void sheet_refresh(struct SHEET *sht,int bx0,int by0,int bx1,int by1)
{
  282896:	55                   	push   %ebp
  282897:	89 e5                	mov    %esp,%ebp
  282899:	53                   	push   %ebx
  28289a:	8b 45 08             	mov    0x8(%ebp),%eax
	//if(sht->height >= 0)
	//{
	struct SHTCTL *ctl = sht->ctl;
	sheet_refreshsub2(ctl,sht->vx0+bx0,sht->vy0+by0,sht->vx0+bx1,sht->vy0+by1,sht->height);
  28289d:	8b 48 10             	mov    0x10(%eax),%ecx
  2828a0:	8b 50 0c             	mov    0xc(%eax),%edx
  2828a3:	ff 70 18             	pushl  0x18(%eax)
  2828a6:	89 cb                	mov    %ecx,%ebx
  2828a8:	03 5d 18             	add    0x18(%ebp),%ebx
  2828ab:	53                   	push   %ebx
  2828ac:	89 d3                	mov    %edx,%ebx
  2828ae:	03 5d 14             	add    0x14(%ebp),%ebx
  2828b1:	53                   	push   %ebx
  2828b2:	03 4d 10             	add    0x10(%ebp),%ecx
  2828b5:	51                   	push   %ecx
  2828b6:	03 55 0c             	add    0xc(%ebp),%edx
  2828b9:	52                   	push   %edx
  2828ba:	ff 70 20             	pushl  0x20(%eax)
  2828bd:	e8 1f fd ff ff       	call   2825e1 <sheet_refreshsub2>
	//}
	return;
  2828c2:	83 c4 18             	add    $0x18,%esp
}
  2828c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  2828c8:	c9                   	leave  
  2828c9:	c3                   	ret    

002828ca <sheet_updown>:
}


//update the sheet with new height
void sheet_updown(struct SHEET *sht,int height)
{
  2828ca:	55                   	push   %ebp
  2828cb:	89 e5                	mov    %esp,%ebp
  2828cd:	57                   	push   %edi
  2828ce:	56                   	push   %esi
  2828cf:	53                   	push   %ebx
  2828d0:	8b 75 08             	mov    0x8(%ebp),%esi
  2828d3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct SHTCTL *ctl = sht->ctl;
  2828d6:	8b 4e 20             	mov    0x20(%esi),%ecx
	int h,old = sht->height;
  2828d9:	8b 46 18             	mov    0x18(%esi),%eax
	if(height>ctl->top+1) height = ctl->top + 1;
  2828dc:	8b 79 10             	mov    0x10(%ecx),%edi
  2828df:	8d 57 01             	lea    0x1(%edi),%edx
  2828e2:	39 da                	cmp    %ebx,%edx
  2828e4:	0f 4f d3             	cmovg  %ebx,%edx
  2828e7:	85 d2                	test   %edx,%edx
  2828e9:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  2828ee:	0f 49 da             	cmovns %edx,%ebx
	if(height<-1) height = -1;
	sht->height = height;
  2828f1:	89 5e 18             	mov    %ebx,0x18(%esi)

	//push down the sheet
	if(old>height)
  2828f4:	39 d8                	cmp    %ebx,%eax
  2828f6:	7e 59                	jle    282951 <sheet_updown+0x87>
	{
		//if the sheet still shows
		if(height >=0 )
  2828f8:	85 db                	test   %ebx,%ebx
  2828fa:	79 09                	jns    282905 <sheet_updown+0x3b>
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  2828fc:	8b 59 10             	mov    0x10(%ecx),%ebx
  2828ff:	39 d8                	cmp    %ebx,%eax
  282901:	7c 1c                	jl     28291f <sheet_updown+0x55>
  282903:	eb 31                	jmp    282936 <sheet_updown+0x6c>
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282905:	8d 50 ff             	lea    -0x1(%eax),%edx
  282908:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  28290c:	89 7c 91 18          	mov    %edi,0x18(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282910:	89 47 18             	mov    %eax,0x18(%edi)
	if(old>height)
	{
		//if the sheet still shows
		if(height >=0 )
		{
			for(h=old;h>height;h--)
  282913:	89 d0                	mov    %edx,%eax
  282915:	39 d3                	cmp    %edx,%ebx
  282917:	75 ec                	jne    282905 <sheet_updown+0x3b>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;	
  282919:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  28291d:	eb 1d                	jmp    28293c <sheet_updown+0x72>
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  28291f:	8d 50 01             	lea    0x1(%eax),%edx
  282922:	8b 5c 91 14          	mov    0x14(%ecx,%edx,4),%ebx
  282926:	89 5c 91 10          	mov    %ebx,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  28292a:	89 43 18             	mov    %eax,0x18(%ebx)
			}
			ctl->sheets[height] = sht;	
		}
		else //the sheet hides from showing
		{
			for(h=old;h<ctl->top;h++)
  28292d:	8b 59 10             	mov    0x10(%ecx),%ebx
  282930:	89 d0                	mov    %edx,%eax
  282932:	39 d3                	cmp    %edx,%ebx
  282934:	7f e9                	jg     28291f <sheet_updown+0x55>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->top--;
  282936:	83 eb 01             	sub    $0x1,%ebx
  282939:	89 59 10             	mov    %ebx,0x10(%ecx)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  28293c:	ff 76 08             	pushl  0x8(%esi)
  28293f:	ff 76 04             	pushl  0x4(%esi)
  282942:	6a 00                	push   $0x0
  282944:	6a 00                	push   $0x0
  282946:	56                   	push   %esi
  282947:	e8 4a ff ff ff       	call   282896 <sheet_refresh>
  28294c:	83 c4 14             	add    $0x14,%esp
  28294f:	eb 5a                	jmp    2829ab <sheet_updown+0xe1>
	}
	else if(old<height) //pop up the sheet
  282951:	39 d8                	cmp    %ebx,%eax
  282953:	7d 56                	jge    2829ab <sheet_updown+0xe1>
	{
		if(old >= 0) //the sheet still shows.
  282955:	85 c0                	test   %eax,%eax
  282957:	78 1a                	js     282973 <sheet_updown+0xa9>
		{
			for(h=old;h<height;h++)
			{
				ctl->sheets[h] = ctl->sheets[h+1];
  282959:	8d 50 01             	lea    0x1(%eax),%edx
  28295c:	8b 7c 91 14          	mov    0x14(%ecx,%edx,4),%edi
  282960:	89 7c 91 10          	mov    %edi,0x10(%ecx,%edx,4)
				ctl->sheets[h]->height = h;
  282964:	89 47 18             	mov    %eax,0x18(%edi)
	}
	else if(old<height) //pop up the sheet
	{
		if(old >= 0) //the sheet still shows.
		{
			for(h=old;h<height;h++)
  282967:	89 d0                	mov    %edx,%eax
  282969:	39 d3                	cmp    %edx,%ebx
  28296b:	75 ec                	jne    282959 <sheet_updown+0x8f>
			{
				ctl->sheets[h] = ctl->sheets[h+1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  28296d:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
  282971:	eb 25                	jmp    282998 <sheet_updown+0xce>
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
  282973:	8b 41 10             	mov    0x10(%ecx),%eax
  282976:	8d 50 01             	lea    0x1(%eax),%edx
  282979:	89 51 10             	mov    %edx,0x10(%ecx)
			for(h=ctl->top;h>height;h--)
  28297c:	39 d3                	cmp    %edx,%ebx
  28297e:	7d 14                	jge    282994 <sheet_updown+0xca>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
  282980:	8d 42 ff             	lea    -0x1(%edx),%eax
  282983:	8b 7c 81 14          	mov    0x14(%ecx,%eax,4),%edi
  282987:	89 7c 81 18          	mov    %edi,0x18(%ecx,%eax,4)
				ctl->sheets[h]->height = h;
  28298b:	89 57 18             	mov    %edx,0x18(%edi)
			ctl->sheets[height] = sht;
		}
		else //the sheet shows from hiding.
		{
			ctl->top++;
			for(h=ctl->top;h>height;h--)
  28298e:	89 c2                	mov    %eax,%edx
  282990:	39 c3                	cmp    %eax,%ebx
  282992:	75 ec                	jne    282980 <sheet_updown+0xb6>
			{
				ctl->sheets[h] = ctl->sheets[h-1];
				ctl->sheets[h]->height = h;
			}
			ctl->sheets[height] = sht;
  282994:	89 74 99 14          	mov    %esi,0x14(%ecx,%ebx,4)
		}
		//sheet_refresh(ctl);
		sheet_refresh(sht,0,0,sht->bxsize,sht->bysize);
  282998:	ff 76 08             	pushl  0x8(%esi)
  28299b:	ff 76 04             	pushl  0x4(%esi)
  28299e:	6a 00                	push   $0x0
  2829a0:	6a 00                	push   $0x0
  2829a2:	56                   	push   %esi
  2829a3:	e8 ee fe ff ff       	call   282896 <sheet_refresh>
  2829a8:	83 c4 14             	add    $0x14,%esp
	}
	//else height not change.
	return;
}
  2829ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2829ae:	5b                   	pop    %ebx
  2829af:	5e                   	pop    %esi
  2829b0:	5f                   	pop    %edi
  2829b1:	5d                   	pop    %ebp
  2829b2:	c3                   	ret    

002829b3 <sheet_slide>:
	//}
	return;
}

void sheet_slide(struct SHEET *sht,int vx0,int vy0)
{
  2829b3:	55                   	push   %ebp
  2829b4:	89 e5                	mov    %esp,%ebp
  2829b6:	57                   	push   %edi
  2829b7:	56                   	push   %esi
  2829b8:	53                   	push   %ebx
  2829b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2829bc:	8b 75 10             	mov    0x10(%ebp),%esi
	//(vx0,vy0): the sheet buf in the vram pos.
	int old_vx0 = sht->vx0,old_vy0 = sht->vy0;
  2829bf:	8b 43 0c             	mov    0xc(%ebx),%eax
  2829c2:	8b 53 10             	mov    0x10(%ebx),%edx
	sht->vx0 = vx0;
  2829c5:	8b 7d 0c             	mov    0xc(%ebp),%edi
  2829c8:	89 7b 0c             	mov    %edi,0xc(%ebx)
	sht->vy0 = vy0;
  2829cb:	89 73 10             	mov    %esi,0x10(%ebx)
	if(sht->height >= 0)
  2829ce:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  2829d2:	78 36                	js     282a0a <sheet_slide+0x57>
	{
		struct SHTCTL *ctl = sht->ctl;
  2829d4:	8b 7b 20             	mov    0x20(%ebx),%edi
		sheet_refreshsub2(ctl,old_vx0,old_vy0,old_vx0+sht->bxsize,old_vy0+sht->bysize, 0);
  2829d7:	6a 00                	push   $0x0
  2829d9:	89 d1                	mov    %edx,%ecx
  2829db:	03 4b 08             	add    0x8(%ebx),%ecx
  2829de:	51                   	push   %ecx
  2829df:	89 c1                	mov    %eax,%ecx
  2829e1:	03 4b 04             	add    0x4(%ebx),%ecx
  2829e4:	51                   	push   %ecx
  2829e5:	52                   	push   %edx
  2829e6:	50                   	push   %eax
  2829e7:	57                   	push   %edi
  2829e8:	e8 f4 fb ff ff       	call   2825e1 <sheet_refreshsub2>
		sheet_refreshsub2(ctl,vx0,vy0,vx0+sht->bxsize,vy0+sht->bysize,sht->height);
  2829ed:	ff 73 18             	pushl  0x18(%ebx)
  2829f0:	89 f0                	mov    %esi,%eax
  2829f2:	03 43 08             	add    0x8(%ebx),%eax
  2829f5:	50                   	push   %eax
  2829f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  2829f9:	03 43 04             	add    0x4(%ebx),%eax
  2829fc:	50                   	push   %eax
  2829fd:	56                   	push   %esi
  2829fe:	ff 75 0c             	pushl  0xc(%ebp)
  282a01:	57                   	push   %edi
  282a02:	e8 da fb ff ff       	call   2825e1 <sheet_refreshsub2>
  282a07:	83 c4 30             	add    $0x30,%esp
	}
	return;
}
  282a0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282a0d:	5b                   	pop    %ebx
  282a0e:	5e                   	pop    %esi
  282a0f:	5f                   	pop    %edi
  282a10:	5d                   	pop    %ebp
  282a11:	c3                   	ret    

00282a12 <sheet_free>:

void sheet_free(struct SHEET *sht)
{
  282a12:	55                   	push   %ebp
  282a13:	89 e5                	mov    %esp,%ebp
  282a15:	53                   	push   %ebx
  282a16:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(sht->height >= 0)
  282a19:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  282a1d:	78 0b                	js     282a2a <sheet_free+0x18>
	{
		sheet_updown(sht,-1); //hide the sheet
  282a1f:	6a ff                	push   $0xffffffff
  282a21:	53                   	push   %ebx
  282a22:	e8 a3 fe ff ff       	call   2828ca <sheet_updown>
  282a27:	83 c4 08             	add    $0x8,%esp
	}
	sht->flags = 0; //set sheet unused.
  282a2a:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
	return;
}
  282a31:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  282a34:	c9                   	leave  
  282a35:	c3                   	ret    

00282a36 <timer_alloc>:
	timerctl.next = 0xffffffff;
	return;
}

struct TIMER *timer_alloc(void)
{
  282a36:	55                   	push   %ebp
  282a37:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TIMER;i++)
	{
		if(timerctl.timers0[i].flags == 0)
  282a39:	80 3d 50 79 28 00 00 	cmpb   $0x0,0x287950
  282a40:	74 11                	je     282a53 <timer_alloc+0x1d>
  282a42:	ba 64 79 28 00       	mov    $0x287964,%edx
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a47:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(timerctl.timers0[i].flags == 0)
  282a4c:	80 3a 00             	cmpb   $0x0,(%edx)
  282a4f:	75 2b                	jne    282a7c <timer_alloc+0x46>
  282a51:	eb 05                	jmp    282a58 <timer_alloc+0x22>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a53:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(timerctl.timers0[i].flags == 0)
		{
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
  282a58:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  282a5f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  282a62:	8d 0c 8d 40 79 28 00 	lea    0x287940(,%ecx,4),%ecx
  282a69:	c6 41 10 01          	movb   $0x1,0x10(%ecx)
			timerctl.timers0[i].flags2= 0;
  282a6d:	c6 41 11 00          	movb   $0x0,0x11(%ecx)
			return &timerctl.timers0[i];
  282a71:	01 d0                	add    %edx,%eax
  282a73:	8d 04 85 48 79 28 00 	lea    0x287948(,%eax,4),%eax
  282a7a:	eb 12                	jmp    282a8e <timer_alloc+0x58>
}

struct TIMER *timer_alloc(void)
{
	int i;
	for(i=0;i<MAX_TIMER;i++)
  282a7c:	83 c0 01             	add    $0x1,%eax
  282a7f:	83 c2 14             	add    $0x14,%edx
  282a82:	3d f4 01 00 00       	cmp    $0x1f4,%eax
  282a87:	75 c3                	jne    282a4c <timer_alloc+0x16>
			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
			timerctl.timers0[i].flags2= 0;
			return &timerctl.timers0[i];
		}
	}
	return 0;
  282a89:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282a8e:	5d                   	pop    %ebp
  282a8f:	c3                   	ret    

00282a90 <init_pit>:
#include "task.h"

struct TIMERCTL timerctl;

void init_pit(void)
{
  282a90:	55                   	push   %ebp
  282a91:	89 e5                	mov    %esp,%ebp
  282a93:	83 ec 10             	sub    $0x10,%esp
	io_out8(PIT_CTRL,0X34);
  282a96:	6a 34                	push   $0x34
  282a98:	6a 43                	push   $0x43
  282a9a:	e8 07 e0 ff ff       	call   280aa6 <io_out8>
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
  282a9f:	83 c4 08             	add    $0x8,%esp
  282aa2:	68 9c 00 00 00       	push   $0x9c
  282aa7:	6a 40                	push   $0x40
  282aa9:	e8 f8 df ff ff       	call   280aa6 <io_out8>
	io_out8(PIT_CNT0,0x2e);
  282aae:	83 c4 08             	add    $0x8,%esp
  282ab1:	6a 2e                	push   $0x2e
  282ab3:	6a 40                	push   $0x40
  282ab5:	e8 ec df ff ff       	call   280aa6 <io_out8>
  282aba:	b8 50 79 28 00       	mov    $0x287950,%eax
  282abf:	ba 60 a0 28 00       	mov    $0x28a060,%edx
  282ac4:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<MAX_TIMER;i++)
		timerctl.timers0[i].flags = 0;
  282ac7:	c6 00 00             	movb   $0x0,(%eax)
  282aca:	83 c0 14             	add    $0x14,%eax
{
	io_out8(PIT_CTRL,0X34);
	//out 0x2e9c (11932), make the pit freq = 100hz
	io_out8(PIT_CNT0,0X9C);
	io_out8(PIT_CNT0,0x2e);
	for(int i=0;i<MAX_TIMER;i++)
  282acd:	39 d0                	cmp    %edx,%eax
  282acf:	75 f6                	jne    282ac7 <init_pit+0x37>
		timerctl.timers0[i].flags = 0;
	struct TIMER *t = timer_alloc();
  282ad1:	e8 60 ff ff ff       	call   282a36 <timer_alloc>
	t->next = 0;
  282ad6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	t->timeout = 0xffffffff;
  282adc:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
	t->flags = TIMER_FLAGS_USING;
  282ae3:	c6 40 08 02          	movb   $0x2,0x8(%eax)
	timerctl.t0 = t;
  282ae7:	a3 58 a0 28 00       	mov    %eax,0x28a058
	timerctl.next = 0xffffffff;
  282aec:	c7 05 44 79 28 00 ff 	movl   $0xffffffff,0x287944
  282af3:	ff ff ff 
	return;
}
  282af6:	c9                   	leave  
  282af7:	c3                   	ret    

00282af8 <timer_free>:
	}
	return 0;
}

void timer_free(struct TIMER *timer)
{
  282af8:	55                   	push   %ebp
  282af9:	89 e5                	mov    %esp,%ebp
	timer->flags = 0;
  282afb:	8b 45 08             	mov    0x8(%ebp),%eax
  282afe:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	return;
}
  282b02:	5d                   	pop    %ebp
  282b03:	c3                   	ret    

00282b04 <timer_init>:

void timer_init(struct TIMER *timer,struct FIFO32 *fifo,int data)
{
  282b04:	55                   	push   %ebp
  282b05:	89 e5                	mov    %esp,%ebp
  282b07:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->fifo = fifo;
  282b0a:	8b 55 0c             	mov    0xc(%ebp),%edx
  282b0d:	89 50 0c             	mov    %edx,0xc(%eax)
	timer->data = data;
  282b10:	8b 55 10             	mov    0x10(%ebp),%edx
  282b13:	89 50 10             	mov    %edx,0x10(%eax)
	return ;
}
  282b16:	5d                   	pop    %ebp
  282b17:	c3                   	ret    

00282b18 <timer_settime>:

void timer_settime(struct TIMER *timer,unsigned int timeout)
{
  282b18:	55                   	push   %ebp
  282b19:	89 e5                	mov    %esp,%ebp
  282b1b:	57                   	push   %edi
  282b1c:	56                   	push   %esi
  282b1d:	53                   	push   %ebx
  282b1e:	83 ec 0c             	sub    $0xc,%esp
  282b21:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timer->timeout = timeout + timerctl.count;
  282b24:	a1 40 79 28 00       	mov    0x287940,%eax
  282b29:	03 45 0c             	add    0xc(%ebp),%eax
  282b2c:	89 43 04             	mov    %eax,0x4(%ebx)
	timer->flags = TIMER_FLAGS_USING;
  282b2f:	c6 43 08 02          	movb   $0x2,0x8(%ebx)
	int e = io_load_eflags();
  282b33:	e8 8d df ff ff       	call   280ac5 <io_load_eflags>
  282b38:	89 c6                	mov    %eax,%esi
	io_cli();
  282b3a:	e8 33 df ff ff       	call   280a72 <io_cli>
	struct TIMER *t, *s;
	if(timer->timeout<=timerctl.t0->timeout)
  282b3f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  282b42:	8b 3d 58 a0 28 00    	mov    0x28a058,%edi
  282b48:	3b 4f 04             	cmp    0x4(%edi),%ecx
  282b4b:	77 1e                	ja     282b6b <timer_settime+0x53>
	{
		timer->next = timerctl.t0;
  282b4d:	89 3b                	mov    %edi,(%ebx)
		timerctl.t0 = timer;
  282b4f:	89 1d 58 a0 28 00    	mov    %ebx,0x28a058
		timerctl.next = timer->timeout;
  282b55:	8b 43 04             	mov    0x4(%ebx),%eax
  282b58:	a3 44 79 28 00       	mov    %eax,0x287944
		io_store_eflags(e);
  282b5d:	83 ec 0c             	sub    $0xc,%esp
  282b60:	56                   	push   %esi
  282b61:	e8 62 df ff ff       	call   280ac8 <io_store_eflags>
		return;
  282b66:	83 c4 10             	add    $0x10,%esp
  282b69:	eb 3e                	jmp    282ba9 <timer_settime+0x91>
	}
	t = timerctl.t0->next;
  282b6b:	8b 17                	mov    (%edi),%edx
	s = timerctl.t0;
	while(t)
  282b6d:	85 d2                	test   %edx,%edx
  282b6f:	74 2c                	je     282b9d <timer_settime+0x85>
	{
		if(timer->timeout<=t->timeout)
  282b71:	3b 4a 04             	cmp    0x4(%edx),%ecx
  282b74:	77 21                	ja     282b97 <timer_settime+0x7f>
  282b76:	eb 07                	jmp    282b7f <timer_settime+0x67>
  282b78:	3b 48 04             	cmp    0x4(%eax),%ecx
  282b7b:	77 18                	ja     282b95 <timer_settime+0x7d>
  282b7d:	eb 04                	jmp    282b83 <timer_settime+0x6b>
		timerctl.t0 = timer;
		timerctl.next = timer->timeout;
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
  282b7f:	89 d0                	mov    %edx,%eax
	s = timerctl.t0;
  282b81:	89 fa                	mov    %edi,%edx
	while(t)
	{
		if(timer->timeout<=t->timeout)
		{
			timer->next = t;
  282b83:	89 03                	mov    %eax,(%ebx)
			s->next = timer;
  282b85:	89 1a                	mov    %ebx,(%edx)
			io_store_eflags(e);
  282b87:	83 ec 0c             	sub    $0xc,%esp
  282b8a:	56                   	push   %esi
  282b8b:	e8 38 df ff ff       	call   280ac8 <io_store_eflags>
			return;
  282b90:	83 c4 10             	add    $0x10,%esp
  282b93:	eb 14                	jmp    282ba9 <timer_settime+0x91>
		}
		s = t;
		t = t->next;
  282b95:	89 c2                	mov    %eax,%edx
  282b97:	8b 02                	mov    (%edx),%eax
		io_store_eflags(e);
		return;
	}
	t = timerctl.t0->next;
	s = timerctl.t0;
	while(t)
  282b99:	85 c0                	test   %eax,%eax
  282b9b:	75 db                	jne    282b78 <timer_settime+0x60>
			return;
		}
		s = t;
		t = t->next;
	}
	io_store_eflags(e);
  282b9d:	83 ec 0c             	sub    $0xc,%esp
  282ba0:	56                   	push   %esi
  282ba1:	e8 22 df ff ff       	call   280ac8 <io_store_eflags>
	return;
  282ba6:	83 c4 10             	add    $0x10,%esp
}
  282ba9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282bac:	5b                   	pop    %ebx
  282bad:	5e                   	pop    %esi
  282bae:	5f                   	pop    %edi
  282baf:	5d                   	pop    %ebp
  282bb0:	c3                   	ret    

00282bb1 <inthandler20>:

extern struct TIMER *task_timer;

//handler for int 20 (timer interrupts)
void inthandler20(int *esp)
{
  282bb1:	55                   	push   %ebp
  282bb2:	89 e5                	mov    %esp,%ebp
  282bb4:	56                   	push   %esi
  282bb5:	53                   	push   %ebx
	char ts = 0;

	io_out8(PIC0_OCW2,0x60); //tell pic continue watch 20 int
  282bb6:	83 ec 08             	sub    $0x8,%esp
  282bb9:	6a 60                	push   $0x60
  282bbb:	6a 20                	push   $0x20
  282bbd:	e8 e4 de ff ff       	call   280aa6 <io_out8>
	timerctl.count ++;
  282bc2:	a1 40 79 28 00       	mov    0x287940,%eax
  282bc7:	8d 50 01             	lea    0x1(%eax),%edx
  282bca:	89 15 40 79 28 00    	mov    %edx,0x287940
	
	if(timerctl.count >= timerctl.next)
  282bd0:	83 c4 10             	add    $0x10,%esp
  282bd3:	3b 15 44 79 28 00    	cmp    0x287944,%edx
  282bd9:	72 69                	jb     282c44 <inthandler20+0x93>
	{
		struct TIMER *t = timerctl.t0;
  282bdb:	8b 1d 58 a0 28 00    	mov    0x28a058,%ebx
		while(t)
  282be1:	85 db                	test   %ebx,%ebx
  282be3:	75 46                	jne    282c2b <inthandler20+0x7a>
  282be5:	eb 5d                	jmp    282c44 <inthandler20+0x93>
		{
			if(t->timeout <= timerctl.count)
  282be7:	8b 43 04             	mov    0x4(%ebx),%eax
  282bea:	3b 05 40 79 28 00    	cmp    0x287940,%eax
  282bf0:	77 2c                	ja     282c1e <inthandler20+0x6d>
			{
				t->flags = TIMER_FLAGS_ALLOC;
  282bf2:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
				if(t!=task_timer) fifo32_put(t->fifo,t->data);
  282bf6:	39 1d 60 a0 28 00    	cmp    %ebx,0x28a060
  282bfc:	74 13                	je     282c11 <inthandler20+0x60>
  282bfe:	83 ec 08             	sub    $0x8,%esp
  282c01:	ff 73 10             	pushl  0x10(%ebx)
  282c04:	ff 73 0c             	pushl  0xc(%ebx)
  282c07:	e8 5d ef ff ff       	call   281b69 <fifo32_put>
  282c0c:	83 c4 10             	add    $0x10,%esp
  282c0f:	eb 05                	jmp    282c16 <inthandler20+0x65>
				else ts=1;
  282c11:	be 01 00 00 00       	mov    $0x1,%esi
				t = t->next;
  282c16:	8b 1b                	mov    (%ebx),%ebx
	timerctl.count ++;
	
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
  282c18:	85 db                	test   %ebx,%ebx
  282c1a:	75 cb                	jne    282be7 <inthandler20+0x36>
  282c1c:	eb 1b                	jmp    282c39 <inthandler20+0x88>
				else ts=1;
				t = t->next;
			}
			else
			{
				timerctl.next = t->timeout;
  282c1e:	a3 44 79 28 00       	mov    %eax,0x287944
				timerctl.t0 = t;
  282c23:	89 1d 58 a0 28 00    	mov    %ebx,0x28a058
				break;
  282c29:	eb 0e                	jmp    282c39 <inthandler20+0x88>
	if(timerctl.count >= timerctl.next)
	{
		struct TIMER *t = timerctl.t0;
		while(t)
		{
			if(t->timeout <= timerctl.count)
  282c2b:	8b 43 04             	mov    0x4(%ebx),%eax
  282c2e:	be 00 00 00 00       	mov    $0x0,%esi
  282c33:	39 c2                	cmp    %eax,%edx
  282c35:	73 bb                	jae    282bf2 <inthandler20+0x41>
  282c37:	eb e5                	jmp    282c1e <inthandler20+0x6d>
				break;
			}
		}
	}

	if(ts!=0)task_switch();
  282c39:	89 f0                	mov    %esi,%eax
  282c3b:	84 c0                	test   %al,%al
  282c3d:	74 05                	je     282c44 <inthandler20+0x93>
  282c3f:	e8 ef 04 00 00       	call   283133 <task_switch>
	return;
}
  282c44:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282c47:	5b                   	pop    %ebx
  282c48:	5e                   	pop    %esi
  282c49:	5d                   	pop    %ebp
  282c4a:	c3                   	ret    

00282c4b <timer_cancel>:

int timer_cancel(struct TIMER *timer)
{
  282c4b:	55                   	push   %ebp
  282c4c:	89 e5                	mov    %esp,%ebp
  282c4e:	56                   	push   %esi
  282c4f:	53                   	push   %ebx
  282c50:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int e;
	struct TIMER *t;
	e = io_load_eflags();
  282c53:	e8 6d de ff ff       	call   280ac5 <io_load_eflags>
  282c58:	89 c6                	mov    %eax,%esi
	io_cli();
  282c5a:	e8 13 de ff ff       	call   280a72 <io_cli>
	if(timer->flags == TIMER_FLAGS_USING)
  282c5f:	80 7b 08 02          	cmpb   $0x2,0x8(%ebx)
  282c63:	75 3e                	jne    282ca3 <timer_cancel+0x58>
	{
		if(timer == timerctl.t0)
  282c65:	8b 15 58 a0 28 00    	mov    0x28a058,%edx
  282c6b:	39 d3                	cmp    %edx,%ebx
  282c6d:	75 13                	jne    282c82 <timer_cancel+0x37>
		{
			t = timer->next;
  282c6f:	8b 03                	mov    (%ebx),%eax
			timerctl.t0 = t;
  282c71:	a3 58 a0 28 00       	mov    %eax,0x28a058
			timerctl.next = t->timeout;
  282c76:	8b 40 04             	mov    0x4(%eax),%eax
  282c79:	a3 44 79 28 00       	mov    %eax,0x287944
  282c7e:	eb 0c                	jmp    282c8c <timer_cancel+0x41>
			{
				if(t->next == timer)
				{
					break;
				}
				t = t->next;
  282c80:	89 c2                	mov    %eax,%edx
		else
		{
			t = timerctl.t0;
			for(;;)
			{
				if(t->next == timer)
  282c82:	8b 02                	mov    (%edx),%eax
  282c84:	39 c3                	cmp    %eax,%ebx
  282c86:	75 f8                	jne    282c80 <timer_cancel+0x35>
				{
					break;
				}
				t = t->next;
			}
			t->next = timer->next;
  282c88:	8b 03                	mov    (%ebx),%eax
  282c8a:	89 02                	mov    %eax,(%edx)
		}
		timer->flags = TIMER_FLAGS_ALLOC;
  282c8c:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
		io_store_eflags(e);
  282c90:	83 ec 0c             	sub    $0xc,%esp
  282c93:	56                   	push   %esi
  282c94:	e8 2f de ff ff       	call   280ac8 <io_store_eflags>
		return 1;
  282c99:	83 c4 10             	add    $0x10,%esp
  282c9c:	b8 01 00 00 00       	mov    $0x1,%eax
  282ca1:	eb 11                	jmp    282cb4 <timer_cancel+0x69>
	}
	io_store_eflags(e);
  282ca3:	83 ec 0c             	sub    $0xc,%esp
  282ca6:	56                   	push   %esi
  282ca7:	e8 1c de ff ff       	call   280ac8 <io_store_eflags>
	return 0;
  282cac:	83 c4 10             	add    $0x10,%esp
  282caf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282cb4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282cb7:	5b                   	pop    %ebx
  282cb8:	5e                   	pop    %esi
  282cb9:	5d                   	pop    %ebp
  282cba:	c3                   	ret    

00282cbb <timer_cancelall>:

void timer_cancelall(struct FIFO32 *fifo)
{
  282cbb:	55                   	push   %ebp
  282cbc:	89 e5                	mov    %esp,%ebp
  282cbe:	57                   	push   %edi
  282cbf:	56                   	push   %esi
  282cc0:	53                   	push   %ebx
  282cc1:	83 ec 1c             	sub    $0x1c,%esp
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
  282cc4:	e8 fc dd ff ff       	call   280ac5 <io_load_eflags>
  282cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	io_cli();
  282ccc:	e8 a1 dd ff ff       	call   280a72 <io_cli>
  282cd1:	bb 48 79 28 00       	mov    $0x287948,%ebx
  282cd6:	bf 58 a0 28 00       	mov    $0x28a058,%edi
	for(i=0;i<MAX_TIMER;i++)
	{
		t = &timerctl.timers0[i];
		if(t->flags != 0 && t->flags2 != 0 && t->fifo == fifo)
  282cdb:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  282cdf:	74 1e                	je     282cff <timer_cancelall+0x44>
  282ce1:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
  282ce5:	74 18                	je     282cff <timer_cancelall+0x44>
  282ce7:	8b 45 08             	mov    0x8(%ebp),%eax
  282cea:	39 43 0c             	cmp    %eax,0xc(%ebx)
  282ced:	75 10                	jne    282cff <timer_cancelall+0x44>
		{
			timer_cancel(t);
  282cef:	83 ec 0c             	sub    $0xc,%esp
  282cf2:	53                   	push   %ebx
  282cf3:	e8 53 ff ff ff       	call   282c4b <timer_cancel>
	return 0;
}

void timer_free(struct TIMER *timer)
{
	timer->flags = 0;
  282cf8:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  282cfc:	83 c4 10             	add    $0x10,%esp
  282cff:	83 c3 14             	add    $0x14,%ebx
{
	int e,i;
	struct TIMER *t;
	e = io_load_eflags();
	io_cli();
	for(i=0;i<MAX_TIMER;i++)
  282d02:	39 fb                	cmp    %edi,%ebx
  282d04:	75 d5                	jne    282cdb <timer_cancelall+0x20>
		{
			timer_cancel(t);
			timer_free(t);
		}
	}
	io_store_eflags(e);
  282d06:	83 ec 0c             	sub    $0xc,%esp
  282d09:	ff 75 e4             	pushl  -0x1c(%ebp)
  282d0c:	e8 b7 dd ff ff       	call   280ac8 <io_store_eflags>
	return;
  282d11:	83 c4 10             	add    $0x10,%esp
}
  282d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
  282d17:	5b                   	pop    %ebx
  282d18:	5e                   	pop    %esi
  282d19:	5f                   	pop    %edi
  282d1a:	5d                   	pop    %ebp
  282d1b:	c3                   	ret    
  282d1c:	66 90                	xchg   %ax,%ax
  282d1e:	66 90                	xchg   %ax,%ax

00282d20 <load_tr>:
  282d20:	0f 00 5c 24 04       	ltr    0x4(%esp)
  282d25:	c3                   	ret    

00282d26 <farjmp>:
  282d26:	ff 6c 24 04          	ljmp   *0x4(%esp)
  282d2a:	c3                   	ret    

00282d2b <farcall>:
  282d2b:	ff 5c 24 04          	lcall  *0x4(%esp)
  282d2f:	c3                   	ret    

00282d30 <asm_end_app>:
  282d30:	8b 20                	mov    (%eax),%esp
  282d32:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  282d39:	61                   	popa   
  282d3a:	c3                   	ret    

00282d3b <task_idle>:

struct TASKCTL *taskctl;
struct TIMER *task_timer;

void task_idle(void)
{
  282d3b:	55                   	push   %ebp
  282d3c:	89 e5                	mov    %esp,%ebp
  282d3e:	83 ec 08             	sub    $0x8,%esp
	for(;;)
	{
		io_hlt();
  282d41:	e8 2a dd ff ff       	call   280a70 <io_hlt>
  282d46:	eb f9                	jmp    282d41 <task_idle+0x6>

00282d48 <task_alloc>:
	task_run(idle,MAX_TASKLEVELS-1,1);
	return task;
}

struct TASK *task_alloc(void)
{
  282d48:	55                   	push   %ebp
  282d49:	89 e5                	mov    %esp,%ebp
  282d4b:	56                   	push   %esi
  282d4c:	53                   	push   %ebx
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(taskctl->tasks0[i].flags == 0)
  282d4d:	8b 0d 5c a0 28 00    	mov    0x28a05c,%ecx
  282d53:	83 b9 fc 0f 00 00 00 	cmpl   $0x0,0xffc(%ecx)
  282d5a:	74 16                	je     282d72 <task_alloc+0x2a>
  282d5c:	8d 91 9c 10 00 00    	lea    0x109c(%ecx),%edx

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282d62:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
  282d67:	83 3a 00             	cmpl   $0x0,(%edx)
  282d6a:	0f 85 c2 00 00 00    	jne    282e32 <task_alloc+0xea>
  282d70:	eb 05                	jmp    282d77 <task_alloc+0x2f>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282d72:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->tasks0[i].flags == 0)
		{
			task = &taskctl->tasks0[i];
  282d77:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
  282d7e:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  282d81:	c1 e3 05             	shl    $0x5,%ebx
			task->flags = 1;
  282d84:	89 da                	mov    %ebx,%edx
  282d86:	01 ca                	add    %ecx,%edx
  282d88:	c7 82 fc 0f 00 00 01 	movl   $0x1,0xffc(%edx)
  282d8f:	00 00 00 
			task->tss.eflags = 0x202;
  282d92:	c7 82 48 10 00 00 02 	movl   $0x202,0x1048(%edx)
  282d99:	02 00 00 
			task->tss.eax = 0;
  282d9c:	c7 82 4c 10 00 00 00 	movl   $0x0,0x104c(%edx)
  282da3:	00 00 00 
			task->tss.ecx = 0;
  282da6:	c7 82 50 10 00 00 00 	movl   $0x0,0x1050(%edx)
  282dad:	00 00 00 
			task->tss.edx = 0;
  282db0:	c7 82 54 10 00 00 00 	movl   $0x0,0x1054(%edx)
  282db7:	00 00 00 
			task->tss.ebx = 0;
  282dba:	c7 82 58 10 00 00 00 	movl   $0x0,0x1058(%edx)
  282dc1:	00 00 00 
			task->tss.ebp = 0;
  282dc4:	c7 82 60 10 00 00 00 	movl   $0x0,0x1060(%edx)
  282dcb:	00 00 00 
			task->tss.esi = 0;
  282dce:	c7 82 64 10 00 00 00 	movl   $0x0,0x1064(%edx)
  282dd5:	00 00 00 
			task->tss.edi = 0;
  282dd8:	c7 82 68 10 00 00 00 	movl   $0x0,0x1068(%edx)
  282ddf:	00 00 00 
			task->tss.es  = 0;
  282de2:	c7 82 6c 10 00 00 00 	movl   $0x0,0x106c(%edx)
  282de9:	00 00 00 
			task->tss.ds  = 0;
  282dec:	c7 82 78 10 00 00 00 	movl   $0x0,0x1078(%edx)
  282df3:	00 00 00 
			task->tss.fs  = 0;
  282df6:	c7 82 7c 10 00 00 00 	movl   $0x0,0x107c(%edx)
  282dfd:	00 00 00 
			task->tss.gs  = 0;
  282e00:	c7 82 80 10 00 00 00 	movl   $0x0,0x1080(%edx)
  282e07:	00 00 00 
			task->tss.ldtr= 0;
  282e0a:	c7 82 84 10 00 00 00 	movl   $0x0,0x1084(%edx)
  282e11:	00 00 00 
			task->tss.iomap = 0x40000000;
  282e14:	c7 82 88 10 00 00 00 	movl   $0x40000000,0x1088(%edx)
  282e1b:	00 00 40 
			task->tss.ss0 = 0;
  282e1e:	c7 84 19 2c 10 00 00 	movl   $0x0,0x102c(%ecx,%ebx,1)
  282e25:	00 00 00 00 
			return task;
  282e29:	8d 84 19 f8 0f 00 00 	lea    0xff8(%ecx,%ebx,1),%eax
  282e30:	eb 19                	jmp    282e4b <task_alloc+0x103>

struct TASK *task_alloc(void)
{
	int i;
	struct TASK *task;
	for(i=0;i<MAX_TASKS;i++)
  282e32:	83 c0 01             	add    $0x1,%eax
  282e35:	81 c2 a0 00 00 00    	add    $0xa0,%edx
  282e3b:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  282e40:	0f 85 21 ff ff ff    	jne    282d67 <task_alloc+0x1f>
			task->tss.iomap = 0x40000000;
			task->tss.ss0 = 0;
			return task;
		}
	}
	return 0;
  282e46:	b8 00 00 00 00       	mov    $0x0,%eax
}
  282e4b:	5b                   	pop    %ebx
  282e4c:	5e                   	pop    %esi
  282e4d:	5d                   	pop    %ebp
  282e4e:	c3                   	ret    

00282e4f <task_now>:
	}
	return;
}

struct TASK *task_now(void)
{
  282e4f:	55                   	push   %ebp
  282e50:	89 e5                	mov    %esp,%ebp
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  282e52:	8b 15 5c a0 28 00    	mov    0x28a05c,%edx
  282e58:	8b 02                	mov    (%edx),%eax
	return tl->tasks[tl->now];
  282e5a:	69 c8 98 01 00 00    	imul   $0x198,%eax,%ecx
  282e60:	6b c0 66             	imul   $0x66,%eax,%eax
  282e63:	03 44 0a 0c          	add    0xc(%edx,%ecx,1),%eax
  282e67:	8b 44 82 10          	mov    0x10(%edx,%eax,4),%eax
}
  282e6b:	5d                   	pop    %ebp
  282e6c:	c3                   	ret    

00282e6d <task_add>:

void task_add(struct TASK *task)
{
  282e6d:	55                   	push   %ebp
  282e6e:	89 e5                	mov    %esp,%ebp
  282e70:	56                   	push   %esi
  282e71:	53                   	push   %ebx
  282e72:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282e75:	8b 35 5c a0 28 00    	mov    0x28a05c,%esi
  282e7b:	8b 4b 08             	mov    0x8(%ebx),%ecx
  282e7e:	69 c1 98 01 00 00    	imul   $0x198,%ecx,%eax
  282e84:	01 f0                	add    %esi,%eax
	if(tl->running == MAX_TASKS_LV) return;
  282e86:	8b 50 08             	mov    0x8(%eax),%edx
  282e89:	83 fa 64             	cmp    $0x64,%edx
  282e8c:	74 14                	je     282ea2 <task_add+0x35>
	tl->tasks[tl->running] = task;
  282e8e:	6b c9 66             	imul   $0x66,%ecx,%ecx
  282e91:	01 ca                	add    %ecx,%edx
  282e93:	89 5c 96 10          	mov    %ebx,0x10(%esi,%edx,4)
	tl->running++;
  282e97:	83 40 08 01          	addl   $0x1,0x8(%eax)
	task->flags = 2;	//alive
  282e9b:	c7 43 04 02 00 00 00 	movl   $0x2,0x4(%ebx)
	return;
}
  282ea2:	5b                   	pop    %ebx
  282ea3:	5e                   	pop    %esi
  282ea4:	5d                   	pop    %ebp
  282ea5:	c3                   	ret    

00282ea6 <task_remove>:

void task_remove(struct TASK *task)
{
  282ea6:	55                   	push   %ebp
  282ea7:	89 e5                	mov    %esp,%ebp
  282ea9:	57                   	push   %edi
  282eaa:	56                   	push   %esi
  282eab:	53                   	push   %ebx
  282eac:	83 ec 04             	sub    $0x4,%esp
  282eaf:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASKLEVEL *tl = &taskctl->level[task->level];
  282eb2:	8b 3d 5c a0 28 00    	mov    0x28a05c,%edi
  282eb8:	8b 43 08             	mov    0x8(%ebx),%eax
  282ebb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  282ebe:	69 d0 98 01 00 00    	imul   $0x198,%eax,%edx
  282ec4:	01 fa                	add    %edi,%edx
	int i;
	for(i=0;i<tl->running;i++)
  282ec6:	8b 4a 08             	mov    0x8(%edx),%ecx
  282ec9:	85 c9                	test   %ecx,%ecx
  282ecb:	7e 1d                	jle    282eea <task_remove+0x44>
	{
		if(tl->tasks[i] == task)
  282ecd:	3b 5a 10             	cmp    0x10(%edx),%ebx
  282ed0:	74 1f                	je     282ef1 <task_remove+0x4b>
  282ed2:	b8 00 00 00 00       	mov    $0x0,%eax
  282ed7:	eb 06                	jmp    282edf <task_remove+0x39>
  282ed9:	3b 5c 82 10          	cmp    0x10(%edx,%eax,4),%ebx
  282edd:	74 17                	je     282ef6 <task_remove+0x50>

void task_remove(struct TASK *task)
{
	struct TASKLEVEL *tl = &taskctl->level[task->level];
	int i;
	for(i=0;i<tl->running;i++)
  282edf:	83 c0 01             	add    $0x1,%eax
  282ee2:	39 c8                	cmp    %ecx,%eax
  282ee4:	75 f3                	jne    282ed9 <task_remove+0x33>
  282ee6:	89 c8                	mov    %ecx,%eax
  282ee8:	eb 0c                	jmp    282ef6 <task_remove+0x50>
  282eea:	b8 00 00 00 00       	mov    $0x0,%eax
  282eef:	eb 05                	jmp    282ef6 <task_remove+0x50>
  282ef1:	b8 00 00 00 00       	mov    $0x0,%eax
		if(tl->tasks[i] == task)
		{
			break;
		}
	}
	tl->running--;
  282ef6:	83 e9 01             	sub    $0x1,%ecx
  282ef9:	89 4a 08             	mov    %ecx,0x8(%edx)
	if(i<tl->now)
  282efc:	8b 72 0c             	mov    0xc(%edx),%esi
  282eff:	39 c6                	cmp    %eax,%esi
  282f01:	7e 06                	jle    282f09 <task_remove+0x63>
	{
		tl->now--;
  282f03:	83 ee 01             	sub    $0x1,%esi
  282f06:	89 72 0c             	mov    %esi,0xc(%edx)
	}
	if(tl->now >= tl->running)
  282f09:	3b 4a 0c             	cmp    0xc(%edx),%ecx
  282f0c:	7f 07                	jg     282f15 <task_remove+0x6f>
	{
		tl->now = 0;
  282f0e:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
	}
	task->flags = 1; //sleep;
  282f15:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
	
	for(;i<tl->running;i++)
  282f1c:	39 42 08             	cmp    %eax,0x8(%edx)
  282f1f:	7e 1b                	jle    282f3c <task_remove+0x96>
  282f21:	6b 4d f0 66          	imul   $0x66,-0x10(%ebp),%ecx
  282f25:	8d 4c 08 05          	lea    0x5(%eax,%ecx,1),%ecx
  282f29:	8d 0c 8f             	lea    (%edi,%ecx,4),%ecx
	{
		tl->tasks[i] = tl->tasks[i+1];
  282f2c:	83 c0 01             	add    $0x1,%eax
  282f2f:	8b 19                	mov    (%ecx),%ebx
  282f31:	89 59 fc             	mov    %ebx,-0x4(%ecx)
  282f34:	83 c1 04             	add    $0x4,%ecx
	{
		tl->now = 0;
	}
	task->flags = 1; //sleep;
	
	for(;i<tl->running;i++)
  282f37:	39 42 08             	cmp    %eax,0x8(%edx)
  282f3a:	7f f0                	jg     282f2c <task_remove+0x86>
	{
		tl->tasks[i] = tl->tasks[i+1];
	}
	return;
}
  282f3c:	83 c4 04             	add    $0x4,%esp
  282f3f:	5b                   	pop    %ebx
  282f40:	5e                   	pop    %esi
  282f41:	5f                   	pop    %edi
  282f42:	5d                   	pop    %ebp
  282f43:	c3                   	ret    

00282f44 <task_run>:
	}
	return 0;
}

void task_run(struct TASK *task,int level,int priority)
{
  282f44:	55                   	push   %ebp
  282f45:	89 e5                	mov    %esp,%ebp
  282f47:	56                   	push   %esi
  282f48:	53                   	push   %ebx
  282f49:	8b 5d 08             	mov    0x8(%ebp),%ebx
  282f4c:	8b 75 0c             	mov    0xc(%ebp),%esi
  282f4f:	8b 45 10             	mov    0x10(%ebp),%eax
	if(level < 0) level = task->level;
  282f52:	85 f6                	test   %esi,%esi
  282f54:	79 03                	jns    282f59 <task_run+0x15>
  282f56:	8b 73 08             	mov    0x8(%ebx),%esi
	if(priority > 0) task->priority = priority;
  282f59:	85 c0                	test   %eax,%eax
  282f5b:	7e 03                	jle    282f60 <task_run+0x1c>
  282f5d:	89 43 0c             	mov    %eax,0xc(%ebx)
	if(task->flags == 2 && task->level != level)
  282f60:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f64:	75 14                	jne    282f7a <task_run+0x36>
  282f66:	3b 73 08             	cmp    0x8(%ebx),%esi
  282f69:	74 1b                	je     282f86 <task_run+0x42>
	{
		task_remove(task); //then task->flags = 1;
  282f6b:	53                   	push   %ebx
  282f6c:	e8 35 ff ff ff       	call   282ea6 <task_remove>
	}
	if(task->flags != 2)
  282f71:	83 c4 04             	add    $0x4,%esp
  282f74:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  282f78:	74 0c                	je     282f86 <task_run+0x42>
	{
		task->level = level;
  282f7a:	89 73 08             	mov    %esi,0x8(%ebx)
		task_add(task);
  282f7d:	53                   	push   %ebx
  282f7e:	e8 ea fe ff ff       	call   282e6d <task_add>
  282f83:	83 c4 04             	add    $0x4,%esp
	}
	taskctl->lv_change = 1;
  282f86:	a1 5c a0 28 00       	mov    0x28a05c,%eax
  282f8b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	return;
}
  282f8f:	8d 65 f8             	lea    -0x8(%ebp),%esp
  282f92:	5b                   	pop    %ebx
  282f93:	5e                   	pop    %esi
  282f94:	5d                   	pop    %ebp
  282f95:	c3                   	ret    

00282f96 <task_switchsub>:
	}
	return;
}

void task_switchsub(void)
{
  282f96:	55                   	push   %ebp
  282f97:	89 e5                	mov    %esp,%ebp
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		if(taskctl->level[i].running>0) break;
  282f99:	8b 0d 5c a0 28 00    	mov    0x28a05c,%ecx
  282f9f:	83 79 08 00          	cmpl   $0x0,0x8(%ecx)
  282fa3:	7f 20                	jg     282fc5 <task_switchsub+0x2f>
  282fa5:	8d 91 a0 01 00 00    	lea    0x1a0(%ecx),%edx
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fab:	b8 01 00 00 00       	mov    $0x1,%eax
	{
		if(taskctl->level[i].running>0) break;
  282fb0:	83 3a 00             	cmpl   $0x0,(%edx)
  282fb3:	7f 15                	jg     282fca <task_switchsub+0x34>
}

void task_switchsub(void)
{
	int i;
	for(i=0;i<MAX_TASKLEVELS;i++)
  282fb5:	83 c0 01             	add    $0x1,%eax
  282fb8:	81 c2 98 01 00 00    	add    $0x198,%edx
  282fbe:	83 f8 0a             	cmp    $0xa,%eax
  282fc1:	75 ed                	jne    282fb0 <task_switchsub+0x1a>
  282fc3:	eb 05                	jmp    282fca <task_switchsub+0x34>
  282fc5:	b8 00 00 00 00       	mov    $0x0,%eax
	{
		if(taskctl->level[i].running>0) break;
	}
	taskctl->now_lv = i;
  282fca:	89 01                	mov    %eax,(%ecx)
	taskctl->lv_change = 0;
  282fcc:	a1 5c a0 28 00       	mov    0x28a05c,%eax
  282fd1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	return;
}
  282fd5:	5d                   	pop    %ebp
  282fd6:	c3                   	ret    

00282fd7 <task_init>:
		io_hlt();
	}
}

struct TASK *task_init(struct MEMMAN *memman)
{
  282fd7:	55                   	push   %ebp
  282fd8:	89 e5                	mov    %esp,%ebp
  282fda:	57                   	push   %edi
  282fdb:	56                   	push   %esi
  282fdc:	53                   	push   %ebx
  282fdd:	83 ec 14             	sub    $0x14,%esp
  282fe0:	8b 7d 08             	mov    0x8(%ebp),%edi
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
  282fe3:	68 f8 80 02 00       	push   $0x280f8
  282fe8:	57                   	push   %edi
  282fe9:	e8 ff f2 ff ff       	call   2822ed <memman_alloc_4k>
  282fee:	a3 5c a0 28 00       	mov    %eax,0x28a05c
  282ff3:	83 c4 10             	add    $0x10,%esp
  282ff6:	be 20 00 00 00       	mov    $0x20,%esi
	for(i=0;i<MAX_TASKS;i++)
  282ffb:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		taskctl->tasks0[i].flags = 0;
  283000:	8b 15 5c a0 28 00    	mov    0x28a05c,%edx
  283006:	8d 04 9d 00 00 00 00 	lea    0x0(,%ebx,4),%eax
  28300d:	8d 0c 18             	lea    (%eax,%ebx,1),%ecx
  283010:	c1 e1 05             	shl    $0x5,%ecx
  283013:	01 d1                	add    %edx,%ecx
  283015:	c7 81 fc 0f 00 00 00 	movl   $0x0,0xffc(%ecx)
  28301c:	00 00 00 
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
  28301f:	89 b1 f8 0f 00 00    	mov    %esi,0xff8(%ecx)
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
  283025:	68 89 00 00 00       	push   $0x89
  28302a:	01 d8                	add    %ebx,%eax
  28302c:	c1 e0 05             	shl    $0x5,%eax
  28302f:	8d 84 02 24 10 00 00 	lea    0x1024(%edx,%eax,1),%eax
  283036:	50                   	push   %eax
  283037:	6a 67                	push   $0x67
  283039:	8d 86 00 00 27 00    	lea    0x270000(%esi),%eax
  28303f:	50                   	push   %eax
  283040:	e8 cd e3 ff ff       	call   281412 <set_segmdesc>
{
	int i;
	struct TASK *task;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	taskctl = (struct TASKCTL *)memman_alloc_4k(memman,sizeof(struct TASKCTL));
	for(i=0;i<MAX_TASKS;i++)
  283045:	83 c3 01             	add    $0x1,%ebx
  283048:	83 c6 08             	add    $0x8,%esi
  28304b:	83 c4 10             	add    $0x10,%esp
  28304e:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
  283054:	75 aa                	jne    283000 <task_init+0x29>
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
	{
		taskctl->level[i].running = 0;
  283056:	8b 15 5c a0 28 00    	mov    0x28a05c,%edx
  28305c:	8d 42 08             	lea    0x8(%edx),%eax
  28305f:	81 c2 f8 0f 00 00    	add    $0xff8,%edx
  283065:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		taskctl->level[i].now = 0;
  28306b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  283072:	05 98 01 00 00       	add    $0x198,%eax
		taskctl->tasks0[i].flags = 0;
		taskctl->tasks0[i].sel = (TASK_GDT0+i)*8;
		set_segmdesc(gdt+TASK_GDT0+i,103,(int)&taskctl->tasks0[i].tss,AR_TSS32);
	}

	for(i=0;i<MAX_TASKLEVELS;i++)
  283077:	39 d0                	cmp    %edx,%eax
  283079:	75 ea                	jne    283065 <task_init+0x8e>
	{
		taskctl->level[i].running = 0;
		taskctl->level[i].now = 0;
	}
	task = task_alloc();
  28307b:	e8 c8 fc ff ff       	call   282d48 <task_alloc>
  283080:	89 c6                	mov    %eax,%esi
	task->flags = 2;
  283082:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
	task->priority = 2;
  283089:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
	task->level = 0;
  283090:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	task_add(task);
  283097:	83 ec 0c             	sub    $0xc,%esp
  28309a:	50                   	push   %eax
  28309b:	e8 cd fd ff ff       	call   282e6d <task_add>
	
	task_switchsub();
  2830a0:	e8 f1 fe ff ff       	call   282f96 <task_switchsub>
	load_tr(task->sel);
  2830a5:	83 c4 04             	add    $0x4,%esp
  2830a8:	ff 36                	pushl  (%esi)
  2830aa:	e8 71 fc ff ff       	call   282d20 <load_tr>
	task_timer = timer_alloc();
  2830af:	e8 82 f9 ff ff       	call   282a36 <timer_alloc>
  2830b4:	a3 60 a0 28 00       	mov    %eax,0x28a060
	timer_settime(task_timer,task->priority);
  2830b9:	83 c4 08             	add    $0x8,%esp
  2830bc:	ff 76 0c             	pushl  0xc(%esi)
  2830bf:	50                   	push   %eax
  2830c0:	e8 53 fa ff ff       	call   282b18 <timer_settime>

	struct TASK *idle = task_alloc();
  2830c5:	e8 7e fc ff ff       	call   282d48 <task_alloc>
  2830ca:	89 c3                	mov    %eax,%ebx
	idle->tss.esp = memman_alloc(memman,64*1024)+64*1024;
  2830cc:	83 c4 08             	add    $0x8,%esp
  2830cf:	68 00 00 01 00       	push   $0x10000
  2830d4:	57                   	push   %edi
  2830d5:	e8 d7 ee ff ff       	call   281fb1 <memman_alloc>
  2830da:	05 00 00 01 00       	add    $0x10000,%eax
  2830df:	89 43 64             	mov    %eax,0x64(%ebx)
	idle->tss.eip = (int)&task_idle-0x280000;
  2830e2:	c7 43 4c 3b 2d 00 00 	movl   $0x2d3b,0x4c(%ebx)
	idle->tss.es = 1*8;
  2830e9:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	idle->tss.cs = 3*8;
  2830f0:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	idle->tss.ss = 1*8;
  2830f7:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	idle->tss.ds = 1*8;
  2830fe:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283105:	00 00 00 
	idle->tss.fs = 1*8;
  283108:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  28310f:	00 00 00 
	idle->tss.gs = 1*8;
  283112:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283119:	00 00 00 
	task_run(idle,MAX_TASKLEVELS-1,1);
  28311c:	83 c4 0c             	add    $0xc,%esp
  28311f:	6a 01                	push   $0x1
  283121:	6a 09                	push   $0x9
  283123:	53                   	push   %ebx
  283124:	e8 1b fe ff ff       	call   282f44 <task_run>
	return task;
}
  283129:	89 f0                	mov    %esi,%eax
  28312b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28312e:	5b                   	pop    %ebx
  28312f:	5e                   	pop    %esi
  283130:	5f                   	pop    %edi
  283131:	5d                   	pop    %ebp
  283132:	c3                   	ret    

00283133 <task_switch>:
	taskctl->lv_change = 1;
	return;
}

void task_switch(void)
{
  283133:	55                   	push   %ebp
  283134:	89 e5                	mov    %esp,%ebp
  283136:	56                   	push   %esi
  283137:	53                   	push   %ebx
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  283138:	8b 0d 5c a0 28 00    	mov    0x28a05c,%ecx
  28313e:	8b 31                	mov    (%ecx),%esi
  283140:	69 c6 98 01 00 00    	imul   $0x198,%esi,%eax
  283146:	01 c8                	add    %ecx,%eax
	struct TASK *new_task,*now_task = tl->tasks[tl->now];
  283148:	8b 50 0c             	mov    0xc(%eax),%edx
  28314b:	6b de 66             	imul   $0x66,%esi,%ebx
  28314e:	01 d3                	add    %edx,%ebx
  283150:	8b 5c 99 10          	mov    0x10(%ecx,%ebx,4),%ebx
	tl->now++;
  283154:	83 c2 01             	add    $0x1,%edx
  283157:	89 50 0c             	mov    %edx,0xc(%eax)
	if(tl->now == tl->running)
  28315a:	3b 50 08             	cmp    0x8(%eax),%edx
  28315d:	75 07                	jne    283166 <task_switch+0x33>
	{
		tl->now = 0;
  28315f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	if(taskctl->lv_change!=0)
  283166:	80 79 04 00          	cmpb   $0x0,0x4(%ecx)
  28316a:	75 0c                	jne    283178 <task_switch+0x45>
	return;
}

void task_switch(void)
{
	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
  28316c:	69 f6 98 01 00 00    	imul   $0x198,%esi,%esi
  283172:	8d 44 31 08          	lea    0x8(%ecx,%esi,1),%eax
  283176:	eb 14                	jmp    28318c <task_switch+0x59>
	{
		tl->now = 0;
	}
	if(taskctl->lv_change!=0)
	{
		task_switchsub();
  283178:	e8 19 fe ff ff       	call   282f96 <task_switchsub>
		tl = &taskctl->level[taskctl->now_lv];
  28317d:	a1 5c a0 28 00       	mov    0x28a05c,%eax
  283182:	69 10 98 01 00 00    	imul   $0x198,(%eax),%edx
  283188:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
	}
	new_task = tl->tasks[tl->now];
  28318c:	8b 50 04             	mov    0x4(%eax),%edx
  28318f:	8b 74 90 08          	mov    0x8(%eax,%edx,4),%esi
	timer_settime(task_timer,new_task->priority);
  283193:	83 ec 08             	sub    $0x8,%esp
  283196:	ff 76 0c             	pushl  0xc(%esi)
  283199:	ff 35 60 a0 28 00    	pushl  0x28a060
  28319f:	e8 74 f9 ff ff       	call   282b18 <timer_settime>
	if(new_task != now_task)
  2831a4:	83 c4 10             	add    $0x10,%esp
  2831a7:	39 f3                	cmp    %esi,%ebx
  2831a9:	74 0f                	je     2831ba <task_switch+0x87>
	{
		farjmp(0,new_task->sel);
  2831ab:	83 ec 08             	sub    $0x8,%esp
  2831ae:	ff 36                	pushl  (%esi)
  2831b0:	6a 00                	push   $0x0
  2831b2:	e8 6f fb ff ff       	call   282d26 <farjmp>
  2831b7:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  2831ba:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2831bd:	5b                   	pop    %ebx
  2831be:	5e                   	pop    %esi
  2831bf:	5d                   	pop    %ebp
  2831c0:	c3                   	ret    

002831c1 <task_sleep>:

void task_sleep(struct TASK *task)
{
  2831c1:	55                   	push   %ebp
  2831c2:	89 e5                	mov    %esp,%ebp
  2831c4:	56                   	push   %esi
  2831c5:	53                   	push   %ebx
  2831c6:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct TASK *now_task;
	if(task->flags == 2)
  2831c9:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  2831cd:	75 2d                	jne    2831fc <task_sleep+0x3b>
	{
		now_task = task_now();
  2831cf:	e8 7b fc ff ff       	call   282e4f <task_now>
  2831d4:	89 c6                	mov    %eax,%esi
		task_remove(task);
  2831d6:	53                   	push   %ebx
  2831d7:	e8 ca fc ff ff       	call   282ea6 <task_remove>
		if(task == now_task)
  2831dc:	83 c4 04             	add    $0x4,%esp
  2831df:	39 f3                	cmp    %esi,%ebx
  2831e1:	75 19                	jne    2831fc <task_sleep+0x3b>
		{
			task_switchsub();
  2831e3:	e8 ae fd ff ff       	call   282f96 <task_switchsub>
			now_task = task_now();
  2831e8:	e8 62 fc ff ff       	call   282e4f <task_now>
			farjmp(0,now_task->sel);
  2831ed:	83 ec 08             	sub    $0x8,%esp
  2831f0:	ff 30                	pushl  (%eax)
  2831f2:	6a 00                	push   $0x0
  2831f4:	e8 2d fb ff ff       	call   282d26 <farjmp>
  2831f9:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2831fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2831ff:	5b                   	pop    %ebx
  283200:	5e                   	pop    %esi
  283201:	5d                   	pop    %ebp
  283202:	c3                   	ret    

00283203 <console_task>:
#include "header.h"
void console_task(struct SHEET *sheet,unsigned int memtotal)
{
  283203:	55                   	push   %ebp
  283204:	89 e5                	mov    %esp,%ebp
  283206:	57                   	push   %edi
  283207:	56                   	push   %esi
  283208:	53                   	push   %ebx
  283209:	83 ec 5c             	sub    $0x5c,%esp
  28320c:	8b 7d 08             	mov    0x8(%ebp),%edi
	char s[50],cmdline[30];
	struct TASK *task = task_now();
  28320f:	e8 3b fc ff ff       	call   282e4f <task_now>
  283214:	89 c6                	mov    %eax,%esi
  283216:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct CONSOLE cons;
	cons.sht = sheet;
  283219:	89 7d b4             	mov    %edi,-0x4c(%ebp)
	cons.cur_x = 8;
  28321c:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%ebp)
	cons.cur_y = 28;
  283223:	c7 45 bc 1c 00 00 00 	movl   $0x1c,-0x44(%ebp)
	cons.cur_c = -1;
  28322a:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
	//*((int *)0x0fec) = (int)&cons; //for api
	task->cons = &cons;
  283231:	8d 5d b4             	lea    -0x4c(%ebp),%ebx
  283234:	89 98 94 00 00 00    	mov    %ebx,0x94(%eax)

	int i;
	cons.timer = timer_alloc();
  28323a:	e8 f7 f7 ff ff       	call   282a36 <timer_alloc>
  28323f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	timer_init(cons.timer,&task->fifo,1);
  283242:	83 c6 10             	add    $0x10,%esi
  283245:	83 ec 04             	sub    $0x4,%esp
  283248:	6a 01                	push   $0x1
  28324a:	56                   	push   %esi
  28324b:	50                   	push   %eax
  28324c:	e8 b3 f8 ff ff       	call   282b04 <timer_init>
	timer_settime(cons.timer,50);
  283251:	83 c4 08             	add    $0x8,%esp
  283254:	6a 32                	push   $0x32
  283256:	ff 75 c4             	pushl  -0x3c(%ebp)
  283259:	e8 ba f8 ff ff       	call   282b18 <timer_settime>
	
	int *fat = (int *)memman_alloc_4k(memman, 4*2880);
  28325e:	83 c4 08             	add    $0x8,%esp
  283261:	68 00 2d 00 00       	push   $0x2d00
  283266:	68 00 00 3c 00       	push   $0x3c0000
  28326b:	e8 7d f0 ff ff       	call   2822ed <memman_alloc_4k>
  283270:	89 45 a0             	mov    %eax,-0x60(%ebp)
	file_readfat(fat,(unsigned char *)(ADR_DISKIMG+0x000200));
  283273:	83 c4 08             	add    $0x8,%esp
  283276:	68 00 02 10 00       	push   $0x100200
  28327b:	50                   	push   %eax
  28327c:	e8 24 02 00 00       	call   2834a5 <file_readfat>

	//draw prompt char
	cons_putchar(&cons,'>',1);
  283281:	83 c4 0c             	add    $0xc,%esp
  283284:	6a 01                	push   $0x1
  283286:	6a 3e                	push   $0x3e
  283288:	53                   	push   %ebx
  283289:	e8 b1 05 00 00       	call   28383f <cons_putchar>
  28328e:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		io_cli();
  283291:	e8 dc d7 ff ff       	call   280a72 <io_cli>
		if(fifo32_status(&task->fifo)==0)
  283296:	83 ec 0c             	sub    $0xc,%esp
  283299:	56                   	push   %esi
  28329a:	e8 77 e9 ff ff       	call   281c16 <fifo32_status>
  28329f:	83 c4 10             	add    $0x10,%esp
  2832a2:	85 c0                	test   %eax,%eax
  2832a4:	75 15                	jne    2832bb <console_task+0xb8>
		{
			task_sleep(task);
  2832a6:	83 ec 0c             	sub    $0xc,%esp
  2832a9:	ff 75 a4             	pushl  -0x5c(%ebp)
  2832ac:	e8 10 ff ff ff       	call   2831c1 <task_sleep>
			io_sti();
  2832b1:	e8 be d7 ff ff       	call   280a74 <io_sti>
  2832b6:	83 c4 10             	add    $0x10,%esp
  2832b9:	eb d6                	jmp    283291 <console_task+0x8e>
		}
		else
		{
			i=fifo32_get(&task->fifo);
  2832bb:	83 ec 0c             	sub    $0xc,%esp
  2832be:	56                   	push   %esi
  2832bf:	e8 17 e9 ff ff       	call   281bdb <fifo32_get>
  2832c4:	89 c3                	mov    %eax,%ebx
			io_sti();
  2832c6:	e8 a9 d7 ff ff       	call   280a74 <io_sti>
			if(i<=1) //for cursor
  2832cb:	83 c4 10             	add    $0x10,%esp
  2832ce:	83 fb 01             	cmp    $0x1,%ebx
  2832d1:	7f 57                	jg     28332a <console_task+0x127>
			{
				if(i!=0)
  2832d3:	85 db                	test   %ebx,%ebx
  2832d5:	74 20                	je     2832f7 <console_task+0xf4>
				{
					timer_init(cons.timer,&task->fifo,0);
  2832d7:	83 ec 04             	sub    $0x4,%esp
  2832da:	6a 00                	push   $0x0
  2832dc:	56                   	push   %esi
  2832dd:	ff 75 c4             	pushl  -0x3c(%ebp)
  2832e0:	e8 1f f8 ff ff       	call   282b04 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_FFFFFF;
  2832e5:	83 c4 10             	add    $0x10,%esp
  2832e8:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  2832ec:	78 27                	js     283315 <console_task+0x112>
  2832ee:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
  2832f5:	eb 1e                	jmp    283315 <console_task+0x112>
				}
				else
				{
					timer_init(cons.timer,&task->fifo,1);
  2832f7:	83 ec 04             	sub    $0x4,%esp
  2832fa:	6a 01                	push   $0x1
  2832fc:	56                   	push   %esi
  2832fd:	ff 75 c4             	pushl  -0x3c(%ebp)
  283300:	e8 ff f7 ff ff       	call   282b04 <timer_init>
					if(cons.cur_c >= 0) cons.cur_c = COL8_000000;
  283305:	83 c4 10             	add    $0x10,%esp
  283308:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  28330c:	78 07                	js     283315 <console_task+0x112>
  28330e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				}
				timer_settime(cons.timer,50);
  283315:	83 ec 08             	sub    $0x8,%esp
  283318:	6a 32                	push   $0x32
  28331a:	ff 75 c4             	pushl  -0x3c(%ebp)
  28331d:	e8 f6 f7 ff ff       	call   282b18 <timer_settime>
  283322:	83 c4 10             	add    $0x10,%esp
  283325:	e9 2f 01 00 00       	jmp    283459 <console_task+0x256>
							
			}
			else if(i == 2) //get show cursor msg
  28332a:	83 fb 02             	cmp    $0x2,%ebx
  28332d:	75 11                	jne    283340 <console_task+0x13d>
			{
				cons.cur_c = COL8_FFFFFF;
  28332f:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
						cmdline[cons.cur_x/8-2] = i-256;
						cons_putchar(&cons,i-256,1);
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283336:	b8 07 00 00 00       	mov    $0x7,%eax
  28333b:	e9 20 01 00 00       	jmp    283460 <console_task+0x25d>
			}
			else if(i == 2) //get show cursor msg
			{
				cons.cur_c = COL8_FFFFFF;
			}
			else if(i == 3) //get hide cursor msg
  283340:	83 fb 03             	cmp    $0x3,%ebx
  283343:	75 2a                	jne    28336f <console_task+0x16c>
			{
				cons.cur_c = -1;
  283345:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%ebp)
				boxfill8(sheet->buf,sheet->bxsize,COL8_000000,cons.cur_x,28,cons.cur_x+7,43);
  28334c:	8b 45 b8             	mov    -0x48(%ebp),%eax
  28334f:	83 ec 04             	sub    $0x4,%esp
  283352:	6a 2b                	push   $0x2b
  283354:	8d 50 07             	lea    0x7(%eax),%edx
  283357:	52                   	push   %edx
  283358:	6a 1c                	push   $0x1c
  28335a:	50                   	push   %eax
  28335b:	6a 00                	push   $0x0
  28335d:	ff 77 04             	pushl  0x4(%edi)
  283360:	ff 37                	pushl  (%edi)
  283362:	e8 fa d8 ff ff       	call   280c61 <boxfill8>
  283367:	83 c4 20             	add    $0x20,%esp
  28336a:	e9 ea 00 00 00       	jmp    283459 <console_task+0x256>
			}
			else if(i == 4) //close button clicked
  28336f:	83 fb 04             	cmp    $0x4,%ebx
  283372:	75 17                	jne    28338b <console_task+0x188>
			{
				cmd_exit(&cons,fat);
  283374:	83 ec 08             	sub    $0x8,%esp
  283377:	ff 75 a0             	pushl  -0x60(%ebp)
  28337a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28337d:	50                   	push   %eax
  28337e:	e8 fb 07 00 00       	call   283b7e <cmd_exit>
  283383:	83 c4 10             	add    $0x10,%esp
  283386:	e9 ce 00 00 00       	jmp    283459 <console_task+0x256>
			}
			else if(256<=i && i<=511)
  28338b:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
  283391:	3d ff 00 00 00       	cmp    $0xff,%eax
  283396:	0f 87 bd 00 00 00    	ja     283459 <console_task+0x256>
			{
				if(i == 8+256) //back key
  28339c:	81 fb 08 01 00 00    	cmp    $0x108,%ebx
  2833a2:	75 26                	jne    2833ca <console_task+0x1c7>
				{
					if(cons.cur_x > 16)
  2833a4:	83 7d b8 10          	cmpl   $0x10,-0x48(%ebp)
  2833a8:	0f 8e ab 00 00 00    	jle    283459 <console_task+0x256>
					{
						cons_putchar(&cons,' ',0);
  2833ae:	83 ec 04             	sub    $0x4,%esp
  2833b1:	6a 00                	push   $0x0
  2833b3:	6a 20                	push   $0x20
  2833b5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2833b8:	50                   	push   %eax
  2833b9:	e8 81 04 00 00       	call   28383f <cons_putchar>
						cons.cur_x -= 8;
  2833be:	83 6d b8 08          	subl   $0x8,-0x48(%ebp)
  2833c2:	83 c4 10             	add    $0x10,%esp
  2833c5:	e9 8f 00 00 00       	jmp    283459 <console_task+0x256>
					}
				}
				else if(i == 10+256) //return key
  2833ca:	81 fb 0a 01 00 00    	cmp    $0x10a,%ebx
  2833d0:	75 56                	jne    283428 <console_task+0x225>
				{
					cons_putchar(&cons,' ',0);
  2833d2:	83 ec 04             	sub    $0x4,%esp
  2833d5:	6a 00                	push   $0x0
  2833d7:	6a 20                	push   $0x20
  2833d9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2833dc:	50                   	push   %eax
  2833dd:	e8 5d 04 00 00       	call   28383f <cons_putchar>
					cmdline[cons.cur_x/8-2] = 0;
  2833e2:	8b 55 b8             	mov    -0x48(%ebp),%edx
  2833e5:	8d 42 07             	lea    0x7(%edx),%eax
  2833e8:	85 d2                	test   %edx,%edx
  2833ea:	0f 49 c2             	cmovns %edx,%eax
  2833ed:	c1 f8 03             	sar    $0x3,%eax
  2833f0:	c6 44 05 c8 00       	movb   $0x0,-0x38(%ebp,%eax,1)
					cons_newline(&cons);
  2833f5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  2833f8:	89 04 24             	mov    %eax,(%esp)
  2833fb:	e8 74 03 00 00       	call   283774 <cons_newline>
					cons_runcmd(cmdline,&cons,fat,memtotal);
  283400:	ff 75 0c             	pushl  0xc(%ebp)
  283403:	ff 75 a0             	pushl  -0x60(%ebp)
  283406:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283409:	50                   	push   %eax
  28340a:	8d 45 ca             	lea    -0x36(%ebp),%eax
  28340d:	50                   	push   %eax
  28340e:	e8 34 0d 00 00       	call   284147 <cons_runcmd>
					cons_putchar(&cons,'>',1);
  283413:	83 c4 1c             	add    $0x1c,%esp
  283416:	6a 01                	push   $0x1
  283418:	6a 3e                	push   $0x3e
  28341a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  28341d:	50                   	push   %eax
  28341e:	e8 1c 04 00 00       	call   28383f <cons_putchar>
  283423:	83 c4 10             	add    $0x10,%esp
  283426:	eb 31                	jmp    283459 <console_task+0x256>
				}
				else
				{
					if(cons.cur_x<240)
  283428:	8b 45 b8             	mov    -0x48(%ebp),%eax
  28342b:	3d ef 00 00 00       	cmp    $0xef,%eax
  283430:	7f 27                	jg     283459 <console_task+0x256>
					{
						s[0] = i-256;
						s[1] = 0;
						cmdline[cons.cur_x/8-2] = i-256;
  283432:	8d 50 07             	lea    0x7(%eax),%edx
  283435:	85 c0                	test   %eax,%eax
  283437:	0f 48 c2             	cmovs  %edx,%eax
  28343a:	c1 f8 03             	sar    $0x3,%eax
  28343d:	88 5c 05 c8          	mov    %bl,-0x38(%ebp,%eax,1)
						cons_putchar(&cons,i-256,1);
  283441:	83 ec 04             	sub    $0x4,%esp
  283444:	6a 01                	push   $0x1
  283446:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  28344c:	53                   	push   %ebx
  28344d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  283450:	50                   	push   %eax
  283451:	e8 e9 03 00 00       	call   28383f <cons_putchar>
  283456:	83 c4 10             	add    $0x10,%esp
					}
				}
			}
			if(cons.cur_c >= 0) boxfill8(sheet->buf,sheet->bxsize,cons.cur_c,cons.cur_x,cons.cur_y,cons.cur_x+7,cons.cur_y+15);
  283459:	8b 45 c0             	mov    -0x40(%ebp),%eax
  28345c:	85 c0                	test   %eax,%eax
  28345e:	78 24                	js     283484 <console_task+0x281>
  283460:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  283463:	8b 55 b8             	mov    -0x48(%ebp),%edx
  283466:	83 ec 04             	sub    $0x4,%esp
  283469:	8d 59 0f             	lea    0xf(%ecx),%ebx
  28346c:	53                   	push   %ebx
  28346d:	8d 5a 07             	lea    0x7(%edx),%ebx
  283470:	53                   	push   %ebx
  283471:	51                   	push   %ecx
  283472:	52                   	push   %edx
  283473:	0f b6 c0             	movzbl %al,%eax
  283476:	50                   	push   %eax
  283477:	ff 77 04             	pushl  0x4(%edi)
  28347a:	ff 37                	pushl  (%edi)
  28347c:	e8 e0 d7 ff ff       	call   280c61 <boxfill8>
  283481:	83 c4 20             	add    $0x20,%esp
			sheet_refresh(sheet,cons.cur_x,cons.cur_y,cons.cur_x+8,cons.cur_y+16);
  283484:	8b 55 bc             	mov    -0x44(%ebp),%edx
  283487:	8b 45 b8             	mov    -0x48(%ebp),%eax
  28348a:	83 ec 0c             	sub    $0xc,%esp
  28348d:	8d 4a 10             	lea    0x10(%edx),%ecx
  283490:	51                   	push   %ecx
  283491:	8d 48 08             	lea    0x8(%eax),%ecx
  283494:	51                   	push   %ecx
  283495:	52                   	push   %edx
  283496:	50                   	push   %eax
  283497:	57                   	push   %edi
  283498:	e8 f9 f3 ff ff       	call   282896 <sheet_refresh>
  28349d:	83 c4 20             	add    $0x20,%esp
  2834a0:	e9 ec fd ff ff       	jmp    283291 <console_task+0x8e>

002834a5 <file_readfat>:
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
  2834a5:	55                   	push   %ebp
  2834a6:	89 e5                	mov    %esp,%ebp
  2834a8:	53                   	push   %ebx
  2834a9:	83 ec 10             	sub    $0x10,%esp
	int i,j=0;
  2834ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(i=0;i<2880;i+=2)
  2834b3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  2834ba:	e9 87 00 00 00       	jmp    283546 <file_readfat+0xa1>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
  2834bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2834c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2834c9:	8b 45 08             	mov    0x8(%ebp),%eax
  2834cc:	01 d0                	add    %edx,%eax
  2834ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2834d1:	8b 55 0c             	mov    0xc(%ebp),%edx
  2834d4:	01 ca                	add    %ecx,%edx
  2834d6:	0f b6 12             	movzbl (%edx),%edx
  2834d9:	0f b6 d2             	movzbl %dl,%edx
  2834dc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  2834df:	8d 59 01             	lea    0x1(%ecx),%ebx
  2834e2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  2834e5:	01 d9                	add    %ebx,%ecx
  2834e7:	0f b6 09             	movzbl (%ecx),%ecx
  2834ea:	0f b6 c9             	movzbl %cl,%ecx
  2834ed:	c1 e1 08             	shl    $0x8,%ecx
  2834f0:	09 ca                	or     %ecx,%edx
  2834f2:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  2834f8:	89 10                	mov    %edx,(%eax)
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
  2834fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2834fd:	83 c0 01             	add    $0x1,%eax
  283500:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  283507:	8b 45 08             	mov    0x8(%ebp),%eax
  28350a:	01 d0                	add    %edx,%eax
  28350c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  28350f:	8d 4a 01             	lea    0x1(%edx),%ecx
  283512:	8b 55 0c             	mov    0xc(%ebp),%edx
  283515:	01 ca                	add    %ecx,%edx
  283517:	0f b6 12             	movzbl (%edx),%edx
  28351a:	c0 ea 04             	shr    $0x4,%dl
  28351d:	0f b6 d2             	movzbl %dl,%edx
  283520:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  283523:	8d 59 02             	lea    0x2(%ecx),%ebx
  283526:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  283529:	01 d9                	add    %ebx,%ecx
  28352b:	0f b6 09             	movzbl (%ecx),%ecx
  28352e:	0f b6 c9             	movzbl %cl,%ecx
  283531:	c1 e1 04             	shl    $0x4,%ecx
  283534:	09 ca                	or     %ecx,%edx
  283536:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  28353c:	89 10                	mov    %edx,(%eax)
		j+=3;
  28353e:	83 45 f4 03          	addl   $0x3,-0xc(%ebp)
#include "file.h"

void file_readfat(int *fat,unsigned char *img)
{
	int i,j=0;
	for(i=0;i<2880;i+=2)
  283542:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
  283546:	81 7d f8 3f 0b 00 00 	cmpl   $0xb3f,-0x8(%ebp)
  28354d:	0f 8e 6c ff ff ff    	jle    2834bf <file_readfat+0x1a>
	{
		fat[i+0] = (img[j+0]	| img[j+1] << 8) & 0xfff;
		fat[i+1] = (img[j+1]>>4	| img[j+2] << 4) & 0xfff;
		j+=3;
	}
	return;
  283553:	90                   	nop
}
  283554:	83 c4 10             	add    $0x10,%esp
  283557:	5b                   	pop    %ebx
  283558:	5d                   	pop    %ebp
  283559:	c3                   	ret    

0028355a <file_loadfile>:

void file_loadfile(int clustno,int size,char *buf,int *fat,char *img)
{
  28355a:	55                   	push   %ebp
  28355b:	89 e5                	mov    %esp,%ebp
  28355d:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(;;)
	{
		if(size <= 512)
  283560:	81 7d 0c 00 02 00 00 	cmpl   $0x200,0xc(%ebp)
  283567:	7f 38                	jg     2835a1 <file_loadfile+0x47>
		{
			for(i=0;i<size;i++)
  283569:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283570:	eb 25                	jmp    283597 <file_loadfile+0x3d>
			{
				buf[i] = img[clustno*512 + i];
  283572:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283575:	8b 45 10             	mov    0x10(%ebp),%eax
  283578:	01 c2                	add    %eax,%edx
  28357a:	8b 45 08             	mov    0x8(%ebp),%eax
  28357d:	c1 e0 09             	shl    $0x9,%eax
  283580:	89 c1                	mov    %eax,%ecx
  283582:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283585:	01 c8                	add    %ecx,%eax
  283587:	89 c1                	mov    %eax,%ecx
  283589:	8b 45 18             	mov    0x18(%ebp),%eax
  28358c:	01 c8                	add    %ecx,%eax
  28358e:	0f b6 00             	movzbl (%eax),%eax
  283591:	88 02                	mov    %al,(%edx)
	int i;
	for(;;)
	{
		if(size <= 512)
		{
			for(i=0;i<size;i++)
  283593:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  283597:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28359a:	3b 45 0c             	cmp    0xc(%ebp),%eax
  28359d:	7c d3                	jl     283572 <file_loadfile+0x18>
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
  28359f:	eb 5e                	jmp    2835ff <file_loadfile+0xa5>
		}
		for(i=0;i<512;i++)
  2835a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2835a8:	eb 25                	jmp    2835cf <file_loadfile+0x75>
		{
			buf[i] = img[clustno*512 + i];
  2835aa:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2835ad:	8b 45 10             	mov    0x10(%ebp),%eax
  2835b0:	01 c2                	add    %eax,%edx
  2835b2:	8b 45 08             	mov    0x8(%ebp),%eax
  2835b5:	c1 e0 09             	shl    $0x9,%eax
  2835b8:	89 c1                	mov    %eax,%ecx
  2835ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2835bd:	01 c8                	add    %ecx,%eax
  2835bf:	89 c1                	mov    %eax,%ecx
  2835c1:	8b 45 18             	mov    0x18(%ebp),%eax
  2835c4:	01 c8                	add    %ecx,%eax
  2835c6:	0f b6 00             	movzbl (%eax),%eax
  2835c9:	88 02                	mov    %al,(%edx)
			{
				buf[i] = img[clustno*512 + i];
			}
			return;
		}
		for(i=0;i<512;i++)
  2835cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2835cf:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%ebp)
  2835d6:	7e d2                	jle    2835aa <file_loadfile+0x50>
		{
			buf[i] = img[clustno*512 + i];
		}
		size -= 512;
  2835d8:	81 6d 0c 00 02 00 00 	subl   $0x200,0xc(%ebp)
		buf += 512;
  2835df:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
		clustno = fat[clustno];
  2835e6:	8b 45 08             	mov    0x8(%ebp),%eax
  2835e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  2835f0:	8b 45 14             	mov    0x14(%ebp),%eax
  2835f3:	01 d0                	add    %edx,%eax
  2835f5:	8b 00                	mov    (%eax),%eax
  2835f7:	89 45 08             	mov    %eax,0x8(%ebp)
	}
  2835fa:	e9 61 ff ff ff       	jmp    283560 <file_loadfile+0x6>
	return;
}
  2835ff:	c9                   	leave  
  283600:	c3                   	ret    

00283601 <file_search>:

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
  283601:	55                   	push   %ebp
  283602:	89 e5                	mov    %esp,%ebp
  283604:	83 ec 20             	sub    $0x20,%esp
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  283607:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  28360e:	eb 0f                	jmp    28361f <file_search+0x1e>
	{
		s[j] = ' ';
  283610:	8d 55 ec             	lea    -0x14(%ebp),%edx
  283613:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283616:	01 d0                	add    %edx,%eax
  283618:	c6 00 20             	movb   $0x20,(%eax)

struct FILEINFO *file_search(char *name,struct FILEINFO *finfo,int max)
{
	int i,j;
	char s[12];
	for(j=0;j<11;j++)
  28361b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  28361f:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283623:	7e eb                	jle    283610 <file_search+0xf>
	{
		s[j] = ' ';
	}
	j=0;
  283625:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(i=0;name[i]!=0;i++)
  28362c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  283633:	e9 83 00 00 00       	jmp    2836bb <file_search+0xba>
	{
		if(j>=11) return 0; //length of name is bigger than 11
  283638:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  28363c:	7e 0a                	jle    283648 <file_search+0x47>
  28363e:	b8 00 00 00 00       	mov    $0x0,%eax
  283643:	e9 2a 01 00 00       	jmp    283772 <file_search+0x171>
		if(name[i] == '.' && j <= 8)
  283648:	8b 55 fc             	mov    -0x4(%ebp),%edx
  28364b:	8b 45 08             	mov    0x8(%ebp),%eax
  28364e:	01 d0                	add    %edx,%eax
  283650:	0f b6 00             	movzbl (%eax),%eax
  283653:	3c 2e                	cmp    $0x2e,%al
  283655:	75 0f                	jne    283666 <file_search+0x65>
  283657:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  28365b:	7f 09                	jg     283666 <file_search+0x65>
			j = 8;
  28365d:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  283664:	eb 51                	jmp    2836b7 <file_search+0xb6>
		else
		{
			s[j] = name[i];
  283666:	8b 55 fc             	mov    -0x4(%ebp),%edx
  283669:	8b 45 08             	mov    0x8(%ebp),%eax
  28366c:	01 d0                	add    %edx,%eax
  28366e:	0f b6 00             	movzbl (%eax),%eax
  283671:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283674:	8b 55 f8             	mov    -0x8(%ebp),%edx
  283677:	01 ca                	add    %ecx,%edx
  283679:	88 02                	mov    %al,(%edx)
			if('a' <= s[j] && s[j] <= 'z')
  28367b:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28367e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283681:	01 d0                	add    %edx,%eax
  283683:	0f b6 00             	movzbl (%eax),%eax
  283686:	3c 60                	cmp    $0x60,%al
  283688:	7e 29                	jle    2836b3 <file_search+0xb2>
  28368a:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28368d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283690:	01 d0                	add    %edx,%eax
  283692:	0f b6 00             	movzbl (%eax),%eax
  283695:	3c 7a                	cmp    $0x7a,%al
  283697:	7f 1a                	jg     2836b3 <file_search+0xb2>
				s[j] -= 0x20;
  283699:	8d 55 ec             	lea    -0x14(%ebp),%edx
  28369c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  28369f:	01 d0                	add    %edx,%eax
  2836a1:	0f b6 00             	movzbl (%eax),%eax
  2836a4:	83 e8 20             	sub    $0x20,%eax
  2836a7:	89 c1                	mov    %eax,%ecx
  2836a9:	8d 55 ec             	lea    -0x14(%ebp),%edx
  2836ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  2836af:	01 d0                	add    %edx,%eax
  2836b1:	88 08                	mov    %cl,(%eax)
			j++;
  2836b3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	for(j=0;j<11;j++)
	{
		s[j] = ' ';
	}
	j=0;
	for(i=0;name[i]!=0;i++)
  2836b7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  2836bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
  2836be:	8b 45 08             	mov    0x8(%ebp),%eax
  2836c1:	01 d0                	add    %edx,%eax
  2836c3:	0f b6 00             	movzbl (%eax),%eax
  2836c6:	84 c0                	test   %al,%al
  2836c8:	0f 85 6a ff ff ff    	jne    283638 <file_search+0x37>
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  2836ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  2836d5:	e9 84 00 00 00       	jmp    28375e <file_search+0x15d>
	{
		if(finfo[i].name[0] == 0) break;
  2836da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836dd:	c1 e0 06             	shl    $0x6,%eax
  2836e0:	89 c2                	mov    %eax,%edx
  2836e2:	8b 45 0c             	mov    0xc(%ebp),%eax
  2836e5:	01 d0                	add    %edx,%eax
  2836e7:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  2836eb:	84 c0                	test   %al,%al
  2836ed:	74 7d                	je     28376c <file_search+0x16b>
		if((finfo[i].type & 0x18) == 0)
  2836ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  2836f2:	c1 e0 06             	shl    $0x6,%eax
  2836f5:	89 c2                	mov    %eax,%edx
  2836f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  2836fa:	01 d0                	add    %edx,%eax
  2836fc:	0f b6 40 2b          	movzbl 0x2b(%eax),%eax
  283700:	0f b6 c0             	movzbl %al,%eax
  283703:	83 e0 18             	and    $0x18,%eax
  283706:	85 c0                	test   %eax,%eax
  283708:	75 50                	jne    28375a <file_search+0x159>
		{
			for(j=0;j<11;j++)
  28370a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  283711:	eb 31                	jmp    283744 <file_search+0x143>
			{
				if(finfo[i].name[j] != s[j])
  283713:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283716:	c1 e0 06             	shl    $0x6,%eax
  283719:	89 c2                	mov    %eax,%edx
  28371b:	8b 45 0c             	mov    0xc(%ebp),%eax
  28371e:	01 c2                	add    %eax,%edx
  283720:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283723:	01 d0                	add    %edx,%eax
  283725:	83 c0 20             	add    $0x20,%eax
  283728:	0f b6 00             	movzbl (%eax),%eax
  28372b:	0f b6 d0             	movzbl %al,%edx
  28372e:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  283731:	8b 45 f8             	mov    -0x8(%ebp),%eax
  283734:	01 c8                	add    %ecx,%eax
  283736:	0f b6 00             	movzbl (%eax),%eax
  283739:	0f be c0             	movsbl %al,%eax
  28373c:	39 c2                	cmp    %eax,%edx
  28373e:	75 19                	jne    283759 <file_search+0x158>
	for(i=0;i<max;)
	{
		if(finfo[i].name[0] == 0) break;
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
  283740:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  283744:	83 7d f8 0a          	cmpl   $0xa,-0x8(%ebp)
  283748:	7e c9                	jle    283713 <file_search+0x112>
			{
				if(finfo[i].name[j] != s[j])
					goto next;
			}
			return finfo+i;
  28374a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  28374d:	c1 e0 06             	shl    $0x6,%eax
  283750:	89 c2                	mov    %eax,%edx
  283752:	8b 45 0c             	mov    0xc(%ebp),%eax
  283755:	01 d0                	add    %edx,%eax
  283757:	eb 19                	jmp    283772 <file_search+0x171>
		if((finfo[i].type & 0x18) == 0)
		{
			for(j=0;j<11;j++)
			{
				if(finfo[i].name[j] != s[j])
					goto next;
  283759:	90                   	nop
			}
			return finfo+i;
		}
next:
		i++;
  28375a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
				s[j] -= 0x20;
			j++;
		}
	}

	for(i=0;i<max;)
  28375e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  283761:	3b 45 10             	cmp    0x10(%ebp),%eax
  283764:	0f 8c 70 ff ff ff    	jl     2836da <file_search+0xd9>
  28376a:	eb 01                	jmp    28376d <file_search+0x16c>
	{
		if(finfo[i].name[0] == 0) break;
  28376c:	90                   	nop
			return finfo+i;
		}
next:
		i++;
	}
	return 0;
  28376d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  283772:	c9                   	leave  
  283773:	c3                   	ret    

00283774 <cons_newline>:
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  283774:	55                   	push   %ebp
  283775:	89 e5                	mov    %esp,%ebp
  283777:	57                   	push   %edi
  283778:	56                   	push   %esi
  283779:	53                   	push   %ebx
  28377a:	83 ec 1c             	sub    $0x1c,%esp
	int x,y;
	struct SHEET *sheet = cons->sht;
	if(cons->cur_y<28+112)
  28377d:	8b 45 08             	mov    0x8(%ebp),%eax
  283780:	8b 40 08             	mov    0x8(%eax),%eax
  283783:	3d 8b 00 00 00       	cmp    $0x8b,%eax
  283788:	7e 0c                	jle    283796 <cons_newline+0x22>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  28378a:	8b 45 08             	mov    0x8(%ebp),%eax
  28378d:	8b 18                	mov    (%eax),%ebx
  28378f:	bf 1c 00 00 00       	mov    $0x1c,%edi
  283794:	eb 43                	jmp    2837d9 <cons_newline+0x65>
	if(cons->cur_y<28+112)
	{
		cons->cur_y += 16;
  283796:	83 c0 10             	add    $0x10,%eax
  283799:	8b 7d 08             	mov    0x8(%ebp),%edi
  28379c:	89 47 08             	mov    %eax,0x8(%edi)
  28379f:	e9 89 00 00 00       	jmp    28382d <cons_newline+0xb9>
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2837a4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  2837a7:	8b 43 04             	mov    0x4(%ebx),%eax
  2837aa:	8b 75 e0             	mov    -0x20(%ebp),%esi
  2837ad:	0f af f0             	imul   %eax,%esi
  2837b0:	89 d1                	mov    %edx,%ecx
  2837b2:	03 0b                	add    (%ebx),%ecx
  2837b4:	0f b6 34 31          	movzbl (%ecx,%esi,1),%esi
  2837b8:	0f af c7             	imul   %edi,%eax
  2837bb:	89 f3                	mov    %esi,%ebx
  2837bd:	88 1c 01             	mov    %bl,(%ecx,%eax,1)
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
  2837c0:	83 c2 01             	add    $0x1,%edx
  2837c3:	81 fa f8 00 00 00    	cmp    $0xf8,%edx
  2837c9:	75 d9                	jne    2837a4 <cons_newline+0x30>
  2837cb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	{
		cons->cur_y += 16;
	}
	else
	{
		for(y=28;y<28+112;y++)
  2837ce:	83 c7 01             	add    $0x1,%edi
  2837d1:	81 ff 8c 00 00 00    	cmp    $0x8c,%edi
  2837d7:	74 33                	je     28380c <cons_newline+0x98>
	}
	return;
}

void cons_newline(struct CONSOLE *cons)
{
  2837d9:	ba 08 00 00 00       	mov    $0x8,%edx
	}
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
  2837de:	8d 47 10             	lea    0x10(%edi),%eax
  2837e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  2837e4:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  2837e7:	eb bb                	jmp    2837a4 <cons_newline+0x30>
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2837e9:	89 fa                	mov    %edi,%edx
  2837eb:	0f af 53 04          	imul   0x4(%ebx),%edx
  2837ef:	89 c1                	mov    %eax,%ecx
  2837f1:	03 0b                	add    (%ebx),%ecx
  2837f3:	c6 04 11 00          	movb   $0x0,(%ecx,%edx,1)
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
  2837f7:	83 c0 01             	add    $0x1,%eax
  2837fa:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2837ff:	75 e8                	jne    2837e9 <cons_newline+0x75>
	else
	{
		for(y=28;y<28+112;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
  283801:	83 c7 01             	add    $0x1,%edi
  283804:	81 ff 9c 00 00 00    	cmp    $0x9c,%edi
  28380a:	74 07                	je     283813 <cons_newline+0x9f>
}

void cons_newline(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
  28380c:	b8 08 00 00 00       	mov    $0x8,%eax
  283811:	eb d6                	jmp    2837e9 <cons_newline+0x75>
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = sheet->buf[x+(y+16)*sheet->bxsize];
		for(y=28+112;y<28+128;y++)
			for(x=8;x<8+240;x++)
				sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		sheet_refresh(sheet,8,28,8+240,28+128);
  283813:	83 ec 0c             	sub    $0xc,%esp
  283816:	68 9c 00 00 00       	push   $0x9c
  28381b:	68 f8 00 00 00       	push   $0xf8
  283820:	6a 1c                	push   $0x1c
  283822:	6a 08                	push   $0x8
  283824:	53                   	push   %ebx
  283825:	e8 6c f0 ff ff       	call   282896 <sheet_refresh>
  28382a:	83 c4 20             	add    $0x20,%esp
	}
	cons->cur_x = 8;
  28382d:	8b 45 08             	mov    0x8(%ebp),%eax
  283830:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
}
  283837:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28383a:	5b                   	pop    %ebx
  28383b:	5e                   	pop    %esi
  28383c:	5f                   	pop    %edi
  28383d:	5d                   	pop    %ebp
  28383e:	c3                   	ret    

0028383f <cons_putchar>:
#include "header.h"
void cons_putchar(struct CONSOLE *cons,int chr,char move)
{
  28383f:	55                   	push   %ebp
  283840:	89 e5                	mov    %esp,%ebp
  283842:	56                   	push   %esi
  283843:	53                   	push   %ebx
  283844:	83 ec 10             	sub    $0x10,%esp
  283847:	8b 5d 08             	mov    0x8(%ebp),%ebx
  28384a:	8b 45 0c             	mov    0xc(%ebp),%eax
  28384d:	8b 75 10             	mov    0x10(%ebp),%esi
	char s[2];
	s[0] = chr;
  283850:	88 45 f6             	mov    %al,-0xa(%ebp)
	s[1] = 0;
  283853:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	if(s[0] == 0x09)
  283857:	3c 09                	cmp    $0x9,%al
  283859:	75 46                	jne    2838a1 <cons_putchar+0x62>
	{
		//tab
		for(;;)
		{
			putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000," ",1);
  28385b:	83 ec 04             	sub    $0x4,%esp
  28385e:	6a 01                	push   $0x1
  283860:	68 eb 4f 28 00       	push   $0x284feb
  283865:	6a 00                	push   $0x0
  283867:	6a 07                	push   $0x7
  283869:	ff 73 08             	pushl  0x8(%ebx)
  28386c:	ff 73 04             	pushl  0x4(%ebx)
  28386f:	ff 33                	pushl  (%ebx)
  283871:	e8 4a d8 ff ff       	call   2810c0 <putfonts8_asc_sht>
			cons->cur_x += 8;
  283876:	8b 43 04             	mov    0x4(%ebx),%eax
  283879:	83 c0 08             	add    $0x8,%eax
  28387c:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240) {
  28387f:	83 c4 20             	add    $0x20,%esp
  283882:	3d f8 00 00 00       	cmp    $0xf8,%eax
  283887:	75 0c                	jne    283895 <cons_putchar+0x56>
				cons_newline(cons);
  283889:	83 ec 0c             	sub    $0xc,%esp
  28388c:	53                   	push   %ebx
  28388d:	e8 e2 fe ff ff       	call   283774 <cons_newline>
  283892:	83 c4 10             	add    $0x10,%esp
			}
			if(((cons->cur_x - 8) & 0x1f) == 0)
  283895:	8b 43 04             	mov    0x4(%ebx),%eax
  283898:	83 e8 08             	sub    $0x8,%eax
  28389b:	a8 1f                	test   $0x1f,%al
  28389d:	75 bc                	jne    28385b <cons_putchar+0x1c>
  28389f:	eb 55                	jmp    2838f6 <cons_putchar+0xb7>
				break;
		}
	}
	else if(s[0] == 0x0a) 
  2838a1:	3c 0a                	cmp    $0xa,%al
  2838a3:	75 0e                	jne    2838b3 <cons_putchar+0x74>
		cons_newline(cons);
  2838a5:	83 ec 0c             	sub    $0xc,%esp
  2838a8:	53                   	push   %ebx
  2838a9:	e8 c6 fe ff ff       	call   283774 <cons_newline>
  2838ae:	83 c4 10             	add    $0x10,%esp
  2838b1:	eb 43                	jmp    2838f6 <cons_putchar+0xb7>
	else if(s[0] == 0x0d) 
  2838b3:	3c 0d                	cmp    $0xd,%al
  2838b5:	74 3f                	je     2838f6 <cons_putchar+0xb7>
		;//todo
	else
	{
		putfonts8_asc_sht(cons->sht,cons->cur_x,cons->cur_y,COL8_FFFFFF,COL8_000000,s,1);
  2838b7:	83 ec 04             	sub    $0x4,%esp
  2838ba:	6a 01                	push   $0x1
  2838bc:	8d 45 f6             	lea    -0xa(%ebp),%eax
  2838bf:	50                   	push   %eax
  2838c0:	6a 00                	push   $0x0
  2838c2:	6a 07                	push   $0x7
  2838c4:	ff 73 08             	pushl  0x8(%ebx)
  2838c7:	ff 73 04             	pushl  0x4(%ebx)
  2838ca:	ff 33                	pushl  (%ebx)
  2838cc:	e8 ef d7 ff ff       	call   2810c0 <putfonts8_asc_sht>
		if(move != 0)
  2838d1:	83 c4 20             	add    $0x20,%esp
  2838d4:	89 f0                	mov    %esi,%eax
  2838d6:	84 c0                	test   %al,%al
  2838d8:	74 1c                	je     2838f6 <cons_putchar+0xb7>
		{
			cons->cur_x += 8;
  2838da:	8b 43 04             	mov    0x4(%ebx),%eax
  2838dd:	83 c0 08             	add    $0x8,%eax
  2838e0:	89 43 04             	mov    %eax,0x4(%ebx)
			if(cons->cur_x == 8+240)
  2838e3:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2838e8:	75 0c                	jne    2838f6 <cons_putchar+0xb7>
				cons_newline(cons);
  2838ea:	83 ec 0c             	sub    $0xc,%esp
  2838ed:	53                   	push   %ebx
  2838ee:	e8 81 fe ff ff       	call   283774 <cons_newline>
  2838f3:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  2838f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2838f9:	5b                   	pop    %ebx
  2838fa:	5e                   	pop    %esi
  2838fb:	5d                   	pop    %ebp
  2838fc:	c3                   	ret    

002838fd <cmd_mem>:
	}
	return;
}

void cmd_mem(struct CONSOLE *cons,unsigned int memtotal)
{
  2838fd:	55                   	push   %ebp
  2838fe:	89 e5                	mov    %esp,%ebp
  283900:	56                   	push   %esi
  283901:	53                   	push   %ebx
  283902:	83 ec 24             	sub    $0x24,%esp
  283905:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	char s[30];
	sprintf(s,"total %dMB",memtotal/(1024*1024));
  283908:	8b 45 0c             	mov    0xc(%ebp),%eax
  28390b:	c1 e8 14             	shr    $0x14,%eax
  28390e:	50                   	push   %eax
  28390f:	68 80 4f 28 00       	push   $0x284f80
  283914:	8d 75 da             	lea    -0x26(%ebp),%esi
  283917:	56                   	push   %esi
  283918:	e8 60 e0 ff ff       	call   28197d <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  28391d:	83 c4 0c             	add    $0xc,%esp
  283920:	6a 1e                	push   $0x1e
  283922:	56                   	push   %esi
  283923:	6a 00                	push   $0x0
  283925:	6a 07                	push   $0x7
  283927:	ff 73 08             	pushl  0x8(%ebx)
  28392a:	6a 08                	push   $0x8
  28392c:	ff 33                	pushl  (%ebx)
  28392e:	e8 8d d7 ff ff       	call   2810c0 <putfonts8_asc_sht>
	cons_newline(cons);
  283933:	83 c4 14             	add    $0x14,%esp
  283936:	53                   	push   %ebx
  283937:	e8 38 fe ff ff       	call   283774 <cons_newline>
	sprintf(s,"free %dKB",memman_total(memman)/1024);
  28393c:	c7 04 24 00 00 3c 00 	movl   $0x3c0000,(%esp)
  283943:	e8 30 e6 ff ff       	call   281f78 <memman_total>
  283948:	83 c4 0c             	add    $0xc,%esp
  28394b:	c1 e8 0a             	shr    $0xa,%eax
  28394e:	50                   	push   %eax
  28394f:	68 8b 4f 28 00       	push   $0x284f8b
  283954:	56                   	push   %esi
  283955:	e8 23 e0 ff ff       	call   28197d <sprintf>
	putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  28395a:	83 c4 0c             	add    $0xc,%esp
  28395d:	6a 1e                	push   $0x1e
  28395f:	56                   	push   %esi
  283960:	6a 00                	push   $0x0
  283962:	6a 07                	push   $0x7
  283964:	ff 73 08             	pushl  0x8(%ebx)
  283967:	6a 08                	push   $0x8
  283969:	ff 33                	pushl  (%ebx)
  28396b:	e8 50 d7 ff ff       	call   2810c0 <putfonts8_asc_sht>
	cons_newline(cons);
  283970:	83 c4 14             	add    $0x14,%esp
  283973:	53                   	push   %ebx
  283974:	e8 fb fd ff ff       	call   283774 <cons_newline>
	cons_newline(cons);
  283979:	89 1c 24             	mov    %ebx,(%esp)
  28397c:	e8 f3 fd ff ff       	call   283774 <cons_newline>
	return;
  283981:	83 c4 10             	add    $0x10,%esp
}
  283984:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283987:	5b                   	pop    %ebx
  283988:	5e                   	pop    %esi
  283989:	5d                   	pop    %ebp
  28398a:	c3                   	ret    

0028398b <cmd_cls>:

void cmd_cls(struct CONSOLE *cons)
{
  28398b:	55                   	push   %ebp
  28398c:	89 e5                	mov    %esp,%ebp
  28398e:	57                   	push   %edi
  28398f:	56                   	push   %esi
  283990:	53                   	push   %ebx
  283991:	83 ec 0c             	sub    $0xc,%esp
  283994:	8b 7d 08             	mov    0x8(%ebp),%edi
	int x,y;
	struct SHEET *sheet = cons->sht;
  283997:	8b 17                	mov    (%edi),%edx
	for(y=28;y<28+128;y++)
  283999:	be 1c 00 00 00       	mov    $0x1c,%esi
  28399e:	eb 23                	jmp    2839c3 <cmd_cls+0x38>
	{
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
  2839a0:	89 f1                	mov    %esi,%ecx
  2839a2:	0f af 4a 04          	imul   0x4(%edx),%ecx
  2839a6:	89 c3                	mov    %eax,%ebx
  2839a8:	03 1a                	add    (%edx),%ebx
  2839aa:	c6 04 0b 00          	movb   $0x0,(%ebx,%ecx,1)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
	{
		for(x=8;x<8+240;x++)
  2839ae:	83 c0 01             	add    $0x1,%eax
  2839b1:	3d f8 00 00 00       	cmp    $0xf8,%eax
  2839b6:	75 e8                	jne    2839a0 <cmd_cls+0x15>

void cmd_cls(struct CONSOLE *cons)
{
	int x,y;
	struct SHEET *sheet = cons->sht;
	for(y=28;y<28+128;y++)
  2839b8:	83 c6 01             	add    $0x1,%esi
  2839bb:	81 fe 9c 00 00 00    	cmp    $0x9c,%esi
  2839c1:	74 07                	je     2839ca <cmd_cls+0x3f>
	cons_newline(cons);
	return;
}

void cmd_cls(struct CONSOLE *cons)
{
  2839c3:	b8 08 00 00 00       	mov    $0x8,%eax
  2839c8:	eb d6                	jmp    2839a0 <cmd_cls+0x15>
		for(x=8;x<8+240;x++)
		{
			sheet->buf[x+y*sheet->bxsize] = COL8_000000;
		}
	}
	sheet_refresh(sheet,8,28,8+240,28+128);
  2839ca:	83 ec 0c             	sub    $0xc,%esp
  2839cd:	68 9c 00 00 00       	push   $0x9c
  2839d2:	68 f8 00 00 00       	push   $0xf8
  2839d7:	6a 1c                	push   $0x1c
  2839d9:	6a 08                	push   $0x8
  2839db:	52                   	push   %edx
  2839dc:	e8 b5 ee ff ff       	call   282896 <sheet_refresh>
	cons->cur_y = 28;
  2839e1:	c7 47 08 1c 00 00 00 	movl   $0x1c,0x8(%edi)
	return;
  2839e8:	83 c4 20             	add    $0x20,%esp
}
  2839eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  2839ee:	5b                   	pop    %ebx
  2839ef:	5e                   	pop    %esi
  2839f0:	5f                   	pop    %edi
  2839f1:	5d                   	pop    %ebp
  2839f2:	c3                   	ret    

002839f3 <cmd_dir>:

void cmd_dir(struct CONSOLE *cons)
{
  2839f3:	55                   	push   %ebp
  2839f4:	89 e5                	mov    %esp,%ebp
  2839f6:	57                   	push   %edi
  2839f7:	56                   	push   %esi
  2839f8:	53                   	push   %ebx
  2839f9:	83 ec 2c             	sub    $0x2c,%esp
  2839fc:	8b 7d 08             	mov    0x8(%ebp),%edi
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  2839ff:	0f b6 05 20 26 10 00 	movzbl 0x102620,%eax
  283a06:	84 c0                	test   %al,%al
  283a08:	0f 84 87 00 00 00    	je     283a95 <cmd_dir+0xa2>
  283a0e:	bb 00 26 10 00       	mov    $0x102600,%ebx
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283a13:	8d 75 ca             	lea    -0x36(%ebp),%esi
  283a16:	eb 0b                	jmp    283a23 <cmd_dir+0x30>
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
	{
		if(finfo[i].name[0] == 0x0) break;
  283a18:	83 c3 40             	add    $0x40,%ebx
  283a1b:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  283a1f:	84 c0                	test   %al,%al
  283a21:	74 72                	je     283a95 <cmd_dir+0xa2>
		if(finfo[i].name[0] != 0xe5)
  283a23:	3c e5                	cmp    $0xe5,%al
  283a25:	74 66                	je     283a8d <cmd_dir+0x9a>
		{
			if((finfo[i].type & 0x18) == 0)
  283a27:	f6 43 2b 18          	testb  $0x18,0x2b(%ebx)
  283a2b:	75 60                	jne    283a8d <cmd_dir+0x9a>
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
  283a2d:	83 ec 04             	sub    $0x4,%esp
  283a30:	ff 73 3c             	pushl  0x3c(%ebx)
  283a33:	68 95 4f 28 00       	push   $0x284f95
  283a38:	56                   	push   %esi
  283a39:	e8 3f df ff ff       	call   28197d <sprintf>
  283a3e:	83 c4 10             	add    $0x10,%esp
				for(j=0;j<8;j++)
  283a41:	b8 00 00 00 00       	mov    $0x0,%eax
				{
					s[j] = finfo[i].name[j];
  283a46:	0f b6 54 03 20       	movzbl 0x20(%ebx,%eax,1),%edx
  283a4b:	88 14 30             	mov    %dl,(%eax,%esi,1)
		if(finfo[i].name[0] != 0xe5)
		{
			if((finfo[i].type & 0x18) == 0)
			{
				sprintf(s,"filename.ext %d",finfo[i].size);
				for(j=0;j<8;j++)
  283a4e:	83 c0 01             	add    $0x1,%eax
  283a51:	83 f8 08             	cmp    $0x8,%eax
  283a54:	75 f0                	jne    283a46 <cmd_dir+0x53>
				{
					s[j] = finfo[i].name[j];
				}
				s[9] = finfo[i].ext[0];
  283a56:	0f b6 43 28          	movzbl 0x28(%ebx),%eax
  283a5a:	88 45 d3             	mov    %al,-0x2d(%ebp)
				s[10] = finfo[i].ext[1];
  283a5d:	0f b6 43 29          	movzbl 0x29(%ebx),%eax
  283a61:	88 45 d4             	mov    %al,-0x2c(%ebp)
				s[11] = finfo[i].ext[2];
  283a64:	0f b6 43 2a          	movzbl 0x2a(%ebx),%eax
  283a68:	88 45 d5             	mov    %al,-0x2b(%ebp)
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
  283a6b:	83 ec 04             	sub    $0x4,%esp
  283a6e:	6a 1e                	push   $0x1e
  283a70:	56                   	push   %esi
  283a71:	6a 00                	push   $0x0
  283a73:	6a 07                	push   $0x7
  283a75:	ff 77 08             	pushl  0x8(%edi)
  283a78:	6a 08                	push   $0x8
  283a7a:	ff 37                	pushl  (%edi)
  283a7c:	e8 3f d6 ff ff       	call   2810c0 <putfonts8_asc_sht>
				cons_newline(cons);
  283a81:	83 c4 14             	add    $0x14,%esp
  283a84:	57                   	push   %edi
  283a85:	e8 ea fc ff ff       	call   283774 <cons_newline>
  283a8a:	83 c4 10             	add    $0x10,%esp
void cmd_dir(struct CONSOLE *cons)
{
	struct FILEINFO *finfo = (struct FILEINFO *)(ADR_DISKIMG + 0x2600);
	int i,j;
	char s[30];
	for(i=0;i<224;i++)
  283a8d:	81 fb c0 5d 10 00    	cmp    $0x105dc0,%ebx
  283a93:	75 83                	jne    283a18 <cmd_dir+0x25>
				putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,s,30);
				cons_newline(cons);
			}
		}
	}
	cons_newline(cons);
  283a95:	83 ec 0c             	sub    $0xc,%esp
  283a98:	57                   	push   %edi
  283a99:	e8 d6 fc ff ff       	call   283774 <cons_newline>
	return;
  283a9e:	83 c4 10             	add    $0x10,%esp
}
  283aa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283aa4:	5b                   	pop    %ebx
  283aa5:	5e                   	pop    %esi
  283aa6:	5f                   	pop    %edi
  283aa7:	5d                   	pop    %ebp
  283aa8:	c3                   	ret    

00283aa9 <cmd_type>:

void cmd_type(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283aa9:	55                   	push   %ebp
  283aaa:	89 e5                	mov    %esp,%ebp
  283aac:	57                   	push   %edi
  283aad:	56                   	push   %esi
  283aae:	53                   	push   %ebx
  283aaf:	83 ec 10             	sub    $0x10,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo = file_search(cmdline +5,(struct FILEINFO *)(ADR_DISKIMG + 0x002600),224);
  283ab2:	68 e0 00 00 00       	push   $0xe0
  283ab7:	68 00 26 10 00       	push   $0x102600
  283abc:	8b 45 10             	mov    0x10(%ebp),%eax
  283abf:	83 c0 05             	add    $0x5,%eax
  283ac2:	50                   	push   %eax
  283ac3:	e8 39 fb ff ff       	call   283601 <file_search>
	char *p;
	int i;
	if(finfo != 0)
  283ac8:	83 c4 10             	add    $0x10,%esp
  283acb:	85 c0                	test   %eax,%eax
  283acd:	74 6e                	je     283b3d <cmd_type+0x94>
  283acf:	89 c6                	mov    %eax,%esi
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283ad1:	83 ec 08             	sub    $0x8,%esp
  283ad4:	ff 70 3c             	pushl  0x3c(%eax)
  283ad7:	68 00 00 3c 00       	push   $0x3c0000
  283adc:	e8 0c e8 ff ff       	call   2822ed <memman_alloc_4k>
  283ae1:	89 c7                	mov    %eax,%edi
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283ae3:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283aea:	ff 75 0c             	pushl  0xc(%ebp)
  283aed:	50                   	push   %eax
  283aee:	ff 76 3c             	pushl  0x3c(%esi)
  283af1:	0f b7 46 3a          	movzwl 0x3a(%esi),%eax
  283af5:	50                   	push   %eax
  283af6:	e8 5f fa ff ff       	call   28355a <file_loadfile>
		for(i=0;i<finfo->size;i++)
  283afb:	8b 46 3c             	mov    0x3c(%esi),%eax
  283afe:	83 c4 20             	add    $0x20,%esp
  283b01:	85 c0                	test   %eax,%eax
  283b03:	74 24                	je     283b29 <cmd_type+0x80>
  283b05:	bb 00 00 00 00       	mov    $0x0,%ebx
		{
			cons_putchar(cons,p[i],1);
  283b0a:	83 ec 04             	sub    $0x4,%esp
  283b0d:	6a 01                	push   $0x1
  283b0f:	0f be 04 3b          	movsbl (%ebx,%edi,1),%eax
  283b13:	50                   	push   %eax
  283b14:	ff 75 08             	pushl  0x8(%ebp)
  283b17:	e8 23 fd ff ff       	call   28383f <cons_putchar>
	int i;
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		for(i=0;i<finfo->size;i++)
  283b1c:	83 c3 01             	add    $0x1,%ebx
  283b1f:	8b 46 3c             	mov    0x3c(%esi),%eax
  283b22:	83 c4 10             	add    $0x10,%esp
  283b25:	39 d8                	cmp    %ebx,%eax
  283b27:	77 e1                	ja     283b0a <cmd_type+0x61>
		{
			cons_putchar(cons,p[i],1);
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283b29:	83 ec 04             	sub    $0x4,%esp
  283b2c:	50                   	push   %eax
  283b2d:	57                   	push   %edi
  283b2e:	68 00 00 3c 00       	push   $0x3c0000
  283b33:	e8 e1 e7 ff ff       	call   282319 <memman_free_4k>
  283b38:	83 c4 10             	add    $0x10,%esp
  283b3b:	eb 2b                	jmp    283b68 <cmd_type+0xbf>
	}
	else
	{
		putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"File not found.",15);
  283b3d:	83 ec 04             	sub    $0x4,%esp
  283b40:	6a 0f                	push   $0xf
  283b42:	68 a5 4f 28 00       	push   $0x284fa5
  283b47:	6a 00                	push   $0x0
  283b49:	6a 07                	push   $0x7
  283b4b:	8b 45 08             	mov    0x8(%ebp),%eax
  283b4e:	ff 70 08             	pushl  0x8(%eax)
  283b51:	6a 08                	push   $0x8
  283b53:	ff 30                	pushl  (%eax)
  283b55:	e8 66 d5 ff ff       	call   2810c0 <putfonts8_asc_sht>
		cons_newline(cons);
  283b5a:	83 c4 14             	add    $0x14,%esp
  283b5d:	ff 75 08             	pushl  0x8(%ebp)
  283b60:	e8 0f fc ff ff       	call   283774 <cons_newline>
  283b65:	83 c4 10             	add    $0x10,%esp
	}
	cons_newline(cons);
  283b68:	83 ec 0c             	sub    $0xc,%esp
  283b6b:	ff 75 08             	pushl  0x8(%ebp)
  283b6e:	e8 01 fc ff ff       	call   283774 <cons_newline>
	return;
  283b73:	83 c4 10             	add    $0x10,%esp
}
  283b76:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283b79:	5b                   	pop    %ebx
  283b7a:	5e                   	pop    %esi
  283b7b:	5f                   	pop    %edi
  283b7c:	5d                   	pop    %ebp
  283b7d:	c3                   	ret    

00283b7e <cmd_exit>:
	}
	return 0;
}

void cmd_exit(struct CONSOLE *cons,int *fat)
{
  283b7e:	55                   	push   %ebp
  283b7f:	89 e5                	mov    %esp,%ebp
  283b81:	57                   	push   %edi
  283b82:	56                   	push   %esi
  283b83:	53                   	push   %ebx
  283b84:	83 ec 0c             	sub    $0xc,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = task_now();
  283b87:	e8 c3 f2 ff ff       	call   282e4f <task_now>
  283b8c:	89 c3                	mov    %eax,%ebx
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283b8e:	8b 35 e4 0f 00 00    	mov    0xfe4,%esi
	struct FIFO32 *fifo = (struct FIFO32 *) *((int *)0x0fec);
  283b94:	8b 3d ec 0f 00 00    	mov    0xfec,%edi
	timer_cancel(cons->timer);
  283b9a:	83 ec 0c             	sub    $0xc,%esp
  283b9d:	8b 45 08             	mov    0x8(%ebp),%eax
  283ba0:	ff 70 10             	pushl  0x10(%eax)
  283ba3:	e8 a3 f0 ff ff       	call   282c4b <timer_cancel>
	memman_free_4k(memman,(int)fat,4*2880);
  283ba8:	83 c4 0c             	add    $0xc,%esp
  283bab:	68 00 2d 00 00       	push   $0x2d00
  283bb0:	ff 75 0c             	pushl  0xc(%ebp)
  283bb3:	68 00 00 3c 00       	push   $0x3c0000
  283bb8:	e8 5c e7 ff ff       	call   282319 <memman_free_4k>
	io_cli();
  283bbd:	e8 b0 ce ff ff       	call   280a72 <io_cli>
	fifo32_put(fifo,cons->sht - shtctl->sheets0 + 768);
  283bc2:	83 c4 08             	add    $0x8,%esp
  283bc5:	81 c6 14 04 00 00    	add    $0x414,%esi
  283bcb:	8b 45 08             	mov    0x8(%ebp),%eax
  283bce:	8b 00                	mov    (%eax),%eax
  283bd0:	29 f0                	sub    %esi,%eax
  283bd2:	c1 f8 03             	sar    $0x3,%eax
  283bd5:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  283bdb:	05 00 03 00 00       	add    $0x300,%eax
  283be0:	50                   	push   %eax
  283be1:	57                   	push   %edi
  283be2:	e8 82 df ff ff       	call   281b69 <fifo32_put>
	io_sti();
  283be7:	e8 88 ce ff ff       	call   280a74 <io_sti>
  283bec:	83 c4 10             	add    $0x10,%esp
	for(;;)
	{
		task_sleep(task);
  283bef:	83 ec 0c             	sub    $0xc,%esp
  283bf2:	53                   	push   %ebx
  283bf3:	e8 c9 f5 ff ff       	call   2831c1 <task_sleep>
  283bf8:	83 c4 10             	add    $0x10,%esp
  283bfb:	eb f2                	jmp    283bef <cmd_exit+0x71>

00283bfd <cons_putstr0>:
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
  283bfd:	55                   	push   %ebp
  283bfe:	89 e5                	mov    %esp,%ebp
  283c00:	56                   	push   %esi
  283c01:	53                   	push   %ebx
  283c02:	8b 75 08             	mov    0x8(%ebp),%esi
  283c05:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for(;*s!=0;s++)
  283c08:	0f b6 03             	movzbl (%ebx),%eax
  283c0b:	84 c0                	test   %al,%al
  283c0d:	74 1c                	je     283c2b <cons_putstr0+0x2e>
	{
		cons_putchar(cons,*s,1);
  283c0f:	83 ec 04             	sub    $0x4,%esp
  283c12:	6a 01                	push   $0x1
  283c14:	0f be c0             	movsbl %al,%eax
  283c17:	50                   	push   %eax
  283c18:	56                   	push   %esi
  283c19:	e8 21 fc ff ff       	call   28383f <cons_putchar>
	}
}

void cons_putstr0(struct CONSOLE *cons,char *s)
{
	for(;*s!=0;s++)
  283c1e:	83 c3 01             	add    $0x1,%ebx
  283c21:	0f b6 03             	movzbl (%ebx),%eax
  283c24:	83 c4 10             	add    $0x10,%esp
  283c27:	84 c0                	test   %al,%al
  283c29:	75 e4                	jne    283c0f <cons_putstr0+0x12>
	{
		cons_putchar(cons,*s,1);
	}
	return;
}
  283c2b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  283c2e:	5b                   	pop    %ebx
  283c2f:	5e                   	pop    %esi
  283c30:	5d                   	pop    %ebp
  283c31:	c3                   	ret    

00283c32 <cmd_app>:
}



int cmd_app(struct CONSOLE *cons,int *fat,char *cmdline)
{
  283c32:	55                   	push   %ebp
  283c33:	89 e5                	mov    %esp,%ebp
  283c35:	57                   	push   %edi
  283c36:	56                   	push   %esi
  283c37:	53                   	push   %ebx
  283c38:	83 ec 4c             	sub    $0x4c,%esp
  283c3b:	8b 75 10             	mov    0x10(%ebp),%esi
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct FILEINFO *finfo;
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
  283c3e:	e8 0c f2 ff ff       	call   282e4f <task_now>
  283c43:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
  283c46:	0f b6 06             	movzbl (%esi),%eax
  283c49:	3c 20                	cmp    $0x20,%al
  283c4b:	0f 8f 6d 02 00 00    	jg     283ebe <cmd_app+0x28c>
  283c51:	eb 16                	jmp    283c69 <cmd_app+0x37>
  283c53:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
  283c57:	3c 20                	cmp    $0x20,%al
  283c59:	7e 13                	jle    283c6e <cmd_app+0x3c>
			break;
		name[i] = cmdline[i];
  283c5b:	88 44 1d d6          	mov    %al,-0x2a(%ebp,%ebx,1)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283c5f:	83 c3 01             	add    $0x1,%ebx
  283c62:	83 fb 0d             	cmp    $0xd,%ebx
  283c65:	75 ec                	jne    283c53 <cmd_app+0x21>
  283c67:	eb 05                	jmp    283c6e <cmd_app+0x3c>
  283c69:	bb 00 00 00 00       	mov    $0x0,%ebx
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
	}
	name[i] = 0;
  283c6e:	c6 44 1d d6 00       	movb   $0x0,-0x2a(%ebp,%ebx,1)

	finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283c73:	83 ec 04             	sub    $0x4,%esp
  283c76:	68 e0 00 00 00       	push   $0xe0
  283c7b:	68 00 26 10 00       	push   $0x102600
  283c80:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283c83:	50                   	push   %eax
  283c84:	e8 78 f9 ff ff       	call   283601 <file_search>
  283c89:	89 45 c0             	mov    %eax,-0x40(%ebp)
	if(finfo == 0 && name[i-1]!='.')
  283c8c:	83 c4 10             	add    $0x10,%esp
  283c8f:	85 c0                	test   %eax,%eax
  283c91:	75 48                	jne    283cdb <cmd_app+0xa9>
  283c93:	80 7c 1d d5 2e       	cmpb   $0x2e,-0x2b(%ebp,%ebx,1)
  283c98:	0f 84 2d 02 00 00    	je     283ecb <cmd_app+0x299>
	{
		name[i  ] = '.';
  283c9e:	c6 44 1d d6 2e       	movb   $0x2e,-0x2a(%ebp,%ebx,1)
		name[i+1] = 'B';
  283ca3:	c6 44 1d d7 42       	movb   $0x42,-0x29(%ebp,%ebx,1)
		name[i+2] = 'I';
  283ca8:	c6 44 1d d8 49       	movb   $0x49,-0x28(%ebp,%ebx,1)
		name[i+3] = 'N';
  283cad:	c6 44 1d d9 4e       	movb   $0x4e,-0x27(%ebp,%ebx,1)
		name[i+4] = 0;
  283cb2:	c6 44 1d da 00       	movb   $0x0,-0x26(%ebp,%ebx,1)
		finfo = file_search(name,(struct FILEINFO *)(ADR_DISKIMG + 0x2600),224);
  283cb7:	83 ec 04             	sub    $0x4,%esp
  283cba:	68 e0 00 00 00       	push   $0xe0
  283cbf:	68 00 26 10 00       	push   $0x102600
  283cc4:	8d 45 d6             	lea    -0x2a(%ebp),%eax
  283cc7:	50                   	push   %eax
  283cc8:	e8 34 f9 ff ff       	call   283601 <file_search>
  283ccd:	89 45 c0             	mov    %eax,-0x40(%ebp)
	}

	if(finfo != 0)
  283cd0:	83 c4 10             	add    $0x10,%esp
  283cd3:	85 c0                	test   %eax,%eax
  283cd5:	0f 84 dc 01 00 00    	je     283eb7 <cmd_app+0x285>
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
  283cdb:	83 ec 08             	sub    $0x8,%esp
  283cde:	8b 7d c0             	mov    -0x40(%ebp),%edi
  283ce1:	ff 77 3c             	pushl  0x3c(%edi)
  283ce4:	68 00 00 3c 00       	push   $0x3c0000
  283ce9:	e8 ff e5 ff ff       	call   2822ed <memman_alloc_4k>
  283cee:	89 c6                	mov    %eax,%esi
  283cf0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
  283cf3:	c7 04 24 00 3e 10 00 	movl   $0x103e00,(%esp)
  283cfa:	ff 75 0c             	pushl  0xc(%ebp)
  283cfd:	50                   	push   %eax
  283cfe:	ff 77 3c             	pushl  0x3c(%edi)
  283d01:	0f b7 47 3a          	movzwl 0x3a(%edi),%eax
  283d05:	50                   	push   %eax
  283d06:	e8 4f f8 ff ff       	call   28355a <file_loadfile>
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
  283d0b:	83 c4 20             	add    $0x20,%esp
  283d0e:	83 7f 3c 23          	cmpl   $0x23,0x3c(%edi)
  283d12:	0f 86 61 01 00 00    	jbe    283e79 <cmd_app+0x247>
  283d18:	83 ec 04             	sub    $0x4,%esp
  283d1b:	6a 04                	push   $0x4
  283d1d:	68 b5 4f 28 00       	push   $0x284fb5
  283d22:	89 f0                	mov    %esi,%eax
  283d24:	83 c0 04             	add    $0x4,%eax
  283d27:	50                   	push   %eax
  283d28:	e8 8b dd ff ff       	call   281ab8 <strncmp>
  283d2d:	83 c4 10             	add    $0x10,%esp
  283d30:	85 c0                	test   %eax,%eax
  283d32:	0f 85 41 01 00 00    	jne    283e79 <cmd_app+0x247>
  283d38:	80 3e 00             	cmpb   $0x0,(%esi)
  283d3b:	0f 85 38 01 00 00    	jne    283e79 <cmd_app+0x247>
		{
			int segsiz	=	*((int *)(p+0x0000));
  283d41:	8b 45 bc             	mov    -0x44(%ebp),%eax
  283d44:	8b 08                	mov    (%eax),%ecx
			int esp		=	*((int *)(p+0x000c));
  283d46:	8b 70 0c             	mov    0xc(%eax),%esi
			int datsiz	=	*((int *)(p+0x0010));
  283d49:	8b 58 10             	mov    0x10(%eax),%ebx
			int dathrb	=	*((int *)(p+0x0014));
  283d4c:	8b 78 14             	mov    0x14(%eax),%edi

			q = (char *)memman_alloc_4k(memman,segsiz);
  283d4f:	83 ec 08             	sub    $0x8,%esp
  283d52:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  283d55:	51                   	push   %ecx
  283d56:	68 00 00 3c 00       	push   $0x3c0000
  283d5b:	e8 8d e5 ff ff       	call   2822ed <memman_alloc_4k>
  283d60:	89 c2                	mov    %eax,%edx
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
  283d62:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  283d65:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  283d68:	89 91 98 00 00 00    	mov    %edx,0x98(%ecx)
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
  283d6e:	68 fa 40 00 00       	push   $0x40fa
  283d73:	ff 75 bc             	pushl  -0x44(%ebp)
  283d76:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283d79:	8b 40 3c             	mov    0x3c(%eax),%eax
  283d7c:	83 e8 01             	sub    $0x1,%eax
  283d7f:	50                   	push   %eax
  283d80:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  283d83:	8b 11                	mov    (%ecx),%edx
  283d85:	8d 42 07             	lea    0x7(%edx),%eax
  283d88:	85 d2                	test   %edx,%edx
  283d8a:	0f 49 c2             	cmovns %edx,%eax
  283d8d:	c1 f8 03             	sar    $0x3,%eax
  283d90:	8d 04 c5 40 1f 27 00 	lea    0x271f40(,%eax,8),%eax
  283d97:	50                   	push   %eax
  283d98:	e8 75 d6 ff ff       	call   281412 <set_segmdesc>
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
  283d9d:	83 c4 20             	add    $0x20,%esp
  283da0:	68 f2 40 00 00       	push   $0x40f2
  283da5:	ff 75 b4             	pushl  -0x4c(%ebp)
  283da8:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  283dab:	8d 41 ff             	lea    -0x1(%ecx),%eax
  283dae:	50                   	push   %eax
  283daf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283db2:	8b 10                	mov    (%eax),%edx
  283db4:	8d 42 07             	lea    0x7(%edx),%eax
  283db7:	85 d2                	test   %edx,%edx
  283db9:	0f 49 c2             	cmovns %edx,%eax
  283dbc:	c1 f8 03             	sar    $0x3,%eax
  283dbf:	8d 04 c5 80 3e 27 00 	lea    0x273e80(,%eax,8),%eax
  283dc6:	50                   	push   %eax
  283dc7:	e8 46 d6 ff ff       	call   281412 <set_segmdesc>
			for(int i = 0;i<datsiz;i++)
  283dcc:	83 c4 10             	add    $0x10,%esp
  283dcf:	85 db                	test   %ebx,%ebx
  283dd1:	7e 1b                	jle    283dee <cmd_app+0x1bc>
  283dd3:	b8 00 00 00 00       	mov    $0x0,%eax
			{
				q[esp + i] = p[dathrb + i];
  283dd8:	03 7d bc             	add    -0x44(%ebp),%edi
  283ddb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  283dde:	01 f2                	add    %esi,%edx
  283de0:	0f b6 0c 07          	movzbl (%edi,%eax,1),%ecx
  283de4:	88 0c 02             	mov    %cl,(%edx,%eax,1)
			q = (char *)memman_alloc_4k(memman,segsiz);
			//*((int *)0xfe8) = (int) q;
			task->ds_base = (int)q;
			set_segmdesc(gdt + task->sel/8 + 1000,finfo->size - 1,(int)p,AR_CODE32_ER + 0x60);
			set_segmdesc(gdt + task->sel/8 + 2000,segsiz - 1,     (int)q,AR_DATA32_RW + 0x60);
			for(int i = 0;i<datsiz;i++)
  283de7:	83 c0 01             	add    $0x1,%eax
  283dea:	39 c3                	cmp    %eax,%ebx
  283dec:	75 f2                	jne    283de0 <cmd_app+0x1ae>
			{
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
  283dee:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  283df1:	8b 02                	mov    (%edx),%eax
  283df3:	83 ec 0c             	sub    $0xc,%esp
  283df6:	83 c2 30             	add    $0x30,%edx
  283df9:	52                   	push   %edx
  283dfa:	8d 90 80 3e 00 00    	lea    0x3e80(%eax),%edx
  283e00:	52                   	push   %edx
  283e01:	56                   	push   %esi
  283e02:	05 40 1f 00 00       	add    $0x1f40,%eax
  283e07:	50                   	push   %eax
  283e08:	6a 1b                	push   $0x1b
  283e0a:	e8 91 04 00 00       	call   2842a0 <start_app>
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  283e0f:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
  283e15:	8d 9f 30 04 00 00    	lea    0x430(%edi),%ebx
  283e1b:	8d b7 14 04 00 00    	lea    0x414(%edi),%esi
  283e21:	81 c7 14 2c 00 00    	add    $0x2c14,%edi
  283e27:	83 c4 20             	add    $0x20,%esp
			for(int i=0;i<MAX_SHEETS;i++)
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
  283e2a:	8b 03                	mov    (%ebx),%eax
  283e2c:	83 e0 11             	and    $0x11,%eax
  283e2f:	83 f8 11             	cmp    $0x11,%eax
  283e32:	75 14                	jne    283e48 <cmd_app+0x216>
  283e34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283e37:	3b 43 08             	cmp    0x8(%ebx),%eax
  283e3a:	75 0c                	jne    283e48 <cmd_app+0x216>
					sheet_free(sht);
  283e3c:	83 ec 0c             	sub    $0xc,%esp
  283e3f:	56                   	push   %esi
  283e40:	e8 cd eb ff ff       	call   282a12 <sheet_free>
  283e45:	83 c4 10             	add    $0x10,%esp
  283e48:	83 c3 28             	add    $0x28,%ebx
  283e4b:	83 c6 28             	add    $0x28,%esi
				q[esp + i] = p[dathrb + i];
			}
			start_app(0x1b,task->sel + 1000*8,esp,task->sel + 2000*8,&(task->tss.esp0));
			struct SHEET *sht;
			struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
			for(int i=0;i<MAX_SHEETS;i++)
  283e4e:	39 f7                	cmp    %esi,%edi
  283e50:	75 d8                	jne    283e2a <cmd_app+0x1f8>
			{
				sht = &(shtctl->sheets0[i]);
				if((sht->flags&0x11) == 0x11 && sht->task == task)
					sheet_free(sht);
			}
			timer_cancelall(&task->fifo);
  283e52:	83 ec 0c             	sub    $0xc,%esp
  283e55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  283e58:	83 c0 10             	add    $0x10,%eax
  283e5b:	50                   	push   %eax
  283e5c:	e8 5a ee ff ff       	call   282cbb <timer_cancelall>
			memman_free_4k(memman,(int)q,segsiz);
  283e61:	83 c4 0c             	add    $0xc,%esp
  283e64:	ff 75 b8             	pushl  -0x48(%ebp)
  283e67:	ff 75 b4             	pushl  -0x4c(%ebp)
  283e6a:	68 00 00 3c 00       	push   $0x3c0000
  283e6f:	e8 a5 e4 ff ff       	call   282319 <memman_free_4k>
	if(finfo != 0)
	{
		p = (char *)memman_alloc_4k(memman,finfo->size);
		file_loadfile(finfo->clustno,finfo->size,p,fat,(char *)(ADR_DISKIMG + 0x3e00));
		if(finfo->size >= 36 && strncmp(p+4,"Hari",4) == 0 && *p == 0x00)
		{
  283e74:	83 c4 10             	add    $0x10,%esp
  283e77:	eb 13                	jmp    283e8c <cmd_app+0x25a>
			timer_cancelall(&task->fifo);
			memman_free_4k(memman,(int)q,segsiz);
		}
		else
		{
			cons_putstr0(cons,".bin file format error.\n");
  283e79:	83 ec 08             	sub    $0x8,%esp
  283e7c:	68 ba 4f 28 00       	push   $0x284fba
  283e81:	ff 75 08             	pushl  0x8(%ebp)
  283e84:	e8 74 fd ff ff       	call   283bfd <cons_putstr0>
  283e89:	83 c4 10             	add    $0x10,%esp
		}
		memman_free_4k(memman,(int)p,finfo->size);
  283e8c:	83 ec 04             	sub    $0x4,%esp
  283e8f:	8b 45 c0             	mov    -0x40(%ebp),%eax
  283e92:	ff 70 3c             	pushl  0x3c(%eax)
  283e95:	ff 75 bc             	pushl  -0x44(%ebp)
  283e98:	68 00 00 3c 00       	push   $0x3c0000
  283e9d:	e8 77 e4 ff ff       	call   282319 <memman_free_4k>
		cons_newline(cons);
  283ea2:	83 c4 04             	add    $0x4,%esp
  283ea5:	ff 75 08             	pushl  0x8(%ebp)
  283ea8:	e8 c7 f8 ff ff       	call   283774 <cons_newline>
		return 1;
  283ead:	83 c4 10             	add    $0x10,%esp
  283eb0:	b8 01 00 00 00       	mov    $0x1,%eax
  283eb5:	eb 14                	jmp    283ecb <cmd_app+0x299>
	}
	return 0;
  283eb7:	b8 00 00 00 00       	mov    $0x0,%eax
  283ebc:	eb 0d                	jmp    283ecb <cmd_app+0x299>

	for(i=0;i<13;i++)
	{
		if(cmdline[i] <= ' ')
			break;
		name[i] = cmdline[i];
  283ebe:	88 45 d6             	mov    %al,-0x2a(%ebp)
	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)ADR_GDT;
	struct TASK *task = task_now();
	char name[18],*p,*q;
	int i;

	for(i=0;i<13;i++)
  283ec1:	bb 01 00 00 00       	mov    $0x1,%ebx
  283ec6:	e9 88 fd ff ff       	jmp    283c53 <cmd_app+0x21>
		memman_free_4k(memman,(int)p,finfo->size);
		cons_newline(cons);
		return 1;
	}
	return 0;
}
  283ecb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283ece:	5b                   	pop    %ebx
  283ecf:	5e                   	pop    %esi
  283ed0:	5f                   	pop    %edi
  283ed1:	5d                   	pop    %ebp
  283ed2:	c3                   	ret    

00283ed3 <cons_putstr1>:
	}
	return;
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
  283ed3:	55                   	push   %ebp
  283ed4:	89 e5                	mov    %esp,%ebp
  283ed6:	57                   	push   %edi
  283ed7:	56                   	push   %esi
  283ed8:	53                   	push   %ebx
  283ed9:	83 ec 0c             	sub    $0xc,%esp
  283edc:	8b 7d 08             	mov    0x8(%ebp),%edi
  283edf:	8b 75 0c             	mov    0xc(%ebp),%esi
  283ee2:	8b 45 10             	mov    0x10(%ebp),%eax
	int i;
	for(i=0;i<l;i++)
  283ee5:	85 c0                	test   %eax,%eax
  283ee7:	7e 1d                	jle    283f06 <cons_putstr1+0x33>
  283ee9:	89 f3                	mov    %esi,%ebx
  283eeb:	01 c6                	add    %eax,%esi
	{
		cons_putchar(cons,s[i],1);
  283eed:	83 ec 04             	sub    $0x4,%esp
  283ef0:	6a 01                	push   $0x1
  283ef2:	0f be 03             	movsbl (%ebx),%eax
  283ef5:	50                   	push   %eax
  283ef6:	57                   	push   %edi
  283ef7:	e8 43 f9 ff ff       	call   28383f <cons_putchar>
  283efc:	83 c3 01             	add    $0x1,%ebx
}

void cons_putstr1(struct CONSOLE *cons,char *s,int l)
{
	int i;
	for(i=0;i<l;i++)
  283eff:	83 c4 10             	add    $0x10,%esp
  283f02:	39 f3                	cmp    %esi,%ebx
  283f04:	75 e7                	jne    283eed <cons_putstr1+0x1a>
	{
		cons_putchar(cons,s[i],1);
	}
	return;
}
  283f06:	8d 65 f4             	lea    -0xc(%ebp),%esp
  283f09:	5b                   	pop    %ebx
  283f0a:	5e                   	pop    %esi
  283f0b:	5f                   	pop    %edi
  283f0c:	5d                   	pop    %ebp
  283f0d:	c3                   	ret    

00283f0e <open_console>:


struct SHEET *open_console(struct SHTCTL *shtctl,unsigned int memtotal)
{
  283f0e:	55                   	push   %ebp
  283f0f:	89 e5                	mov    %esp,%ebp
  283f11:	57                   	push   %edi
  283f12:	56                   	push   %esi
  283f13:	53                   	push   %ebx
  283f14:	83 ec 18             	sub    $0x18,%esp
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct SHEET *sht = sheet_alloc(shtctl);
  283f17:	ff 75 08             	pushl  0x8(%ebp)
  283f1a:	e8 bd e4 ff ff       	call   2823dc <sheet_alloc>
  283f1f:	89 c6                	mov    %eax,%esi
	unsigned char *buf = (unsigned char *)memman_alloc_4k(memman,256*165);
  283f21:	83 c4 08             	add    $0x8,%esp
  283f24:	68 00 a5 00 00       	push   $0xa500
  283f29:	68 00 00 3c 00       	push   $0x3c0000
  283f2e:	e8 ba e3 ff ff       	call   2822ed <memman_alloc_4k>
  283f33:	89 c7                	mov    %eax,%edi
	struct TASK *task = task_alloc();
  283f35:	e8 0e ee ff ff       	call   282d48 <task_alloc>
  283f3a:	89 c3                	mov    %eax,%ebx
	sheet_setbuf(sht,buf,256,165,-1);
  283f3c:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  283f43:	68 a5 00 00 00       	push   $0xa5
  283f48:	68 00 01 00 00       	push   $0x100
  283f4d:	57                   	push   %edi
  283f4e:	56                   	push   %esi
  283f4f:	e8 fb e4 ff ff       	call   28244f <sheet_setbuf>
	make_window8(buf,256,165,"console",0);
  283f54:	83 c4 14             	add    $0x14,%esp
  283f57:	6a 00                	push   $0x0
  283f59:	68 d3 4f 28 00       	push   $0x284fd3
  283f5e:	68 a5 00 00 00       	push   $0xa5
  283f63:	68 00 01 00 00       	push   $0x100
  283f68:	57                   	push   %edi
  283f69:	e8 f4 cf ff ff       	call   280f62 <make_window8>
	make_textbox8(sht,8,28,240,128,COL8_000000);
  283f6e:	83 c4 18             	add    $0x18,%esp
  283f71:	6a 00                	push   $0x0
  283f73:	68 80 00 00 00       	push   $0x80
  283f78:	68 f0 00 00 00       	push   $0xf0
  283f7d:	6a 1c                	push   $0x1c
  283f7f:	6a 08                	push   $0x8
  283f81:	56                   	push   %esi
  283f82:	e8 9e d1 ff ff       	call   281125 <make_textbox8>
	task->cons_stack = memman_alloc_4k(memman,64*1024);
  283f87:	83 c4 18             	add    $0x18,%esp
  283f8a:	68 00 00 01 00       	push   $0x10000
  283f8f:	68 00 00 3c 00       	push   $0x3c0000
  283f94:	e8 54 e3 ff ff       	call   2822ed <memman_alloc_4k>
  283f99:	89 83 9c 00 00 00    	mov    %eax,0x9c(%ebx)
	task->tss.esp = task->cons_stack+64*1024-12;
  283f9f:	8d 90 f4 ff 00 00    	lea    0xfff4(%eax),%edx
  283fa5:	89 53 64             	mov    %edx,0x64(%ebx)
	task->tss.eip = (int)&console_task - 0x280000;
  283fa8:	c7 43 4c 03 32 00 00 	movl   $0x3203,0x4c(%ebx)
	task->tss.es = 1*8;
  283faf:	c7 43 74 08 00 00 00 	movl   $0x8,0x74(%ebx)
	task->tss.cs = 3*8;
  283fb6:	c7 43 78 18 00 00 00 	movl   $0x18,0x78(%ebx)
	task->tss.ss = 1*8;
  283fbd:	c7 43 7c 08 00 00 00 	movl   $0x8,0x7c(%ebx)
	task->tss.ds = 1*8;
  283fc4:	c7 83 80 00 00 00 08 	movl   $0x8,0x80(%ebx)
  283fcb:	00 00 00 
	task->tss.fs = 1*8;
  283fce:	c7 83 84 00 00 00 08 	movl   $0x8,0x84(%ebx)
  283fd5:	00 00 00 
	task->tss.gs = 1*8;
  283fd8:	c7 83 88 00 00 00 08 	movl   $0x8,0x88(%ebx)
  283fdf:	00 00 00 
	*((int *)(task->tss.esp + 4)) = sht;
  283fe2:	89 b0 f8 ff 00 00    	mov    %esi,0xfff8(%eax)
	*((int *)(task->tss.esp + 8)) = memtotal;
  283fe8:	8b 43 64             	mov    0x64(%ebx),%eax
  283feb:	8b 55 0c             	mov    0xc(%ebp),%edx
  283fee:	89 50 08             	mov    %edx,0x8(%eax)
	task_run(task,2,2);
  283ff1:	83 c4 0c             	add    $0xc,%esp
  283ff4:	6a 02                	push   $0x2
  283ff6:	6a 02                	push   $0x2
  283ff8:	53                   	push   %ebx
  283ff9:	e8 46 ef ff ff       	call   282f44 <task_run>
	sht->task = task;
  283ffe:	89 5e 24             	mov    %ebx,0x24(%esi)
	sht->flags |= 0x20;
  284001:	83 4e 1c 20          	orl    $0x20,0x1c(%esi)
	int *cons_fifo = memman_alloc_4k(memman,128*4);
  284005:	83 c4 08             	add    $0x8,%esp
  284008:	68 00 02 00 00       	push   $0x200
  28400d:	68 00 00 3c 00       	push   $0x3c0000
  284012:	e8 d6 e2 ff ff       	call   2822ed <memman_alloc_4k>
	fifo32_init(&task->fifo,128,cons_fifo,task);
  284017:	53                   	push   %ebx
  284018:	50                   	push   %eax
  284019:	68 80 00 00 00       	push   $0x80
  28401e:	83 c3 10             	add    $0x10,%ebx
  284021:	53                   	push   %ebx
  284022:	e8 11 db ff ff       	call   281b38 <fifo32_init>
	return sht;
}
  284027:	89 f0                	mov    %esi,%eax
  284029:	8d 65 f4             	lea    -0xc(%ebp),%esp
  28402c:	5b                   	pop    %ebx
  28402d:	5e                   	pop    %esi
  28402e:	5f                   	pop    %edi
  28402f:	5d                   	pop    %ebp
  284030:	c3                   	ret    

00284031 <close_constask>:

void close_constask(struct TASK *task)
{
  284031:	55                   	push   %ebp
  284032:	89 e5                	mov    %esp,%ebp
  284034:	53                   	push   %ebx
  284035:	83 ec 10             	sub    $0x10,%esp
  284038:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	task_sleep(task);
  28403b:	53                   	push   %ebx
  28403c:	e8 80 f1 ff ff       	call   2831c1 <task_sleep>
	memman_free_4k(memman,task->cons_stack,64 * 1024);
  284041:	83 c4 0c             	add    $0xc,%esp
  284044:	68 00 00 01 00       	push   $0x10000
  284049:	ff b3 9c 00 00 00    	pushl  0x9c(%ebx)
  28404f:	68 00 00 3c 00       	push   $0x3c0000
  284054:	e8 c0 e2 ff ff       	call   282319 <memman_free_4k>
	memman_free_4k(memman,(int)task->fifo.buf,128*4);
  284059:	83 c4 0c             	add    $0xc,%esp
  28405c:	68 00 02 00 00       	push   $0x200
  284061:	ff 73 10             	pushl  0x10(%ebx)
  284064:	68 00 00 3c 00       	push   $0x3c0000
  284069:	e8 ab e2 ff ff       	call   282319 <memman_free_4k>
	task->flags = 0;
  28406e:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
	return;
  284075:	83 c4 10             	add    $0x10,%esp
}
  284078:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28407b:	c9                   	leave  
  28407c:	c3                   	ret    

0028407d <close_console>:

void close_console(struct SHEET *sht)
{
  28407d:	55                   	push   %ebp
  28407e:	89 e5                	mov    %esp,%ebp
  284080:	56                   	push   %esi
  284081:	53                   	push   %ebx
  284082:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct MEMMAN *memman = (struct MEMMAN *)MEMMAN_ADDR;
	struct TASK *task = sht->task;
  284085:	8b 73 24             	mov    0x24(%ebx),%esi
	memman_free_4k(memman,(int)sht->buf,256*165);
  284088:	83 ec 04             	sub    $0x4,%esp
  28408b:	68 00 a5 00 00       	push   $0xa500
  284090:	ff 33                	pushl  (%ebx)
  284092:	68 00 00 3c 00       	push   $0x3c0000
  284097:	e8 7d e2 ff ff       	call   282319 <memman_free_4k>
	sheet_free(sht);
  28409c:	89 1c 24             	mov    %ebx,(%esp)
  28409f:	e8 6e e9 ff ff       	call   282a12 <sheet_free>
	close_constask(task);
  2840a4:	89 34 24             	mov    %esi,(%esp)
  2840a7:	e8 85 ff ff ff       	call   284031 <close_constask>
	return;
  2840ac:	83 c4 10             	add    $0x10,%esp
}
  2840af:	8d 65 f8             	lea    -0x8(%ebp),%esp
  2840b2:	5b                   	pop    %ebx
  2840b3:	5e                   	pop    %esi
  2840b4:	5d                   	pop    %ebp
  2840b5:	c3                   	ret    

002840b6 <cmd_start>:

void cmd_start(struct CONSOLE *cons,char *cmdline,int memtotal)
{
  2840b6:	55                   	push   %ebp
  2840b7:	89 e5                	mov    %esp,%ebp
  2840b9:	57                   	push   %edi
  2840ba:	56                   	push   %esi
  2840bb:	53                   	push   %ebx
  2840bc:	83 ec 14             	sub    $0x14,%esp
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
  2840bf:	8b 3d e4 0f 00 00    	mov    0xfe4,%edi
	struct SHEET *sht = open_console(shtctl,memtotal);
  2840c5:	ff 75 10             	pushl  0x10(%ebp)
  2840c8:	57                   	push   %edi
  2840c9:	e8 40 fe ff ff       	call   283f0e <open_console>
  2840ce:	89 c6                	mov    %eax,%esi
	struct FIFO32 *fifo = &sht->task->fifo;
  2840d0:	8b 40 24             	mov    0x24(%eax),%eax
  2840d3:	8d 58 10             	lea    0x10(%eax),%ebx
	int i;
	sheet_slide(sht,32,4);
  2840d6:	83 c4 0c             	add    $0xc,%esp
  2840d9:	6a 04                	push   $0x4
  2840db:	6a 20                	push   $0x20
  2840dd:	56                   	push   %esi
  2840de:	e8 d0 e8 ff ff       	call   2829b3 <sheet_slide>
	sheet_updown(sht,shtctl->top);
  2840e3:	83 c4 08             	add    $0x8,%esp
  2840e6:	ff 77 10             	pushl  0x10(%edi)
  2840e9:	56                   	push   %esi
  2840ea:	e8 db e7 ff ff       	call   2828ca <sheet_updown>
	for(i = 6;cmdline[i]!=0;i++)
  2840ef:	8b 45 0c             	mov    0xc(%ebp),%eax
  2840f2:	0f b6 40 06          	movzbl 0x6(%eax),%eax
  2840f6:	83 c4 10             	add    $0x10,%esp
  2840f9:	84 c0                	test   %al,%al
  2840fb:	74 26                	je     284123 <cmd_start+0x6d>
  2840fd:	8b 55 0c             	mov    0xc(%ebp),%edx
  284100:	8d 72 07             	lea    0x7(%edx),%esi
	{
		fifo32_put(fifo,cmdline[i] + 256);
  284103:	83 ec 08             	sub    $0x8,%esp
  284106:	0f be c0             	movsbl %al,%eax
  284109:	05 00 01 00 00       	add    $0x100,%eax
  28410e:	50                   	push   %eax
  28410f:	53                   	push   %ebx
  284110:	e8 54 da ff ff       	call   281b69 <fifo32_put>
  284115:	83 c6 01             	add    $0x1,%esi
	struct SHEET *sht = open_console(shtctl,memtotal);
	struct FIFO32 *fifo = &sht->task->fifo;
	int i;
	sheet_slide(sht,32,4);
	sheet_updown(sht,shtctl->top);
	for(i = 6;cmdline[i]!=0;i++)
  284118:	0f b6 46 ff          	movzbl -0x1(%esi),%eax
  28411c:	83 c4 10             	add    $0x10,%esp
  28411f:	84 c0                	test   %al,%al
  284121:	75 e0                	jne    284103 <cmd_start+0x4d>
	{
		fifo32_put(fifo,cmdline[i] + 256);
	}
	fifo32_put(fifo,10+256);
  284123:	83 ec 08             	sub    $0x8,%esp
  284126:	68 0a 01 00 00       	push   $0x10a
  28412b:	53                   	push   %ebx
  28412c:	e8 38 da ff ff       	call   281b69 <fifo32_put>
	cons_newline(cons);
  284131:	83 c4 04             	add    $0x4,%esp
  284134:	ff 75 08             	pushl  0x8(%ebp)
  284137:	e8 38 f6 ff ff       	call   283774 <cons_newline>
	return;
  28413c:	83 c4 10             	add    $0x10,%esp
}
  28413f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284142:	5b                   	pop    %ebx
  284143:	5e                   	pop    %esi
  284144:	5f                   	pop    %edi
  284145:	5d                   	pop    %ebp
  284146:	c3                   	ret    

00284147 <cons_runcmd>:
	cons->cur_x = 8;
}

#include "string.h"
void cons_runcmd(char *cmdline,struct CONSOLE *cons,int *fat,unsigned int memtotal)
{
  284147:	55                   	push   %ebp
  284148:	89 e5                	mov    %esp,%ebp
  28414a:	53                   	push   %ebx
  28414b:	83 ec 0c             	sub    $0xc,%esp
  28414e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if(strcmp(cmdline,"mem") == 0)
  284151:	68 db 4f 28 00       	push   $0x284fdb
  284156:	53                   	push   %ebx
  284157:	e8 f6 d8 ff ff       	call   281a52 <strcmp>
  28415c:	83 c4 10             	add    $0x10,%esp
  28415f:	85 c0                	test   %eax,%eax
  284161:	75 16                	jne    284179 <cons_runcmd+0x32>
		cmd_mem(cons,memtotal);
  284163:	83 ec 08             	sub    $0x8,%esp
  284166:	ff 75 14             	pushl  0x14(%ebp)
  284169:	ff 75 0c             	pushl  0xc(%ebp)
  28416c:	e8 8c f7 ff ff       	call   2838fd <cmd_mem>
  284171:	83 c4 10             	add    $0x10,%esp
  284174:	e9 1d 01 00 00       	jmp    284296 <cons_runcmd+0x14f>
	else if(strcmp(cmdline,"cls") == 0)
  284179:	83 ec 08             	sub    $0x8,%esp
  28417c:	68 df 4f 28 00       	push   $0x284fdf
  284181:	53                   	push   %ebx
  284182:	e8 cb d8 ff ff       	call   281a52 <strcmp>
  284187:	83 c4 10             	add    $0x10,%esp
  28418a:	85 c0                	test   %eax,%eax
  28418c:	75 13                	jne    2841a1 <cons_runcmd+0x5a>
		cmd_cls(cons);
  28418e:	83 ec 0c             	sub    $0xc,%esp
  284191:	ff 75 0c             	pushl  0xc(%ebp)
  284194:	e8 f2 f7 ff ff       	call   28398b <cmd_cls>
  284199:	83 c4 10             	add    $0x10,%esp
  28419c:	e9 f5 00 00 00       	jmp    284296 <cons_runcmd+0x14f>
	else if(strcmp(cmdline,"dir") == 0)
  2841a1:	83 ec 08             	sub    $0x8,%esp
  2841a4:	68 e3 4f 28 00       	push   $0x284fe3
  2841a9:	53                   	push   %ebx
  2841aa:	e8 a3 d8 ff ff       	call   281a52 <strcmp>
  2841af:	83 c4 10             	add    $0x10,%esp
  2841b2:	85 c0                	test   %eax,%eax
  2841b4:	75 13                	jne    2841c9 <cons_runcmd+0x82>
		cmd_dir(cons);
  2841b6:	83 ec 0c             	sub    $0xc,%esp
  2841b9:	ff 75 0c             	pushl  0xc(%ebp)
  2841bc:	e8 32 f8 ff ff       	call   2839f3 <cmd_dir>
  2841c1:	83 c4 10             	add    $0x10,%esp
  2841c4:	e9 cd 00 00 00       	jmp    284296 <cons_runcmd+0x14f>
	else if(strncmp(cmdline,"type ",5) == 0)
  2841c9:	83 ec 04             	sub    $0x4,%esp
  2841cc:	6a 05                	push   $0x5
  2841ce:	68 e7 4f 28 00       	push   $0x284fe7
  2841d3:	53                   	push   %ebx
  2841d4:	e8 df d8 ff ff       	call   281ab8 <strncmp>
  2841d9:	83 c4 10             	add    $0x10,%esp
  2841dc:	85 c0                	test   %eax,%eax
  2841de:	75 17                	jne    2841f7 <cons_runcmd+0xb0>
		cmd_type(cons,fat,cmdline);
  2841e0:	83 ec 04             	sub    $0x4,%esp
  2841e3:	53                   	push   %ebx
  2841e4:	ff 75 10             	pushl  0x10(%ebp)
  2841e7:	ff 75 0c             	pushl  0xc(%ebp)
  2841ea:	e8 ba f8 ff ff       	call   283aa9 <cmd_type>
  2841ef:	83 c4 10             	add    $0x10,%esp
  2841f2:	e9 9f 00 00 00       	jmp    284296 <cons_runcmd+0x14f>
	else if(strcmp(cmdline,"exit") == 0)
  2841f7:	83 ec 08             	sub    $0x8,%esp
  2841fa:	68 ed 4f 28 00       	push   $0x284fed
  2841ff:	53                   	push   %ebx
  284200:	e8 4d d8 ff ff       	call   281a52 <strcmp>
  284205:	83 c4 10             	add    $0x10,%esp
  284208:	85 c0                	test   %eax,%eax
  28420a:	75 0e                	jne    28421a <cons_runcmd+0xd3>
		cmd_exit(cons,fat);
  28420c:	83 ec 08             	sub    $0x8,%esp
  28420f:	ff 75 10             	pushl  0x10(%ebp)
  284212:	ff 75 0c             	pushl  0xc(%ebp)
  284215:	e8 64 f9 ff ff       	call   283b7e <cmd_exit>
	else if(strncmp(cmdline,"start ",6) == 0)
  28421a:	83 ec 04             	sub    $0x4,%esp
  28421d:	6a 06                	push   $0x6
  28421f:	68 f2 4f 28 00       	push   $0x284ff2
  284224:	53                   	push   %ebx
  284225:	e8 8e d8 ff ff       	call   281ab8 <strncmp>
  28422a:	83 c4 10             	add    $0x10,%esp
  28422d:	85 c0                	test   %eax,%eax
  28422f:	75 14                	jne    284245 <cons_runcmd+0xfe>
		cmd_start(cons,cmdline,memtotal);
  284231:	83 ec 04             	sub    $0x4,%esp
  284234:	ff 75 14             	pushl  0x14(%ebp)
  284237:	53                   	push   %ebx
  284238:	ff 75 0c             	pushl  0xc(%ebp)
  28423b:	e8 76 fe ff ff       	call   2840b6 <cmd_start>
  284240:	83 c4 10             	add    $0x10,%esp
  284243:	eb 51                	jmp    284296 <cons_runcmd+0x14f>
	else if(cmdline[0] != 0)
  284245:	80 3b 00             	cmpb   $0x0,(%ebx)
  284248:	74 4c                	je     284296 <cons_runcmd+0x14f>
	{
		if(cmd_app(cons,fat,cmdline) == 0)
  28424a:	83 ec 04             	sub    $0x4,%esp
  28424d:	53                   	push   %ebx
  28424e:	ff 75 10             	pushl  0x10(%ebp)
  284251:	ff 75 0c             	pushl  0xc(%ebp)
  284254:	e8 d9 f9 ff ff       	call   283c32 <cmd_app>
  284259:	83 c4 10             	add    $0x10,%esp
  28425c:	85 c0                	test   %eax,%eax
  28425e:	75 36                	jne    284296 <cons_runcmd+0x14f>
		{
			putfonts8_asc_sht(cons->sht,8,cons->cur_y,COL8_FFFFFF,COL8_000000,"Bad command.",12);
  284260:	83 ec 04             	sub    $0x4,%esp
  284263:	6a 0c                	push   $0xc
  284265:	68 f9 4f 28 00       	push   $0x284ff9
  28426a:	6a 00                	push   $0x0
  28426c:	6a 07                	push   $0x7
  28426e:	8b 45 0c             	mov    0xc(%ebp),%eax
  284271:	ff 70 08             	pushl  0x8(%eax)
  284274:	6a 08                	push   $0x8
  284276:	ff 30                	pushl  (%eax)
  284278:	e8 43 ce ff ff       	call   2810c0 <putfonts8_asc_sht>
			cons_newline(cons);
  28427d:	83 c4 14             	add    $0x14,%esp
  284280:	ff 75 0c             	pushl  0xc(%ebp)
  284283:	e8 ec f4 ff ff       	call   283774 <cons_newline>
			cons_newline(cons);
  284288:	83 c4 04             	add    $0x4,%esp
  28428b:	ff 75 0c             	pushl  0xc(%ebp)
  28428e:	e8 e1 f4 ff ff       	call   283774 <cons_newline>
  284293:	83 c4 10             	add    $0x10,%esp
		}
	}
	return;
}
  284296:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284299:	c9                   	leave  
  28429a:	c3                   	ret    
  28429b:	66 90                	xchg   %ax,%ax
  28429d:	66 90                	xchg   %ax,%ax
  28429f:	90                   	nop

002842a0 <start_app>:
  2842a0:	60                   	pusha  
  2842a1:	8b 44 24 24          	mov    0x24(%esp),%eax
  2842a5:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  2842a9:	8b 54 24 2c          	mov    0x2c(%esp),%edx
  2842ad:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  2842b1:	8b 6c 24 34          	mov    0x34(%esp),%ebp
  2842b5:	89 65 00             	mov    %esp,0x0(%ebp)
  2842b8:	8c 55 04             	mov    %ss,0x4(%ebp)
  2842bb:	8e c3                	mov    %ebx,%es
  2842bd:	8e db                	mov    %ebx,%ds
  2842bf:	8e e3                	mov    %ebx,%fs
  2842c1:	8e eb                	mov    %ebx,%gs
  2842c3:	83 c9 03             	or     $0x3,%ecx
  2842c6:	83 cb 03             	or     $0x3,%ebx
  2842c9:	53                   	push   %ebx
  2842ca:	52                   	push   %edx
  2842cb:	51                   	push   %ecx
  2842cc:	50                   	push   %eax
  2842cd:	cb                   	lret   

002842ce <sys_api>:
#include "header.h"
int *sys_api(int edi,int esi,int ebp,int esp,int ebx,int edx,int ecx,int eax)
{
  2842ce:	55                   	push   %ebp
  2842cf:	89 e5                	mov    %esp,%ebp
  2842d1:	53                   	push   %ebx
  2842d2:	83 ec 34             	sub    $0x34,%esp
	struct TASK *task = task_now();
  2842d5:	e8 75 eb ff ff       	call   282e4f <task_now>
  2842da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct CONSOLE *cons = task->cons;
  2842dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2842e0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
  2842e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int ds_base = task->ds_base;
  2842e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  2842ec:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
  2842f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *)0x0fe4);
  2842f5:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
  2842fa:	8b 00                	mov    (%eax),%eax
  2842fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct SHEET *sht;
	int *reg = &eax + 1;
  2842ff:	8d 45 24             	lea    0x24(%ebp),%eax
  284302:	83 c0 04             	add    $0x4,%eax
  284305:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	   reg[0] = 1st_edi; reg[1] = 1st_esi ... reg[7] = 1st_eax
	   and the parameters:
	   edi = 2nd_edi; esi = 2nd_esi ... eax = 2nd_eax
	 */

	if(edx == 1) cons_putchar(cons,eax & 0xff,1);
  284308:	83 7d 1c 01          	cmpl   $0x1,0x1c(%ebp)
  28430c:	75 1c                	jne    28432a <sys_api+0x5c>
  28430e:	8b 45 24             	mov    0x24(%ebp),%eax
  284311:	0f b6 c0             	movzbl %al,%eax
  284314:	83 ec 04             	sub    $0x4,%esp
  284317:	6a 01                	push   $0x1
  284319:	50                   	push   %eax
  28431a:	ff 75 f0             	pushl  -0x10(%ebp)
  28431d:	e8 1d f5 ff ff       	call   28383f <cons_putchar>
  284322:	83 c4 10             	add    $0x10,%esp
  284325:	e9 fb 05 00 00       	jmp    284925 <sys_api+0x657>
	else if(edx == 2) cons_putstr0(cons,(char *)ebx+ds_base);
  28432a:	83 7d 1c 02          	cmpl   $0x2,0x1c(%ebp)
  28432e:	75 1c                	jne    28434c <sys_api+0x7e>
  284330:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284333:	8b 45 18             	mov    0x18(%ebp),%eax
  284336:	01 d0                	add    %edx,%eax
  284338:	83 ec 08             	sub    $0x8,%esp
  28433b:	50                   	push   %eax
  28433c:	ff 75 f0             	pushl  -0x10(%ebp)
  28433f:	e8 b9 f8 ff ff       	call   283bfd <cons_putstr0>
  284344:	83 c4 10             	add    $0x10,%esp
  284347:	e9 d9 05 00 00       	jmp    284925 <sys_api+0x657>
	else if(edx == 3) cons_putstr1(cons,(char *)ebx+ds_base,ecx);
  28434c:	83 7d 1c 03          	cmpl   $0x3,0x1c(%ebp)
  284350:	75 1f                	jne    284371 <sys_api+0xa3>
  284352:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284355:	8b 45 18             	mov    0x18(%ebp),%eax
  284358:	01 d0                	add    %edx,%eax
  28435a:	83 ec 04             	sub    $0x4,%esp
  28435d:	ff 75 20             	pushl  0x20(%ebp)
  284360:	50                   	push   %eax
  284361:	ff 75 f0             	pushl  -0x10(%ebp)
  284364:	e8 6a fb ff ff       	call   283ed3 <cons_putstr1>
  284369:	83 c4 10             	add    $0x10,%esp
  28436c:	e9 b4 05 00 00       	jmp    284925 <sys_api+0x657>
	else if(edx == 4)
  284371:	83 7d 1c 04          	cmpl   $0x4,0x1c(%ebp)
  284375:	75 0b                	jne    284382 <sys_api+0xb4>
	{
		//exit app
		return &(task->tss.esp0);
  284377:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28437a:	83 c0 30             	add    $0x30,%eax
  28437d:	e9 a8 05 00 00       	jmp    28492a <sys_api+0x65c>
	}
	else if(edx == 5)
  284382:	83 7d 1c 05          	cmpl   $0x5,0x1c(%ebp)
  284386:	0f 85 d1 00 00 00    	jne    28445d <sys_api+0x18f>
	{
		sht = sheet_alloc(shtctl);
  28438c:	83 ec 0c             	sub    $0xc,%esp
  28438f:	ff 75 e8             	pushl  -0x18(%ebp)
  284392:	e8 45 e0 ff ff       	call   2823dc <sheet_alloc>
  284397:	83 c4 10             	add    $0x10,%esp
  28439a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->task = task;
  28439d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2843a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  2843a3:	89 50 24             	mov    %edx,0x24(%eax)
		sht->flags |= 0x11;
  2843a6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2843a9:	8b 40 1c             	mov    0x1c(%eax),%eax
  2843ac:	83 c8 11             	or     $0x11,%eax
  2843af:	89 c2                	mov    %eax,%edx
  2843b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2843b4:	89 50 1c             	mov    %edx,0x1c(%eax)
		sheet_setbuf(sht,(char *)ebx+ds_base,esi,edi,eax);
  2843b7:	8b 45 24             	mov    0x24(%ebp),%eax
  2843ba:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  2843bd:	8b 55 18             	mov    0x18(%ebp),%edx
  2843c0:	01 ca                	add    %ecx,%edx
  2843c2:	83 ec 0c             	sub    $0xc,%esp
  2843c5:	50                   	push   %eax
  2843c6:	ff 75 08             	pushl  0x8(%ebp)
  2843c9:	ff 75 0c             	pushl  0xc(%ebp)
  2843cc:	52                   	push   %edx
  2843cd:	ff 75 d4             	pushl  -0x2c(%ebp)
  2843d0:	e8 7a e0 ff ff       	call   28244f <sheet_setbuf>
  2843d5:	83 c4 20             	add    $0x20,%esp
		make_window8((char *)ebx+ds_base,esi,edi,(char *)ecx+ds_base,0);
  2843d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2843db:	8b 45 20             	mov    0x20(%ebp),%eax
  2843de:	01 d0                	add    %edx,%eax
  2843e0:	89 c1                	mov    %eax,%ecx
  2843e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2843e5:	8b 45 18             	mov    0x18(%ebp),%eax
  2843e8:	01 d0                	add    %edx,%eax
  2843ea:	83 ec 0c             	sub    $0xc,%esp
  2843ed:	6a 00                	push   $0x0
  2843ef:	51                   	push   %ecx
  2843f0:	ff 75 08             	pushl  0x8(%ebp)
  2843f3:	ff 75 0c             	pushl  0xc(%ebp)
  2843f6:	50                   	push   %eax
  2843f7:	e8 66 cb ff ff       	call   280f62 <make_window8>
  2843fc:	83 c4 20             	add    $0x20,%esp
		sheet_slide(sht,((shtctl->xsize - esi)/2)&~3,(shtctl->ysize - edi)/2);
  2843ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284402:	8b 40 0c             	mov    0xc(%eax),%eax
  284405:	2b 45 08             	sub    0x8(%ebp),%eax
  284408:	89 c2                	mov    %eax,%edx
  28440a:	c1 ea 1f             	shr    $0x1f,%edx
  28440d:	01 d0                	add    %edx,%eax
  28440f:	d1 f8                	sar    %eax
  284411:	89 c1                	mov    %eax,%ecx
  284413:	8b 45 e8             	mov    -0x18(%ebp),%eax
  284416:	8b 40 08             	mov    0x8(%eax),%eax
  284419:	2b 45 0c             	sub    0xc(%ebp),%eax
  28441c:	89 c2                	mov    %eax,%edx
  28441e:	c1 ea 1f             	shr    $0x1f,%edx
  284421:	01 d0                	add    %edx,%eax
  284423:	d1 f8                	sar    %eax
  284425:	83 e0 fc             	and    $0xfffffffc,%eax
  284428:	83 ec 04             	sub    $0x4,%esp
  28442b:	51                   	push   %ecx
  28442c:	50                   	push   %eax
  28442d:	ff 75 d4             	pushl  -0x2c(%ebp)
  284430:	e8 7e e5 ff ff       	call   2829b3 <sheet_slide>
  284435:	83 c4 10             	add    $0x10,%esp
		sheet_updown(sht,shtctl->top);	//above task_a
  284438:	8b 45 e8             	mov    -0x18(%ebp),%eax
  28443b:	8b 40 10             	mov    0x10(%eax),%eax
  28443e:	83 ec 08             	sub    $0x8,%esp
  284441:	50                   	push   %eax
  284442:	ff 75 d4             	pushl  -0x2c(%ebp)
  284445:	e8 80 e4 ff ff       	call   2828ca <sheet_updown>
  28444a:	83 c4 10             	add    $0x10,%esp
		reg[7] = (int)sht;		//after sys_api ret and popad the eax will be sht
  28444d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  284450:	8d 50 1c             	lea    0x1c(%eax),%edx
  284453:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284456:	89 02                	mov    %eax,(%edx)
  284458:	e9 c8 04 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 6)
  28445d:	83 7d 1c 06          	cmpl   $0x6,0x1c(%ebp)
  284461:	75 74                	jne    2844d7 <sys_api+0x209>
	{
		sht = (struct SHEET *)ebx;
  284463:	8b 45 18             	mov    0x18(%ebp),%eax
  284466:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		putfonts8_asc(sht->buf,sht->bxsize,esi,edi,eax,(char *)ebp + ds_base);
  284469:	8b 55 ec             	mov    -0x14(%ebp),%edx
  28446c:	8b 45 10             	mov    0x10(%ebp),%eax
  28446f:	01 d0                	add    %edx,%eax
  284471:	89 c3                	mov    %eax,%ebx
  284473:	8b 45 24             	mov    0x24(%ebp),%eax
  284476:	0f be c8             	movsbl %al,%ecx
  284479:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  28447c:	8b 50 04             	mov    0x4(%eax),%edx
  28447f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284482:	8b 00                	mov    (%eax),%eax
  284484:	83 ec 08             	sub    $0x8,%esp
  284487:	53                   	push   %ebx
  284488:	51                   	push   %ecx
  284489:	ff 75 08             	pushl  0x8(%ebp)
  28448c:	ff 75 0c             	pushl  0xc(%ebp)
  28448f:	52                   	push   %edx
  284490:	50                   	push   %eax
  284491:	e8 2e cf ff ff       	call   2813c4 <putfonts8_asc>
  284496:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  284499:	8b 45 18             	mov    0x18(%ebp),%eax
  28449c:	83 e0 01             	and    $0x1,%eax
  28449f:	85 c0                	test   %eax,%eax
  2844a1:	0f 85 7e 04 00 00    	jne    284925 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+ecx*8,edi+16);
  2844a7:	8b 45 08             	mov    0x8(%ebp),%eax
  2844aa:	8d 50 10             	lea    0x10(%eax),%edx
  2844ad:	8b 45 20             	mov    0x20(%ebp),%eax
  2844b0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  2844b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  2844ba:	01 c8                	add    %ecx,%eax
  2844bc:	83 ec 0c             	sub    $0xc,%esp
  2844bf:	52                   	push   %edx
  2844c0:	50                   	push   %eax
  2844c1:	ff 75 08             	pushl  0x8(%ebp)
  2844c4:	ff 75 0c             	pushl  0xc(%ebp)
  2844c7:	ff 75 d4             	pushl  -0x2c(%ebp)
  2844ca:	e8 c7 e3 ff ff       	call   282896 <sheet_refresh>
  2844cf:	83 c4 20             	add    $0x20,%esp
  2844d2:	e9 4e 04 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 7)
  2844d7:	83 7d 1c 07          	cmpl   $0x7,0x1c(%ebp)
  2844db:	75 68                	jne    284545 <sys_api+0x277>
	{
		sht = (struct SHEET *)ebx;
  2844dd:	8b 45 18             	mov    0x18(%ebp),%eax
  2844e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		boxfill8(sht->buf,sht->bxsize,ebp,eax,ecx,esi,edi);
  2844e3:	8b 5d 24             	mov    0x24(%ebp),%ebx
  2844e6:	8b 45 10             	mov    0x10(%ebp),%eax
  2844e9:	0f b6 c8             	movzbl %al,%ecx
  2844ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2844ef:	8b 50 04             	mov    0x4(%eax),%edx
  2844f2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  2844f5:	8b 00                	mov    (%eax),%eax
  2844f7:	83 ec 04             	sub    $0x4,%esp
  2844fa:	ff 75 08             	pushl  0x8(%ebp)
  2844fd:	ff 75 0c             	pushl  0xc(%ebp)
  284500:	ff 75 20             	pushl  0x20(%ebp)
  284503:	53                   	push   %ebx
  284504:	51                   	push   %ecx
  284505:	52                   	push   %edx
  284506:	50                   	push   %eax
  284507:	e8 55 c7 ff ff       	call   280c61 <boxfill8>
  28450c:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  28450f:	8b 45 18             	mov    0x18(%ebp),%eax
  284512:	83 e0 01             	and    $0x1,%eax
  284515:	85 c0                	test   %eax,%eax
  284517:	0f 85 08 04 00 00    	jne    284925 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  28451d:	8b 45 08             	mov    0x8(%ebp),%eax
  284520:	8d 48 01             	lea    0x1(%eax),%ecx
  284523:	8b 45 0c             	mov    0xc(%ebp),%eax
  284526:	8d 50 01             	lea    0x1(%eax),%edx
  284529:	8b 45 24             	mov    0x24(%ebp),%eax
  28452c:	83 ec 0c             	sub    $0xc,%esp
  28452f:	51                   	push   %ecx
  284530:	52                   	push   %edx
  284531:	ff 75 20             	pushl  0x20(%ebp)
  284534:	50                   	push   %eax
  284535:	ff 75 d4             	pushl  -0x2c(%ebp)
  284538:	e8 59 e3 ff ff       	call   282896 <sheet_refresh>
  28453d:	83 c4 20             	add    $0x20,%esp
  284540:	e9 e0 03 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 8)
  284545:	83 7d 1c 08          	cmpl   $0x8,0x1c(%ebp)
  284549:	75 3b                	jne    284586 <sys_api+0x2b8>
	{
		memman_init((struct MEMMAN *)(ebx + ds_base));
  28454b:	8b 55 18             	mov    0x18(%ebp),%edx
  28454e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  284551:	01 d0                	add    %edx,%eax
  284553:	83 ec 0c             	sub    $0xc,%esp
  284556:	50                   	push   %eax
  284557:	e8 ef d9 ff ff       	call   281f4b <memman_init>
  28455c:	83 c4 10             	add    $0x10,%esp
		ecx &= 0xfffffff0;
  28455f:	83 65 20 f0          	andl   $0xfffffff0,0x20(%ebp)
		memman_free((struct MEMMAN *)(ebx + ds_base),eax,ecx);
  284563:	8b 45 20             	mov    0x20(%ebp),%eax
  284566:	8b 55 24             	mov    0x24(%ebp),%edx
  284569:	89 d3                	mov    %edx,%ebx
  28456b:	8b 4d 18             	mov    0x18(%ebp),%ecx
  28456e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  284571:	01 ca                	add    %ecx,%edx
  284573:	83 ec 04             	sub    $0x4,%esp
  284576:	50                   	push   %eax
  284577:	53                   	push   %ebx
  284578:	52                   	push   %edx
  284579:	e8 1c db ff ff       	call   28209a <memman_free>
  28457e:	83 c4 10             	add    $0x10,%esp
  284581:	e9 9f 03 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 9)
  284586:	83 7d 1c 09          	cmpl   $0x9,0x1c(%ebp)
  28458a:	75 31                	jne    2845bd <sys_api+0x2ef>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  28458c:	8b 45 20             	mov    0x20(%ebp),%eax
  28458f:	83 c0 0f             	add    $0xf,%eax
  284592:	83 e0 f0             	and    $0xfffffff0,%eax
  284595:	89 45 20             	mov    %eax,0x20(%ebp)
		reg[7] = memman_alloc((struct MEMMAN *) (ebx + ds_base), ecx);
  284598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28459b:	8d 58 1c             	lea    0x1c(%eax),%ebx
  28459e:	8b 45 20             	mov    0x20(%ebp),%eax
  2845a1:	8b 4d 18             	mov    0x18(%ebp),%ecx
  2845a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2845a7:	01 ca                	add    %ecx,%edx
  2845a9:	83 ec 08             	sub    $0x8,%esp
  2845ac:	50                   	push   %eax
  2845ad:	52                   	push   %edx
  2845ae:	e8 fe d9 ff ff       	call   281fb1 <memman_alloc>
  2845b3:	83 c4 10             	add    $0x10,%esp
  2845b6:	89 03                	mov    %eax,(%ebx)
  2845b8:	e9 68 03 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 10)
  2845bd:	83 7d 1c 0a          	cmpl   $0xa,0x1c(%ebp)
  2845c1:	75 2f                	jne    2845f2 <sys_api+0x324>
	{
		ecx = (ecx + 0x0f) & 0xfffffff0;
  2845c3:	8b 45 20             	mov    0x20(%ebp),%eax
  2845c6:	83 c0 0f             	add    $0xf,%eax
  2845c9:	83 e0 f0             	and    $0xfffffff0,%eax
  2845cc:	89 45 20             	mov    %eax,0x20(%ebp)
		memman_free((struct MEMMAN *)(edx + ds_base),eax,ecx);
  2845cf:	8b 45 20             	mov    0x20(%ebp),%eax
  2845d2:	8b 55 24             	mov    0x24(%ebp),%edx
  2845d5:	89 d3                	mov    %edx,%ebx
  2845d7:	8b 4d 1c             	mov    0x1c(%ebp),%ecx
  2845da:	8b 55 ec             	mov    -0x14(%ebp),%edx
  2845dd:	01 ca                	add    %ecx,%edx
  2845df:	83 ec 04             	sub    $0x4,%esp
  2845e2:	50                   	push   %eax
  2845e3:	53                   	push   %ebx
  2845e4:	52                   	push   %edx
  2845e5:	e8 b0 da ff ff       	call   28209a <memman_free>
  2845ea:	83 c4 10             	add    $0x10,%esp
  2845ed:	e9 33 03 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 11)
  2845f2:	83 7d 1c 0b          	cmpl   $0xb,0x1c(%ebp)
  2845f6:	75 58                	jne    284650 <sys_api+0x382>
	{
		sht = (struct SHEET *)ebx;
  2845f8:	8b 45 18             	mov    0x18(%ebp),%eax
  2845fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sht->buf[sht->bxsize * edi + esi] = eax;
  2845fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284601:	8b 10                	mov    (%eax),%edx
  284603:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  284606:	8b 40 04             	mov    0x4(%eax),%eax
  284609:	0f af 45 08          	imul   0x8(%ebp),%eax
  28460d:	89 c1                	mov    %eax,%ecx
  28460f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284612:	01 c8                	add    %ecx,%eax
  284614:	01 d0                	add    %edx,%eax
  284616:	8b 55 24             	mov    0x24(%ebp),%edx
  284619:	88 10                	mov    %dl,(%eax)
		if(!(ebx&1))
  28461b:	8b 45 18             	mov    0x18(%ebp),%eax
  28461e:	83 e0 01             	and    $0x1,%eax
  284621:	85 c0                	test   %eax,%eax
  284623:	0f 85 fc 02 00 00    	jne    284925 <sys_api+0x657>
			sheet_refresh(sht,esi,edi,esi+1,edi+1);
  284629:	8b 45 08             	mov    0x8(%ebp),%eax
  28462c:	8d 50 01             	lea    0x1(%eax),%edx
  28462f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284632:	83 c0 01             	add    $0x1,%eax
  284635:	83 ec 0c             	sub    $0xc,%esp
  284638:	52                   	push   %edx
  284639:	50                   	push   %eax
  28463a:	ff 75 08             	pushl  0x8(%ebp)
  28463d:	ff 75 0c             	pushl  0xc(%ebp)
  284640:	ff 75 d4             	pushl  -0x2c(%ebp)
  284643:	e8 4e e2 ff ff       	call   282896 <sheet_refresh>
  284648:	83 c4 20             	add    $0x20,%esp
  28464b:	e9 d5 02 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 12)
  284650:	83 7d 1c 0c          	cmpl   $0xc,0x1c(%ebp)
  284654:	75 26                	jne    28467c <sys_api+0x3ae>
	{
		sht = (struct SHEET *)ebx;
  284656:	8b 45 18             	mov    0x18(%ebp),%eax
  284659:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		sheet_refresh(sht,eax,ecx,esi,edi);
  28465c:	8b 45 24             	mov    0x24(%ebp),%eax
  28465f:	83 ec 0c             	sub    $0xc,%esp
  284662:	ff 75 08             	pushl  0x8(%ebp)
  284665:	ff 75 0c             	pushl  0xc(%ebp)
  284668:	ff 75 20             	pushl  0x20(%ebp)
  28466b:	50                   	push   %eax
  28466c:	ff 75 d4             	pushl  -0x2c(%ebp)
  28466f:	e8 22 e2 ff ff       	call   282896 <sheet_refresh>
  284674:	83 c4 20             	add    $0x20,%esp
  284677:	e9 a9 02 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 13)
  28467c:	83 7d 1c 0d          	cmpl   $0xd,0x1c(%ebp)
  284680:	75 5d                	jne    2846df <sys_api+0x411>
	{
		sht = (struct SHEET *)(ebx & 0xfffffffe);
  284682:	8b 45 18             	mov    0x18(%ebp),%eax
  284685:	83 e0 fe             	and    $0xfffffffe,%eax
  284688:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		drawline8_sht(sht,eax,ecx,esi,edi,ebp);
  28468b:	8b 45 24             	mov    0x24(%ebp),%eax
  28468e:	83 ec 08             	sub    $0x8,%esp
  284691:	ff 75 10             	pushl  0x10(%ebp)
  284694:	ff 75 08             	pushl  0x8(%ebp)
  284697:	ff 75 0c             	pushl  0xc(%ebp)
  28469a:	ff 75 20             	pushl  0x20(%ebp)
  28469d:	50                   	push   %eax
  28469e:	ff 75 d4             	pushl  -0x2c(%ebp)
  2846a1:	e8 a8 cb ff ff       	call   28124e <drawline8_sht>
  2846a6:	83 c4 20             	add    $0x20,%esp
		if(!(ebx&1))
  2846a9:	8b 45 18             	mov    0x18(%ebp),%eax
  2846ac:	83 e0 01             	and    $0x1,%eax
  2846af:	85 c0                	test   %eax,%eax
  2846b1:	0f 85 6e 02 00 00    	jne    284925 <sys_api+0x657>
			sheet_refresh(sht,eax,ecx,esi+1,edi+1);
  2846b7:	8b 45 08             	mov    0x8(%ebp),%eax
  2846ba:	8d 48 01             	lea    0x1(%eax),%ecx
  2846bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  2846c0:	8d 50 01             	lea    0x1(%eax),%edx
  2846c3:	8b 45 24             	mov    0x24(%ebp),%eax
  2846c6:	83 ec 0c             	sub    $0xc,%esp
  2846c9:	51                   	push   %ecx
  2846ca:	52                   	push   %edx
  2846cb:	ff 75 20             	pushl  0x20(%ebp)
  2846ce:	50                   	push   %eax
  2846cf:	ff 75 d4             	pushl  -0x2c(%ebp)
  2846d2:	e8 bf e1 ff ff       	call   282896 <sheet_refresh>
  2846d7:	83 c4 20             	add    $0x20,%esp
  2846da:	e9 46 02 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 14)
  2846df:	83 7d 1c 0e          	cmpl   $0xe,0x1c(%ebp)
  2846e3:	75 14                	jne    2846f9 <sys_api+0x42b>
	{
		sheet_free((struct SHEET *)ebx);
  2846e5:	8b 45 18             	mov    0x18(%ebp),%eax
  2846e8:	83 ec 0c             	sub    $0xc,%esp
  2846eb:	50                   	push   %eax
  2846ec:	e8 21 e3 ff ff       	call   282a12 <sheet_free>
  2846f1:	83 c4 10             	add    $0x10,%esp
  2846f4:	e9 2c 02 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 15)
  2846f9:	83 7d 1c 0f          	cmpl   $0xf,0x1c(%ebp)
  2846fd:	0f 85 f3 00 00 00    	jne    2847f6 <sys_api+0x528>
	{
		for(;;)
		{
			io_cli();
  284703:	e8 6a c3 ff ff       	call   280a72 <io_cli>
			if(fifo32_status(&task->fifo) == 0)
  284708:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28470b:	83 c0 10             	add    $0x10,%eax
  28470e:	83 ec 0c             	sub    $0xc,%esp
  284711:	50                   	push   %eax
  284712:	e8 ff d4 ff ff       	call   281c16 <fifo32_status>
  284717:	83 c4 10             	add    $0x10,%esp
  28471a:	85 c0                	test   %eax,%eax
  28471c:	75 32                	jne    284750 <sys_api+0x482>
			{
				if(eax != 0)
  28471e:	8b 45 24             	mov    0x24(%ebp),%eax
  284721:	85 c0                	test   %eax,%eax
  284723:	74 10                	je     284735 <sys_api+0x467>
					task_sleep(task);
  284725:	83 ec 0c             	sub    $0xc,%esp
  284728:	ff 75 f4             	pushl  -0xc(%ebp)
  28472b:	e8 91 ea ff ff       	call   2831c1 <task_sleep>
  284730:	83 c4 10             	add    $0x10,%esp
  284733:	eb 1b                	jmp    284750 <sys_api+0x482>
				else
				{
					io_sti();
  284735:	e8 3a c3 ff ff       	call   280a74 <io_sti>
					reg[7] = -1;
  28473a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28473d:	83 c0 1c             	add    $0x1c,%eax
  284740:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
					return 0;
  284746:	b8 00 00 00 00       	mov    $0x0,%eax
  28474b:	e9 da 01 00 00       	jmp    28492a <sys_api+0x65c>
				}
			}
			int i = fifo32_get(&task->fifo);
  284750:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284753:	83 c0 10             	add    $0x10,%eax
  284756:	83 ec 0c             	sub    $0xc,%esp
  284759:	50                   	push   %eax
  28475a:	e8 7c d4 ff ff       	call   281bdb <fifo32_get>
  28475f:	83 c4 10             	add    $0x10,%esp
  284762:	89 45 e0             	mov    %eax,-0x20(%ebp)
			io_sti();
  284765:	e8 0a c3 ff ff       	call   280a74 <io_sti>
			if(i <= 1)
  28476a:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
  28476e:	7f 34                	jg     2847a4 <sys_api+0x4d6>
			{
				timer_init(cons->timer,&task->fifo,1);
  284770:	8b 45 f4             	mov    -0xc(%ebp),%eax
  284773:	8d 50 10             	lea    0x10(%eax),%edx
  284776:	8b 45 f0             	mov    -0x10(%ebp),%eax
  284779:	8b 40 10             	mov    0x10(%eax),%eax
  28477c:	83 ec 04             	sub    $0x4,%esp
  28477f:	6a 01                	push   $0x1
  284781:	52                   	push   %edx
  284782:	50                   	push   %eax
  284783:	e8 7c e3 ff ff       	call   282b04 <timer_init>
  284788:	83 c4 10             	add    $0x10,%esp
				timer_settime(cons->timer,50);
  28478b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  28478e:	8b 40 10             	mov    0x10(%eax),%eax
  284791:	83 ec 08             	sub    $0x8,%esp
  284794:	6a 32                	push   $0x32
  284796:	50                   	push   %eax
  284797:	e8 7c e3 ff ff       	call   282b18 <timer_settime>
  28479c:	83 c4 10             	add    $0x10,%esp
  28479f:	e9 5f ff ff ff       	jmp    284703 <sys_api+0x435>
			}
			else if(i == 2)
  2847a4:	83 7d e0 02          	cmpl   $0x2,-0x20(%ebp)
  2847a8:	75 0f                	jne    2847b9 <sys_api+0x4eb>
			{
				cons->cur_c = COL8_FFFFFF;
  2847aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2847ad:	c7 40 0c 07 00 00 00 	movl   $0x7,0xc(%eax)
  2847b4:	e9 4a ff ff ff       	jmp    284703 <sys_api+0x435>
			}
			else if(i == 3)
  2847b9:	83 7d e0 03          	cmpl   $0x3,-0x20(%ebp)
  2847bd:	75 0f                	jne    2847ce <sys_api+0x500>
			{
				cons->cur_c = -1;
  2847bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  2847c2:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
  2847c9:	e9 35 ff ff ff       	jmp    284703 <sys_api+0x435>
			}
			else if(i>=256)
  2847ce:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%ebp)
  2847d5:	0f 8e 28 ff ff ff    	jle    284703 <sys_api+0x435>
			{
				reg[7] = i-256;
  2847db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2847de:	83 c0 1c             	add    $0x1c,%eax
  2847e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
  2847e4:	81 ea 00 01 00 00    	sub    $0x100,%edx
  2847ea:	89 10                	mov    %edx,(%eax)
				return 0;
  2847ec:	b8 00 00 00 00       	mov    $0x0,%eax
  2847f1:	e9 34 01 00 00       	jmp    28492a <sys_api+0x65c>
			}
		}
	}
	else if(edx == 16)
  2847f6:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  2847fa:	75 1e                	jne    28481a <sys_api+0x54c>
	{
		reg[7] = (int)timer_alloc();
  2847fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2847ff:	8d 58 1c             	lea    0x1c(%eax),%ebx
  284802:	e8 2f e2 ff ff       	call   282a36 <timer_alloc>
  284807:	89 03                	mov    %eax,(%ebx)
		((struct TIMER *)reg[7])->flags2 = 1;
  284809:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  28480c:	83 c0 1c             	add    $0x1c,%eax
  28480f:	8b 00                	mov    (%eax),%eax
  284811:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  284815:	e9 0b 01 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 17)
  28481a:	83 7d 1c 11          	cmpl   $0x11,0x1c(%ebp)
  28481e:	75 25                	jne    284845 <sys_api+0x577>
	{
		timer_init((struct TIMER *)ebx,&task->fifo,eax+256);
  284820:	8b 45 24             	mov    0x24(%ebp),%eax
  284823:	8d 88 00 01 00 00    	lea    0x100(%eax),%ecx
  284829:	8b 45 f4             	mov    -0xc(%ebp),%eax
  28482c:	8d 50 10             	lea    0x10(%eax),%edx
  28482f:	8b 45 18             	mov    0x18(%ebp),%eax
  284832:	83 ec 04             	sub    $0x4,%esp
  284835:	51                   	push   %ecx
  284836:	52                   	push   %edx
  284837:	50                   	push   %eax
  284838:	e8 c7 e2 ff ff       	call   282b04 <timer_init>
  28483d:	83 c4 10             	add    $0x10,%esp
  284840:	e9 e0 00 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 18)
  284845:	83 7d 1c 12          	cmpl   $0x12,0x1c(%ebp)
  284849:	75 1a                	jne    284865 <sys_api+0x597>
	{
		timer_settime((struct TIMER *)ebx,eax);
  28484b:	8b 45 24             	mov    0x24(%ebp),%eax
  28484e:	89 c2                	mov    %eax,%edx
  284850:	8b 45 18             	mov    0x18(%ebp),%eax
  284853:	83 ec 08             	sub    $0x8,%esp
  284856:	52                   	push   %edx
  284857:	50                   	push   %eax
  284858:	e8 bb e2 ff ff       	call   282b18 <timer_settime>
  28485d:	83 c4 10             	add    $0x10,%esp
  284860:	e9 c0 00 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 19)
  284865:	83 7d 1c 13          	cmpl   $0x13,0x1c(%ebp)
  284869:	75 14                	jne    28487f <sys_api+0x5b1>
	{
		timer_free((struct TIMER *)ebx);
  28486b:	8b 45 18             	mov    0x18(%ebp),%eax
  28486e:	83 ec 0c             	sub    $0xc,%esp
  284871:	50                   	push   %eax
  284872:	e8 81 e2 ff ff       	call   282af8 <timer_free>
  284877:	83 c4 10             	add    $0x10,%esp
  28487a:	e9 a6 00 00 00       	jmp    284925 <sys_api+0x657>
	}
	else if(edx == 20)
  28487f:	83 7d 1c 14          	cmpl   $0x14,0x1c(%ebp)
  284883:	0f 85 9c 00 00 00    	jne    284925 <sys_api+0x657>
	{
		if(eax == 0)
  284889:	8b 45 24             	mov    0x24(%ebp),%eax
  28488c:	85 c0                	test   %eax,%eax
  28488e:	75 26                	jne    2848b6 <sys_api+0x5e8>
		{
			int i = io_in8(0x61);
  284890:	83 ec 0c             	sub    $0xc,%esp
  284893:	6a 61                	push   $0x61
  284895:	e8 ea c1 ff ff       	call   280a84 <io_in8>
  28489a:	83 c4 10             	add    $0x10,%esp
  28489d:	89 45 dc             	mov    %eax,-0x24(%ebp)
			io_out8(0x61,i&0x0d);
  2848a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  2848a3:	83 e0 0d             	and    $0xd,%eax
  2848a6:	83 ec 08             	sub    $0x8,%esp
  2848a9:	50                   	push   %eax
  2848aa:	6a 61                	push   $0x61
  2848ac:	e8 f5 c1 ff ff       	call   280aa6 <io_out8>
  2848b1:	83 c4 10             	add    $0x10,%esp
  2848b4:	eb 6f                	jmp    284925 <sys_api+0x657>
		}
		else
		{
			int i = 1193180000/eax;
  2848b6:	8b 5d 24             	mov    0x24(%ebp),%ebx
  2848b9:	b8 60 7b 1e 47       	mov    $0x471e7b60,%eax
  2848be:	99                   	cltd   
  2848bf:	f7 fb                	idiv   %ebx
  2848c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x43,0xb6);
  2848c4:	83 ec 08             	sub    $0x8,%esp
  2848c7:	68 b6 00 00 00       	push   $0xb6
  2848cc:	6a 43                	push   $0x43
  2848ce:	e8 d3 c1 ff ff       	call   280aa6 <io_out8>
  2848d3:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i&0xff);
  2848d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2848d9:	0f b6 c0             	movzbl %al,%eax
  2848dc:	83 ec 08             	sub    $0x8,%esp
  2848df:	50                   	push   %eax
  2848e0:	6a 42                	push   $0x42
  2848e2:	e8 bf c1 ff ff       	call   280aa6 <io_out8>
  2848e7:	83 c4 10             	add    $0x10,%esp
			io_out8(0x42,i>>8);
  2848ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
  2848ed:	c1 f8 08             	sar    $0x8,%eax
  2848f0:	83 ec 08             	sub    $0x8,%esp
  2848f3:	50                   	push   %eax
  2848f4:	6a 42                	push   $0x42
  2848f6:	e8 ab c1 ff ff       	call   280aa6 <io_out8>
  2848fb:	83 c4 10             	add    $0x10,%esp
			i=io_in8(0x61);
  2848fe:	83 ec 0c             	sub    $0xc,%esp
  284901:	6a 61                	push   $0x61
  284903:	e8 7c c1 ff ff       	call   280a84 <io_in8>
  284908:	83 c4 10             	add    $0x10,%esp
  28490b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			io_out8(0x61,(i|0x03)&0x0f);
  28490e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  284911:	83 e0 0c             	and    $0xc,%eax
  284914:	83 c8 03             	or     $0x3,%eax
  284917:	83 ec 08             	sub    $0x8,%esp
  28491a:	50                   	push   %eax
  28491b:	6a 61                	push   $0x61
  28491d:	e8 84 c1 ff ff       	call   280aa6 <io_out8>
  284922:	83 c4 10             	add    $0x10,%esp
		}
	}
	return 0;
  284925:	b8 00 00 00 00       	mov    $0x0,%eax
}
  28492a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  28492d:	c9                   	leave  
  28492e:	c3                   	ret    
  28492f:	90                   	nop

00284930 <api_putchar>:
  284930:	ba 01 00 00 00       	mov    $0x1,%edx
  284935:	8a 44 24 04          	mov    0x4(%esp),%al
  284939:	cd 40                	int    $0x40
  28493b:	c3                   	ret    

0028493c <api_putstr>:
  28493c:	ba 02 00 00 00       	mov    $0x2,%edx
  284941:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  284945:	cd 40                	int    $0x40
  284947:	c3                   	ret    

00284948 <api_end>:
  284948:	ba 04 00 00 00       	mov    $0x4,%edx
  28494d:	cd 40                	int    $0x40

0028494f <api_test>:
  28494f:	05 80 00 00 00       	add    $0x80,%eax
  284954:	c3                   	ret    

00284955 <api_openwin>:
  284955:	57                   	push   %edi
  284956:	56                   	push   %esi
  284957:	53                   	push   %ebx
  284958:	ba 05 00 00 00       	mov    $0x5,%edx
  28495d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284961:	8b 74 24 14          	mov    0x14(%esp),%esi
  284965:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284969:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  28496d:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  284971:	cd 40                	int    $0x40
  284973:	5b                   	pop    %ebx
  284974:	5e                   	pop    %esi
  284975:	5f                   	pop    %edi
  284976:	c3                   	ret    

00284977 <api_putstrwin>:
  284977:	57                   	push   %edi
  284978:	56                   	push   %esi
  284979:	55                   	push   %ebp
  28497a:	53                   	push   %ebx
  28497b:	ba 06 00 00 00       	mov    $0x6,%edx
  284980:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284984:	8b 74 24 18          	mov    0x18(%esp),%esi
  284988:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
  28498c:	8b 44 24 20          	mov    0x20(%esp),%eax
  284990:	8b 4c 24 24          	mov    0x24(%esp),%ecx
  284994:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284998:	cd 40                	int    $0x40
  28499a:	5b                   	pop    %ebx
  28499b:	5d                   	pop    %ebp
  28499c:	5e                   	pop    %esi
  28499d:	5f                   	pop    %edi
  28499e:	c3                   	ret    

0028499f <api_boxfilwin>:
  28499f:	57                   	push   %edi
  2849a0:	56                   	push   %esi
  2849a1:	55                   	push   %ebp
  2849a2:	53                   	push   %ebx
  2849a3:	ba 07 00 00 00       	mov    $0x7,%edx
  2849a8:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  2849ac:	8b 44 24 18          	mov    0x18(%esp),%eax
  2849b0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  2849b4:	8b 74 24 20          	mov    0x20(%esp),%esi
  2849b8:	8b 7c 24 24          	mov    0x24(%esp),%edi
  2849bc:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  2849c0:	cd 40                	int    $0x40
  2849c2:	5b                   	pop    %ebx
  2849c3:	5d                   	pop    %ebp
  2849c4:	5e                   	pop    %esi
  2849c5:	5f                   	pop    %edi
  2849c6:	c3                   	ret    

002849c7 <api_initmalloc>:
  2849c7:	53                   	push   %ebx
  2849c8:	ba 08 00 00 00       	mov    $0x8,%edx
  2849cd:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  2849d4:	89 d8                	mov    %ebx,%eax
  2849d6:	05 00 80 00 00       	add    $0x8000,%eax
  2849db:	2e 8b 0d 00 00 00 00 	mov    %cs:0x0,%ecx
  2849e2:	29 c1                	sub    %eax,%ecx
  2849e4:	cd 40                	int    $0x40
  2849e6:	5b                   	pop    %ebx
  2849e7:	c3                   	ret    

002849e8 <api_malloc>:
  2849e8:	53                   	push   %ebx
  2849e9:	ba 09 00 00 00       	mov    $0x9,%edx
  2849ee:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  2849f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  2849f9:	cd 40                	int    $0x40
  2849fb:	5b                   	pop    %ebx
  2849fc:	c3                   	ret    

002849fd <api_free>:
  2849fd:	53                   	push   %ebx
  2849fe:	ba 0a 00 00 00       	mov    $0xa,%edx
  284a03:	2e 8b 1d 20 00 00 00 	mov    %cs:0x20,%ebx
  284a0a:	8b 44 24 08          	mov    0x8(%esp),%eax
  284a0e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  284a12:	cd 40                	int    $0x40
  284a14:	5b                   	pop    %ebx
  284a15:	c3                   	ret    

00284a16 <api_pointwin>:
  284a16:	57                   	push   %edi
  284a17:	56                   	push   %esi
  284a18:	53                   	push   %ebx
  284a19:	ba 0b 00 00 00       	mov    $0xb,%edx
  284a1e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284a22:	8b 74 24 14          	mov    0x14(%esp),%esi
  284a26:	8b 7c 24 18          	mov    0x18(%esp),%edi
  284a2a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  284a2e:	cd 40                	int    $0x40
  284a30:	5b                   	pop    %ebx
  284a31:	5e                   	pop    %esi
  284a32:	5f                   	pop    %edi
  284a33:	c3                   	ret    

00284a34 <api_refreshwin>:
  284a34:	57                   	push   %edi
  284a35:	56                   	push   %esi
  284a36:	53                   	push   %ebx
  284a37:	ba 0c 00 00 00       	mov    $0xc,%edx
  284a3c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  284a40:	8b 44 24 14          	mov    0x14(%esp),%eax
  284a44:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  284a48:	8b 74 24 1c          	mov    0x1c(%esp),%esi
  284a4c:	8b 7c 24 20          	mov    0x20(%esp),%edi
  284a50:	cd 40                	int    $0x40
  284a52:	5b                   	pop    %ebx
  284a53:	5e                   	pop    %esi
  284a54:	5f                   	pop    %edi
  284a55:	c3                   	ret    

00284a56 <api_linewin>:
  284a56:	57                   	push   %edi
  284a57:	56                   	push   %esi
  284a58:	55                   	push   %ebp
  284a59:	53                   	push   %ebx
  284a5a:	ba 0d 00 00 00       	mov    $0xd,%edx
  284a5f:	8b 5c 24 14          	mov    0x14(%esp),%ebx
  284a63:	8b 44 24 18          	mov    0x18(%esp),%eax
  284a67:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  284a6b:	8b 74 24 20          	mov    0x20(%esp),%esi
  284a6f:	8b 7c 24 24          	mov    0x24(%esp),%edi
  284a73:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  284a77:	cd 40                	int    $0x40
  284a79:	5b                   	pop    %ebx
  284a7a:	5d                   	pop    %ebp
  284a7b:	5e                   	pop    %esi
  284a7c:	5f                   	pop    %edi
  284a7d:	c3                   	ret    

00284a7e <api_closewin>:
  284a7e:	53                   	push   %ebx
  284a7f:	ba 0e 00 00 00       	mov    $0xe,%edx
  284a84:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284a88:	cd 40                	int    $0x40
  284a8a:	5b                   	pop    %ebx
  284a8b:	c3                   	ret    

00284a8c <api_getkey>:
  284a8c:	ba 0f 00 00 00       	mov    $0xf,%edx
  284a91:	8b 44 24 04          	mov    0x4(%esp),%eax
  284a95:	cd 40                	int    $0x40
  284a97:	c3                   	ret    

00284a98 <api_alloctimer>:
  284a98:	ba 10 00 00 00       	mov    $0x10,%edx
  284a9d:	cd 40                	int    $0x40
  284a9f:	c3                   	ret    

00284aa0 <api_inittimer>:
  284aa0:	53                   	push   %ebx
  284aa1:	ba 11 00 00 00       	mov    $0x11,%edx
  284aa6:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284aaa:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284aae:	cd 40                	int    $0x40
  284ab0:	5b                   	pop    %ebx
  284ab1:	c3                   	ret    

00284ab2 <api_settimer>:
  284ab2:	53                   	push   %ebx
  284ab3:	ba 12 00 00 00       	mov    $0x12,%edx
  284ab8:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284abc:	8b 44 24 0c          	mov    0xc(%esp),%eax
  284ac0:	cd 40                	int    $0x40
  284ac2:	5b                   	pop    %ebx
  284ac3:	c3                   	ret    

00284ac4 <api_freetimer>:
  284ac4:	53                   	push   %ebx
  284ac5:	ba 13 00 00 00       	mov    $0x13,%edx
  284aca:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  284ace:	cd 40                	int    $0x40
  284ad0:	5b                   	pop    %ebx
  284ad1:	c3                   	ret    

00284ad2 <api_beep>:
  284ad2:	ba 14 00 00 00       	mov    $0x14,%edx
  284ad7:	8b 44 24 04          	mov    0x4(%esp),%eax
  284adb:	cd 40                	int    $0x40
  284add:	c3                   	ret    

00284ade <change_wtitle8>:
	}
	return;
}

void change_wtitle8(struct SHEET *sht,char act)
{
  284ade:	55                   	push   %ebp
  284adf:	89 e5                	mov    %esp,%ebp
  284ae1:	57                   	push   %edi
  284ae2:	56                   	push   %esi
  284ae3:	53                   	push   %ebx
  284ae4:	83 ec 2c             	sub    $0x2c,%esp
  284ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
	int x,y,xsize = sht->bxsize;
  284aea:	8b 7d 08             	mov    0x8(%ebp),%edi
  284aed:	8b 7f 04             	mov    0x4(%edi),%edi
  284af0:	89 fe                	mov    %edi,%esi
  284af2:	89 7d cc             	mov    %edi,-0x34(%ebp)
	else
	{
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
  284af5:	3c 01                	cmp    $0x1,%al
  284af7:	19 ff                	sbb    %edi,%edi
  284af9:	89 fb                	mov    %edi,%ebx
  284afb:	83 e3 fd             	and    $0xfffffffd,%ebx
  284afe:	83 c3 0f             	add    $0xf,%ebx
  284b01:	88 5d e6             	mov    %bl,-0x1a(%ebp)
  284b04:	89 fb                	mov    %edi,%ebx
  284b06:	83 c3 08             	add    $0x8,%ebx
  284b09:	88 5d e7             	mov    %bl,-0x19(%ebp)
  284b0c:	83 e7 03             	and    $0x3,%edi
  284b0f:	83 c7 0c             	add    $0xc,%edi
  284b12:	3c 01                	cmp    $0x1,%al
  284b14:	19 c0                	sbb    %eax,%eax
  284b16:	f7 d0                	not    %eax
  284b18:	83 c0 08             	add    $0x8,%eax
  284b1b:	88 45 e5             	mov    %al,-0x1b(%ebp)
  284b1e:	89 f0                	mov    %esi,%eax
  284b20:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  284b23:	8d 0c 76             	lea    (%esi,%esi,2),%ecx
  284b26:	8b 5d 08             	mov    0x8(%ebp),%ebx
  284b29:	03 0b                	add    (%ebx),%ecx
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284b2b:	c7 45 d8 12 00 00 00 	movl   $0x12,-0x28(%ebp)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284b32:	8d 5e fc             	lea    -0x4(%esi),%ebx
  284b35:	89 5d d0             	mov    %ebx,-0x30(%ebp)
  284b38:	83 e8 03             	sub    $0x3,%eax
  284b3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
  284b3e:	8d 46 ea             	lea    -0x16(%esi),%eax
  284b41:	89 45 dc             	mov    %eax,-0x24(%ebp)
  284b44:	eb 32                	jmp    284b78 <change_wtitle8+0x9a>
  284b46:	89 ce                	mov    %ecx,%esi
  284b48:	89 d3                	mov    %edx,%ebx
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
  284b4a:	0f b6 04 11          	movzbl (%ecx,%edx,1),%eax
			if(c == tc_old && x<=xsize -22)
  284b4e:	38 45 e7             	cmp    %al,-0x19(%ebp)
  284b51:	75 05                	jne    284b58 <change_wtitle8+0x7a>
  284b53:	39 55 dc             	cmp    %edx,-0x24(%ebp)
  284b56:	7d 08                	jge    284b60 <change_wtitle8+0x82>
			{
				c = tc_new;
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
  284b58:	38 45 e6             	cmp    %al,-0x1a(%ebp)
  284b5b:	0f 44 c7             	cmove  %edi,%eax
  284b5e:	eb 04                	jmp    284b64 <change_wtitle8+0x86>
		for(x=3;x<=xsize-4;x++)
		{
			c = buf[y*xsize + x];
			if(c == tc_old && x<=xsize -22)
			{
				c = tc_new;
  284b60:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
			}
			else if(c == tbc_old)
			{
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
  284b64:	88 04 1e             	mov    %al,(%esi,%ebx,1)
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
	{
		for(x=3;x<=xsize-4;x++)
  284b67:	83 c2 01             	add    $0x1,%edx
  284b6a:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  284b6d:	75 d7                	jne    284b46 <change_wtitle8+0x68>
  284b6f:	03 4d d4             	add    -0x2c(%ebp),%ecx
		tc_new = COL8_C6C6C6;
		tbc_new = COL8_848484;
		tc_old = COL8_FFFFFF;
		tbc_old = COL8_000084;
	}
	for(y=3;y<=20;y++)
  284b72:	83 6d d8 01          	subl   $0x1,-0x28(%ebp)
  284b76:	74 0d                	je     284b85 <change_wtitle8+0xa7>
	{
		for(x=3;x<=xsize-4;x++)
  284b78:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
  284b7c:	7e f1                	jle    284b6f <change_wtitle8+0x91>
  284b7e:	ba 03 00 00 00       	mov    $0x3,%edx
  284b83:	eb c1                	jmp    284b46 <change_wtitle8+0x68>
				c = tbc_new;
			}
			buf[y*xsize+x] = c;
		}
	}
	sheet_refresh(sht,3,3,xsize,21);
  284b85:	83 ec 0c             	sub    $0xc,%esp
  284b88:	6a 15                	push   $0x15
  284b8a:	ff 75 cc             	pushl  -0x34(%ebp)
  284b8d:	6a 03                	push   $0x3
  284b8f:	6a 03                	push   $0x3
  284b91:	ff 75 08             	pushl  0x8(%ebp)
  284b94:	e8 fd dc ff ff       	call   282896 <sheet_refresh>
	return;
  284b99:	83 c4 20             	add    $0x20,%esp
}
  284b9c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  284b9f:	5b                   	pop    %ebx
  284ba0:	5e                   	pop    %esi
  284ba1:	5f                   	pop    %edi
  284ba2:	5d                   	pop    %ebp
  284ba3:	c3                   	ret    

00284ba4 <keywin_off>:
#include "common.h"
#include "graphics.h"
#include "memory.h"
#include "task_console.h"
void keywin_off(struct SHEET *key_win)
{
  284ba4:	55                   	push   %ebp
  284ba5:	89 e5                	mov    %esp,%ebp
  284ba7:	53                   	push   %ebx
  284ba8:	83 ec 0c             	sub    $0xc,%esp
  284bab:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,0);
  284bae:	6a 00                	push   $0x0
  284bb0:	53                   	push   %ebx
  284bb1:	e8 28 ff ff ff       	call   284ade <change_wtitle8>
	if((key_win->flags & 0x20))
  284bb6:	83 c4 10             	add    $0x10,%esp
  284bb9:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  284bbd:	74 14                	je     284bd3 <keywin_off+0x2f>
	{
		fifo32_put(&key_win->task->fifo,3);
  284bbf:	83 ec 08             	sub    $0x8,%esp
  284bc2:	6a 03                	push   $0x3
  284bc4:	8b 43 24             	mov    0x24(%ebx),%eax
  284bc7:	83 c0 10             	add    $0x10,%eax
  284bca:	50                   	push   %eax
  284bcb:	e8 99 cf ff ff       	call   281b69 <fifo32_put>
  284bd0:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284bd3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284bd6:	c9                   	leave  
  284bd7:	c3                   	ret    

00284bd8 <keywin_on>:

void keywin_on(struct SHEET *key_win)
{
  284bd8:	55                   	push   %ebp
  284bd9:	89 e5                	mov    %esp,%ebp
  284bdb:	53                   	push   %ebx
  284bdc:	83 ec 0c             	sub    $0xc,%esp
  284bdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
	change_wtitle8(key_win,1);
  284be2:	6a 01                	push   $0x1
  284be4:	53                   	push   %ebx
  284be5:	e8 f4 fe ff ff       	call   284ade <change_wtitle8>
	if((key_win->flags & 0x20))
  284bea:	83 c4 10             	add    $0x10,%esp
  284bed:	f6 43 1c 20          	testb  $0x20,0x1c(%ebx)
  284bf1:	74 14                	je     284c07 <keywin_on+0x2f>
	{
		fifo32_put(&key_win->task->fifo,2);
  284bf3:	83 ec 08             	sub    $0x8,%esp
  284bf6:	6a 02                	push   $0x2
  284bf8:	8b 43 24             	mov    0x24(%ebx),%eax
  284bfb:	83 c0 10             	add    $0x10,%eax
  284bfe:	50                   	push   %eax
  284bff:	e8 65 cf ff ff       	call   281b69 <fifo32_put>
  284c04:	83 c4 10             	add    $0x10,%esp
	}
	return;
}
  284c07:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  284c0a:	c9                   	leave  
  284c0b:	c3                   	ret    

00284c0c <test>:
#include "test.h"
int test(int screenx, int screeny)
{
  284c0c:	55                   	push   %ebp
  284c0d:	89 e5                	mov    %esp,%ebp
	return screenx*screeny;
  284c0f:	8b 45 0c             	mov    0xc(%ebp),%eax
  284c12:	0f af 45 08          	imul   0x8(%ebp),%eax
}
  284c16:	5d                   	pop    %ebp
  284c17:	c3                   	ret    
